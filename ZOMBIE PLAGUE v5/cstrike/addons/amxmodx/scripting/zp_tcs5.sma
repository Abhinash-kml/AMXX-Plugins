#include <zp5>

/** ==================================================
	[ IMPORTANTES ]
================================================== **/

#define MODELS_CHANGE_DELAY 			0.8
#define MAX_LEVELS						1000
#define MAX_EXP							2100000000

#define MAX_EXP_PER_INFECT				5000
#define MAX_EXP_PER_KILL_ZOMBIE		15000
#define MAX_EXP_PER_KILL_HUMAN		10000
#define MAX_EXP_PER_HS_CABEZON		20000000
#define MAX_EXP_PER_ANNIHILATOR		15000000

#define MAX_DUEL_BET_EXP				10000000
#define MAX_DUEL_BET_APS				2500000
#define MAX_DUEL_BET_PH				10
#define MAX_DUEL_BET_PZ				10
#define MAX_DUEL_BET_PF				10

#define MAX_GUILDS						500
#define MAX_LEVEL_GUILD				25

new cvar[3];

//#define CHECK_PRIMERO_COLORIDO
//#define CHECK_PRIMERO_QUE_SUERTE
//#define CHECK_PRIMERO_BUEN_COMIENZO
//#define CHECK_P_YA_NO_ES_TAN_FACIL
//#define CHECK_SUERTE_DE_PRINCIPIANTE
//#define CHECK_PRIMERO_GIFT_10
//#define CHECK_PRIMERO_GIFT_100

new g_InBubble[33];

//#define NOTICIAS
#if defined NOTICIAS
	new const NOTICIA_TEXT[] = "";
#endif

new const PLUGIN_VERSION[] = "v5.7.1";

/* CAMBIOS:
	=======================================
*/

new g_MenuPage_ColorsFix[33];

new Float:g_ExtraMult = 0.0;

new g_Precission_SemiPerfecta[33];

new g_PistolHeads[33];

new g_FirstInfect;

new g_MiniEvent_Number;
new g_MiniEvent_AlreadyInList[33];
new g_MiniEvent_UserId[512];
new g_MiniEvent_List[512];

new g_HealthTotal[33];

new g_GuildAbyss_IdTemp[500];
new g_GuildAbyss_NameTemp[33][32];
new g_GuildAbyss_Name[500][32];
new g_GuildAbyss_Id[500];
new g_MenuPage_GuildAbyss[33];

new g_Annihilator_BalasAcertadas[33];

new g_CheckMiniEvent = 0;
new g_MiniEvent_Num = 0;

new g_MenuPage_MiniEvent[33];
new g_Achievement_MiniEvent[33];

new g_TOP_COMBO_PER_MAP_MAP[64];
new g_TOP_COMBO_PER_MAP_NAME[32];
new g_TOP_COMBO_PER_MAP_COMBO = 0;
new g_TOP_COMBO_PER_MAP_COMBO_DA[15];

new g_comercio_ofertas = 0;
new g_comercio_of_cant[128];
new g_comercio_of_cant_req[128];
new g_comercio_of_recurso[128][32];
new g_comercio_of_recurso_req[128][32];
new g_comercio_of_name[128][32];
new g_comercio_of_rec_req[128];
new g_comercio_of_rec_ganado[128];
new g_comercio_compra_userid[128];
new g_comercio_compra_id[128];
new g_comercio_compra_id_delete[128];
new g_comercio_item[33];
new g_comercio_fecha_expire[128][32];

new g_comercio_venta_cant[33];
new g_comercio_venta_recurso[33][32];
new g_comercio_venta_recurso_num[33]

new g_comercio_venta_cant_cambio[33];
new g_comercio_venta_recurso_cambio[33][32];
new g_comercio_venta_recurso_num_c[33];

new g_legendaria_kpuzzle = 0;
new g_legendaria_zombies_knife[33];
new g_legendaria_knife_damage[33];

new const LETRAS_RESET[10][] = {"D", "C", "B", "A", "S", "S.1", "S.2", "S.3", "S.4", "S.5"}

new g_kill_sound;
new g_kill_sound_id = -1;
new g_kill_by_bomb[33];
new g_penta_kill[33];

//new g_pCVAR_Test[2];

new g_no_buy = 0;
new g_no_semiclip = 0;
new g_gk_bomb = 0;
new g_gk_bomb_level = 0;
new g_gk_bomb_drop = 0;
new g_no_move = 0;
new g_gk_guerra = 0;
new g_gk_glow_color_a = 0;
new g_gk_glow_color_v = 0;

new g_gk_race_clas[33];
new g_grab_player[33]
new Float:grab_totaldis[33]
new Float:g_grab_player_gravity[33];
new g_level_total[33];
new g_glow_color[33];

new g_rango[33];

new g_gift[33];

new g_race_count;

enum _:MapsStruct {
	mapName[64],
	Float:mapMult
};
new const MULT_MAPS[][MapsStruct] = {
	{"zm_kfox_b3", 0.0},
	{"zm_attack_bros", 0.0},
	{"zm_mun-senior", 1.2},
	{"zm_prospeedball_v2", 1.2},
	{"zm_taringacs_gameover", 1.0},
	{"zm_taringacs_rre_svpro", 1.0},
	{"zm_taringacs_rre_texas", 1.0},
	{"zm_trakinax_brk", 1.2},
	{"zm_taringacs_nether", 1.2},
	{"zm_taringacs_industria", 1.0},
	{"zm_taringacs_forest_v2", 1.0},
	{"zm_taringacs_greenr", 0.5},
	{"zm_taringacs_sandtemple", 0.0},
	{"zm_taringacs_rre-valle", 1.0},
	{"zm_toronto_v8", 1.5},
	{"zm_toxic_house", 2.0},
	{"zm_taringacs_cold_valley", 1.0},
	{"zm_levels_final", 1.0},
	{"zm_snowland_v1", 1.0},
	{"zm_semnome", 1.0},
	{"zm_taringacs_roma", 0.5},
	{"zm_replace", 1.0},
	{"zm_ice_attack", 1.5},
	{"zm_kontrax_b5", 0.5},
	{"zm_gaminga_roma2", 0.5},
	{"zm_clinic_emergency", 1.0}
};

/** ==================================================
	[ FIN IMPORTANTES ]
================================================== **/


/** ==================================================
	[ VARIABLES GENERALES ]
================================================== **/

enum _:Tasks (+= 236877) {
	TASK_MODEL = 54276,
	TASK_TEAM,
	TASK_SPAWN,
	TASK_BLOOD,
	TASK_AURA,
	TASK_BURN,
	TASK_NVISION,
	TASK_MAKEZOMBIE,
	TASK_WELCOMEMSG,
	TASK_FINISHCOMBO,
	TASK_TUTOR_TEXT,
	TASK_SAVE,
	TASK_FROZEN,
	TASK_MUERTE_SUBITA,
	TASK_HELLODHUD,
	TASK_JASON_SPEED,
	TASK_INFECT_1_MINUTE,
	TASK_FINISHCOMBO_GUILD,
	TASK_MADNESS_BOMB,
	TASK_MESSAGE_VINC,
	TASK_ALOHOMORA,
	TASK_FINISHCOMBO_ZOMBIE,
	TASK_GLOW_GRUNT,
	TASK_PPT,
	TASK_SOUND_LOL,
	TASK_NEMESIS_OM,
	TASK_20SEC_ZOMBIE
};

#define ID_MODEL 				(taskid - TASK_MODEL)
#define ID_TEAM 					(taskid - TASK_TEAM)
#define ID_SPAWN 				(taskid - TASK_SPAWN)
#define ID_AURA 					(taskid - TASK_AURA)
#define ID_BLOOD 				(taskid - TASK_BLOOD)
#define ID_BURN 					(taskid - TASK_BURN)
#define ID_NVISION 				(taskid - TASK_NVISION)
#define ID_FINISH_COMBO			(taskid - TASK_FINISHCOMBO)
#define ID_TUTOR_TEXT			(taskid - TASK_TUTOR_TEXT)
#define ID_SAVE					(taskid - TASK_SAVE)
#define ID_FROZEN				(taskid - TASK_FROZEN)
#define ID_INFECT_1_MINUTE		(taskid - TASK_INFECT_1_MINUTE)
#define ID_FINISH_COMBO_GUILD	(taskid - TASK_FINISHCOMBO_GUILD)
#define ID_MADNESS_BOMB			(taskid - TASK_MADNESS_BOMB)
#define ID_MESSAGE_VINC			(taskid - TASK_MESSAGE_VINC)
#define ID_ALOHOMORA				(taskid - TASK_ALOHOMORA)
#define ID_FINISH_COMBO_ZOMBIE	(taskid - TASK_FINISHCOMBO_ZOMBIE)
#define ID_GLOW_GRUNT			(taskid - TASK_GLOW_GRUNT)
#define ID_PPT					(taskid - TASK_PPT)
#define ID_NEMESIS_OM			(taskid - TASK_NEMESIS_OM)
#define ID_20SEC_ZOMBIE			(taskid - TASK_20SEC_ZOMBIE)

#define is_user_valid_connected(%1) 	(1 <= %1 <= g_maxplayers && g_isconnected[%1])
#define is_user_valid_alive(%1)		(1 <= %1 <= g_maxplayers && g_isalive[%1])

enum _:Modes {
	MODE_NONE = 0,
	MODE_INFECTION,
	MODE_NEMESIS,
	MODE_SURVIVOR,
	MODE_SWARM,
	MODE_MULTI,
	MODE_PLAGUE,
	MODE_ARMAGEDDON,
	MODE_WESKER,
	MODE_CABEZON,
	MODE_JASON,
	MODE_ALVSPRED,
	MODE_ANNIHILATOR,
	MODE_SYNAPSIS,
	MODE_SNIPER,
	MODE_DUEL_FINAL,
	MODE_GRUNT,
	MODE_GAMINGA
};

new const MESSAGE_MODES[][] = {
	"", "PRIMER ZOMBIE", "NEMESIS", "SURVIVOR", "SWARM", "INFECCIÓN MÚLTIPLE", "PLAGUE", "ARMAGEDDON", "WESKER", "CABEZÓN", "JASON", "ALIEN vs DEPREDADOR", "ANIQUILADOR", "SYNAPSIS", "SNIPER", "DUELO FINAL", "GRUNT", "GAM!NGA"
};

new Ham:Ham_Player_ResetMaxSpeed = Ham_Item_PreFrame;

const PDATA_SAFE = 2;
const OFFSET_LINUX_WEAPONS = 4;
const OFFSET_LINUX = 5;
const OFFSET_WEAPONOWNER = 41;
const OFFSET_ID	= 43;
const OFFSET_KNOWN = 44;
const OFFSET_NEXT_PRIMARY_ATTACK = 46;
const OFFSET_NEXT_SECONDARY_ATTACK = 47;
const OFFSET_TIME_WEAPON_IDLE = 48;
const OFFSET_PRIMARY_AMMO_TYPE = 49;
const OFFSET_CLIPAMMO = 51;
const OFFSET_IN_RELOAD = 54;
const OFFSET_IN_SPECIAL_RELOAD = 55;
const OFFSET_SILENT	= 74;
const OFFSET_NEXT_ATTACK = 83;
const OFFSET_PAINSHOCK = 108;
const OFFSET_CSTEAMS = 114;
const MAX_CSDM_SPAWNS = 64;
const OFFSET_JOINSTATE = 121;
const OFFSET_CSMENUCODE = 205;
const OFFSET_FLASHLIGHT_BATTERY = 244;
const OFFSET_ACTIVE_ITEM = 373;
const OFFSET_AMMO_PLAYER_SLOT0 = 376;
const OFFSET_AWM_AMMO = 377;
const OFFSET_SCOUT_AMMO = 378;
const OFFSET_PARA_AMMO = 379;
const OFFSET_FAMAS_AMMO = 380;
const OFFSET_M3_AMMO = 381;
const OFFSET_USP_AMMO = 382;
const OFFSET_FIVESEVEN_AMMO = 383;
const OFFSET_DEAGLE_AMMO = 384;
const OFFSET_P228_AMMO = 385;
const OFFSET_GLOCK_AMMO = 386;
const OFFSET_FLASH_AMMO = 387;
const OFFSET_HE_AMMO = 388;
const OFFSET_SMOKE_AMMO = 389;
const OFFSET_C4_AMMO = 390;
const OFFSET_CSDEATHS = 444;

enum _:Teams{
	FM_CS_TEAM_UNASSIGNED = 0,
	FM_CS_TEAM_T,
	FM_CS_TEAM_CT,
	FM_CS_TEAM_SPECTATOR
};
new const CS_TEAM_NAMES[][] = { "UNASSIGNED", "TERRORIST", "CT", "SPECTATOR" };

const HIDE_HUDS = (1<<5)|(1<<3);
//const HIDE_HUDS_COMPLETE = (1<<6)|(1<<5)|(1<<3);
const HIDE_HUDS_FULL = (1<<6)|(1<<5)|(1<<3)|(1<<0);
const UNIT_SECOND = (1<<12);
const DMG_HEGRENADE = (1<<24);
const OFF_IMPULSE_FLASHLIGHT = 100;
const IMPULSE_SPRAY = 201;
const USE_USING = 2;
const USE_STOPPED = 0;
const STEPTIME_SILENT = 999;
const BREAK_GLASS = 0x01;
const FFADE_IN = 0x0000;
const FFADE_STAYOUT = 0x0004;
const Float:NADE_EXPLOSION_RADIUS = 240.0;

const EV_ID_SPEC = EV_INT_iuser2;
const EV_ENT_FLARE = EV_ENT_euser3;
const EV_NADE_TYPE = EV_INT_flTimeStepSound;
const EV_FLARE_COLOR = EV_VEC_punchangle;
const EV_FLARE_DURATION = EV_INT_flSwimTime;

new HamHook:g_iHhCBasePlayerPreThink;

new const MAXBPAMMO[] = { -1, 52, -1, 90, 1, 32, 1, 100, 90, 1, 120, 100, 100, 90, 90, 90, 100, 120, 30, 120, 200, 32, 90, 120, 90, 2, 35, 90, 90, -1, 100 };
new const MAXCLIP[] = { -1, 13, -1, 10, -1, 7, -1, 30, 30, -1, 30, 20, 25, 30, 35, 25, 12, 20, 10, 30, 100, 8, 30, 30, 20, -1, 7, 30, 30, -1, 50 };
//new const BUYAMMO[] = { -1, 13, -1, 30, -1, 8, -1, 12, 30, -1, 30, 50, 12, 30, 30, 30, 12, 30, 10, 30, 30, 8, 30, 30, 30, -1, 7, 30, 30, -1, 50 };
//new const AMMOID[] = { -1, 9, -1, 2, 12, 5, 14, 6, 4, 13, 10, 7, 6, 4, 4, 4, 6, 10, 1, 10, 3, 5, 4, 10, 2, 11, 8, 4, 2, -1, 7 };

new const Float:DEFAULT_DELAY[] = {0.00, 2.70, 0.00, 2.00, 0.00, 0.55, 0.00, 3.15, 3.30, 0.00, 4.50, 2.70, 3.50, 3.35, 2.45, 3.30, 2.70, 2.20, 2.50, 2.63, 4.70, 0.55, 3.05, 2.12, 3.50, 0.00, 2.20, 3.00, 2.45, 0.00, 3.40};
new const DEFAULT_MAXCLIP[] = {-1, 13, -1, 10, 1, 7, 1, 30, 30, 1, 30, 20, 25, 30, 35, 25, 12, 20, 10, 30, 100, 8, 30, 30, 20, 2, 7, 30, 30, -1, 50};
new const DEFAULT_ANIMS[] = {-1, 5, -1, 3, -1, 6, -1, 1, 1, -1, 14, 4, 2, 3, 1, 1, 13, 7, 4, 1, 3, 6, 11, 1, 3, -1, 4, 1, 1, -1, 1};

new const AMMOOFFSET[] = {-1, OFFSET_P228_AMMO, -1, OFFSET_SCOUT_AMMO, OFFSET_HE_AMMO, OFFSET_M3_AMMO, OFFSET_C4_AMMO, OFFSET_USP_AMMO, OFFSET_FAMAS_AMMO, OFFSET_SMOKE_AMMO, OFFSET_GLOCK_AMMO, OFFSET_FIVESEVEN_AMMO, OFFSET_USP_AMMO, OFFSET_FAMAS_AMMO, OFFSET_FAMAS_AMMO, OFFSET_FAMAS_AMMO, OFFSET_USP_AMMO,
OFFSET_GLOCK_AMMO, OFFSET_AWM_AMMO, OFFSET_GLOCK_AMMO, OFFSET_PARA_AMMO, OFFSET_M3_AMMO, OFFSET_FAMAS_AMMO, OFFSET_GLOCK_AMMO, OFFSET_SCOUT_AMMO, OFFSET_FLASH_AMMO, OFFSET_DEAGLE_AMMO, OFFSET_FAMAS_AMMO, OFFSET_SCOUT_AMMO, -1, OFFSET_FIVESEVEN_AMMO};

new const AMMOTYPE[][] = { "", "357sig", "", "762nato", "", "buckshot", "", "45acp", "556nato", "", "9mm", "57mm", "45acp", "556nato", "556nato", "556nato", "45acp", "9mm", "338magnum", "9mm", "556natobox", "buckshot", "556nato", "9mm", "762nato", "", "50ae", "556nato", "762nato", "", "57mm" };

new const AMMOWEAPON[] = { 0, CSW_AWP, CSW_SCOUT, CSW_M249, CSW_AUG, CSW_XM1014, CSW_MAC10, CSW_FIVESEVEN, CSW_DEAGLE, CSW_P228, CSW_ELITE, CSW_FLASHBANG, CSW_HEGRENADE, CSW_SMOKEGRENADE, CSW_C4 };

new const WEAPON_NAMES[][] = { "", "P228 Compact", "", "Schmidt Scout", "", "XM1014 M4", "", "Ingram MAC-10", "Steyr AUG A1", "", "Dual Elite Berettas", "FiveseveN", "UMP 45", "SG-550 Auto-Sniper", "IMI Galil", "Famas", "USP .45 ACP Tactical", "Glock 18C",
"AWP Magnum Sniper", "MP5 Navy", "M249 Para Machinegun", "M3 Super 90", "M4A1 Carbine", "Schmidt TMP", "G3SG1 Auto-Sniper", "", "Desert Eagle .50 AE", "SG-552 Commando", "AK-47 Kalashnikov", "", "ES P90" };

new const WEAPONENTNAMES[][] = { "", "weapon_p228", "", "weapon_scout", "weapon_hegrenade", "weapon_xm1014", "weapon_c4", "weapon_mac10", "weapon_aug", "weapon_smokegrenade", "weapon_elite", "weapon_fiveseven", "weapon_ump45", "weapon_sg550", "weapon_galil", "weapon_famas", "weapon_usp", "weapon_glock18",
"weapon_awp", "weapon_mp5navy", "weapon_m249", "weapon_m3", "weapon_m4a1", "weapon_tmp", "weapon_g3sg1", "weapon_flashbang", "weapon_deagle", "weapon_sg552", "weapon_ak47", "weapon_knife", "weapon_p90" };

enum _:WeaponsStruct {
	weaponEnt[54],
	weaponNames[64],
	weaponModel[64],
	weaponLevel,
	Float:weaponDamageMult
};

new const ARMAS_PRIMARIAS[][WeaponsStruct] = {
	{"weapon_tmp", "Schmidt TMP", "", 1, 1.0},
	{"weapon_mac10", "Ingram MAC-10", "", 3, 1.1},
	{"weapon_m3", "M3 Super 90", "", 5, 1.4},
	{"weapon_mac10", "Reichsrevolver", "models/zp5/gk_mac10_00.mdl", 7, 1.2}, 
	{"weapon_ump45", "UMP 45", "", 9, 1.3},
	{"weapon_xm1014", "XM1014 M4", "", 12, 1.5},
	{"weapon_m3", "Hafdasa", "models/tcs_m3_2/v_tcs_m3_2.mdl", 15, 1.4},
	{"weapon_p90", "ES P90", "", 17, 1.3},
	{"weapon_mp5navy", "MP5 Navy", "", 21, 1.2},
	{"weapon_xm1014", "Skorpion vz", "models/zp_tcs/v_xm1014_ff.mdl", 24, 1.6},
	{"weapon_mp5navy", "Aliento de dragón", "models/zp_tcs/v_mp5.mdl", 28, 1.4},
	{"weapon_m3", "Winchester-133", "models/zp5/gk_m3_00.mdl", 32, 1.7},
	{"weapon_xm1014", "XM214", "models/tcs_xm1014_1/v_tcs_xm1014_1.mdl", 36, 1.7},
	{"weapon_famas", "Famas", "", 45, 1.3},
	{"weapon_galil", "IMI Galil", "", 50, 1.4},
	{"weapon_famas", "M1917 Enfield", "models/zp5/gk_famas_00.mdl", 56, 1.6},
	{"weapon_galil", "Vickers SP", "models/zp5/gk_galil_00.mdl", 62, 1.6},
	{"weapon_m3", "Benelli M3", "models/zp5/gk_m3_01.mdl", 70, 2.0},
	{"weapon_m249", "Nagant M1895", "models/tcs_m249_1/v_tcs_m249_1.mdl", 73, 1.8},
	{"weapon_famas", "TDI Vector", "models/zp5/gk_famas_01.mdl", 78, 1.8},
	{"weapon_galil", "Vektor K19", "models/zp5/gk_galil_01.mdl", 84, 1.8},
	{"weapon_ak47", "AK-47 Kalashnikov", "", 100, 1.4},
	{"weapon_sg552", "SG-552 Commando", "", 115, 1.4},
	{"weapon_m4a1", "M4A1 Carbine", "", 130, 1.4},
	{"weapon_aug", "Steyr AUG A1", "", 150, 1.4},
	{"weapon_m249", "Browning GP-35", "models/tcs_m249_2/v_tcs_m249_2.mdl", 175, 2.0},
	{"weapon_aug", "Stoner 63", "models/zp_tcs/v_aug_1.mdl", 200, 1.8},
	{"weapon_m4a1", "Destroyer.260", "models/tcs_colt_1/v_tcs_colt_1.mdl", 225, 1.9},
	{"weapon_m249", "Carabina XX.20", "models/zp5/gk_m249_00.mdl", 250, 2.3},
	{"weapon_sg552", "SIG-Sauer", "models/zp_tcs/v_sg552_1.mdl", 275, 2.0},
	{"weapon_aug", "FR Dragunov", "models/zp_tcs/v_aug_1.mdl", 300, 2.2},
	{"weapon_m249", "CETME RT-7", "models/zp_tcs/v_m249.mdl", 350, 2.5},
	{"weapon_ak47", "Holland Grass", "models/zp_tcs/v_ak47.mdl", 400, 2.4},
	{"weapon_m4a1", "Farquhar-Hill", "models/zp_tcs/v_m4a1_2xc.mdl", 450, 2.6},
	{"weapon_sg552", "Vektor SS-77", "models/zp_tcs/v_sg552_2.mdl", 500, 2.6},
	{"weapon_aug", "GSHG-7", "models/zp_tcs/v_aug_2.mdl", 550, 2.75}, 
	{"weapon_m4a1", "Mosquetón SWS", "models/zp_tcs/v_m4a1_2xc.mdl", 600, 2.9},
	{"weapon_ak47", "FX-05 Xiuhcoatl", "models/zp5/gk_ak47_00.mdl", 700, 3.1},
	{"weapon_aug", "CheyTac Intervention", "models/zp5/gk_aug_00.mdl", 800, 3.3},
	{"weapon_sg552", "F2000", "models/zp5/gk_sg552_01.mdl", 900, 3.5},
	{"weapon_m4a1", "Spectre M4", "models/tcs_colt_2/v_tcs_colt_2.mdl", 1001, 4.0},
	{"weapon_aug", "SPS Rall", "models/zp5/gk_aug_01.mdl", 1100, 4.2},
	{"weapon_ak47", "AK-63", "models/zp5/gk_ak47_01.mdl", 1200, 4.4},
	{"weapon_sg552", "Arcabuz", "models/zp5/gk_sg552_00.mdl", 1300, 4.7},
	{"weapon_ak47", "Yakushev WKV", "models/zp5/gk_ak47_02.mdl", 1500, 4.8},
	{"weapon_m4a1", "Chauchat C.S.R.G.", "models/zp5/gk_m4a1_01.mdl", 1750, 5.0},
	{"weapon_famas", "TL-823N", "models/zp5/gk_famas_01.mdl", 2100, 6.5},
	{"weapon_galil", "Typewrither", "models/zp5/gk_galil_01.mdl", 2100, 6.5},
	{"weapon_aug", "P.R.L 412", "models/zp5/gk_aug_01.mdl", 2250, 6.4},
	{"weapon_sg552", "Bear Commander", "models/zp5/gk_sg552_00.mdl", 2350, 6.4},
	{"weapon_ak47", "MP-AF", "models/zp5/gk_ak47_02.mdl", 2500, 5.7},
	{"weapon_m4a1", "Milkor MGL", "models/zp5/gk_m4a1_01.mdl", 2500, 5.5},
	{"weapon_famas", "Colt S.A.A", "models/zp5/gk_famas_01.mdl", 2750, 7.5},
	{"weapon_galil", "SCAR-H SV", "models/zp5/gk_galil_01.mdl", 2750, 7.5},
	{"weapon_aug", "MTAR-X", "models/zp5/gk_aug_01.mdl", 3001, 7.4},
	{"weapon_sg552", "Vizon", "models/zp5/gk_sg552_00.mdl", 3250, 7.4},
	{"weapon_ak47", "Honey Badger", "models/zp5/gk_ak47_02.mdl", 3500, 6.7},
	{"weapon_m4a1", "SC-2010", "models/zp5/gk_m4a1_01.mdl", 3500, 6.5},
	{"weapon_famas", "ARX-160", "models/zp5/gk_famas_01.mdl", 3750, 8.5},
	{"weapon_galil", "CETME Ameli", "models/zp5/gk_galil_01.mdl", 3750, 8.5},
	{"weapon_aug", "M27 AIR", "models/zp5/gk_aug_01.mdl", 4001, 8.4},
	{"weapon_sg552", "Remington R5", "models/zp5/gk_sg552_00.mdl", 4001, 8.4},
	{"weapon_famas", "SIG-556", "models/zp5/gk_famas_01.mdl", 4500, 10.0}, // 290
	{"weapon_galil", "Chicom CQB", "models/zp5/gk_galil_01.mdl", 4500, 10.0}, // 290
	{"weapon_aug", "PDW-57", "models/zp5/gk_aug_01.mdl", 4500, 9.2}, // 285,2
	{"weapon_sg552", "Skorpion EVO 3", "models/zp5/gk_sg552_00.mdl", 4500, 9.1}, // 291,2
	{"weapon_ak47", "NS2000", "models/zp5/gk_ak47_02.mdl", 4500, 8.3}, // 290,5
	{"weapon_m4a1", "R-870 MCS", "models/zp5/gk_m4a1_01.mdl", 4500, 7.7}, // 238,7

// ARMA: AUG #03 | DAO: 31
// ARMA: FAMAS #03 | DAO: 29
// ARMA: COMMANDO #03 | DAO: 32
// ARMA: GALIL #03 | DAO: 29
// ARMA: AK-47 #03 | DAO: 35
// ARMA: M4A1 #03 | DAO: 31
	
	{"weapon_aug", "Ukrainian VEPR", "models/zp5/gk_aug_01.mdl", 5001, 9.8}, // 303.8
	{"weapon_famas", "Brainbread", "models/zp5/gk_famas_01.mdl", 5200, 10.7}, // 310,3
	{"weapon_sg552", "LordTopaz's", "models/zp5/gk_sg552_00.mdl", 5400, 9.9}, // 316,8
	{"weapon_galil", "Avtomat Nikonova", "models/zp5/gk_galil_01.mdl", 5600, 11.2}, // 324,8
	{"weapon_ak47", "HK51", "models/zp5/gk_ak47_02.mdl", 5800, 9.4}, // 329
	{"weapon_m4a1", "Bundeswehr", "models/zp5/gk_m4a1_01.mdl", 6001, 10.9}, // 337,9
	
	{"weapon_galil", "Thanez", "models/zp5/gk_galil_01.mdl", 6200, 11.8}, // 342,2
	{"weapon_famas", "Famas G2", "models/zp5/gk_famas_01.mdl", 6400, 12.0}, // 348
	{"weapon_sg552", "Enhanced SG-552", "models/zp5/gk_sg552_00.mdl", 6600, 11.0}, // 352
	{"weapon_aug", "CaveRev's", "models/zp5/gk_aug_01.mdl", 6800, 11.5}, // 356,5
	{"weapon_ak47", "Twinke's RPK-47", "models/zp5/gk_ak47_02.mdl", 7001, 10.4}, // 364
	{"weapon_m4a1", "Chrome'n Grey", "models/zp5/gk_m4a1_01.mdl", 7200, 12.0}, // 372
	
	{"weapon_sg552", "Un-Scoped SG552 ", "models/zp5/gk_sg552_00.mdl", 7400, 11.8}, // 377,6
	{"weapon_aug", "Mystic's ", "models/zp5/gk_aug_01.mdl", 7600, 12.3}, // 381,3
	{"weapon_famas", "BR2 Famas", "models/zp5/gk_famas_01.mdl", 7800, 13.3}, // 385,7
	{"weapon_galil", "Daewoo K-2", "models/zp5/gk_galil_01.mdl", 8001, 13.5}, // 391,5
	{"weapon_ak47", "Chechen AK", "models/zp5/gk_ak47_02.mdl", 8200, 11.5}, // 402,5
	{"weapon_m4a1", "HKM4C", "models/zp5/gk_m4a1_01.mdl", 8400, 13.2}, // 409,2
	
	{"weapon_famas", "Famas 4AB7", "models/zp5/gk_famas_01.mdl", 8999, 15.0}, // 435
	{"weapon_galil", "Darkstorn", "models/zp5/gk_galil_01.mdl", 8999, 15.0}, // 435
	{"weapon_aug", "Twinke Masta's", "models/zp5/gk_aug_01.mdl", 8999, 14.032258}, // 435
	{"weapon_sg552", "TheLama HK G36C", "models/zp5/gk_sg552_00.mdl", 8999, 13.59375}, // 435
	{"weapon_ak47", "Twinke's AK", "models/zp5/gk_ak47_02.mdl", 8999, 12.428571}, // 435
	{"weapon_m4a1", "Twinke's M4", "models/zp5/gk_m4a1_01.mdl", 8999, 14.032258} // 435
};

new const ARMAS_SECUNDARIAS[][WeaponsStruct] = {
	{"weapon_glock18", "Glock 18C", "", 1, 1.0},
	{"weapon_usp", "USP .45 ACP Tactical", "", 11, 1.2},
	{"weapon_fiveseven", "FiveseveN", "", 25, 2.0},
	{"weapon_p228", "P228 Compact", "", 49, 1.3},
	{"weapon_elite", "Dual Elite Berettas", "", 73, 1.4},
	{"weapon_deagle", "Desert Eagle .50 AE", "", 91, 1.4},
	{"weapon_deagle", "Mauser", "models/zp_tcs/v_deagle.mdl", 184, 1.7},
	{"weapon_elite", "Beretta ARX-160", "models/zp_tcs/v_elite.mdl", 226, 1.5},
	{"weapon_fiveseven", "Saiga-12", "models/zp5/gk_fiveseven_00.mdl", 248, 2.3},
	{"weapon_usp", "AWC G2", "models/zp5/gk_usp_00.mdl", 263, 2.6},
	{"weapon_deagle", "Murata", "models/zp5/gk_deagle_01.mdl", 309, 2.0},
	{"weapon_usp", "Breda RPK", "models/zp5/gk_usp_01.mdl", 368, 3.4},
	{"weapon_deagle", "Nambu GS", "models/zp5/gk_deagle_00.mdl", 444, 2.6},
	{"weapon_elite", "Koch MK23", "models/zp5/gk_elite_00.mdl", 512, 3.0},
	{"weapon_p228", "Obregón", "models/zp5/gk_p228_00.mdl", 628, 4.4},
	{"weapon_deagle", "Ross Mark", "models/zp5/gk_deagle_02.mdl", 750, 5.0},
	{"weapon_usp", "M93 R", "models/zp5/gk_usp_01.mdl", 1001, 8.0},
	{"weapon_deagle", "Sigpro SP2009", "models/zp5/gk_deagle_02.mdl", 1350, 5.5},
	{"weapon_usp", "Calisco M950", "models/zp5/gk_usp_01.mdl", 1700, 9.0},
	{"weapon_deagle", "Redhawk", "models/zp5/gk_deagle_02.mdl", 2001, 6.0},
	{"weapon_usp", "SAR-21", "models/zp5/gk_usp_01.mdl", 2250, 9.5},
	{"weapon_deagle", "AEK-971", "models/zp5/gk_deagle_02.mdl", 2500, 6.5},
	{"weapon_usp", "CZ-805", "models/zp5/gk_usp_01.mdl", 2750, 10.0},
	{"weapon_deagle", "QBZ-95-1", "models/zp5/gk_deagle_02.mdl", 3001, 7.0},
	{"weapon_usp", "ACE 23", "models/zp5/gk_usp_01.mdl", 3250, 10.5},
	{"weapon_deagle", "Type 88 LMG", "models/zp5/gk_deagle_02.mdl", 3500, 7.5},
	{"weapon_usp", "PKP Pecheneg", "models/zp5/gk_usp_01.mdl", 3750, 11.0},
	{"weapon_deagle", "338-Recon", "models/zp5/gk_deagle_02.mdl", 4001, 8.0},
	{"weapon_usp", "ACE 52 CQB", "models/zp5/gk_usp_01.mdl", 4400, 11.5},
	{"weapon_deagle", "TYPE-95B-1", "models/zp5/gk_deagle_02.mdl", 4800, 8.5},

// FIVESEVEN #01 | 19
// P228 #01 | 30
// USP #01 | 32
// ELITE #01 | 33
// DEAGLE #01 | 51
	
	{"weapon_fiveseven", "Fort-12", "models/zp5/gk_fiveseven_00.mdl", 5001, 23.263157}, // 440
	{"weapon_p228", "CZ52", "models/zp5/gk_p228_00.mdl", 5300, 15.0}, // 445
	{"weapon_usp", "KAMUS-LX", "models/zp5/gk_usp_01.mdl", 5600, 14.0625}, // 450
	{"weapon_elite", "NG-LEX", "models/zp5/gk_elite_00.mdl", 5900, 13.787879}, // 455
	{"weapon_deagle", "CLOAK-ST", "models/zp5/gk_deagle_02.mdl", 6200, 9.019607}, // 460
	
	{"weapon_usp", "LUGERZ", "models/zp5/gk_usp_01.mdl", 6500, 14.53125}, // 465
	{"weapon_elite", "DUALM60", "models/zp5/gk_elite_00.mdl", 6800, 14.242424}, // 470
	{"weapon_p228", "SIG-P210", "models/zp5/gk_p228_00.mdl", 7100, 15.833333}, // 475
	{"weapon_fiveseven", "MAKAROV", "models/zp5/gk_fiveseven_00.mdl", 7400, 25.263157}, // 480
	{"weapon_deagle", "Vasht's", "models/zp5/gk_deagle_02.mdl", 7700, 9.509803}, // 485
	
	{"weapon_usp", "KingStoke's", "models/zp5/gk_usp_01.mdl", 8001, 15.625}, // 500
	{"weapon_elite", "TehSnake's", "models/zp5/gk_elite_00.mdl", 8001, 15.151515}, // 500
	{"weapon_p228", "Sporkeh", "models/zp5/gk_p228_00.mdl", 8001, 16.666667}, // 500
	{"weapon_fiveseven", "TOKAREV", "models/zp5/gk_fiveseven_00.mdl", 8001, 26.315789}, // 500
	{"weapon_deagle", "STRYKERWOLF'S", "models/zp5/gk_deagle_02.mdl", 8001, 9.803921} // 500
};

enum _:GrenadesStruct {
	weaponEnt_HE,
	weaponEnt_FB,
	weaponEnt_SG,
	weaponGrenadesNames[64],
	weaponGrenadesLevel
};
new const ARMAS_TERCIARIAS[][GrenadesStruct] = {
	{1, 1, 1, "Fuego - Hielo - Luz", 1},
	{2, 1, 2, "Fuego x2 - Hielo - Luz x2", 1001},
	{2, 2, 2, "Fuego x2 - Hielo x2 - Luz x2", 1200},
	{3, 2, 3, "Fuego x3 - Hielo x2 - Luz x3", 1300},
	{3, 1, 2, "Fuego x3 - Nitrógeno - Luz x2", 1350},
	{3, 2, 2, "Fuego x3 - Nitrógeno x2 - Luz x2", 1400},
	{1, 1, 2, "Locura - Nitrógeno - Luz x2", 1450},
	{1, 2, 2, "Locura - Nitrógeno x2 - Luz x2", 1500},
	{2, 2, 2, "Locura x2 - Nitrógeno x2 - Luz x2", 1550},
	{1, 1, 1, "Locura - Nitrógeno - Bubble", 1600},
	{1, 2, 1, "Locura - Nitrógeno x2 - Bubble", 1650},
	{1, 1, 1, "Locura - Supernova - Bubble", 1700},
	{1, 2, 1, "Locura - Supernova x2 - Bubble", 1750},
	{1, 1, 2, "Locura - Supernova - Bubble x2", 1800},
	{1, 2, 2, "Locura - Supernova x2 - Bubble x2", 1850},
	{2, 2, 2, "GRANADAS PRO", 1900}
};

new const NEED_EXP_TOTAL[10002] = {
	0, 1000, 2375, 5125, 9250, 14750, 21625, 29875, 39500, 50500, 62875, 76625, 91750, 108250, 126125, 145375, 166000, 188000, 211375, 236125, 262250,
	289750, 292500, 298000, 306250, 317250, 331000, 347500, 366750, 388750, 413500, 441000, 471250, 504250, 540000, 578500, 619750, 663750, 710500, 760000, 812250,
	867250, 871375, 879625, 892000, 908500, 929125, 953875, 982750, 1015750, 1052875, 1094125, 1139500, 1189000, 1242625, 1300375, 1362250, 1428250, 1498375, 1572625, 1651000,
	1733500, 1739000, 1750000, 1766500, 1788500, 1816000, 1849000, 1887500, 1931500, 1981000, 2036000, 2096500, 2162500, 2234000, 2311000, 2393500, 2481500, 2575000, 2674000, 2778500,
	2888500, 2895375, 2909125, 2929750, 2957250, 2991625, 3032875, 3081000, 3136000, 3197875, 3266625, 3342250, 3424750, 3514125, 3610375, 3713500, 3823500, 3940375, 4064125, 4194750,
	4332250, 4340500, 4357000, 4381750, 4414750, 4456000, 4505500, 4563250, 4629250, 4703500, 4786000, 4876750, 4975750, 5083000, 5198500, 5322250, 5454250, 5594500, 5743000, 5899750,
	6064750, 6074375, 6093625, 6122500, 6161000, 6209125, 6266875, 6334250, 6411250, 6497875, 6594125, 6700000, 6815500, 6940625, 7075375, 7219750, 7373750, 7537375, 7710625, 7893500,
	11840250, 12129000, 12145500, 12178500, 12228000, 12294000, 12376500, 12475500, 12591000, 12723000, 12871500, 13036500, 13218000, 13416000, 13630500, 13861500, 14109000, 14373000, 14653500, 14950500,
	15264000, 15594000, 15612562, 15649688, 15705375, 15779625, 15872438, 15983812, 16113750, 16262250, 16429312, 16614938, 16819124, 17041876, 17283188, 17543062, 17821500, 18118500, 18434062, 18768188,
	19120876, 19492124, 19512750, 19554000, 19615876, 19698376, 19801500, 19925250, 20069624, 20234624, 20420250, 20626500, 20853376, 21100876, 21369000, 21657750, 21967124, 22297124, 22647750, 23019000,
	23410876, 23823376, 23846062, 23891438, 23959500, 24050250, 24163688, 24299812, 24458624, 24640124, 24844312, 25071188, 25320750, 25593000, 25887936, 26205560, 26545872, 26908872, 27294558, 27702932,
	28133994, 28587744, 28612494, 28661994, 28736244, 28835244, 28958994, 29107494, 29280744, 29478744, 29701494, 29948994, 30221244, 30518244, 30839994, 31186494, 31557744, 31953744, 32374494, 32819994,
	33290244, 33785244, 33812056, 33865684, 33946120, 34053372, 34187436, 34348312, 34536000, 34750500, 34991816, 35259940, 35554880, 35876628, 36225192, 36600568, 37002756, 37431756, 37887568, 38370196,
	38879632, 39415884, 39444760, 39502508, 39589136, 39704632, 39849008, 40022260, 40224384, 40455384, 40715260, 41004008, 41321632, 41668136, 42043508, 42447760, 42880884, 43342884, 43833760, 44353508,
	44902136, 45479632, 45510568, 45572444, 45665256, 45789008, 45943692, 46129316, 46345880, 46593376, 46871816, 47181188, 47521500, 47892752, 48294936, 48728060, 49192120, 49687120, 50213056, 50769936,
	51357752, 51976500, 52009500, 52075500, 52174500, 52306500, 52471500, 52669500, 52900500, 53164500, 53461500, 53791500, 54154500, 54550500, 54979500, 55441500, 55936500, 56464500, 57025500, 57619500,
	58246500, 58906500, 58941564, 59011692, 59116880, 59257128, 59432440, 59642820, 59888256, 60168756, 60484320, 60834948, 61220632, 61641384, 62097200, 62588076, 63114012, 63675012, 64271076, 64902204,
	65568392, 66269640, 66306768, 66381016, 66492396, 66640896, 66826524, 67049272,	67309152, 67606152, 67940280, 68311528, 68719904, 69165408, 69648032, 70167784, 70724664, 71318664, 71949792, 72618040,
	73323424, 74065920, 74105104, 74183488, 74301048, 74457800, 74653736, 74888856, 75163168, 75476672, 75829360, 76221232, 76652288, 77122544, 77631976, 78180600, 78768416, 79395416, 80061600, 80766976,
	81511536, 82295288, 82336536, 82419040, 82542784, 82707784, 82914032, 83161536, 83450288, 83780288, 84151536, 84564032, 85017784, 85512784, 86049040, 86626536, 87245288, 87905288, 88606536, 89349040,
	90132784, 90957784, 91001104, 91087728, 91217664, 91390912, 91607480, 91867360, 92170544, 92517040, 92906856, 93339984, 93816416, 94336168, 94899232, 95505616, 96155296, 96848296, 97584608, 98364240,
	99187176, 100053424, 100098800, 100189552, 100325680, 100507176, 100734048, 101006304, 101323936, 101686928, 102095304, 102549048, 103048176, 103592672, 104182544, 104817792, 105498416, 106224416, 106995792, 107812536,
	108674664, 109582160, 109629600, 109724472, 109866784, 110056536, 110293728, 110578352, 110910416, 111289920, 111716856, 112191232, 112713040, 113282280, 113898976, 114563104, 115274664, 116033664, 116840096, 117693968,
	118595280, 119544024, 119593520, 119692528, 119841024, 120039024, 120286528, 120583520, 120930024, 121326024, 121771520, 122266528, 122811024, 123405024, 124048528, 124741520, 125484024, 126276024, 127117520, 128008528,
	128949024, 129939024, 129990592, 130093712, 130248408, 130454664, 130712472, 131021840, 131382784, 131795280, 132259344, 132774976, 133342160, 133960920, 134631232, 135353104, 136126528, 136951536, 137828096, 138756224,
	142478711, 146201198, 149923685, 153646172, 157368659, 161091146, 164813633, 168536120, 172258607, 175981094, 179703581, 183426068, 187148555, 190871042, 194593529, 198316016, 202038503, 205760990, 209483477, 213205964,
	216928451, 220650938, 224373425, 228095912, 231818399, 235540886, 239263373, 242985860, 246708347, 250430834, 254153321, 257875808, 261598295, 265320782, 269043269, 272765756, 276488243, 280210730, 283933217, 287655704,
	291378191, 295100678, 298823165, 302545652, 306268139, 309990626, 313713113, 317435600, 321158087, 324880574, 328603061, 332325548, 336048035, 339770522, 343493009, 347215496, 350937983, 354660470, 358382957, 362105444,
	365827931, 369550418, 373272905, 376995392, 380717879, 384440366, 388162853, 391885340, 395607827, 399330314, 403052801, 406775288, 410497775, 414220262, 417942749, 421665236, 425387723, 429110210, 432832697, 436555184,
	440277671, 444000158, 447722645, 451445132, 455167619, 458890106, 462612593, 466335080, 470057567, 473780054, 477502541, 481225028, 484947515, 488670002, 492392489, 496114976, 499837463, 503559950, 507282437, 511004924,
	514727411, 518449898, 522172385, 525894872, 529617359, 533339846, 537062333, 540784820, 544507307, 548229794, 551952281, 555674768, 559397255, 563119742, 566842229, 570564716, 574287203, 578009690, 581732177, 585454664,
	589177151, 592899638, 596622125, 600344612, 604067099, 607789586, 611512073, 615234560, 618957047, 622679534, 626402021, 630124508, 633846995, 637569482, 641291969, 645014456, 648736943, 652459430, 656181917, 659904404,
	663626891, 667349378, 671071865, 674794352, 678516839, 682239326, 685961813, 689684300, 693406787, 697129274, 700851761, 704574248, 708296735, 712019222, 715741709, 719464196, 723186683, 726909170, 730631657, 734354144,
	738076631, 741799118, 745521605, 749244092, 752966579, 756689066, 760411553, 764134040, 767856527, 771579014, 775301501, 779023988, 782746475, 786468962, 790191449, 793913936, 797636423, 801358910, 805081397, 808803884,
	812526371, 816248858, 819971345, 823693832, 827416319, 831138806, 834861293, 838583780, 842306267, 846028754, 849751241, 853473728, 857196215, 860918702, 864641189, 868363676, 872086163, 875808650, 879531137, 883253624,
	886976111, 890698598, 894421085, 898143572, 901866059, 905588546, 909311033, 913033520, 916756007, 920478494, 924200981, 927923468, 931645955, 935368442, 939090929, 942813416, 946535903, 950258390, 953980877, 957703364,
	961425851, 965148338, 968870825, 972593312, 976315799, 980038286, 983760773, 987483260, 991205747, 994928234, 998650721, 1002373208, 1006095695, 1009818182, 1013540669, 1017263156, 1020985643, 1024708130, 1028430617, 1032153104,
	1035875591, 1039598078, 1043320565, 1047043052, 1050765539, 1054488026, 1058210513, 1061933000, 1065655487, 1069377974, 1073100461, 1076822948, 1080545435, 1084267922, 1087990409, 1091712896, 1095435383, 1099157870, 1102880357, 1106602844,
	1110325331, 1114047818, 1117770305, 1121492792, 1125215279, 1128937766, 1132660253, 1136382740, 1140105227, 1143827714, 1147550201, 1151272688, 1154995175, 1158717662, 1162440149, 1166162636, 1169885123, 1173607610, 1177330097, 1181052584,
	1184775071, 1188497558, 1192220045, 1195942532, 1199665019, 1203387506, 1207109993, 1210832480, 1214554967, 1218277454, 1221999941, 1225722428, 1229444915, 1233167402, 1236889889, 1240612376, 1244334863, 1248057350, 1251779837, 1255502324,
	1259224811, 1262947298, 1266669785, 1270392272, 1274114759, 1277837246, 1281559733, 1285282220, 1289004707, 1292727194, 1296449681, 1300172168, 1303894655, 1307617142, 1311339629, 1315062116, 1318784603, 1322507090, 1326229577, 1329952064,
	1333674551, 1337397038, 1341119525, 1344842012, 1348564499, 1352286986, 1356009473, 1359731960, 1363454447, 1367176934, 1370899421, 1374621908, 1378344395, 1382066882, 1385789369, 1389511856, 1393234343, 1396956830, 1400679317, 1404401804,
	1408124291, 1411846778, 1415569265, 1419291752, 1423014239, 1426736726, 1430459213, 1434181700, 1437904187, 1441626674, 1445349161, 1449071648, 1452794135, 1456516622, 1460239109, 1463961596, 1467684083, 1471406570, 1475129057, 1478851544,
	1482574031, 1486296518, 1490019005, 1493741492, 1497463979, 1501186466, 1504908953, 1508631440, 1512353927, 1516076414, 1519798901, 1523521388, 1527243875, 1530966362, 1534688849, 1538411336, 1542133823, 1545856310, 1549578797, 1553301284,
	1557023771, 1560746258, 1564468745, 1568191232, 1571913719, 1575636206, 1579358693, 1583081180, 1586803667, 1590526154, 1594248641, 1597971128, 1601693615, 1605416102, 1609138589, 1612861076, 1616583563, 1620306050, 1624028537, 1627751024,
	1631473511, 1635195998, 1638918485, 1642640972, 1646363459, 1650085946, 1653808433, 1657530920, 1661253407, 1664975894, 1668698381, 1672420868, 1676143355, 1679865842, 1683588329, 1687310816, 1691033303, 1694755790, 1698478277, 1702200764,
	1705923251, 1709645738, 1713368225, 1717090712, 1720813199, 1724535686, 1728258173, 1731980660, 1735703147, 1739425634, 1743148121, 1746870608, 1750593095, 1754315582, 1758038069, 1761760556, 1765483043, 1769205530, 1772928017, 1776650504,
	1780372991, 1784095478, 1787817965, 1791540452, 1795262939, 1798985426, 1802707913, 1806430400, 1810152887, 1813875374, 1817597861, 1821320348, 1825042835, 1828765322, 1832487809, 1836210296, 1839932783, 1843655270, 1847377757, 1851100244,
	1854822731, 1858545218, 1862267705, 1865990192, 1869712679, 1873435166, 1877157653, 1880880140, 1884602627, 1888325114, 1892047601, 1895770088, 1899492575, 1903215062, 1906937549, 1910660036, 1914382523, 1918105010, 1921827497, 1925549984,
	1929272471, 1932994958, 1936717445, 1940439932, 1944162419, 1947884906, 1951607393, 1955329880, 1959052367, 1962774854, 1966497341, 1970219828, 1973942315, 1977664802, 1981387289, 1985109776, 1988832263, 1992554750, 1996277237, 2100000000, // 1000
	
	
	4000000, 8000000, 12000000, 16000000, 20000000, 24000000, 28000000, 32000000, 36000000, 40000000, 44000000, 48000000, 52000000, 56000000, 60000000, 64000000, 68000000, 72000000, 76000000, 80000000, 
	84000000, 88000000, 92000000, 96000000, 100000000, 104000000, 108000000, 112000000, 116000000, 120000000, 124000000, 128000000, 132000000, 136000000, 140000000, 144000000, 148000000, 152000000, 156000000, 160000000, 
	164000000, 168000000, 172000000, 176000000, 180000000, 184000000, 188000000, 192000000, 196000000, 200000000, 204000000, 208000000, 212000000, 216000000, 220000000, 224000000, 228000000, 232000000, 236000000, 240000000, 
	244000000, 248000000, 252000000, 256000000, 260000000, 264000000, 268000000, 272000000, 276000000, 280000000, 284000000, 288000000, 292000000, 296000000, 300000000, 304000000, 308000000, 312000000, 316000000, 320000000, 
	324000000, 328000000, 332000000, 336000000, 340000000, 344000000, 348000000, 352000000, 356000000, 360000000, 364000000, 368000000, 372000000, 376000000, 380000000, 384000000, 388000000, 392000000, 396000000, 400000000, 
	404000000, 408000000, 412000000, 416000000, 420000000, 424000000, 428000000, 432000000, 436000000, 440000000, 444000000, 448000000, 452000000, 456000000, 460000000, 464000000, 468000000, 472000000, 476000000, 480000000, 
	484000000, 488000000, 492000000, 496000000, 500000000, 504000000, 508000000, 512000000, 516000000, 520000000, 524000000, 528000000, 532000000, 536000000, 540000000, 544000000, 548000000, 552000000, 556000000, 560000000, 
	564000000, 568000000, 572000000, 576000000, 580000000, 584000000, 588000000, 592000000, 596000000, 600000000, 604000000, 608000000, 612000000, 616000000, 620000000, 624000000, 628000000, 632000000, 636000000, 640000000, 
	644000000, 648000000, 652000000, 656000000, 660000000, 664000000, 668000000, 672000000, 676000000, 680000000, 684000000, 688000000, 692000000, 696000000, 700000000, 704000000, 708000000, 712000000, 716000000, 720000000, 
	724000000, 728000000, 732000000, 736000000, 740000000, 744000000, 748000000, 752000000, 756000000, 760000000, 764000000, 768000000, 772000000, 776000000, 780000000, 784000000, 788000000, 792000000, 796000000, 800000000,
	804000000, 808000000, 812000000, 816000000, 820000000, 824000000, 828000000, 832000000, 836000000, 840000000, 844000000, 848000000, 852000000, 856000000, 860000000, 864000000, 868000000, 872000000, 876000000, 880000000, 
	884000000, 888000000, 892000000, 896000000, 900000000, 904000000, 908000000, 912000000, 916000000, 920000000, 924000000, 928000000, 932000000, 936000000, 940000000, 944000000, 948000000, 952000000, 956000000, 960000000, 
	964000000, 968000000, 972000000, 976000000, 980000000, 984000000, 988000000, 992000000, 996000000, 1000000000, 1004000000, 1008000000, 1012000000, 1016000000, 1020000000, 1024000000, 1028000000, 1032000000, 1036000000, 1040000000, 
	1044000000, 1048000000, 1052000000, 1056000000, 1060000000, 1064000000, 1068000000, 1072000000, 1076000000, 1080000000, 1084000000, 1088000000, 1092000000, 1096000000, 1100000000, 1104000000, 1108000000, 1112000000, 1116000000, 1120000000, 
	1124000000, 1128000000, 1132000000, 1136000000, 1140000000, 1144000000, 1148000000, 1152000000, 1156000000, 1160000000, 1164000000, 1168000000, 1172000000, 1176000000, 1180000000, 1184000000, 1188000000, 1192000000, 1196000000, 1200000000, 
	1204000000, 1208000000, 1212000000, 1216000000, 1220000000, 1224000000, 1228000000, 1232000000, 1236000000, 1240000000, 1244000000, 1248000000, 1252000000, 1256000000, 1260000000, 1264000000, 1268000000, 1272000000, 1276000000, 1280000000, 
	1284000000, 1288000000, 1292000000, 1296000000, 1300000000, 1304000000, 1308000000, 1312000000, 1316000000, 1320000000, 1324000000, 1328000000, 1332000000, 1336000000, 1340000000, 1344000000, 1348000000, 1352000000, 1356000000, 1360000000, 
	1364000000, 1368000000, 1372000000, 1376000000, 1380000000, 1384000000, 1388000000, 1392000000, 1396000000, 1400000000, 1404000000, 1408000000, 1412000000, 1416000000, 1420000000, 1424000000, 1428000000, 1432000000, 1436000000, 1440000000, 
	1444000000, 1448000000, 1452000000, 1456000000, 1460000000, 1464000000, 1468000000, 1472000000, 1476000000, 1480000000, 1484000000, 1488000000, 1492000000, 1496000000, 1500000000, 1504000000, 1508000000, 1512000000, 1516000000, 1520000000, 
	1524000000, 1528000000, 1532000000, 1536000000, 1540000000, 1544000000, 1548000000, 1552000000, 1556000000, 1560000000, 1564000000, 1568000000, 1572000000, 1576000000, 1580000000, 1584000000, 1588000000, 1592000000, 1596000000, 1600000000, 
	1604000000, 1608000000, 1612000000, 1616000000, 1620000000, 1624000000, 1628000000, 1632000000, 1636000000, 1640000000, 1644000000, 1648000000, 1652000000, 1656000000, 1660000000, 1664000000, 1668000000, 1672000000, 1676000000, 1680000000, 
	1684000000, 1688000000, 1692000000, 1696000000, 1700000000, 1704000000, 1708000000, 1712000000, 1716000000, 1720000000, 1724000000, 1728000000, 1732000000, 1736000000, 1740000000, 1744000000, 1748000000, 1752000000, 1756000000, 1760000000, 
	1764000000, 1768000000, 1772000000, 1776000000, 1780000000, 1784000000, 1788000000, 1792000000, 1796000000, 1800000000, 1804000000, 1808000000, 1812000000, 1816000000, 1820000000, 1824000000, 1828000000, 1832000000, 1836000000, 1840000000, 
	1844000000, 1848000000, 1852000000, 1856000000, 1860000000, 1864000000, 1868000000, 1872000000, 1876000000, 1880000000, 1884000000, 1888000000, 1892000000, 1896000000, 1900000000, 1904000000, 1908000000, 1912000000, 1916000000, 1920000000, 
	1924000000, 1928000000, 1932000000, 1936000000, 1940000000, 1944000000, 1948000000, 1952000000, 1956000000, 1960000000, 1964000000, 1968000000, 1972000000, 1976000000, 1980000000, 1984000000, 1988000000, 1992000000, 1996000000, 2100000000, // 1500
	
	
	4000000, 8000000, 12000000, 16000000, 20000000, 24000000, 28000000, 32000000, 36000000, 40000000, 44000000, 48000000, 52000000, 56000000, 60000000, 64000000, 68000000, 72000000, 76000000, 80000000, 
	84000000, 88000000, 92000000, 96000000, 100000000, 104000000, 108000000, 112000000, 116000000, 120000000, 124000000, 128000000, 132000000, 136000000, 140000000, 144000000, 148000000, 152000000, 156000000, 160000000, 
	164000000, 168000000, 172000000, 176000000, 180000000, 184000000, 188000000, 192000000, 196000000, 200000000, 204000000, 208000000, 212000000, 216000000, 220000000, 224000000, 228000000, 232000000, 236000000, 240000000, 
	244000000, 248000000, 252000000, 256000000, 260000000, 264000000, 268000000, 272000000, 276000000, 280000000, 284000000, 288000000, 292000000, 296000000, 300000000, 304000000, 308000000, 312000000, 316000000, 320000000, 
	324000000, 328000000, 332000000, 336000000, 340000000, 344000000, 348000000, 352000000, 356000000, 360000000, 364000000, 368000000, 372000000, 376000000, 380000000, 384000000, 388000000, 392000000, 396000000, 400000000, 
	404000000, 408000000, 412000000, 416000000, 420000000, 424000000, 428000000, 432000000, 436000000, 440000000, 444000000, 448000000, 452000000, 456000000, 460000000, 464000000, 468000000, 472000000, 476000000, 480000000, 
	484000000, 488000000, 492000000, 496000000, 500000000, 504000000, 508000000, 512000000, 516000000, 520000000, 524000000, 528000000, 532000000, 536000000, 540000000, 544000000, 548000000, 552000000, 556000000, 560000000, 
	564000000, 568000000, 572000000, 576000000, 580000000, 584000000, 588000000, 592000000, 596000000, 600000000, 604000000, 608000000, 612000000, 616000000, 620000000, 624000000, 628000000, 632000000, 636000000, 640000000, 
	644000000, 648000000, 652000000, 656000000, 660000000, 664000000, 668000000, 672000000, 676000000, 680000000, 684000000, 688000000, 692000000, 696000000, 700000000, 704000000, 708000000, 712000000, 716000000, 720000000, 
	724000000, 728000000, 732000000, 736000000, 740000000, 744000000, 748000000, 752000000, 756000000, 760000000, 764000000, 768000000, 772000000, 776000000, 780000000, 784000000, 788000000, 792000000, 796000000, 800000000,
	804000000, 808000000, 812000000, 816000000, 820000000, 824000000, 828000000, 832000000, 836000000, 840000000, 844000000, 848000000, 852000000, 856000000, 860000000, 864000000, 868000000, 872000000, 876000000, 880000000, 
	884000000, 888000000, 892000000, 896000000, 900000000, 904000000, 908000000, 912000000, 916000000, 920000000, 924000000, 928000000, 932000000, 936000000, 940000000, 944000000, 948000000, 952000000, 956000000, 960000000, 
	964000000, 968000000, 972000000, 976000000, 980000000, 984000000, 988000000, 992000000, 996000000, 1000000000, 1004000000, 1008000000, 1012000000, 1016000000, 1020000000, 1024000000, 1028000000, 1032000000, 1036000000, 1040000000, 
	1044000000, 1048000000, 1052000000, 1056000000, 1060000000, 1064000000, 1068000000, 1072000000, 1076000000, 1080000000, 1084000000, 1088000000, 1092000000, 1096000000, 1100000000, 1104000000, 1108000000, 1112000000, 1116000000, 1120000000, 
	1124000000, 1128000000, 1132000000, 1136000000, 1140000000, 1144000000, 1148000000, 1152000000, 1156000000, 1160000000, 1164000000, 1168000000, 1172000000, 1176000000, 1180000000, 1184000000, 1188000000, 1192000000, 1196000000, 1200000000, 
	1204000000, 1208000000, 1212000000, 1216000000, 1220000000, 1224000000, 1228000000, 1232000000, 1236000000, 1240000000, 1244000000, 1248000000, 1252000000, 1256000000, 1260000000, 1264000000, 1268000000, 1272000000, 1276000000, 1280000000, 
	1284000000, 1288000000, 1292000000, 1296000000, 1300000000, 1304000000, 1308000000, 1312000000, 1316000000, 1320000000, 1324000000, 1328000000, 1332000000, 1336000000, 1340000000, 1344000000, 1348000000, 1352000000, 1356000000, 1360000000, 
	1364000000, 1368000000, 1372000000, 1376000000, 1380000000, 1384000000, 1388000000, 1392000000, 1396000000, 1400000000, 1404000000, 1408000000, 1412000000, 1416000000, 1420000000, 1424000000, 1428000000, 1432000000, 1436000000, 1440000000, 
	1444000000, 1448000000, 1452000000, 1456000000, 1460000000, 1464000000, 1468000000, 1472000000, 1476000000, 1480000000, 1484000000, 1488000000, 1492000000, 1496000000, 1500000000, 1504000000, 1508000000, 1512000000, 1516000000, 1520000000, 
	1524000000, 1528000000, 1532000000, 1536000000, 1540000000, 1544000000, 1548000000, 1552000000, 1556000000, 1560000000, 1564000000, 1568000000, 1572000000, 1576000000, 1580000000, 1584000000, 1588000000, 1592000000, 1596000000, 1600000000, 
	1604000000, 1608000000, 1612000000, 1616000000, 1620000000, 1624000000, 1628000000, 1632000000, 1636000000, 1640000000, 1644000000, 1648000000, 1652000000, 1656000000, 1660000000, 1664000000, 1668000000, 1672000000, 1676000000, 1680000000, 
	1684000000, 1688000000, 1692000000, 1696000000, 1700000000, 1704000000, 1708000000, 1712000000, 1716000000, 1720000000, 1724000000, 1728000000, 1732000000, 1736000000, 1740000000, 1744000000, 1748000000, 1752000000, 1756000000, 1760000000, 
	1764000000, 1768000000, 1772000000, 1776000000, 1780000000, 1784000000, 1788000000, 1792000000, 1796000000, 1800000000, 1804000000, 1808000000, 1812000000, 1816000000, 1820000000, 1824000000, 1828000000, 1832000000, 1836000000, 1840000000, 
	1844000000, 1848000000, 1852000000, 1856000000, 1860000000, 1864000000, 1868000000, 1872000000, 1876000000, 1880000000, 1884000000, 1888000000, 1892000000, 1896000000, 1900000000, 1904000000, 1908000000, 1912000000, 1916000000, 1920000000, 
	1924000000, 1928000000, 1932000000, 1936000000, 1940000000, 1944000000, 1948000000, 1952000000, 1956000000, 1960000000, 1964000000, 1968000000, 1972000000, 1976000000, 1980000000, 1984000000, 1988000000, 1992000000, 1996000000, 2100000000, // 2000
	
	
	10500000, 21000000, 31500000, 42000000, 52500000, 63000000, 73500000, 84000000, 94500000, 105000000, 115500000, 126000000, 136500000, 147000000, 157500000, 168000000, 178500000, 189000000, 199500000,
	210000000, 220500000, 231000000, 241500000, 252000000, 262500000, 273000000, 283500000, 294000000, 304500000, 315000000, 325500000, 336000000, 346500000, 357000000, 367500000, 378000000, 388500000, 399000000, 409500000,
	420000000, 430500000, 441000000, 451500000, 462000000, 472500000, 483000000, 493500000, 504000000, 514500000, 525000000, 535500000, 546000000, 556500000, 567000000, 577500000, 588000000, 598500000, 609000000, 619500000,
	630000000, 640500000, 651000000, 661500000, 672000000, 682500000, 693000000, 703500000, 714000000, 724500000, 735000000, 745500000, 756000000, 766500000, 777000000, 787500000, 798000000, 808500000, 819000000, 829500000,
	840000000, 850500000, 861000000, 871500000, 882000000, 892500000, 903000000, 913500000, 924000000, 934500000, 945000000, 955500000, 966000000, 976500000, 987000000, 997500000, 1008000000, 1018500000, 1029000000, 1039500000,
	1050000000, 1060500000, 1071000000, 1081500000, 1092000000, 1102500000, 1113000000, 1123500000, 1134000000, 1144500000, 1155000000, 1165500000, 1176000000, 1186500000, 1197000000, 1207500000, 1218000000, 1228500000, 1239000000, 1249500000,
	1260000000, 1270500000, 1281000000, 1291500000, 1302000000, 1312500000, 1323000000, 1333500000, 1344000000, 1354500000, 1365000000, 1375500000, 1386000000, 1396500000, 1407000000, 1417500000, 1428000000, 1438500000, 1449000000, 1459500000,
	1470000000, 1480500000, 1491000000, 1501500000, 1512000000, 1522500000, 1533000000, 1543500000, 1554000000, 1564500000, 1575000000, 1585500000, 1596000000, 1606500000, 1617000000, 1627500000, 1638000000, 1648500000, 1659000000, 1669500000,
	1680000000, 1690500000, 1701000000, 1711500000, 1722000000, 1732500000, 1743000000, 1753500000, 1764000000, 1774500000, 1785000000, 1795500000, 1806000000, 1816500000, 1827000000, 1837500000, 1848000000, 1858500000, 1869000000, 1879500000,
	1890000000, 1900500000, 1911000000, 1921500000, 1932000000, 1942500000, 1953000000, 1963500000, 1974000000, 1984500000, 1995000000, 2005500000, 2016000000, 2026500000, 2037000000, 2047500000, 2058000000, 2068500000, 2079000000, 2089500000,
	2100000000, 10500000, 21000000, 31500000, 42000000, 52500000, 63000000, 73500000, 84000000, 94500000, 105000000, 115500000, 126000000, 136500000, 147000000, 157500000, 168000000, 178500000, 189000000, 199500000,
	210000000, 220500000, 231000000, 241500000, 252000000, 262500000, 273000000, 283500000, 294000000, 304500000, 315000000, 325500000, 336000000, 346500000, 357000000, 367500000, 378000000, 388500000, 399000000, 409500000,
	420000000, 430500000, 441000000, 451500000, 462000000, 472500000, 483000000, 493500000, 504000000, 514500000, 525000000, 535500000, 546000000, 556500000, 567000000, 577500000, 588000000, 598500000, 609000000, 619500000,
	630000000, 640500000, 651000000, 661500000, 672000000, 682500000, 693000000, 703500000, 714000000, 724500000, 735000000, 745500000, 756000000, 766500000, 777000000, 787500000, 798000000, 808500000, 819000000, 829500000,
	840000000, 850500000, 861000000, 871500000, 882000000, 892500000, 903000000, 913500000, 924000000, 934500000, 945000000, 955500000, 966000000, 976500000, 987000000, 997500000, 1008000000, 1018500000, 1029000000, 1039500000,
	1050000000, 1060500000, 1071000000, 1081500000, 1092000000, 1102500000, 1113000000, 1123500000, 1134000000, 1144500000, 1155000000, 1165500000, 1176000000, 1186500000, 1197000000, 1207500000, 1218000000, 1228500000, 1239000000, 1249500000,
	1260000000, 1270500000, 1281000000, 1291500000, 1302000000, 1312500000, 1323000000, 1333500000, 1344000000, 1354500000, 1365000000, 1375500000, 1386000000, 1396500000, 1407000000, 1417500000, 1428000000, 1438500000, 1449000000, 1459500000,
	1470000000, 1480500000, 1491000000, 1501500000, 1512000000, 1522500000, 1533000000, 1543500000, 1554000000, 1564500000, 1575000000, 1585500000, 1596000000, 1606500000, 1617000000, 1627500000, 1638000000, 1648500000, 1659000000, 1669500000,
	1680000000, 1690500000, 1701000000, 1711500000, 1722000000, 1732500000, 1743000000, 1753500000, 1764000000, 1774500000, 1785000000, 1795500000, 1806000000, 1816500000, 1827000000, 1837500000, 1848000000, 1858500000, 1869000000, 1879500000,
	1890000000, 1900500000, 1911000000, 1921500000, 1932000000, 1942500000, 1953000000, 1963500000, 1974000000, 1984500000, 1995000000, 2005500000, 2016000000, 2026500000, 2037000000, 2047500000, 2058000000, 2068500000, 2079000000, 2089500000,
	2100000000, 10500000, 21000000, 31500000, 42000000, 52500000, 63000000, 73500000, 84000000, 94500000, 105000000, 115500000, 126000000, 136500000, 147000000, 157500000, 168000000, 178500000, 189000000, 199500000,
	210000000, 220500000, 231000000, 241500000, 252000000, 262500000, 273000000, 283500000, 294000000, 304500000, 315000000, 325500000, 336000000, 346500000, 357000000, 367500000, 378000000, 388500000, 399000000, 409500000,
	420000000, 430500000, 441000000, 451500000, 462000000, 472500000, 483000000, 493500000, 504000000, 514500000, 525000000, 535500000, 546000000, 556500000, 567000000, 577500000, 588000000, 598500000, 609000000, 619500000,
	630000000, 640500000, 651000000, 661500000, 672000000, 682500000, 693000000, 703500000, 714000000, 724500000, 735000000, 745500000, 756000000, 766500000, 777000000, 787500000, 798000000, 808500000, 819000000, 829500000,
	840000000, 850500000, 861000000, 871500000, 882000000, 892500000, 903000000, 913500000, 924000000, 934500000, 945000000, 955500000, 966000000, 976500000, 987000000, 997500000, 1008000000, 1018500000, 1029000000, 1039500000,
	1050000000, 1060500000, 1071000000, 1081500000, 1092000000, 1102500000, 1113000000, 1123500000, 1134000000, 1144500000, 1155000000, 1165500000, 1176000000, 1186500000, 1197000000, 1207500000, 1218000000, 1228500000, 1239000000, 1249500000,
	1260000000, 1270500000, 1281000000, 1291500000, 1302000000, 1312500000, 1323000000, 1333500000, 1344000000, 1354500000, 1365000000, 1375500000, 1386000000, 1396500000, 1407000000, 1417500000, 1428000000, 1438500000, 1449000000, 1459500000,
	1470000000, 1480500000, 1491000000, 1501500000, 1512000000, 1522500000, 1533000000, 1543500000, 1554000000, 1564500000, 1575000000, 1585500000, 1596000000, 1606500000, 1617000000, 1627500000, 1638000000, 1648500000, 1659000000, 1669500000,
	1680000000, 1690500000, 1701000000, 1711500000, 1722000000, 1732500000, 1743000000, 1753500000, 1764000000, 1774500000, 1785000000, 1795500000, 1806000000, 1816500000, 1827000000, 1837500000, 1848000000, 1858500000, 1869000000, 1879500000,
	1890000000, 1900500000, 1911000000, 1921500000, 1932000000, 1942500000, 1953000000, 1963500000, 1974000000, 1984500000, 1995000000, 2005500000, 2016000000, 2026500000, 2037000000, 2047500000, 2058000000, 2068500000, 2079000000, 2089500000,
	2100000000, 10500000, 21000000, 31500000, 42000000, 52500000, 63000000, 73500000, 84000000, 94500000, 105000000, 115500000, 126000000, 136500000, 147000000, 157500000, 168000000, 178500000, 189000000, 199500000,
	210000000, 220500000, 231000000, 241500000, 252000000, 262500000, 273000000, 283500000, 294000000, 304500000, 315000000, 325500000, 336000000, 346500000, 357000000, 367500000, 378000000, 388500000, 399000000, 409500000,
	420000000, 430500000, 441000000, 451500000, 462000000, 472500000, 483000000, 493500000, 504000000, 514500000, 525000000, 535500000, 546000000, 556500000, 567000000, 577500000, 588000000, 598500000, 609000000, 619500000,
	630000000, 640500000, 651000000, 661500000, 672000000, 682500000, 693000000, 703500000, 714000000, 724500000, 735000000, 745500000, 756000000, 766500000, 777000000, 787500000, 798000000, 808500000, 819000000, 829500000,
	840000000, 850500000, 861000000, 871500000, 882000000, 892500000, 903000000, 913500000, 924000000, 934500000, 945000000, 955500000, 966000000, 976500000, 987000000, 997500000, 1008000000, 1018500000, 1029000000, 1039500000,
	1050000000, 1060500000, 1071000000, 1081500000, 1092000000, 1102500000, 1113000000, 1123500000, 1134000000, 1144500000, 1155000000, 1165500000, 1176000000, 1186500000, 1197000000, 1207500000, 1218000000, 1228500000, 1239000000, 1249500000,
	1260000000, 1270500000, 1281000000, 1291500000, 1302000000, 1312500000, 1323000000, 1333500000, 1344000000, 1354500000, 1365000000, 1375500000, 1386000000, 1396500000, 1407000000, 1417500000, 1428000000, 1438500000, 1449000000, 1459500000,
	1470000000, 1480500000, 1491000000, 1501500000, 1512000000, 1522500000, 1533000000, 1543500000, 1554000000, 1564500000, 1575000000, 1585500000, 1596000000, 1606500000, 1617000000, 1627500000, 1638000000, 1648500000, 1659000000, 1669500000,
	1680000000, 1690500000, 1701000000, 1711500000, 1722000000, 1732500000, 1743000000, 1753500000, 1764000000, 1774500000, 1785000000, 1795500000, 1806000000, 1816500000, 1827000000, 1837500000, 1848000000, 1858500000, 1869000000, 1879500000,
	1890000000, 1900500000, 1911000000, 1921500000, 1932000000, 1942500000, 1953000000, 1963500000, 1974000000, 1984500000, 1995000000, 2005500000, 2016000000, 2026500000, 2037000000, 2047500000, 2058000000, 2068500000, 2079000000, 2089500000,
	2100000000, 10500000, 21000000, 31500000, 42000000, 52500000, 63000000, 73500000, 84000000, 94500000, 105000000, 115500000, 126000000, 136500000, 147000000, 157500000, 168000000, 178500000, 189000000, 199500000,
	210000000, 220500000, 231000000, 241500000, 252000000, 262500000, 273000000, 283500000, 294000000, 304500000, 315000000, 325500000, 336000000, 346500000, 357000000, 367500000, 378000000, 388500000, 399000000, 409500000,
	420000000, 430500000, 441000000, 451500000, 462000000, 472500000, 483000000, 493500000, 504000000, 514500000, 525000000, 535500000, 546000000, 556500000, 567000000, 577500000, 588000000, 598500000, 609000000, 619500000,
	630000000, 640500000, 651000000, 661500000, 672000000, 682500000, 693000000, 703500000, 714000000, 724500000, 735000000, 745500000, 756000000, 766500000, 777000000, 787500000, 798000000, 808500000, 819000000, 829500000,
	840000000, 850500000, 861000000, 871500000, 882000000, 892500000, 903000000, 913500000, 924000000, 934500000, 945000000, 955500000, 966000000, 976500000, 987000000, 997500000, 1008000000, 1018500000, 1029000000, 1039500000,
	1050000000, 1060500000, 1071000000, 1081500000, 1092000000, 1102500000, 1113000000, 1123500000, 1134000000, 1144500000, 1155000000, 1165500000, 1176000000, 1186500000, 1197000000, 1207500000, 1218000000, 1228500000, 1239000000, 1249500000,
	1260000000, 1270500000, 1281000000, 1291500000, 1302000000, 1312500000, 1323000000, 1333500000, 1344000000, 1354500000, 1365000000, 1375500000, 1386000000, 1396500000, 1407000000, 1417500000, 1428000000, 1438500000, 1449000000, 1459500000,
	1470000000, 1480500000, 1491000000, 1501500000, 1512000000, 1522500000, 1533000000, 1543500000, 1554000000, 1564500000, 1575000000, 1585500000, 1596000000, 1606500000, 1617000000, 1627500000, 1638000000, 1648500000, 1659000000, 1669500000,
	1680000000, 1690500000, 1701000000, 1711500000, 1722000000, 1732500000, 1743000000, 1753500000, 1764000000, 1774500000, 1785000000, 1795500000, 1806000000, 1816500000, 1827000000, 1837500000, 1848000000, 1858500000, 1869000000, 1879500000,
	1890000000, 1900500000, 1911000000, 1921500000, 1932000000, 1942500000, 1953000000, 1963500000, 1974000000, 1984500000, 1995000000, 2005500000, 2016000000, 2026500000, 2037000000, 2047500000, 2058000000, 2068500000, 2079000000, 2089500000,
	2100000000, // 3000
	
	14000000, 28000000, 42000000, 56000000, 70000000, 84000000, 98000000, 112000000, 126000000, 140000000, 154000000, 168000000, 182000000, 196000000, 210000000, 224000000, 238000000, 252000000, 266000000,
	280000000, 294000000, 308000000, 322000000, 336000000, 350000000, 364000000, 378000000, 392000000, 406000000, 420000000, 434000000, 448000000, 462000000, 476000000, 490000000, 504000000, 518000000, 532000000, 546000000,
	560000000, 574000000, 588000000, 602000000, 616000000, 630000000, 644000000, 658000000, 672000000, 686000000, 700000000, 714000000, 728000000, 742000000, 756000000, 770000000, 784000000, 798000000, 812000000, 826000000,
	840000000, 854000000, 868000000, 882000000, 896000000, 910000000, 924000000, 938000000, 952000000, 966000000, 980000000, 994000000, 1008000000, 1022000000, 1036000000, 1050000000, 1064000000, 1078000000, 1092000000, 1106000000,
	1120000000, 1134000000, 1148000000, 1162000000, 1176000000, 1190000000, 1204000000, 1218000000, 1232000000, 1246000000, 1260000000, 1274000000, 1288000000, 1302000000, 1316000000, 1330000000, 1344000000, 1358000000, 1372000000, 1386000000,
	1400000000, 1414000000, 1428000000, 1442000000, 1456000000, 1470000000, 1484000000, 1498000000, 1512000000, 1526000000, 1540000000, 1554000000, 1568000000, 1582000000, 1596000000, 1610000000, 1624000000, 1638000000, 1652000000, 1666000000,
	1680000000, 1694000000, 1708000000, 1722000000, 1736000000, 1750000000, 1764000000, 1778000000, 1792000000, 1806000000, 1820000000, 1834000000, 1848000000, 1862000000, 1876000000, 1890000000, 1904000000, 1918000000, 1932000000, 1946000000,
	1960000000, 1974000000, 1988000000, 2002000000, 2016000000, 2030000000, 2044000000, 2058000000, 2072000000, 2086000000, 2100000000, 14000000, 28000000, 42000000, 56000000, 70000000, 84000000, 98000000, 112000000, 126000000, 140000000, 154000000, 16800000,
	280000000, 294000000, 308000000, 322000000, 336000000, 350000000, 364000000, 378000000, 392000000, 406000000, 420000000, 434000000, 448000000, 462000000, 476000000, 490000000, 504000000, 518000000, 532000000, 546000000,
	560000000, 574000000, 588000000, 602000000, 616000000, 630000000, 644000000, 658000000, 672000000, 686000000, 700000000, 714000000, 728000000, 742000000, 756000000, 770000000, 784000000, 798000000, 812000000, 826000000,
	840000000, 854000000, 868000000, 882000000, 896000000, 910000000, 924000000, 938000000, 952000000, 966000000, 980000000, 994000000, 1008000000, 1022000000, 1036000000, 1050000000, 1064000000, 1078000000, 1092000000, 1106000000,
	1120000000, 1134000000, 1148000000, 1162000000, 1176000000, 1190000000, 1204000000, 1218000000, 1232000000, 1246000000, 1260000000, 1274000000, 1288000000, 1302000000, 1316000000, 1330000000, 1344000000, 1358000000, 1372000000, 1386000000,
	1400000000, 1414000000, 1428000000, 1442000000, 1456000000, 1470000000, 1484000000, 1498000000, 1512000000, 1526000000, 1540000000, 1554000000, 1568000000, 1582000000, 1596000000, 1610000000, 1624000000, 1638000000, 1652000000, 1666000000,
	1680000000, 1694000000, 1708000000, 1722000000, 1736000000, 1750000000, 1764000000, 1778000000, 1792000000, 1806000000, 1820000000, 1834000000, 1848000000, 1862000000, 1876000000, 1890000000, 1904000000, 1918000000, 1932000000, 1946000000,
	1960000000, 1974000000, 1988000000, 2002000000, 2016000000, 2030000000, 2044000000, 2058000000, 2072000000, 2086000000, 2100000000, 14000000, 28000000, 42000000, 56000000, 70000000, 84000000, 98000000, 112000000, 126000000, 140000000, 154000000, 16800000,
	280000000, 294000000, 308000000, 322000000, 336000000, 350000000, 364000000, 378000000, 392000000, 406000000, 420000000, 434000000, 448000000, 462000000, 476000000, 490000000, 504000000, 518000000, 532000000, 546000000,
	560000000, 574000000, 588000000, 602000000, 616000000, 630000000, 644000000, 658000000, 672000000, 686000000, 700000000, 714000000, 728000000, 742000000, 756000000, 770000000, 784000000, 798000000, 812000000, 826000000,
	840000000, 854000000, 868000000, 882000000, 896000000, 910000000, 924000000, 938000000, 952000000, 966000000, 980000000, 994000000, 1008000000, 1022000000, 1036000000, 1050000000, 1064000000, 1078000000, 1092000000, 1106000000,
	1120000000, 1134000000, 1148000000, 1162000000, 1176000000, 1190000000, 1204000000, 1218000000, 1232000000, 1246000000, 1260000000, 1274000000, 1288000000, 1302000000, 1316000000, 1330000000, 1344000000, 1358000000, 1372000000, 1386000000,
	1400000000, 1414000000, 1428000000, 1442000000, 1456000000, 1470000000, 1484000000, 1498000000, 1512000000, 1526000000, 1540000000, 1554000000, 1568000000, 1582000000, 1596000000, 1610000000, 1624000000, 1638000000, 1652000000, 1666000000,
	1680000000, 1694000000, 1708000000, 1722000000, 1736000000, 1750000000, 1764000000, 1778000000, 1792000000, 1806000000, 1820000000, 1834000000, 1848000000, 1862000000, 1876000000, 1890000000, 1904000000, 1918000000, 1932000000, 1946000000,
	1960000000, 1974000000, 1988000000, 2002000000, 2016000000, 2030000000, 2044000000, 2058000000, 2072000000, 2086000000, 2100000000, 14000000, 28000000, 42000000, 56000000, 70000000, 84000000, 98000000, 112000000, 126000000, 140000000, 154000000, 16800000,
	280000000, 294000000, 308000000, 322000000, 336000000, 350000000, 364000000, 378000000, 392000000, 406000000, 420000000, 434000000, 448000000, 462000000, 476000000, 490000000, 504000000, 518000000, 532000000, 546000000,
	560000000, 574000000, 588000000, 602000000, 616000000, 630000000, 644000000, 658000000, 672000000, 686000000, 700000000, 714000000, 728000000, 742000000, 756000000, 770000000, 784000000, 798000000, 812000000, 826000000,
	840000000, 854000000, 868000000, 882000000, 896000000, 910000000, 924000000, 938000000, 952000000, 966000000, 980000000, 994000000, 1008000000, 1022000000, 1036000000, 1050000000, 1064000000, 1078000000, 1092000000, 1106000000,
	1120000000, 1134000000, 1148000000, 1162000000, 1176000000, 1190000000, 1204000000, 1218000000, 1232000000, 1246000000, 1260000000, 1274000000, 1288000000, 1302000000, 1316000000, 1330000000, 1344000000, 1358000000, 1372000000, 1386000000,
	1400000000, 1414000000, 1428000000, 1442000000, 1456000000, 1470000000, 1484000000, 1498000000, 1512000000, 1526000000, 1540000000, 1554000000, 1568000000, 1582000000, 1596000000, 1610000000, 1624000000, 1638000000, 1652000000, 1666000000,
	1680000000, 1694000000, 1708000000, 1722000000, 1736000000, 1750000000, 1764000000, 1778000000, 1792000000, 1806000000, 1820000000, 1834000000, 1848000000, 1862000000, 1876000000, 1890000000, 1904000000, 1918000000, 1932000000, 1946000000,
	1960000000, 1974000000, 1988000000, 2002000000, 2016000000, 2030000000, 2044000000, 2058000000, 2072000000, 2086000000, 2100000000, 14000000, 28000000, 42000000, 56000000, 70000000, 84000000, 98000000, 112000000, 126000000, 140000000, 154000000, 16800000,
	280000000, 294000000, 308000000, 322000000, 336000000, 350000000, 364000000, 378000000, 392000000, 406000000, 420000000, 434000000, 448000000, 462000000, 476000000, 490000000, 504000000, 518000000, 532000000, 546000000,
	560000000, 574000000, 588000000, 602000000, 616000000, 630000000, 644000000, 658000000, 672000000, 686000000, 700000000, 714000000, 728000000, 742000000, 756000000, 770000000, 784000000, 798000000, 812000000, 826000000,
	840000000, 854000000, 868000000, 882000000, 896000000, 910000000, 924000000, 938000000, 952000000, 966000000, 980000000, 994000000, 1008000000, 1022000000, 1036000000, 1050000000, 1064000000, 1078000000, 1092000000, 1106000000,
	1120000000, 1134000000, 1148000000, 1162000000, 1176000000, 1190000000, 1204000000, 1218000000, 1232000000, 1246000000, 1260000000, 1274000000, 1288000000, 1302000000, 1316000000, 1330000000, 1344000000, 1358000000, 1372000000, 1386000000,
	1400000000, 1414000000, 1428000000, 1442000000, 1456000000, 1470000000, 1484000000, 1498000000, 1512000000, 1526000000, 1540000000, 1554000000, 1568000000, 1582000000, 1596000000, 1610000000, 1624000000, 1638000000, 1652000000, 1666000000,
	1680000000, 1694000000, 1708000000, 1722000000, 1736000000, 1750000000, 1764000000, 1778000000, 1792000000, 1806000000, 1820000000, 1834000000, 1848000000, 1862000000, 1876000000, 1890000000, 1904000000, 1918000000, 1932000000, 1946000000,
	1960000000, 1974000000, 1988000000, 2002000000, 2016000000, 2030000000, 2044000000, 2058000000, 2072000000, 2086000000, 2100000000, 14000000, 28000000, 42000000, 56000000, 70000000, 84000000, 98000000, 112000000, 126000000, 140000000, 154000000, 16800000,
	280000000, 294000000, 308000000, 322000000, 336000000, 350000000, 364000000, 378000000, 392000000, 406000000, 420000000, 434000000, 448000000, 462000000, 476000000, 490000000, 504000000, 518000000, 532000000, 546000000,
	560000000, 574000000, 588000000, 602000000, 616000000, 630000000, 644000000, 658000000, 672000000, 686000000, 700000000, 714000000, 728000000, 742000000, 756000000, 770000000, 784000000, 798000000, 812000000, 826000000,
	840000000, 854000000, 868000000, 882000000, 896000000, 910000000, 924000000, 938000000, 952000000, 966000000, 980000000, 994000000, 1008000000, 1022000000, 1036000000, 1050000000, 1064000000, 1078000000, 1092000000, 1106000000,
	1120000000, 1134000000, 1148000000, 1162000000, 1176000000, 1190000000, 1204000000, 1218000000, 1232000000, 1246000000, 1260000000, 1274000000, 1288000000, 1302000000, 1316000000, 1330000000, 1344000000, 1358000000, 1372000000, 1386000000,
	1400000000, 1414000000, 1428000000, 1442000000, 1456000000, 1470000000, 1484000000, 1498000000, 1512000000, 1526000000, 1540000000, 1554000000, 1568000000, 1582000000, 1596000000, 1610000000, 1624000000, 1638000000, 1652000000, 1666000000,
	1680000000, 1694000000, 1708000000, 1722000000, 1736000000, 1750000000, 1764000000, 1778000000, 1792000000, 1806000000, 1820000000, 1834000000, 1848000000, 1862000000, 1876000000, 1890000000, 1904000000, 1918000000, 1932000000, 1946000000,
	1960000000, 1974000000, 1988000000, 2002000000, 2016000000, 2030000000, 2044000000, 2058000000, 2072000000, 2086000000, 2100000000, 14000000, 28000000, 42000000, 56000000, 70000000, 84000000, 98000000, 112000000, 126000000, 140000000, 154000000, 16800000,
	280000000, 294000000, 308000000, 322000000, 336000000, 350000000, 364000000, 378000000, 392000000, 406000000, 420000000, 434000000, 448000000, 462000000, 476000000, 490000000, 504000000, 518000000, 532000000, 546000000,
	560000000, 574000000, 588000000, 602000000, 616000000, 630000000, 644000000, 658000000, 672000000, 686000000, 700000000, 714000000, 728000000, 742000000, 756000000, 770000000, 784000000, 798000000, 812000000, 826000000,
	840000000, 854000000, 868000000, 882000000, 896000000, 910000000, 924000000, 938000000, 952000000, 966000000, 980000000, 994000000, 1008000000, 1022000000, 1036000000, 1050000000, 1064000000, 1078000000, 1092000000, 1106000000,
	1120000000, 1134000000, 1148000000, 1162000000, 1176000000, 1190000000, 1204000000, 1218000000, 1232000000, 1246000000, 1260000000, 1274000000, 1288000000, 1302000000, 1316000000, 1330000000, 1344000000, 1358000000, 1372000000, 1386000000,
	1400000000, 1414000000, 1428000000, 1442000000, 1456000000, 1470000000, 1484000000, 1498000000, 1512000000, 1526000000, 1540000000, 1554000000, 1568000000, 1582000000, 1596000000, 1610000000, 1624000000, 1638000000, 1652000000, 1666000000,
	1680000000, 1694000000, 1708000000, 1722000000, 1736000000, 1750000000, 1764000000, 1778000000, 1792000000, 1806000000, 1820000000, 1834000000, 1848000000, 1862000000, 1876000000, 1890000000, 1904000000, 1918000000, 1932000000, 1946000000,
	1960000000, 1974000000, 2100000000, // 4000
	
	21000000, 42000000, 63000000, 84000000, 105000000, 126000000, 147000000, 168000000, 189000000, 210000000, 231000000, 252000000, 273000000, 294000000, 315000000, 336000000, 357000000, 378000000, 399000000,
	420000000, 441000000, 462000000, 483000000, 504000000, 525000000, 546000000, 567000000, 588000000, 609000000, 630000000, 651000000, 672000000, 693000000, 714000000, 735000000, 756000000, 777000000, 798000000, 819000000,
	840000000, 861000000, 882000000, 903000000, 924000000, 945000000, 966000000, 987000000, 1008000000, 1029000000, 1050000000, 1071000000, 1092000000, 1113000000, 1134000000, 1155000000, 1176000000, 1197000000, 1218000000, 1239000000,
	1260000000, 1281000000, 1302000000, 1323000000, 1344000000, 1365000000, 1386000000, 1407000000, 1428000000, 1449000000, 1470000000, 1491000000, 1512000000, 1533000000, 1554000000, 1575000000, 1596000000, 1617000000, 1638000000, 1659000000,
	1680000000, 1701000000, 1722000000, 1743000000, 1764000000, 1785000000, 1806000000, 1827000000, 1848000000, 1869000000, 1890000000, 1911000000, 1932000000, 1953000000, 1974000000, 1995000000, 2016000000, 2037000000, 2058000000, 2079000000,
	2100000000, 21000000, 42000000, 63000000, 84000000, 105000000, 126000000, 147000000, 168000000, 189000000, 210000000, 231000000, 252000000, 273000000, 294000000, 315000000, 336000000, 357000000, 378000000, 399000000,
	420000000, 441000000, 462000000, 483000000, 504000000, 525000000, 546000000, 567000000, 588000000, 609000000, 630000000, 651000000, 672000000, 693000000, 714000000, 735000000, 756000000, 777000000, 798000000, 819000000,
	840000000, 861000000, 882000000, 903000000, 924000000, 945000000, 966000000, 987000000, 1008000000, 1029000000, 1050000000, 1071000000, 1092000000, 1113000000, 1134000000, 1155000000, 1176000000, 1197000000, 1218000000, 1239000000,
	1260000000, 1281000000, 1302000000, 1323000000, 1344000000, 1365000000, 1386000000, 1407000000, 1428000000, 1449000000, 1470000000, 1491000000, 1512000000, 1533000000, 1554000000, 1575000000, 1596000000, 1617000000, 1638000000, 1659000000,
	1680000000, 1701000000, 1722000000, 1743000000, 1764000000, 1785000000, 1806000000, 1827000000, 1848000000, 1869000000, 1890000000, 1911000000, 1932000000, 1953000000, 1974000000, 1995000000, 2016000000, 2037000000, 2058000000, 2079000000,
	2100000000, 21000000, 42000000, 63000000, 84000000, 105000000, 126000000, 147000000, 168000000, 189000000, 210000000, 231000000, 252000000, 273000000, 294000000, 315000000, 336000000, 357000000, 378000000, 399000000,
	420000000, 441000000, 462000000, 483000000, 504000000, 525000000, 546000000, 567000000, 588000000, 609000000, 630000000, 651000000, 672000000, 693000000, 714000000, 735000000, 756000000, 777000000, 798000000, 819000000,
	840000000, 861000000, 882000000, 903000000, 924000000, 945000000, 966000000, 987000000, 1008000000, 1029000000, 1050000000, 1071000000, 1092000000, 1113000000, 1134000000, 1155000000, 1176000000, 1197000000, 1218000000, 1239000000,
	1260000000, 1281000000, 1302000000, 1323000000, 1344000000, 1365000000, 1386000000, 1407000000, 1428000000, 1449000000, 1470000000, 1491000000, 1512000000, 1533000000, 1554000000, 1575000000, 1596000000, 1617000000, 1638000000, 1659000000,
	1680000000, 1701000000, 1722000000, 1743000000, 1764000000, 1785000000, 1806000000, 1827000000, 1848000000, 1869000000, 1890000000, 1911000000, 1932000000, 1953000000, 1974000000, 1995000000, 2016000000, 2037000000, 2058000000, 2079000000,
	2100000000, 21000000, 42000000, 63000000, 84000000, 105000000, 126000000, 147000000, 168000000, 189000000, 210000000, 231000000, 252000000, 273000000, 294000000, 315000000, 336000000, 357000000, 378000000, 399000000,
	420000000, 441000000, 462000000, 483000000, 504000000, 525000000, 546000000, 567000000, 588000000, 609000000, 630000000, 651000000, 672000000, 693000000, 714000000, 735000000, 756000000, 777000000, 798000000, 819000000,
	840000000, 861000000, 882000000, 903000000, 924000000, 945000000, 966000000, 987000000, 1008000000, 1029000000, 1050000000, 1071000000, 1092000000, 1113000000, 1134000000, 1155000000, 1176000000, 1197000000, 1218000000, 1239000000,
	1260000000, 1281000000, 1302000000, 1323000000, 1344000000, 1365000000, 1386000000, 1407000000, 1428000000, 1449000000, 1470000000, 1491000000, 1512000000, 1533000000, 1554000000, 1575000000, 1596000000, 1617000000, 1638000000, 1659000000,
	1680000000, 1701000000, 1722000000, 1743000000, 1764000000, 1785000000, 1806000000, 1827000000, 1848000000, 1869000000, 1890000000, 1911000000, 1932000000, 1953000000, 1974000000, 1995000000, 2016000000, 2037000000, 2058000000, 2079000000,
	2100000000, 21000000, 42000000, 63000000, 84000000, 105000000, 126000000, 147000000, 168000000, 189000000, 210000000, 231000000, 252000000, 273000000, 294000000, 315000000, 336000000, 357000000, 378000000, 399000000,
	420000000, 441000000, 462000000, 483000000, 504000000, 525000000, 546000000, 567000000, 588000000, 609000000, 630000000, 651000000, 672000000, 693000000, 714000000, 735000000, 756000000, 777000000, 798000000, 819000000,
	840000000, 861000000, 882000000, 903000000, 924000000, 945000000, 966000000, 987000000, 1008000000, 1029000000, 1050000000, 1071000000, 1092000000, 1113000000, 1134000000, 1155000000, 1176000000, 1197000000, 1218000000, 1239000000,
	1260000000, 1281000000, 1302000000, 1323000000, 1344000000, 1365000000, 1386000000, 1407000000, 1428000000, 1449000000, 1470000000, 1491000000, 1512000000, 1533000000, 1554000000, 1575000000, 1596000000, 1617000000, 1638000000, 1659000000,
	1680000000, 1701000000, 1722000000, 1743000000, 1764000000, 1785000000, 1806000000, 1827000000, 1848000000, 1869000000, 1890000000, 1911000000, 1932000000, 1953000000, 1974000000, 1995000000, 2016000000, 2037000000, 2058000000, 2079000000,
	2100000000, 21000000, 42000000, 63000000, 84000000, 105000000, 126000000, 147000000, 168000000, 189000000, 210000000, 231000000, 252000000, 273000000, 294000000, 315000000, 336000000, 357000000, 378000000, 399000000,
	420000000, 441000000, 462000000, 483000000, 504000000, 525000000, 546000000, 567000000, 588000000, 609000000, 630000000, 651000000, 672000000, 693000000, 714000000, 735000000, 756000000, 777000000, 798000000, 819000000,
	840000000, 861000000, 882000000, 903000000, 924000000, 945000000, 966000000, 987000000, 1008000000, 1029000000, 1050000000, 1071000000, 1092000000, 1113000000, 1134000000, 1155000000, 1176000000, 1197000000, 1218000000, 1239000000,
	1260000000, 1281000000, 1302000000, 1323000000, 1344000000, 1365000000, 1386000000, 1407000000, 1428000000, 1449000000, 1470000000, 1491000000, 1512000000, 1533000000, 1554000000, 1575000000, 1596000000, 1617000000, 1638000000, 1659000000,
	1680000000, 1701000000, 1722000000, 1743000000, 1764000000, 1785000000, 1806000000, 1827000000, 1848000000, 1869000000, 1890000000, 1911000000, 1932000000, 1953000000, 1974000000, 1995000000, 2016000000, 2037000000, 2058000000, 2079000000,
	2100000000, 21000000, 42000000, 63000000, 84000000, 105000000, 126000000, 147000000, 168000000, 189000000, 210000000, 231000000, 252000000, 273000000, 294000000, 315000000, 336000000, 357000000, 378000000, 399000000,
	420000000, 441000000, 462000000, 483000000, 504000000, 525000000, 546000000, 567000000, 588000000, 609000000, 630000000, 651000000, 672000000, 693000000, 714000000, 735000000, 756000000, 777000000, 798000000, 819000000,
	840000000, 861000000, 882000000, 903000000, 924000000, 945000000, 966000000, 987000000, 1008000000, 1029000000, 1050000000, 1071000000, 1092000000, 1113000000, 1134000000, 1155000000, 1176000000, 1197000000, 1218000000, 1239000000,
	1260000000, 1281000000, 1302000000, 1323000000, 1344000000, 1365000000, 1386000000, 1407000000, 1428000000, 1449000000, 1470000000, 1491000000, 1512000000, 1533000000, 1554000000, 1575000000, 1596000000, 1617000000, 1638000000, 1659000000,
	1680000000, 1701000000, 1722000000, 1743000000, 1764000000, 1785000000, 1806000000, 1827000000, 1848000000, 1869000000, 1890000000, 1911000000, 1932000000, 1953000000, 1974000000, 1995000000, 2016000000, 2037000000, 2058000000, 2079000000,
	2100000000, 21000000, 42000000, 63000000, 84000000, 105000000, 126000000, 147000000, 168000000, 189000000, 210000000, 231000000, 252000000, 273000000, 294000000, 315000000, 336000000, 357000000, 378000000, 399000000,
	420000000, 441000000, 462000000, 483000000, 504000000, 525000000, 546000000, 567000000, 588000000, 609000000, 630000000, 651000000, 672000000, 693000000, 714000000, 735000000, 756000000, 777000000, 798000000, 819000000,
	840000000, 861000000, 882000000, 903000000, 924000000, 945000000, 966000000, 987000000, 1008000000, 1029000000, 1050000000, 1071000000, 1092000000, 1113000000, 1134000000, 1155000000, 1176000000, 1197000000, 1218000000, 1239000000,
	1260000000, 1281000000, 1302000000, 1323000000, 1344000000, 1365000000, 1386000000, 1407000000, 1428000000, 1449000000, 1470000000, 1491000000, 1512000000, 1533000000, 1554000000, 1575000000, 1596000000, 1617000000, 1638000000, 1659000000,
	1680000000, 1701000000, 1722000000, 1743000000, 1764000000, 1785000000, 1806000000, 1827000000, 1848000000, 1869000000, 1890000000, 1911000000, 1932000000, 1953000000, 1974000000, 1995000000, 2016000000, 2037000000, 2058000000, 2079000000,
	2100000000, 21000000, 42000000, 63000000, 84000000, 105000000, 126000000, 147000000, 168000000, 189000000, 210000000, 231000000, 252000000, 273000000, 294000000, 315000000, 336000000, 357000000, 378000000, 399000000,
	420000000, 441000000, 462000000, 483000000, 504000000, 525000000, 546000000, 567000000, 588000000, 609000000, 630000000, 651000000, 672000000, 693000000, 714000000, 735000000, 756000000, 777000000, 798000000, 819000000,
	840000000, 861000000, 882000000, 903000000, 924000000, 945000000, 966000000, 987000000, 1008000000, 1029000000, 1050000000, 1071000000, 1092000000, 1113000000, 1134000000, 1155000000, 1176000000, 1197000000, 1218000000, 1239000000,
	1260000000, 1281000000, 1302000000, 1323000000, 1344000000, 1365000000, 1386000000, 1407000000, 1428000000, 1449000000, 1470000000, 1491000000, 1512000000, 1533000000, 1554000000, 1575000000, 1596000000, 1617000000, 1638000000, 1659000000,
	1680000000, 1701000000, 1722000000, 1743000000, 1764000000, 1785000000, 1806000000, 1827000000, 1848000000, 1869000000, 1890000000, 1911000000, 1932000000, 1953000000, 1974000000, 1995000000, 2016000000, 2037000000, 2058000000, 2079000000,
	2100000000, 21000000, 42000000, 63000000, 84000000, 105000000, 126000000, 147000000, 168000000, 189000000, 210000000, 231000000, 252000000, 273000000, 294000000, 315000000, 336000000, 357000000, 378000000, 399000000,
	420000000, 441000000, 462000000, 483000000, 504000000, 525000000, 546000000, 567000000, 588000000, 609000000, 630000000, 651000000, 672000000, 693000000, 714000000, 735000000, 756000000, 777000000, 798000000, 819000000,
	840000000, 861000000, 882000000, 903000000, 924000000, 945000000, 966000000, 987000000, 1008000000, 1029000000, 1050000000, 1071000000, 1092000000, 1113000000, 1134000000, 1155000000, 1176000000, 1197000000, 1218000000, 1239000000,
	1260000000, 1281000000, 1302000000, 1323000000, 1344000000, 1365000000, 1386000000, 1407000000, 1428000000, 1449000000, 1470000000, 1491000000, 1512000000, 1533000000, 1554000000, 1575000000, 1596000000, 1617000000, 1638000000, 1659000000,
	1680000000, 1701000000, 1722000000, 1743000000, 1764000000, 1785000000, 1806000000, 1827000000, 1848000000, 1869000000, 1890000000, 1911000000, 1932000000, 1953000000, 1974000000, 1995000000, 2016000000, 2037000000, 2058000000, 2079000000,
	2100000000, // 5000
	
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	28000000, 56000000, 84000000, 112000000, 140000000, 168000000, 196000000, 224000000, 252000000, 280000000, 308000000, 336000000, 364000000, 392000000, 420000000, 448000000, 476000000, 504000000, 532000000, 560000000,
	588000000, 616000000, 644000000, 672000000, 700000000, 728000000, 756000000, 784000000, 812000000, 840000000, 868000000, 896000000, 924000000, 952000000, 980000000, 1008000000, 1036000000, 1064000000, 1092000000, 1120000000,
	1148000000, 1176000000, 1204000000, 1232000000, 1260000000, 1288000000, 1316000000, 1344000000, 1372000000, 1400000000, 1428000000, 1456000000, 1484000000, 1512000000, 1540000000, 1568000000, 1596000000, 1624000000, 1652000000, 1680000000,
	1708000000, 1736000000, 1764000000, 1792000000, 1820000000, 1848000000, 1876000000, 1904000000, 1932000000, 1960000000, 1988000000, 2016000000, 2044000000, 2072000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000, // 6000

	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000,
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000,
	42000000, 84000000, 126000000, 168000000, 210000000, 252000000, 294000000, 336000000, 378000000, 420000000, 462000000, 504000000, 546000000, 588000000, 630000000, 672000000, 714000000, 756000000, 798000000, 840000000,
	882000000, 924000000, 966000000, 1008000000, 1050000000, 1092000000, 1134000000, 1176000000, 1218000000, 1260000000, 1302000000, 1344000000, 1386000000, 1428000000, 1470000000, 1512000000, 1554000000, 1596000000, 1638000000, 1680000000, 
	1722000000, 1764000000, 1806000000, 1848000000, 1890000000, 1932000000, 1974000000, 2016000000, 2058000000, 2100000000, // 7000

	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000,
	84000000, 168000000, 252000000, 336000000, 420000000, 504000000, 588000000, 672000000, 756000000, 840000000, 924000000, 1008000000, 1092000000, 1176000000, 1260000000, 1344000000, 1428000000, 1512000000, 1596000000, 1680000000,
	1764000000, 1848000000, 1932000000, 2016000000, 2100000000, // 8000

	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, // 9000

	210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000, 210000000, 420000000, 630000000, 840000000, 1050000000, 1260000000, 1470000000, 1680000000, 1890000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000,
	420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, 420000000, 840000000, 1260000000, 1680000000, 2100000000, // 10000
	
	9999999999
};

enum _:Grenades (+= 1111) {
	NADE_TYPE_INFECTION = 1111,
	NADE_TYPE_NAPALM,
	NADE_TYPE_FROST,
	NADE_TYPE_FLARE,
	NADE_TYPE_KILL,
	NADE_TYPE_MADNESS,
	NADE_TYPE_NITRO,
	NADE_TYPE_BUBBLE,
	NADE_TYPE_ANTIDOTE,
	NADE_TYPE_SUPERNOVA,
	NADE_TYPE_SUPERNOVA_PRO
};

const PRIMARY_WEAPONS_BIT_SUM = (1 << CSW_SCOUT)|(1 << CSW_XM1014)|(1 << CSW_MAC10)|(1 << CSW_AUG)|(1 << CSW_UMP45)|(1 << CSW_SG550)|(1 << CSW_GALIL)|(1 << CSW_FAMAS)|
(1 << CSW_AWP)|(1 << CSW_MP5NAVY)|(1 << CSW_M249)|(1 << CSW_M3)|(1 << CSW_M4A1)|(1 << CSW_TMP)|(1 << CSW_G3SG1)|(1 << CSW_SG552)|(1 << CSW_AK47)|(1 << CSW_P90);

const SECONDARY_WEAPONS_BIT_SUM = (1 << CSW_P228)|(1 << CSW_ELITE)|(1 << CSW_FIVESEVEN)|(1 << CSW_USP)|(1 << CSW_GLOCK18)|(1 << CSW_DEAGLE);
const ZOMBIE_ALLOWED_WEAPONS_BITSUM = (1<<CSW_KNIFE)|(1<<CSW_HEGRENADE)|(1<<CSW_FLASHBANG)|(1<<CSW_SMOKEGRENADE)|(1<<CSW_C4)|(1 << CSW_AK47)|(1 << CSW_MAC10);
const HIDE_WEAPONS_BITSUM = (1<<CSW_KNIFE)|(1<<CSW_HEGRENADE)|(1<<CSW_FLASHBANG)|(1<<CSW_SMOKEGRENADE);
const WEAPONS_SILENT_BIT_SUM = (1 << CSW_USP)|(1 << CSW_M4A1);

const KEYSMENU = MENU_KEY_1|MENU_KEY_2|MENU_KEY_3|MENU_KEY_4|MENU_KEY_5|MENU_KEY_6|MENU_KEY_7|MENU_KEY_8|MENU_KEY_9|MENU_KEY_0;

enum _:ZombiesStruct {
	zombieName[32],
	zombieModel[64],
	zombieModelClaws[64],
	zombieLevel,
	zombieHealth,
	Float:zombieSpeed,
	Float:zombieGravity
};
new const CLASES_ZOMBIE[][ZombiesStruct] = {
	{"Moe", "tcs_zombie_1", "models/zombie_plague/v_knife_zombie.mdl", 1, 50000, 250.0, 1.0},
	{"Traful", "tcs_zombie_2", "models/zombie_plague/tcs_garras_1.mdl", 25, 51000, 250.5, 0.98},
	{"Mark", "tcs_zombie_3", "models/zombie_plague/tcs_garras_2.mdl", 50, 52000, 251.0, 0.96},
	{"Bacon", "tcs_zombie_5", "models/zombie_plague/tcs_garras_3.mdl", 75, 53000, 251.5, 0.94},
	{"SheKa", "tcs_zombie_6", "models/zombie_plague/tcs_garras_3.mdl", 100, 54000, 252.0, 0.92},
	{"Adam", "tcs_zombie_7", "models/zombie_plague/tcs_garras_4.mdl", 125, 55000, 252.5, 0.9},
	{"Andrew", "tcs_zombie_8", "models/zombie_plague/tcs_garras_5.mdl", 150, 56000, 253.0, 0.88},
	{"Christopher", "tcs_zombie_9", "models/zombie_plague/tcs_garras_8.mdl", 175, 60000, 253.5, 0.86},
	{"Gael", "tcs_zombie_10", "models/zombie_plague/tcs_garras_8.mdl", 200, 65000, 254.0, 0.84},
	{"Joseph", "tcs_zombie_11", "models/zombie_plague/tcs_garras_9.mdl", 225, 70000, 254.5, 0.82},
	{"Matthew", "tcs_zombie_12", "models/zombie_plague/tcs_garras_10.mdl", 250, 75000, 255.0, 0.8},
	{"Milton", "tcs_zombie_13", "models/zombie_plague/tcs_garras_15.mdl", 275, 80000, 255.5, 0.78},
	{"Nathan", "tcs_zombie_16", "models/zombie_plague/tcs_garras_15.mdl", 300, 85000, 256.0, 0.76},
	{"Oliver", "tcs_zombie_17", "models/zombie_plague/tcs_garras_16.mdl", 325, 90000, 256.5, 0.74},
	{"Paul", "tcs_zombie_19", "models/zombie_plague/tcs_garras_16.mdl", 350, 95000, 257.0, 0.72},
	{"Robinson", "gk_zombie_00", "models/zp5/v_zombie_claw_00.mdl", 375, 100000, 257.5, 0.7},
	{"Ryan", "gk_zombie_01", "models/zp5/v_zombie_claw_00.mdl", 400, 105000, 258.0, 0.68},
	{"Stephen", "gk_zombie_02", "models/zp5/v_zombie_claw_01.mdl", 450, 110000, 258.5, 0.66},
	{"Benjamín", "gk_zombie_04", "models/zp5/v_zombie_claw_01.mdl", 500, 115000, 259.0, 0.64},
	{"Dante", "gk_zombie_05", "models/zp5/v_zombie_claw_02.mdl", 600, 120000, 259.5, 0.62},
	{"Amario", "gk_zombie_06", "models/zp5/v_zombie_claw_02.mdl", 700, 125000, 260.0, 0.6},
	{"Alban", "gk_zombie_07", "models/zp5/v_zombie_claw_03.mdl", 800, 130000, 261.0, 0.58},
	{"Allen", "gk_zombie_08", "models/zp5/v_zombie_claw_03.mdl", 900, 135000, 262.0, 0.56},
	{"Bill", "gk_zombie_09", "models/zp5/v_chainsaw.mdl", 1001, 140000, 263.0, 0.54},
	{"Brad", "gk_zombie_10", "models/zp5/v_zombie_claw_05.mdl", 1100, 145000, 264.0, 0.52},
	{"Cooper", "gk_zombie_11", "models/zp5/v_zombie_claw_04.mdl", 1200, 150000, 265.0, 0.5},
	{"Derek", "gk_zombie_12", "models/zp5/v_zombie_claw_06.mdl", 1300, 155000, 266.0, 0.48},
	{"Marshall", "gk_zombie_13", "models/zp5/v_zombie_claw_07.mdl", 1400, 160000, 267.0, 0.46},
	{"Melvin", "gk_zombie_03", "models/zp5/v_zombie_claw_07.mdl", 1500, 165000, 268.0, 0.44},
	{"Dr. Jekyll", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 1600, 170000, 270.0, 0.4},
	{"Bryony", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 1700, 175000, 271.0, 0.4},
	{"Franklin", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 1800, 180000, 272.0, 0.4},
	{"Arhon", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 1900, 185000, 273.0, 0.39},
	{"Gary", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 2001, 190000, 274.0, 0.39},
	{"Garen", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 2100, 195000, 275.0, 0.39},
	{"Homer", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 2200, 200000, 276.0, 0.38},
	{"Lubert", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 2300, 205000, 277.0, 0.38},
	{"Isaac", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 2400, 210000, 278.0, 0.38},
	{"Justin", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 2500, 215000, 279.0, 0.37},
	{"Kerry", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 2600, 220000, 280.0, 0.37},
	{"Luke", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 2700, 225000, 281.0, 0.37},
	{"Owen", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 2800, 230000, 282.0, 0.36},
	{"Swan", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 2900, 235000, 283.0, 0.36},
	{"Smith", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 3001, 240000, 284.0, 0.36},
	{"Tony", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 3100, 245000, 285.0, 0.35},
	{"Vincent", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 3200, 250000, 286.0, 0.35},
	{"Weskey", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 3450, 255000, 287.0, 0.35},
	{"Zephyr", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 3600, 260000, 288.0, 0.34},
	{"Hans", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 3750, 265000, 289.0, 0.34},
	{"Tyco", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 4001, 300000, 290.0, 0.34},
	{"Adolf", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 4100, 305000, 291.0, 0.33},
	{"Atila", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 4200, 310000, 292.0, 0.33},
	{"Brendan", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 4300, 315000, 293.0, 0.33},
	{"Jet Li", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 4400, 320000, 294.0, 0.32},
	{"Luke", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 4500, 325000, 295.0, 0.32},
	{"Liam", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 4600, 330000, 296.0, 0.32},
	{"Cooper", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 4700, 335000, 297.0, 0.31},
	{"Michael", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 4800, 340000, 298.0, 0.31},
	{"Kyra", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 4900, 345000, 299.0, 0.31},
	{"Snyder", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 4999, 350000, 300.0, 0.3},
	
	{"Glewin", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 5200, 355000, 300.2, 0.3},
	{"Raken", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 5400, 360000, 300.4, 0.3},
	{"Pax", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 5600, 365000, 300.6, 0.3},
	{"Graham", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 5800, 370000, 300.8, 0.3},
	{"Ryan", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 6001, 375000, 301.0, 0.3},
	
	{"Jairo", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 6200, 380000, 301.2, 0.3},
	{"Woody", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 6400, 385000, 301.4, 0.3},
	{"Leslie", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 6600, 390000, 301.6, 0.3},
	{"Yael", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 6800, 395000, 301.8, 0.3},
	{"Hermano Adam", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 7001, 400000, 302.0, 0.3},
	
	{"Bernard", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 7200, 405000, 302.2, 0.3},
	{"Evan", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 7400, 410000, 302.4, 0.3},
	{"Eddy", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 7600, 415000, 302.6, 0.3},
	{"Erwin", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 7800, 420000, 302.8, 0.3},
	{"Darrel", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 8001, 425000, 303.0, 0.3},
	
	{"Vraadush", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 8200, 430000, 303.2, 0.3},
	{"Rogash", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 8400, 435000, 303.4, 0.3},
	{"Gork", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 8600, 440000, 303.6, 0.3},
	{"Bushnak", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 8800, 445000, 303.8, 0.3},
	{"Puurag", "gk_zombie_14", "models/zp5/v_zombie_claw_08.mdl", 9001, 450000, 304.0, 0.3}
};

enum _:HumansStruct {
	humanName[32],
	humanLevel,
	humanHealth,
	Float:humanSpeed,
	Float:humanGravity,
	humanDamage
};
new const CLASES_HUMANAS[][HumansStruct] = {
	{"Jack", 1, 100, 240.0, 1.0, 0},
	{"Rick", 25, 105, 241.0, 0.98, 3},
	{"Sparrow", 50, 110, 242.0, 0.96, 6},
	{"Barry", 75, 115, 243.0, 0.94, 9},
	{"Chris", 100, 120, 244.0, 0.92, 12},
	{"Deiv", 125, 125, 245.0, 0.9, 15},
	{"Thompson", 150, 130, 246.0, 0.88, 18},
	{"Nicolai", 175, 135, 247.0, 0.86, 21},
	{"Jhon", 200, 140, 248.0, 0.84, 24},
	{"Abraham", 225, 145, 249.0, 0.82, 27},
	{"Brad", 250, 150, 250.0, 0.8, 30},
	{"Calvin", 275, 155, 251.0, 0.78, 33},
	{"Chase", 300, 160, 252.0, 0.76, 36},
	{"Byron", 325, 165, 253.0, 0.74, 39},
	{"Darren", 350, 170, 254.0, 0.72, 42},
	{"Daryl", 375, 175, 255.0, 0.7, 45},
	{"Edward", 400, 180, 256.0, 0.68, 48},
	{"Franky", 450, 185, 257.0, 0.66, 51},
	{"Garry", 500, 190, 258.0, 0.64, 54},
	{"Henry", 600, 195, 259.0, 0.62, 57},
	{"Jefferson", 700, 200, 260.0, 0.6, 60},
	{"Andrew", 800, 210, 261.0, 0.58, 63},
	{"Ralph", 900, 220, 262.0, 0.56, 66},
	{"Renan", 1001, 230, 263.0, 0.54, 69},
	{"Ringo", 1100, 240, 264.0, 0.52, 72},
	{"Scott", 1200, 250, 265.0, 0.5, 75},
	{"Smith", 1300, 260, 266.0, 0.48, 78},
	{"Taylor", 1400, 270, 267.0, 0.46, 81},
	{"Wallace", 1500, 280, 268.0, 0.44, 84},
	{"Yuri", 1600, 300, 270.0, 0.4, 87},
	{"Tinson", 1700, 300, 271.0, 0.39, 90},
	{"Mark", 1800, 305, 272.0, 0.39, 93},
	{"Donald", 1900, 310, 273.0, 0.39, 96},
	{"Moody", 2001, 315, 274.0, 0.38, 99},
	{"Steve", 2100, 320, 275.0, 0.38, 102},
	{"Smite", 2200, 325, 276.0, 0.38, 105},
	{"Sam", 2300, 330, 277.0, 0.37, 107},
	{"Robbie", 2400, 335, 278.0, 0.37, 110},
	{"James", 2500, 340, 279.0, 0.37, 113},
	{"Seth", 2600, 345, 280.0, 0.36, 116},
	{"Billy", 2700, 350, 281.0, 0.36, 119},
	{"Brandom", 2800, 355, 282.0, 0.36, 122},
	{"Joseph", 2900, 360, 283.0, 0.35, 125},
	{"Bryon", 3001, 365, 284.0, 0.35, 128},
	{"Chard", 3100, 370, 285.0, 0.35, 131},
	{"Cory", 3200, 375, 286.0, 0.34, 134},
	{"Cyrill", 3300, 380, 287.0, 0.34, 137},
	{"Evans", 3400, 385, 288.0, 0.34, 140},
	{"Derek", 3500, 390, 289.0, 0.33, 143},
	{"Cary", 3600, 395, 290.0, 0.33, 146},
	{"Cindy", 3700, 400, 291.0, 0.33, 149},
	{"Calvin", 3800, 405, 292.0, 0.32, 152},
	{"Ayrton", 3900, 410, 293.0, 0.32, 155},
	{"Austin", 4001, 415, 294.0, 0.32, 157},
	{"Adrien", 4100, 420, 295.0, 0.31, 160},
	{"Balthasar", 4200, 425, 296.0, 0.31, 163},
	{"Brent", 4300, 430, 297.0, 0.31, 166},
	{"Drake", 4400, 435, 298.0, 0.3, 169},
	{"Josh", 4500, 440, 299.0, 0.3, 172},
	{"Laigur", 4600, 445, 300.0, 0.3, 175},
	{"Skann", 4700, 450, 301.0, 0.3, 178},
	{"Tom", 4800, 455, 302.0, 0.3, 181},
	{"Wolf", 4900, 460, 303.0, 0.3, 183},
	{"Spenser", 4999, 500, 305.0, 0.3, 190},
	
	{"Waldo", 5200, 503, 305.2, 0.3, 192},
	{"Toby", 5400, 506, 305.4, 0.3, 194},
	{"Albert", 5600, 509, 305.6, 0.3, 196},
	{"Corleone", 5800, 512, 305.8, 0.3, 198},
	{"Hermano Andrew", 6001, 515, 306.0, 0.3, 200},
	
	{"Zero", 6200, 518, 306.2, 0.3, 203},
	{"John", 6400, 521, 306.4, 0.3, 206},
	{"Jordan", 6600, 524, 306.6, 0.3, 209},
	{"Raiden", 6800, 527, 306.8, 0.3, 212},
	{"Ulises", 7001, 530, 307.0, 0.3, 215},
	
	{"Oliver", 7200, 533, 307.2, 0.3, 218},
	{"Jordi", 7400, 536, 307.4, 0.3, 221},
	{"Hermano Edward", 7600, 539, 307.6, 0.3, 224},
	{"Sean", 7800, 542, 307.8, 0.3, 227},
	{"Hermano Abraham", 8001, 545, 308.0, 0.3, 230},
	
	{"Menegroth", 8200, 548, 308.2, 0.3, 233},
	{"Morgoth", 8400, 551, 308.4, 0.3, 236},
	{"Ungoliant", 8600, 554, 308.6, 0.3, 239},
	{"Vanyar", 8800, 558, 308.8, 0.3, 242},
	{"Mallorns", 9001, 561, 309.0, 0.3, 245}
};

#define ADD_ITEMS_HUMANS	2

// 14 ITEMS
enum _:ExtraItems {
	// HUMANOS
	EXTRA_NVISION = 0,
	EXTRA_LONGJUMP_H,
	EXTRA_BOMBKILL,
	EXTRA_GRAVITY,
	EXTRA_TRANSP,
	EXTRA_UNLIMITED_CLIP,
	EXTRA_ANTIDOTE_BOMB,
	EXTRA_PRECISION_SEMIPERFECTA,
	
	// ZOMBIES
	EXTRA_ANTIDOTE = 0,
	EXTRA_MADNESS,
	EXTRA_INFBOMB,
	EXTRA_LONGJUMP_Z,
	EXTRA_TOXICBOMB,
	EXTRA_REDUCEDMG
};
new const ITEMS_EXTRAS_HUMANS[][] = {"Visión nocturna", "Long Jump", "Bomba de aniquilación", "Gravedad disminuida", "Transparente (casi invisible)", "Balas infinitas", "Bomba antidoto", "Precisión Semi-Perfecta"};
new const ITEMS_EXTRAS_ZOMBIES[][] = {"Antidoto", "Furia", "Bomba de infección", "Long Jump", "Bomba tóxica", "Reducción de daño"};
new const COST_ITEMS_EXTRAS_HUMANS[] = {30, 15, 50, 15, 50, 30, 50, 30};
new const COST_ITEMS_EXTRAS_ZOMBIES[] = {30, 40, 50, 20, 50, 40};

enum _:TypeColors {
	COLOR_NIGHT = 0,
	COLOR_HUD,
	//COLOR_HUDCOMBO,
	COLOR_FLARE,
	COLOR_BAZOOKA,
	COLOR_BAZOOKA_SPECIAL,
	COLOR_LASER,
	COLOR_LASER_SPECIAL
};

enum _:MaxColors {
	RED = 0,
	GREEN,
	BLUE
};

enum _:TypePositions {
	POSITION_HUD = 0,
	POSITION_HUDCOMBO,
	POSITION_HUDGUILD
};

enum _:Pages {
	MENU_WEAPONS_PRIMARY = 0,
	MENU_WEAPONS_SECONDARY,
	MENU_WEAPONS_TERCIARY,
	MENU_ITEMS_EXTRAS,
	MENU_ZOMBIE_CLASS,
	MENU_HUMAN_CLASS,
	MENU_HABS_CLASS,
	MENU_COLORS,
	MENU_WEAPON_STATS,
	MENU_WEAPON_STATS_SUB,
	MENU_LOGROS_CLASS,
	MENU_LOGRO,
	MENU_LOGROS_CLASS_INT,
	MENU_STATS,
	MENU_META_LOGROS,
	MENU_META_LOGRO,
	MENU_GAME,
	MENU_LOGROS_PCLASS,
	MENU_DESAFIOS,
	MENU_DESAFIO,
	MENU_DUELO,
	MENU_TOPS15,
	MENU_EGG
};

enum _:MaxClassNormal {
	CLASS_HUMAN = 0,
	CLASS_ZOMBIE,
	CLASS_SURVIVOR,
	CLASS_NEMESIS,
	CLASS_FRAGMENTOS
};

enum _:MaxDificults {
	DIF_NORMAL = 0,
	DIF_DIFICIL,
	DIF_MUY_DIFICIL
}

enum _:MaxHabilitiesNormal {
	HAB_HEALTH = 0,
	HAB_SPEED,
	HAB_GRAVITY,
	HAB_DAMAGE,
	HAB_ARMOR,
	HAB_FLARE
};

enum _:MenuHabsStruct {
	menuName[15],
	className[20]
};
new const MENU_HABS[][MenuHabsStruct] = {
	{"HUMANAS", "PUNTOS HUMANOS"},
	{"ZOMBIE", "PUNTOS ZOMBIE"},
	{"SURVIVOR", "PUNTOS SURVIVOR"},
	{"NEMESIS", "PUNTOS NEMESIS"}
};

enum _:MaxHabilitiesFragmentos {
	WESKER_SUPER_LASER = 0,
	HUMAN_BUBBLE_DURATION,
	CHANGE_TYPE_BOMBS,
	JASON_DAMAGE,
	WESKER_COMBO,
	JASON_COMBO
};

new const MENU_HABS_FRAGMENTOS[][] = {
	"",
	"",
	"",
	"",
	"WESKER",
	"OTROS"
};

#define MAX_HABILITIES	6
new const MENU_HABS_NAMES[MaxClassNormal][MAX_HABILITIES][] = {
	{"VIDA", "VELOCIDAD", "GRAVEDAD", "DAÑO", "CHALECO", "AURA DE LUZ"}, // HUMANO
	{"VIDA", "VELOCIDAD", "GRAVEDAD", "DAÑO", "", ""}, // ZOMBIE
	{"ESTADÍSTICAS BASE", "DAÑO", "ARMA", "", "", ""}, // SURVIVOR
	{"ESTADÍSTICAS BASE", "DAÑO", "BAZOOKA MEJORADA", "", "", ""},  // NEMESIS
	{"", "", "", "", "", ""}
};
new const HABS_LEVELS[][MAX_HABILITIES] = {
	{50, 20, 20, 30, 20, 10},
	{100, 20, 20, 10, 0, 0},
	{10, 10, 2, 0, 0, 0},
	{10, 10, 1, 0, 0, 0}
};

#define AMOUNT_HEALTH_HUMAN(%1)	(CLASES_HUMANAS[g_human_class[%1]][humanHealth] + ((g_hab[%1][HAB_HEALTH][CLASS_HUMAN] + ((g_amuleto_equip[%1] != -1) ? (g_amuleto_stat1[%1][g_amuleto_equip[%1]][0]) : 0)) * 10))
#define AMOUNT_SPEED_HUMAN(%1)		(CLASES_HUMANAS[g_human_class[%1]][humanSpeed] + ((float(g_hab[%1][HAB_SPEED][CLASS_HUMAN]) + ((g_amuleto_equip[%1] != -1) ? (float(g_amuleto_stat1[%1][g_amuleto_equip[%1]][1])) : 0.0)) * 2.0))
#define AMOUNT_GRAVITY_HUMAN(%1)	(CLASES_HUMANAS[g_human_class[%1]][humanGravity] - ((float(g_hab[%1][HAB_GRAVITY][CLASS_HUMAN]) + ((g_amuleto_equip[%1] != -1) ? (float(g_amuleto_stat1[%1][g_amuleto_equip[%1]][2])) : 0.0)) * 0.00625))
#define AMOUNT_ARMOR_EXTRA(%1)		(g_hab[%1][HAB_ARMOR][CLASS_HUMAN] * 10)
#define AMOUNT_FLARE_EXTRA(%1)		(g_hab[%1][HAB_FLARE][CLASS_HUMAN])

#define AMOUNT_HEALTH_ZOMBIE(%1)	(CLASES_ZOMBIE[g_zombie_class[%1]][zombieHealth] + ((g_hab[%1][HAB_HEALTH][CLASS_ZOMBIE] + ((g_amuleto_equip[%1] != -1) ? (g_amuleto_stat1[%1][g_amuleto_equip[%1]][0]) : 0)) * 10000))
#define AMOUNT_SPEED_ZOMBIE(%1)	(CLASES_ZOMBIE[g_zombie_class[%1]][zombieSpeed] + ((float(g_hab[%1][HAB_SPEED][CLASS_ZOMBIE]) + ((g_amuleto_equip[%1] != -1) ? (float(g_amuleto_stat1[%1][g_amuleto_equip[%1]][1])) : 0.0)) * 2.0))
#define AMOUNT_GRAVITY_ZOMBIE(%1)	(CLASES_ZOMBIE[g_zombie_class[%1]][zombieGravity] - ((float(g_hab[%1][HAB_GRAVITY][CLASS_ZOMBIE]) + ((g_amuleto_equip[%1] != -1) ? (float(g_amuleto_stat1[%1][g_amuleto_equip[%1]][2])) : 0.0)) * 0.00625))

enum _:CombosStruct {
	comboNeed,
	comboColorRed,
	comboColorGreen,
	comboColorBlue,
	comboMessage[35],
	comboSound[30]
};

new const COMBOS[][CombosStruct] = {
	{0, 255, 255, 255, "¡Perfect!", "zp5/gk_perfect.wav"},
	{500, 255, 255, 255, "¡First Blood!", "zp5/gk_first_blood.wav"},
	{1000, 0, 255, 255, "¡Double Kill!", "zp5/gk_double_kill.wav"},
	{2000, 0, 255, 255, "¡Multi Kill!", "zp5/gk_multi_kill.wav"},
	
	{3500, 0, 0, 255, "¡¡ Blood Bath !!", "zp5/gk_blood_bath.wav"},
	{6000, 0, 0, 255, "¡¡ Ultra Kill !!", "zp5/gk_ultra_kill.wav"},
	{10000, 0, 0, 255, "¡¡ Mega Kill !!", "zp5/gk_mega_kill.wav"},
	{17500, 0, 255, 0, "¡¡ Dominating !!", "zp5/gk_dominating.wav"},
	
	{25000, 0, 255, 0, "¡¡ IMPRESSIVE !!", "zp5/gk_impressive.wav"},
	{35000, 0, 255, 0, "¡¡ RAMPAGE !!", "zp5/gk_rampage.wav"},
	{50000, 255, 0, 255, "¡¡ KILLING SPREE !!", "zp5/gk_killing_spree.wav"},
	{75000, 255, 0, 255, "¡¡ GODLIKE !!", "zp5/gk_godlike.wav"},
	
	{125000, 255, 0, 255, "¡¡¡ UNSTOPPABLE !!!", "zp5/gk_unstoppable.wav"},
	{200000, 255, 255, 0, "¡¡¡ HOLY SHIT !!!", "zp5/gk_holy_shit.wav"},
	{300000, 255, 255, 0, "¡¡¡ WICKED SICK !!!", "zp5/gk_wicked_sick.wav"},
	{400000, 255, 255, 0, "¡¡¡ MONSTER KILL !!!", "zp5/gk_monster_kill.wav"},
	
	{625000, 255, 0, 0, "L U D I C R O U S S   K I L L", "zp5/gk_ludicrouss_kill.wav"},
	{1500000, 255, 0, 0, "¡¡¡¡ IT'S A NIGHTMARE !!!!", "zp5/gk_ludicrouss_kill.wav"},
	{3000000, 255, 0, 0, "¡¡¡¡ WHAT THE FUUUUUUUU !!!!", "zp5/gk_ludicrouss_kill.wav"},
	{5000000, 255, 0, 0, "I N F E R N O", "zp5/gk_ludicrouss_kill.wav"},
	
	{10000000, 255, 0, 0, "AAAAAAAAAAAAAAAAAAAAA", "zp5/gk_ludicrouss_kill.wav"},
	
	{99999999, 255, 0, 0, "AAAAAAAAAAAAAAAAAAAAA", "zp5/gk_ludicrouss_kill.wav"}
};

new const COMBOS_ZOMBIE[][CombosStruct] = {
	{1, 255, 255, 255, "¡Perfect!", "zp5/gk_perfect.wav"},
	{2, 255, 255, 255, "¡First Blood!", "zp5/gk_first_blood.wav"},
	{3, 0, 255, 255, "¡Double Kill!", "zp5/gk_double_kill.wav"},
	{4, 0, 255, 255, "¡Multi Kill!", "zp5/gk_multi_kill.wav"},
	
	{5, 0, 0, 255, "¡¡ Blood Bath !!", "zp5/gk_blood_bath.wav"},
	{6, 0, 0, 255, "¡¡ Ultra Kill !!", "zp5/gk_ultra_kill.wav"},
	{7, 0, 0, 255, "¡¡ Mega Kill !!", "zp5/gk_mega_kill.wav"},
	{8, 0, 255, 0, "¡¡ Dominating !!", "zp5/gk_dominating.wav"},
	
	{9, 0, 255, 0, "¡¡ IMPRESSIVE !!", "zp5/gk_impressive.wav"},
	{10, 0, 255, 0, "¡¡ RAMPAGE !!", "zp5/gk_rampage.wav"},
	{11, 255, 0, 255, "¡¡ KILLING SPREE !!", "zp5/gk_killing_spree.wav"},
	{12, 255, 0, 255, "¡¡ GODLIKE !!", "zp5/gk_godlike.wav"},
	
	{13, 255, 0, 255, "¡¡¡ UNSTOPPABLE !!!", "zp5/gk_unstoppable.wav"},
	{14, 255, 255, 0, "¡¡¡ HOLY SHIT !!!", "zp5/gk_holy_shit.wav"},
	{15, 255, 255, 0, "¡¡¡ WICKED SICK !!!", "zp5/gk_wicked_sick.wav"},
	{16, 255, 255, 0, "¡¡¡ MONSTER KILL !!!", "zp5/gk_monster_kill.wav"},
	
	{17, 255, 0, 0, "L U D I C R O U S S   K I L L", "zp5/gk_ludicrouss_kill.wav"},
	{9999999, 255, 0, 0, "L U D I C R O U S S   K I L L", "zp5/gk_ludicrouss_kill.wav"}
};

enum _:MaxChatModes {
	CHAT_MODE_NONE = 0,
	CHAT_MODE_NORMAL,
	CHAT_MODE_CORCHETES,
	CHAT_MODE_CORCHETES_PARENTESIS,
	CHAT_MODE_LLAVES,
	CHAT_MODE_LLAVES_PARENTESIS,
	CHAT_MODE_LLAVES_CORCHETES,
	CHAT_MODE_LLAVES_CORCHETES_P
};

enum _:MenuColorsStruct {
	colorName[20],
	colorRed,
	colorGreen,
	colorBlue
};

new const COLORS[][MenuColorsStruct] = {
	{"BLANCO", 255, 255, 255},
	{"ROJO", 255, 0, 0},
	{"VERDE", 0, 255, 0},
	{"AZUL", 0, 0, 255},
	{"AMARILLO", 255, 255, 0},
	{"VIOLETA", 255, 0, 255},
	{"CELESTE", 0, 255, 255},
	{"NARANJA", 255, 165, 0},
	
	{"GRISÁCEO", 100, 100, 100},
	{"ROSA", 255, 50, 179},
	{"VERDE AMARILLO", 153, 204, 50},
	{"SIENNA", 139, 71, 38},
	{"NARANJA OSCURO", 139, 30, 0},
	{"VERDE PANDA", 0, 255, 127},
	{"CHARTREUS", 127, 255, 0},
	{"AZUL MARINO", 0, 127, 255},
	{"CHOCOLATE DULCE", 107, 66, 38},
	{"ROJO VIOLETA", 199, 21, 133},
	{"GRIS PIZARRA", 198, 226, 255}
};

#define CLASSNAME_THINK_HUD			"think_HUD"
#define NEXTTHINK_THINK_HUD			get_gametime() + 0.5

#define CLASSNAME_THINK_NOTICIAS	"think_NOTICIAS"
#define NEXTTHINK_THINK_NOTICIAS	get_gametime() + 180.0

new const NEED_KILLS_WEAPONS[][] = {
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 20000, 30000, 45000, 60000, 80000, 9999999}, // P228
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // XM1014
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // MAC10
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // AUG
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 20000, 30000, 45000, 60000, 80000, 9999999}, // ELITE
	{1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 20000, 30000, 45000, 60000, 80000, 9999999}, // FIVESEVEN
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // UMP45
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // SG550
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // GALIL
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // FAMAS
	{1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 20000, 30000, 45000, 60000, 80000, 9999999}, // USP
	{1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 20000, 30000, 45000, 60000, 80000, 9999999}, // GLOCK18
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // MP5NAVY
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // M249
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // M3
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // M4A1
	{1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 20000, 30000, 45000, 60000, 80000, 9999999}, // TMP
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 5, 10, 20, 40, 80, 160, 340, 620, 1240, 2480, 4960, 7000, 8500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // DEAGLE
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // SG552
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999}, // AK47
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{25, 50, 100, 200, 400, 800, 1600, 2000, 2500, 3000, 3500, 4000, 5000, 6500, 10000, 20000, 30000, 45000, 60000, 80000, 9999999} // P90
};

new const NEED_DIAMONDS_WEAPONS[][] = {
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // P228
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // XM1014
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // MAC10
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // AUG
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // ELITE
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // FIVESEVEN
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // UMP45
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // SG550
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // GALIL
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // FAMAS
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // USP
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // GLOCK18
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // MP5NAVY
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // M249
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // M3
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // M4A1
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // TMP
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // DEAGLE
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // SG552
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999}, // AK47
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 999999} // P90
};

enum _:MaxStats { // D = Done | T = Taken
	HEADSHOTS_D = 0,
	HEADSHOTS_T,
	KILL_ZOMBIES_D,
	KILL_ZOMBIES_T,
	KILL_HUMANS_D,
	KILL_HUMANS_T,
	INFECTS_D,
	INFECTS_T,
	COMBOS_D,
	COMBO_MAX_D,
	KILL_NEMESIS_D,
	KILL_SURVIVOR_D,
	KILL_WESKER_D,
	KILL_JASON_D,
	KILL_CABEZON_D,
	KILL_ZOMBIES_HS_D,
	KILL_ZOMBIES_HS_T,
	KILL_ZOMBIES_KNIFE_D,
	KILL_ZOMBIES_KNIFE_T,
	KILL_ALIEN_D,
	KILL_PREDATOR_D,
	KILL_ANNIHILATOR_D,
	KILL_SNIPER_D,
	DAMAGE_ARMOR,
	AMULETOS_CREATE,
	DUEL_FINAL_WINS
};

#define DIV_DAMAGE	100.0

enum _:LogrosClass {
	LOGRO_HUMANO = 0,
	LOGRO_ZOMBIE,
	LOGRO_SURVIVOR,
	LOGRO_NEMESIS,
	LOGRO_WESKER,
	LOGRO_JASON,
	LOGRO_CABEZON,
	LOGRO_OTROOS,
	LOGRO_PRIMEROS,
	LOGRO_BETA,
	LOGRO_HEAD_ZOMBIE,
	LOGRO_ALIEN,
	LOGRO_PREDATOR,
	LOGRO_ANNIHILATOR,
	LOGRO_SNIPER,
	LOGRO_DUELOS,
	LOGRO_ARMAS,
	LOGRO_DUELO_FINAL,
	LOGRO_PPT,
	LOGRO_NAVIDAD,
	LOGRO_LEGENDARIA
};

new const LOGROS_CLASS[][] = {"HUMANOS", "ZOMBIES", "SURVIVOR", "NEMESIS", "WESKER", "JASON", "CABEZÓN", "OTROS", "PRIMEROS", "BETA", "CABEZAS ZOMBIE", "ALIEN", "DEPREDADOR", "ANIQUILADOR", "SNIPER", "DUELOS", "ARMAS", "DUELO FINAL", "MINIJUEGO PPT", "EVENTO: NAVIDAD",
	"LEGENDARIA"};

enum _:LogrosStruct {
    logroName[64],
    logroDesc[256],
    logroReward,
    logroClass,
	logroUsersNeed
};

enum _:LogrosInt {
	BETA_TESTER = 0,
	BETA_TESTER_AVANZADO,
	PRIMERO_BETA_TESTER_AVANZADO,
	NIVEL_100,
	NIVEL_200,
	NIVEL_300,
	NIVEL_400,
	NIVEL_500,
	NIVEL_600,
	NIVEL_700,
	NIVEL_800,
	NIVEL_900,
	NIVEL_1000,
	NIVEL_1250,
	NIVEL_1500,
	NIVEL_1750,
	NIVEL_2000,
	COLECCIONISTA,
	AMMO_MACHINE,
	AFILANDO_CUCHILLO,
	LIDER_EN_CABEZAS,
	AGUJEREANDO_CABEZAS,
	KILL_ZOMBIES_1000,
	KILL_ZOMBIES_5000,
	KILL_ZOMBIES_10000,
	KILL_ZOMBIES_20000,
	KILL_ZOMBIES_50000,
	KILL_ZOMBIES_100000,
	KILL_ZOMBIES_500000,
	KILL_ZOMBIES_1000000,
	COMBO_FIRST_BLOOD,
	COMBO_DOUBLE_KILL,
	COMBO_MULTI_KILL,
	COMBO_BLOOD_BATH,
	COMBO_ULTRA_KILL,
	COMBO_MEGA_KILL,
	COMBO_DOMINATING,
	COMBO_IMPRESSIVE,
	COMBO_RAMPAGE,
	COMBO_KILLING_SPREE,
	COMBO_GODLIKE,
	COMBO_UNSTOPPABLE,
	COMBO_HOLY_SHIT,
	COMBO_WICKED_SICK,
	COMBO_MONSTER_KILL,
	COMBO_LUDICROUSS_KILL,
	DANIO_100_000,
	DANIO_500_000,
	DANIO_1_000_000,
	DANIO_5_000_000,
	DANIO_50_000_000,
	DANIO_100_000_000,
	DANIO_500_000_000,
	DANIO_1_000_000_000,
	DANIO_5_000_000_000,
	DANIO_20_000_000_000,
	DANIO_50_000_000_000,
	DANIO_100_000_000_000,
	DANIO_EVER,
	KILL_NEMESIS_KNIFE,
	KILL_ZOMBIES_KNIFE_100,
	KILL_ZOMBIES_KNIFE_500,
	KILL_ZOMBIES_KNIFE_1000,
	KILL_ZOMBIES_KNIFE_5000,
	KILL_ZOMBIES_KNIFE_10000,
	KILL_ZOMBIES_KNIFE_50000,
	MI_SUERTE_ES_UNICA,
	ODIO_SER_ZOMBIE,
	EL_HUMANO_MAS_FUERTE,
	COLECCION_DE_PLOMO,
	CASINO_O_ZP,
	SWAT,
	CREO_QUE_ME_OLVIDE_DE_ALGO,
	NO_LA_NECESITO,
	LA_SALUD_ES_LO_PRIMERO,
	ME_GUSTAN_LOS_RETOS,
	LA_SUERTE_ESTA_DE_MI_LADO,
	VENGAN_LOS_ESPERO,
	SUERTE_DE_PRINCIPIANTE,
	AFILATE_LAS_GARRAS,
	ALIENS,
	HASTA_ACA_LLEGARON,
	IMPECABLE,
	Y_EL_NEMESIS,
	MEDICO,
	ARE_YOU_FUCKING_KIDDING_ME,
	INFECCION_QUEMADA,
	VI_MEJORES,
	PENSANDOLO_BIEN,
	CAZADOR,
	NO_ME_TOQUES,
	SIN_BOMBA_DE_ANIQUILACION,
	SURVIVOR_NOOB,
	SURVIVOR_AVANZADO,
	SURVIVOR_EXPERTO,
	SURVIVOR_PRO,
	CRATER_SANGRIENTO,
	LA_EXPLOSION_NO_MATA,
	NEMESIS_NOOB,
	NEMESIS_AVANZADO,
	NEMESIS_EXPERTO,
	NEMESIS_PRO,
	RESIDENT_EVIL,
	VOS_NO_PASAS,
	JASON,
	EL_CABEZA,
	MERCENARIO,
	BAD_LUCKY_BRIAN,
	LOS_PRIMEROS,
	VAMOS_POR_MAS,
	EXPERTO_EN_LOGROS,
	HEAD_100_RED,
	HEAD_75_GREEN,
	HEAD_50_BLUE,
	HEAD_25_YELLOW,
	HEAD_10_WHITE,
	SUBE_Y_BAJA,
	SUBE_Y_BOOM,
	CABEZON_Y_CIEGO,
	SOY_DORADO,
	CUCHILLO_QUE_NO_CORTA,
	SPEED_HACK_DONDE,
	PRIMERO_COLORIDO,
	PRIMERO_QUE_SUERTE,
	PRIMERO_BUEN_COMIENZO,
	COLORIDO,
	QUE_SUERTE,
	BUEN_COMIENZO,
	PRO_DUELO,
	TRANQUI_120,
	AL_MAXIMO,
	OTRA_FORMA_DE_JUGAR,
	L_ALIENIGENA,
	L_DEPREDADOR,
	MI_CUCHILLA_Y_YO,
	L_FRANCOTIRADOR,
	ALIEN_ENTRENADO,
	SUPER_ALIEN_86,
	RAPIDO_Y_ALIENOSO,
	L_FURIA,
	ROJO_BAH,
	NO_TE_VEO_PERO_TE_HUELO,
	ESTOY_RE_LOCO,
	SARGENTO_DEPRE,
	DEPREDADOR_007,
	AHORA_ME_VES_AHORA_NO_ME_VES,
	MI_HABILIDAD_ES_MEJOR,
	ANIQUILOSO,
	CIENFUEGOS,
	CARNE,
	MUCHA_CARNE,
	DEMASIADA_CARNE,
	CARNE_PARA_TODOS,
	EL_PEOR_DEL_SERVER,
	MI_DEAGLE_Y_YO,
	L_INTACTO,
	NO_ME_HACE_FALTA,
	YO_NO_FUI,
	YO_FUI,
	INTOXICAS_O_KE_ASE,
	EXPERTO_EN_EL_TEMA,
	HUMANOS_1000,
	HUMANOS_5000,
	HUMANOS_10000,
	HUMANOS_20000,
	HUMANOS_50000,
	HUMANOS_100000,
	HUMANOS_500000,
	HUMANOS_1000000,
	BOMBA_FALLIDA,
	ME_ESTA_GUSTANDO_ESTO,
	PRO_ZOMBIE,
	CHALECO_500,
	CHALECO_2000,
	CHALECO_5000,
	CHALECO_30000,
	CHALECO_100000,
	Y_LA_LIMPIEZA,
	YO_USO_CLEAR_ZOMBIE,
	ANTIDOTO_PARA_TODOS,
	DESGARRANDO_FUERTE,
	Y_EL_SNIPER,
	COMO_PARA_NO_PEGARLE,
	EQUIPANDOME,
	LOS_PRIMEROS_3,
	EN_BUSCA_DEL_MEJOR,
	EL_SENIOR_DE_LOS_AMULETOS,
	SUPER_LASER,
	ESTOY_MUY_SOLO,
	FOREVER_ALONE,
	CREO_QUE_TENGO_UN_PROBLEMA,
	SOLO_EL_ZP_ME_ENTIENDE,
	EL_MEJOR_EQUIPO,
	EN_MEMORIA_A_ELLOS,
	MI_AWP_ES_MEJOR,
	MI_SCOUT_ES_MEJOR,
	SOBREVIVEN_LOS_DUROS,
	NO_SOLO_LA_GANAN_LOS_DUROS,
	ZAS_EN_TODA_LA_BOCA,
	LA_MEJOR_OPCION,
	UNA_DE_LAS_MEJORES,
	MI_PREFERIDA,
	DISPARO_PRECISO,
	DISPARO_VELOZ,
	DISPARO_INFINITO,
	DISPARO_DANINO,
	YA_NO_ES_TAN_FACIL,
	PRIMERO_YA_NO_ES_TAN_FACIL,
	DANIO_25_000_000,
	EASTER_EGG,
	EASTER_EGG_FAKE,
	VINCULADO,
	MEJOREN_LA_PUNTERIA,
	A_ESO_LE_LLAMAN_DISPARAR,
	HEAD_5000,
	HEAD_15000,
	HEAD_50000,
	HEAD_150K,
	HEAD_500K,
	HEAD_1M,
	MI_MAC10_ESTA_LLENA,
	SOY_UN_MANCO,
	CINCUENTA_SON_CINCUENTA,
	YO_SI_PEGO_CON_ESTO,
	MUCHA_PRECISION,
	CINCO_DE_LAS_GRANDES,
	SOY_MUY_NOOB,
	APRENDIENDO_A_FAKEAR,
	VOY_POR_BUEN_CAMINO,
	EXPERTO_EN_FAKA,
	VENGAN_DE_A_UNO,
	MI_PRIMER_DUELO,
	VAMOS_BIEN,
	DEMASIADO_FACIL,
	Y_ESO_HACE_ALGO,
	ESA_LOCURA_NO_HACE_NADA,
	YO_QUE_VOS_USO_HIELO,
	HUMANOS_2500,
	KILL_ZOMBIES_2500,
	HEAD_300K,
	COMO_USABA_EL_PODER,
	HABILITAR_COMBO_ZOMBIE,
	COMBO_FIRST_BLOOD_ZOMBIE,
	COMBO_DOUBLE_KILL_ZOMBIE,
	COMBO_MULTI_KILL_ZOMBIE,
	COMBO_BLOOD_BATH_ZOMBIE,
	COMBO_ULTRA_KILL_ZOMBIE,
	COMBO_MEGA_KILL_ZOMBIE,
	COMBO_DOMINATING_ZOMBIE,
	COMBO_IMPRESSIVE_ZOMBIE,
	COMBO_RAMPAGE_ZOMBIE,
	COMBO_KILLING_SPREE_ZOMBIE,
	COMBO_GODLIKE_ZOMBIE,
	COMBO_UNSTOPPABLE_ZOMBIE,
	COMBO_HOLY_SHIT_ZOMBIE,
	COMBO_WICKED_SICK_ZOMBIE,
	COMBO_MONSTER_KILL_ZOMBIE,
	COMBO_LUDICROUSS_KILL_ZOMBIE,
	YA_DE_ZOMBIE,
	CHALECO_60000,
	APLICANDO_MAFIA,
	TENGO_AGUANTE,
	DIEZ_A_LA_Z,
	TRIPLETA,
	NEMESIS_50,
	JUNTANDO,
	DE_SOBRA,
	BAZOOKA_PRO,
	LA_EXPLOSION_SI_MATA,
	ANIQUILA_ANIQUILADOR,
	LA_BAZOOKA_MAS_VELOZ,
	OOPS_MATE_A_TODOS,
	ARMERO_NOOB,
	ARMERO_AVANZADO,
	ARMERO_EXPERTO,
	ARMERO_PRO,
	EL_VERDULERO,
	PPT_PIEDRA,
	PPT_PAPEL,
	PPT_TIJERA,
	PPT_WIN,
	PPT_WIN_5,
	PPT_WIN_15,
	PPT_WIN_30,
	PPT_WIN_50,
	PPT_WIN_100,
	PPT_WIN_300,
	PPT_WIN_500,
	PPT_WIN_1000,
	PPT_DRAW_3,
	PPT_DRAW_5,
	PPT_DRAW_7,
	PPT_WIN_CON_3,
	PPT_WIN_CON_5,
	PRIMERO_SUERTE_DE_PRINCIPIANTE,
	DETONADOS,
	BOMBAZO_PARA_TODOS,
	BOOM_EN_TODA_LA_CARA,
	TODO_UN_AWPER,
	EXPERTO_EN_AWP,
	PRO_AWP,
	CARNICERO,
	MOTOSIERRA_AFILADA,
	Y_EL_SURVIVOR,
	NEMESIS_100,
	A_ESO_LE_LLAMAS_DESAFIOS,
	CHALLENGE_ACEPTED,
	NO_TENGO_BALAS,
	DK_BUGUEADA,
	DOUBLE_KILL,
	TRIPLE_KILL,
	QUADRA_KILL,
	PENTA_KILL,
	DECA_KILL,
	GIFT_1,
	GIFT_25,
	GIFT_50,
	GIFT_100,
	GIFT_200,
	GIFT_500,
	GIFT_1000,
	PRIMERO_GIFT_10,
	PRIMERO_GIFT_100,
	Y_SIN_VER,
	INFECCION_DROGADA,
	LA_BOMBA_LOCA,
	LEGENDARIA_KPUZZLE,
	LEGENDARIA_CINCO_ZOMBIES,
	LEGENDARIA_NEMESIS,
	LEGENDARIA_KNIFE,
	ARMANDO_PIZZERO,
	PARA_EL_LEA_PSYCHO_MAX,
	COMBO_WESKER,
	COMBO_JASON,
	PRIMER_LUGAR,
	COMBO_ITS_A_NIGHTMARE,
	COMBO_WHAT_THE_FUCK,
	COMBO_INFERNO,
	COMBO_AAA
};

new const LOGROS[][LogrosStruct] = {
	{"BETA TESTER", "Jugar en la BETA del ZP v5.0", 5, LOGRO_BETA, 0},
	{"BETA TESTER AVANZADO", "Subir hasta nivel 10 en la BETA del ZP v5.0", 5, LOGRO_BETA, 0}, 
	{"PRIMERO: BETA TESTER AVANZADO", "Primero en subir hasta el nivel 10 en la BETA del ZP v5.0", 5, LOGRO_PRIMEROS, 0},
	{"NIVEL 100", "Alcanza el nivel 100", 5, LOGRO_OTROOS, 0},
	{"NIVEL 200", "Alcanza el nivel 200", 5, LOGRO_OTROOS, 0},
	{"NIVEL 300", "Alcanza el nivel 300", 5, LOGRO_OTROOS, 0},
	{"NIVEL 400", "Alcanza el nivel 400", 5, LOGRO_OTROOS, 0},
	{"NIVEL 500", "Alcanza el nivel 500", 10, LOGRO_OTROOS, 0},
	{"NIVEL 600", "Alcanza el nivel 600", 10, LOGRO_OTROOS, 0},
	{"NIVEL 700", "Alcanza el nivel 700", 10, LOGRO_OTROOS, 0},
	{"NIVEL 800", "Alcanza el nivel 800", 10, LOGRO_OTROOS, 0},
	{"NIVEL 900", "Alcanza el nivel 900", 10, LOGRO_OTROOS, 0},
	{"NIVEL 1000", "Alcanza el nivel 1000", 15, LOGRO_OTROOS, 0},
	{"NIVEL 1250", "Alcanza el rango C, nivel 250", 20, LOGRO_OTROOS, 0},
	{"NIVEL 1500", "Alcanza el rango C, nivel 500", 25, LOGRO_OTROOS, 0},
	{"NIVEL 1750", "Alcanza el rango C, nivel 750", 30, LOGRO_OTROOS, 0},
	{"NIVEL 2000", "Alcanza el rango C nivel 1000", 35, LOGRO_OTROOS, 0},
	{"COLECCIONISTA", "Junta 10.000 ammo packs", 5, LOGRO_HUMANO, 0},
	{"AMMO MACHINE", "Junta 100.000 ammo packs", 10, LOGRO_HUMANO, 0},
	{"AFILANDO MI CUCHILLO", "Mata a un zombie con cuchillo", 5, LOGRO_HUMANO, 15},
	{"LÍDER EN CABEZAS", "Mata a 1.000 zombies con disparos en la cabeza", 5, LOGRO_HUMANO, 0},
	{"AGUJEREANDO CABEZAS", "Mata a 10.000 zombies con disparos en la cabeza", 10, LOGRO_HUMANO, 0},
	{"1.000 ZOMBIES", "Mata a 1.000 zombies", 5, LOGRO_HUMANO, 0},
	{"5.000 ZOMBIES", "Mata a 5.000 zombies", 10, LOGRO_HUMANO, 0},
	{"10.000 ZOMBIES", "Mata a 10.000 zombies", 15, LOGRO_HUMANO, 0},
	{"20.000 ZOMBIES", "Mata a 20.000 zombies", 20, LOGRO_HUMANO, 0},
	{"50.000 ZOMBIES", "Mata a 50.000 zombies", 25, LOGRO_HUMANO, 0},
	{"100.000 ZOMBIES", "Mata a 100.000 zombies", 30, LOGRO_HUMANO, 0},
	{"500.000 ZOMBIES", "Mata a 500.000 zombies", 40, LOGRO_HUMANO, 0},
	{"1.000.000 DE ZOMBIES", "Mata a 1.000.000 de zombies", 50, LOGRO_HUMANO, 0},
	{"COMBO: FIRST BLOOD", "Realiza el Combo First Blood", 1, LOGRO_HUMANO, 10},
	{"COMBO: DOUBLE KILL", "Realiza el Combo Double Kill", 2, LOGRO_HUMANO, 10},
	{"COMBO: MULTI KILL", "Realiza el Combo Multi Kill", 3, LOGRO_HUMANO, 10},
	{"COMBO: BLOOD BATH", "Realiza el Combo Blood Bath", 4, LOGRO_HUMANO, 10},
	{"COMBO: ULTRA KILL", "Realiza el Combo Ultra Kill", 5, LOGRO_HUMANO, 10},
	{"COMBO: MEGA KILL", "Realiza el Combo Mega Kill", 6, LOGRO_HUMANO, 10},
	{"COMBO: DOMINATING", "Realiza el Combo Dominating", 7, LOGRO_HUMANO, 10},
	{"COMBO: IMPRESSIVE", "Realiza el Combo Impressive", 8, LOGRO_HUMANO, 10},
	{"COMBO: RAMPAGE", "Realiza el Combo Rampage", 9, LOGRO_HUMANO, 10},
	{"COMBO: KILLING SPREE", "Realiza el Combo Killing Spree", 10, LOGRO_HUMANO, 10},
	{"COMBO: GODLIKE", "Realiza el Combo Godlike", 11, LOGRO_HUMANO, 10},
	{"COMBO: UNSTOPPABLE", "Realiza el Combo Unstoppable", 12, LOGRO_HUMANO, 10},
	{"COMBO: HOLY SHIT", "Realiza el Combo Holy Shit", 13, LOGRO_HUMANO, 10},
	{"COMBO: WICKED SICK", "Realiza el Combo Wicked Sick", 14, LOGRO_HUMANO, 10},
	{"COMBO: MONSTER KILL", "Realiza el Combo Monster Kill", 20, LOGRO_HUMANO, 10},
	{"COMBO: LUDICROUSS KILL", "Realiza el Combo Ludicrouss Kill", 25, LOGRO_HUMANO, 10},
	{"MIRA MI DAÑO", "Realiza 100.000 de daño", 5, LOGRO_HUMANO, 0},
	{"MÁS Y MÁS DAÑO", "Realiza 500.000 de daño", 10, LOGRO_HUMANO, 0},
	{"LLEGUÉ AL MILLÓN", "Realiza 1.000.000 de daño", 15, LOGRO_HUMANO, 0},
	{"MI DAÑO CRECE", "Realiza 5.000.000 de daño", 20, LOGRO_HUMANO, 0},
	{"VAMOS POR LOS 50 MILLONES", "Realiza 50.000.000 de daño", 30, LOGRO_HUMANO, 0},
	{"CONTADOR DE DAÑOS", "Realiza 100.000.000 de daño", 35, LOGRO_HUMANO, 0},
	{"YA PERDÍ LA CUENTA", "Realiza 500.000.000 de daño", 40, LOGRO_HUMANO, 0},
	{"MI DAÑO ES CATASTRÓFICO", "Realiza 1.000.000.000 de daño", 45, LOGRO_HUMANO, 0},
	{"MI DAÑO ES NUCLEAR", "Realiza 5.000.000.000 de daño", 50, LOGRO_HUMANO, 0},
	{"MUCHOS NÚMEROS", "Realiza 20.000.000.000 de daño", 60, LOGRO_HUMANO, 0},
	{"¿SE ME BUGUEO EL DAÑO? ... BAZINGA", "Realiza 50.000.000.000 de daño", 70, LOGRO_HUMANO, 0},
	{"ME ABURROOOOO", "Realiza 100.000.000.000 de daño", 80, LOGRO_HUMANO, 0},
	{"NO SÉ LEER ESTE NÚMERO", "Realiza 214.748.364.800 de daño", 100, LOGRO_HUMANO, 0},
	{"MI CUCHILLO ES ROJO", "Mata a un NEMESIS con cuchillo", 5, LOGRO_HUMANO, 0},
	{"ACUCHILLADO", "Mata a 30 zombies con cuchillo", 10, LOGRO_HUMANO, 0},
	{"ME ENCANTAN LAS TRIPAS", "Mata a 50 zombies con cuchillo", 15, LOGRO_HUMANO, 0},
	{"HUMILLACIÓN", "Mata a 100 zombies con cuchillo", 20, LOGRO_HUMANO, 0},
	{"CLAVO QUE TE CLAVO LA SOMBRILLA", "Mata a 150 zombies con cuchillo", 25, LOGRO_HUMANO, 0},
	{"ENTRA CUCHILLO, SALEN LAS TRIPAS", "Mata a 200 zombies con cuchillo", 30, LOGRO_HUMANO, 0},
	{"HUMILIATION DEFEAT", "Mata a 250 zombies con cuchillo", 50, LOGRO_HUMANO, 0},
	{"MI SUERTE ES ÚNICA", "Mata 5 NEMESIS en un mismo modo ARMAGEDDON", 10, LOGRO_HUMANO, 15},
	{"ODIO SER ZOMBIE", "Utiliza tres antidotos en un mismo mapa sin desconectarte", 5, LOGRO_ZOMBIE, 0},
	{"EL HUMANO MÁS FUERTE", "Sube al nivel máximo cualquier habilidad humana", 5, LOGRO_HUMANO, 0},
	{"COLECCIÓN DE PLOMO", "Compra 100 veces las balas infinitas", 10, LOGRO_HUMANO, 0},
	{"¿CASINO O ZOMBIE PLAGUE?", "Apuesta 1.000.000 de experiencia a la lotería", 5, LOGRO_HUMANO, 0},
	{"S.W.A.T", "Realiza 5.000.000 de daño con cualquier M4A1 en un mapa", 5, LOGRO_ARMAS, 10},
	{"CREO QUE ME OLVIDÉ DE ALGO", "Consigue ser el último humano sin disparar^nNO COMPRÉS ARMAS Y NO TOMÉS ANTIDOTO", 5, LOGRO_HUMANO, 20},
	{"NO LA NECESITO", "Utiliza la bomba de aniquilación sin matar a nadie", 5, LOGRO_HUMANO, 20},
	{"LA SALUD ES LO PRIMERO", "Juega cinco rondas sin ser infectado por otro zombie^ny sin desconectarte", 5, LOGRO_HUMANO, 15},
	{"ME GUSTAN LOS RETOS", "Gana diez desafíos", 10, LOGRO_HUMANO, 0},
	{"LA SUERTE ESTA DE MI LADO", "Gana dos veces la lotería", 5, LOGRO_HUMANO, 0},
	{"¡VENGAN, LOS ESPERO!", "Consigue ser el último humano y sobrevive para contarlo", 5, LOGRO_HUMANO, 20},
	{"SUERTE DE PRINCIPIANTE", "Gana un GK", 5, LOGRO_HUMANO, 0},
	{"AFÍLATE LAS GARRAS", "Finaliza la ronda con tu chaleco al máximo", 5, LOGRO_HUMANO, 20},
	{"SOLO HAY UNA EXPLICACIÓN LÓGICA... ALIENS", "Mata a 50 ALIENS", 10, LOGRO_HUMANO, 0},
	{"HASTA ACÁ LLEGARON", "Mata a 15+ zombies con una bomba de aniquilación", 5, LOGRO_HUMANO, 0},
	{"IMPECABLE", "Mata a 50+ zombies en una misma ronda", 5, LOGRO_HUMANO, 15},
	{"¿Y EL NEMESIS?", "Mata a los SURVIVORS del modo PLAGUE siendo zombie", 10, LOGRO_ZOMBIE, 0},
	{"MÉDICO", "Utiliza todas las bombas antidoto en un mismo mapa", 5, LOGRO_ZOMBIE, 0},
	{"ARE YOU FUCKING KIDDING ME?", "Consigue ser el PRIMER ZOMBIE", 5, LOGRO_ZOMBIE, 20},
	{"INFECCIÓN QUEMADA", "Infecta a 25+ humanos bajo los efectos de la bomba de fuego", 5, LOGRO_ZOMBIE, 0},
	{"VI MEJORES", "Mata a 30 WESKER", 10, LOGRO_ZOMBIE, 0},
	{"PENSANDOLO BIEN...", "Utiliza dos furia zombie en un mismo mapa sin infectar a nadie", 5, LOGRO_ZOMBIE, 0},
	{"CAZADOR", "Mata a 50 SURVIVOR", 10, LOGRO_ZOMBIE, 0},
	{"DON'T TOUCH ME", "Gana el modo SURVIVOR sin recibir daño", 5, LOGRO_SURVIVOR, 15},
	{"SIN BOMBA", "Gana el modo SURVIVOR sin usar la bomba de aniquilación", 5, LOGRO_SURVIVOR, 20},
	{"SURVIVOR PRINCIPIANTE", "Gana el modo SURVIVOR en dificultad NORMAL", 5, LOGRO_SURVIVOR, 20},
	{"SURVIVOR AVANZADO", "Gana el modo SURVIVOR en dificultad DIFÍCIL", 10, LOGRO_SURVIVOR, 20},
	{"SURVIVOR EXPERTO", "Gana el modo SURVIVOR en dificultad MUY DIFÍCIL", 15, LOGRO_SURVIVOR, 20},
	{"SURVIVOR PRO", "Gana el modo SURVIVOR en dificultad MUY DIFÍCIL sin usar la bomba de aniquilación", 20, LOGRO_SURVIVOR, 20},
	{"CRATER SANGRIENTO", "Gana el modo NEMESIS sin utilizar la bazooka", 5, LOGRO_NEMESIS, 20},
	{"LA EXPLOSIÓN NO MATA", "Lanza la bazooka sin matar a nadie", 5, LOGRO_NEMESIS, 20},
	{"NEMESIS PRINCIPIANTE", "Gana el modo NEMESIS en dificultad NORMAL", 5, LOGRO_NEMESIS, 20},
	{"NEMESIS AVANZADO", "Gana el modo NEMESIS en dificultad DIFÍCIL", 10, LOGRO_NEMESIS, 20},
	{"NEMESIS EXPERTO", "Gana el modo NEMESIS en dificultad MUY DIFÍCIL", 15, LOGRO_NEMESIS, 20},
	{"NEMESIS PRO", "Gana el modo NEMESIS en dificultad MUY DIFÍCIL sin usar la bazooka", 20, LOGRO_NEMESIS, 20},
	{"¡PUM, HEADSHOT!", "Mata a 10 zombies con disparos en la cabeza siendo WESKER", 5, LOGRO_WESKER, 15},
	{"VOS NO PASAS", "Mata a un zombie con tu LASER", 5, LOGRO_WESKER, 0},
	{"YO Y MI MOTOSIERRA", "Gana el modo JASON", 5, LOGRO_JASON, 20},
	{"¡EL CABEZA!", "Gana el modo CABEZÓN", 10, LOGRO_CABEZON, 20},
	{"MERCENARIO", "Mata a 10 zombies e infecta a 10 humanos en una ronda^nPrimero mata, luego infecta", 5, LOGRO_OTROOS, 15},
	{"BAD LUCKY BRIAN", "Abre 10 cabezas zombies seguidas sin conseguir nada", 5, LOGRO_OTROOS, 0},
	{"LOS PRIMEROS", "Completa 25 logros", 5, LOGRO_OTROOS, 0},
	{"VAMOS POR MÁS", "Completa 75 logros", 10, LOGRO_OTROOS, 0},
	{"EXPERTO EN LOGROS", "Completa 150 logros", 20, LOGRO_OTROOS, 0},
	{"100 AL ROJO", "Acumula 100 cabezas zombie rojas", 5, LOGRO_HEAD_ZOMBIE, 0},
	{"¿75 AL VERDE?", "Acumula 75 cabezas zombie verdes", 5, LOGRO_HEAD_ZOMBIE, 0},
	{"50 PITUFOS", "Acumula 50 cabezas zombie azules", 5, LOGRO_HEAD_ZOMBIE, 0},
	{"25 Y SIGO", "Acumula 25 cabezas zombie amarillas", 5, LOGRO_HEAD_ZOMBIE, 0},
	{"10 BLANCAS", "Acumula 10 cabezas zombie blancas", 5, LOGRO_HEAD_ZOMBIE, 0},
	{"SUBE... Y BAJA", "Mata a 40 jugadores en una misma ronda", 5, LOGRO_CABEZON, 0},
	{"SUBE... Y ¡BOOOOOOOM!", "Mata a 50 jugadores en una misma ronda", 5, LOGRO_CABEZON, 0},
	{"CABEZÓN, Y CIEGO", "Has que el poder del CABEZÓN no mate a nadie", 10, LOGRO_CABEZON, 20},
	{"SOY DORADO", "Ser usuario PREMIUM", 5, LOGRO_OTROOS, 0},
	{"CUCHILLO QUE NO CORTA", "Muere sin haber hecho daño", 10, LOGRO_JASON, 0},
	{"¿SPEED HACK, DÓNDE?", "Gana el modo JASON en menos de un minuto", 5, LOGRO_JASON, 20},
	{"PRIMERO: COLORIDO", "Primero en acumular una cabeza zombie de cada color", 5, LOGRO_PRIMEROS, 0},
	{"PRIMERO: QUE SUERTE", "Primero en matar a un modo de cada tipo^nANIQUILADOR y CABEZÓN no cuentan!", 15, LOGRO_PRIMEROS, 0},
	{"PRIMERO: BUEN COMIENZO", "Primero en ganar un duelo", 5, LOGRO_PRIMEROS, 0},
	{"COLORIDO", "Acumula una cabeza zombie de cada color", 5, LOGRO_HEAD_ZOMBIE, 0},
	{"QUE SUERTE", "Mata a un modo de cada tipo^nANIQUILADOR y CABEZÓN no cuentan!", 5, LOGRO_OTROOS, 0},
	{"BUEN COMIENZO", "Gana un duelo", 5, LOGRO_DUELOS, 0},
	{"PRO DUELO", "Gana 50 duelos", 5, LOGRO_DUELOS, 0},
	{"TRANQUI... 120", "Gana 120 duelos", 10, LOGRO_DUELOS, 0},
	{"AL MÁXIMO", "Gana 200 duelos", 15, LOGRO_DUELOS, 0},
	{"OTRA FORMA DE JUGAR", "Gana un duelo con la apuesta máxima", 15, LOGRO_DUELOS, 0},
	{"ALIENÍGENA", "Mata al DEPREDADOR siendo ALIEN", 5, LOGRO_ALIEN, 0},
	{"DEPREDADOR", "Mata al ALIEN siendo DEPREDADOR", 5, LOGRO_PREDATOR, 0},
	{"MI CUCHILLA Y YO", "Mata a todos los jugadores siendo ANIQUILADOR", 10, LOGRO_ANNIHILATOR, 20},
	{"FRANCOTIRADOR", "Gana el modo SNIPER estando vivo", 5, LOGRO_SNIPER, 0},
	{"ALIEN ENTRENADO", "Mata a 8 humanos siendo ALIEN", 5, LOGRO_ALIEN, 0},
	{"SUPER ALIEN 86", "Mata a 12 humanos siendo ALIEN", 5, LOGRO_ALIEN, 0},
	{"RÁPIDO Y ALIENOSO", "Mata al DEPREDADOR y sobrevive con 70%+ de vida", 5, LOGRO_ALIEN, 0},
	{"¡¡FURIAAAA!!", "Desata el FRENESÍ DE LOCURA y mata a 3 humanos antes que se acabe", 5, LOGRO_ALIEN, 0},
	{"ROJO? BAH!", "Desata el FRENESÍ DE LOCURA y no mates a nadie hasta que se acabe", 5, LOGRO_ALIEN, 0},
	{"¡NO TE VEO, PERO TE HUELO!", "Mata al DEPREDADOR mientras está invisible", 10, LOGRO_ALIEN, 0},
	{"¡ESTOY RE LOCO!", "Mata al DEPREDADOR mientras estás bajo los efectos^ndel FRENESÍ DE LOCURA", 5, LOGRO_ALIEN, 0},
	{"SARGENTO DEPRE", "Mata a 8 zombies siendo DEPREDADOR", 5, LOGRO_PREDATOR, 0},
	{"DEPREDADOR 007", "Mata a 12 zombies siendo DEPREDADOR", 5, LOGRO_PREDATOR, 0},
	{"AHORA ME VES.. AHORA NO ME VES", "Utiliza la invisibilidad y no recibas daño mientras dure", 5, LOGRO_PREDATOR, 0},
	{"MI HABILIDAD ES MEJOR", "Mata a un ALIEN mientras estás invisible", 5, LOGRO_PREDATOR, 0},
	{"ANIQUILOSO", "Mata a 200 humanos con la cuchilla", 5, LOGRO_ANNIHILATOR, 0},
	{"CIENFUEGOS", "Mata a 100 humanos con la bazooka", 5, LOGRO_ANNIHILATOR, 0},
	{"CARNE", "Mata a 300 humanos", 5, LOGRO_ANNIHILATOR, 0},
	{"¡MUCHA CARNE!", "Mata a 400 humanos", 10, LOGRO_ANNIHILATOR, 0},
	{"¡DEMASIADA CARNE!", "Mata a 450 humanos", 15, LOGRO_ANNIHILATOR, 0},
	{"¡CARNE PARA TODOS!", "Mata a 500 humanos", 20, LOGRO_ANNIHILATOR, 0},
	{"EL PEOR DEL SERVER", "Utiliza tus 5 bazookas sin matar a nadie", 5, LOGRO_ANNIHILATOR, 0},
	{"MI DEAGLE Y YO", "Gana el modo WESKER", 5, LOGRO_WESKER, 20},
	{"INTACTO", "Gana el modo WESKER sin recibir daño", 10, LOGRO_WESKER, 20},
	{"NO ME HACE FALTA", "Utiliza los 3 LASER sin matar a nadie", 5, LOGRO_WESKER, 20},
	{"YO NO FUI", "Infecta a 5 humanos sin morir con tu vida al máximo^nsin tener furia zombie activa y sin bomba", 10, LOGRO_ZOMBIE, 0},
	{"YO FUI", "Utiliza dos furia zombie e infecta a 15 humanos mientras dura sin bomba", 5, LOGRO_ZOMBIE, 0},
	{"¿INTOXICAS O KE ASE?", "Infecta a 15+ humanos con una bomba tóxica", 5, LOGRO_ZOMBIE, 0},
	{"EXPERTO EN EL TEMA", "Infecta a 20+ humanos con una bomba tóxica", 10, LOGRO_ZOMBIE, 0},
	{"1.000 HUMANOS", "Infecta a 1.000 humanos", 5, LOGRO_ZOMBIE, 0},
	{"5.000 HUMANOS", "Infecta a 5.000 humanos", 10, LOGRO_ZOMBIE, 0},
	{"10.000 HUMANOS", "Infecta a 10.000 humanos", 15, LOGRO_ZOMBIE, 0},
	{"20.000 HUMANOS", "Infecta a 20.000 humanos", 20, LOGRO_ZOMBIE, 0},
	{"50.000 HUMANOS", "Infecta a 50.000 humanos", 25, LOGRO_ZOMBIE, 0},
	{"100.000 HUMANOS", "Infecta a 100.000 humanos", 30, LOGRO_ZOMBIE, 0},
	{"500.000 HUMANOS", "Infecta a 500.000 humanos", 40, LOGRO_ZOMBIE, 0},
	{"1.000.000 DE HUMANOS", "Infecta a 1.000.000 de humanos", 50, LOGRO_ZOMBIE, 0},
	{"BOMBA FALLIDA", "Lanza una bomba de infección sin infectar a nadie", 5, LOGRO_ZOMBIE, 20},
	{"ME ESTÁ GUSTANDO ESTO", "Infecta a 10 humanos en una misma ronda, sin utilizar bombas", 5, LOGRO_ZOMBIE, 20},
	{"PRO-ZOMBIE", "Infecta a 20 humanos en una misma ronda, sin utilizar bombas", 10, LOGRO_ZOMBIE, 20},
	{"SACANDO PROTECCIÓN", "Destruye 500 de chaleco humano", 5, LOGRO_ZOMBIE, 0},
	{"ESO NO TE SIRVE DE NADA", "Destruye 2.000 de chaleco humano", 10, LOGRO_ZOMBIE, 0},
	{"NO ES UN PROBLEMA PARA MI", "Destruye 5.000 de chaleco humano", 15, LOGRO_ZOMBIE, 0},
	{"SIN DEFENSAS", "Destruye 30.000 de chaleco humano", 20, LOGRO_ZOMBIE, 0},
	{"TOTALMENTE INDEFENSO", "Destruye 100.000 de chaleco humano", 30, LOGRO_ZOMBIE, 0},
	{"¿Y LA LIMPIEZA?", "Lanza una bomba de antidoto sin desinfectar a nadie", 5, LOGRO_ZOMBIE, 20},
	{"YO USO CLEAR ZOMBIE", "Lanza una bomba de antidoto y desinfecta a 15+ zombies", 5, LOGRO_ZOMBIE, 0},
	{"ANTIDOTO PARA TODOS", "Lanza una bomba de antidoto y desinfecta a 25+ zombies", 10, LOGRO_ZOMBIE, 0},
	{"DESGARRANDO FUERTE", "Sube al máximo la habilidad DAÑO ZOMBIE", 5, LOGRO_ZOMBIE, 0},
	{"¿Y EL SNIPER?", "Mata a 15 SNIPER", 5, LOGRO_ZOMBIE, 0},
	{"COMO PARA NO PEGARLE", "Realiza 200 disparos en la cabeza al CABEZÓN", 5, LOGRO_HUMANO, 0},
	{"EQUIPÁNDOME", "Crea un amuleto con todas las estadísticas positivas", 5, LOGRO_OTROOS, 0},
	{"LOS PRIMEROS 3", "Crea 3 amuletos", 5, LOGRO_OTROOS, 0},
	{"EN BUSCA DEL MEJOR", "Crea 10 amuletos", 10, LOGRO_OTROOS, 0},
	{"EL SEÑOR DE LOS AMULETOS", "Crea 20 amuletos", 15, LOGRO_OTROOS, 0},
	{"ULTRA LASER", "Desbloquea el ULTRA LASER", 5, LOGRO_WESKER, 0},
	{"ESTOY MUY SOLO", "Juega 7 días", 5, LOGRO_OTROOS, 0},
	{"FOREVER ALONE", "Juega 15 días", 10, LOGRO_OTROOS, 0},
	{"CREO QUE TENGO UN PROBLEMA", "Juega 30 días", 15, LOGRO_OTROOS, 0},
	{"SOLO EL ZP ME ENTIENDE", "Juega 50 días", 20, LOGRO_OTROOS, 0},
	{"EL MEJOR EQUIPO", "Gana el modo SNIPER sin que ningún compañero muera", 5, LOGRO_SNIPER, 0},
	{"EN MEMORIA A ELLOS", "Gana el modo SNIPER siendo el último SNIPER vivo", 5, LOGRO_SNIPER, 0},
	{"MI AWP ES MEJOR", "Mata 8 zombies con AWP", 5, LOGRO_SNIPER, 0},
	{"MI SCOUT ES MEJOR", "Mata a 8 zombies con SCOUT", 5, LOGRO_SNIPER, 0},
	{"SOBREVIVEN LOS DUROS", "Teniendo AWP, gana el modo con tu compañero de AWP", 5, LOGRO_SNIPER, 0},
	{"NO SOLO LA GANAN LOS DUROS", "Teniendo SCOUT, gana el modo con tu compañero de SCOUT", 5, LOGRO_SNIPER, 0},
	{"ZAS, EN TODA LA BOCA", "Mata 8 zombies con disparos en la cabeza", 5, LOGRO_SNIPER, 0},
	{"LA MEJOR OPCIÓN", "Sube un arma al nivel 5", 5, LOGRO_ARMAS, 0},
	{"UNA DE LAS MEJORES", "Sube un arma al nivel 10", 10, LOGRO_ARMAS, 0},
	{"MI PREFERIDA", "Sube un arma al nivel 15", 15, LOGRO_ARMAS, 0},
	{"DISPARO PRECISO", "Sube la habilidad PRECISIÓN de un arma al nivel 10", 10, LOGRO_ARMAS, 0},
	{"DISPARO VELOZ", "Sube la habilidad VELOCIDAD de un arma al nivel 5", 5, LOGRO_ARMAS, 0},
	{"DISPARO INFINITO", "Sube la habilidad BALAS de un arma al nivel 10", 10, LOGRO_ARMAS, 0},
	{"DISPARO DAÑINO", "Sube la habilidad DAÑO de un arma al nivel 10", 10, LOGRO_ARMAS, 0},
	{"YA NO ES TAN FÁCIL", "Sube al nivel 1000", 5, LOGRO_OTROOS, 0},
	{"PRIMERO: YA NO ES TAN FÁCIL", "Primero en subir al nivel 50", 5, LOGRO_PRIMEROS, 0},
	{"MI DAÑO CRECE Y CRECE", "Realiza 25.000.000 de daño", 25, LOGRO_HUMANO, 0},
	{"EASTER EGG", "Descubre el \yEaster Egg\w en el mapa \yzm_kfox_b5", 50, LOGRO_OTROOS, 0},
	{"EASTER EGG FAKE", "Descubre el \yEaster Egg Fake\w en el mapa \yzm_kfox_b5", 5, LOGRO_OTROOS, 0},
	{"VINCULADO", "Vincula tu cuenta de \yGAM!NGA\w con el \yZombie Plague", 5, LOGRO_OTROOS, 0},
	{"MEJOREN LA PUNTERÍA", "Recibe menos de 20 disparos en la cabeza", 10, LOGRO_CABEZON},
	{"¿A ESO LE LLAMAN DISPARAR?", "Recibe menos de 10 disparos en la cabeza", 15, LOGRO_CABEZON},
	{"CABEZITA", "Realiza 5.000 disparos en la cabeza", 5, LOGRO_HUMANO},
	{"A PLENO", "Realiza 15.000 disparos en la cabeza", 8, LOGRO_HUMANO},
	{"ROMPIENDO CABEZAS", "Realiza 50.000 disparos en la cabeza", 12, LOGRO_HUMANO},
	{"ABRIENDO CEREBROS", "Realiza 150.000 disparos en la cabeza", 16, LOGRO_HUMANO},
	{"DESCOCANDO", "Realiza 500.000 disparos en la cabeza", 25, LOGRO_HUMANO},
	{"ROMPECRANEOS", "Realiza 1.000.000 disparos en la cabeza", 30, LOGRO_HUMANO},
	{"MI MAC-10 ESTÁ LLENA", "Termina la ronda sin utilizar tu MAC-10", 5, LOGRO_ANNIHILATOR, 0},
	{"SOY UN MANCO", "Terminar la ronda sin matar a nadie con tu MAC-10^n gastando todas las balas", 5, LOGRO_ANNIHILATOR, 0},
	{"50 SON 50", "Mata 50 humanos con tu MAC-10", 5, LOGRO_ANNIHILATOR, 0},
	{"YO SI PEGO CON ESTO", "Mata 100 humanos con tu MAC-10", 10, LOGRO_ANNIHILATOR, 0},
	{"MUCHA PRECISIÓN", "Mata 130 humanos con tu MAC-10", 15, LOGRO_ANNIHILATOR, 0},
	{"5 DE LAS GRANDES", "Junta cinco cabezas violetas grandes", 5, LOGRO_HEAD_ZOMBIE, 0},
	{"SOY MUY NOOB", "Se el primero en morir en un DUELO FINAL", 5, LOGRO_DUELO_FINAL, 0},
	{"APRENDIENDO A FAKEAR", "Mata cinco humanos en un DUELO FINAL", 5, LOGRO_DUELO_FINAL, 0},
	{"VOY POR BUEN CAMINO", "Mata a ocho humanos en un DUELO FINAL", 10, LOGRO_DUELO_FINAL, 0},
	{"EXPERTO EN FAKA", "Mata a once humanos en un DUELO FINAL", 15, LOGRO_DUELO_FINAL, 0},
	{"VENGAN DE A UNO", "Mata a catorce humanos en un DUELO FINAL", 20, LOGRO_DUELO_FINAL, 0},
	{"MI PRIMER DUELO", "Gana un DUELO FINAL", 5, LOGRO_DUELO_FINAL, 0},
	{"VAMOS BIEN", "Gana cinco DUELOS FINALES", 10, LOGRO_DUELO_FINAL, 0},
	{"DEMASIADO FÁCIL", "Gana diez DUELOS FINALES", 15, LOGRO_DUELO_FINAL, 0},
	{"¿Y ESO, HACE ALGO?", "Infecta a 10 humanos bajo el efecto de la bomba locura^n^n\rESTE LOGRO YA NO ESTÁ DISPONIBLE", 5, LOGRO_ZOMBIE, 0},
	{"ESA LOCURA NO HACE NADA", "Infecta a 15 humanos bajo el efecto de la bomba locura^n^n\rESTE LOGRO YA NO ESTÁ DISPONIBLE", 10, LOGRO_ZOMBIE, 0},
	{"YO QUE VOS, USO HIELO", "Infecta a 20 humanos bajo el efecto de la bomba locura^n^n\rESTE LOGRO YA NO ESTÁ DISPONIBLE", 15, LOGRO_ZOMBIE, 0},
	{"2.500 HUMANOS", "Infecta a 2.500 humanos", 7, LOGRO_ZOMBIE, 0},
	{"2.500 ZOMBIES", "Mata a 2.500 zombies", 7, LOGRO_HUMANO, 0},
	{"PERFORANDO", "Realiza 300.000 disparos en la cabeza", 20, LOGRO_HUMANO, 0},
	{"¿CÓMO USABA EL PODER?", "Gana el modo CABEZON sin utilizar el poder", 5, LOGRO_CABEZON, 0},
	{"COMBO ZOMBIE", "Habilita el combo zombie", 10, LOGRO_OTROOS, 0},
	{"COMBO ZOMBIE: FIRST BLOOD", "Realiza el Combo Zombie First Blood", 1, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: DOUBLE KILL", "Realiza el Combo Zombie Double Kill", 2, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: MULTI KILL", "Realiza el Combo Zombie Multi Kill", 3, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: BLOOD BATH", "Realiza el Combo Zombie Blood Bath", 4, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: ULTRA KILL", "Realiza el Combo Zombie Ultra Kill", 5, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: MEGA KILL", "Realiza el Combo Zombie Mega Kill", 6, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: DOMINATING", "Realiza el Combo Zombie Dominating", 7, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: IMPRESSIVE", "Realiza el Combo Zombie Impressive", 8, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: RAMPAGE", "Realiza el Combo Zombie Rampage", 9, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: KILLING SPREE", "Realiza el Combo Zombie Killing Spree", 10, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: GODLIKE", "Realiza el Combo Zombie Godlike", 11, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: UNSTOPPABLE", "Realiza el Combo Zombie Unstoppable", 12, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: HOLY SHIT", "Realiza el Combo Zombie Holy Shit", 13, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: WICKED SICK", "Realiza el Combo Zombie Wicked Sick", 14, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: MONSTER KILL", "Realiza el Combo Zombie Monster Kill", 20, LOGRO_ZOMBIE, 15},
	{"COMBO ZOMBIE: LUDICROUSS KILL", "Realiza el Combo Zombie Ludicrouss Kill", 25, LOGRO_ZOMBIE, 15},
	{"¿YA DE ZOMBIE?", "Consigue ser el PRIMER ZOMBIE dos veces seguidas", 10, LOGRO_ZOMBIE, 20},
	{"ROMPIENDO CHALECO", "Destruye 60.000 de chaleco humano", 25, LOGRO_ZOMBIE, 0},
	{"APLICANDO MAFIA", "Mata cinco humanos en modo SWARM", 5, LOGRO_ZOMBIE, 15},
	{"TENGO AGUANTE", "Juega diez rondas sin ser infectado por otro zombie^ny sin desconectarte", 10, LOGRO_HUMANO, 15},
	{"10 A LA Z", "Mata diez zombies en una ronda PRIMER ZOMBIE", 5, LOGRO_HUMANO, 15},
	{"TRIPLETA PA'L LEAA", "Mata a los tres NEMESIS en modo SYNAPSIS", 5, LOGRO_HUMANO, 15},
	{"50 NEMESIS", "Mata cincuenta NEMESIS", 5, LOGRO_HUMANO, 0},
	{"JUNTANDO", "Junta 500.000 ammo packs", 15, LOGRO_OTROOS, 0},
	{"DE SOBRA", "Junta 1.000.000 de ammo packs", 20, LOGRO_OTROOS, 0},
	{"BAZOOKA PRO", "Compra la habilidad BAZOOKA MEJORADA", 5, LOGRO_NEMESIS, 0},
	{"LA EXPLOSIÓN SI MATA", "Mata veinte humanos con tu bazooka", 5, LOGRO_NEMESIS, 0},
	{"ANIQUILA ANIQUILADOR", "Lanza la bomba aniquilación sin matar a nadie", 5, LOGRO_SURVIVOR, 20},
	{"LA BAZOOKA MÁS RÁPIDA", "Gana el modo NEMESIS en menos de un minuto", 5, LOGRO_NEMESIS, 20},
	{"OOPS! MATÉ A TODOS", "Mata a todos los humanos con una bazooka", 5, LOGRO_ANNIHILATOR, 20},
	{"ARMERO PRINCIPIANTE", "Sube todas las armas disponibles a nivel 1", 30, LOGRO_ARMAS, 0},
	{"ARMERO AVANZADO", "Sube todas las armas disponibles a nivel 7", 100, LOGRO_ARMAS, 0},
	{"ARMERO EXPERTO", "Sube todas las armas disponibles a nivel 10", 500, LOGRO_ARMAS, 0},
	{"ARMERO PRO", "Sube todas las armas disponibles a nivel 15", 1500, LOGRO_ARMAS, 0},
	{"SOY VERDULERO", "Roba un tomate de la verdulería!", 5, LOGRO_OTROOS, 0},
	{"LA BUENA PIEDRA, NADA LE GANA", "Consigue sacar PIEDRA tres veces en una misma partida", 5, LOGRO_PPT, 0},
	{"POBRE BART, SIEMPRE ESCOJE PIEDRA", "Consigue sacar PAPEL tres veces en una misma partida", 5, LOGRO_PPT, 0},
	{"PANIC PUTO, METETE LA TIJERA EN EL ORTO", "Consigue sacar TIJERA tres veces en una misma partida", 5, LOGRO_PPT, 0},
	{"ESTE ES MI JUEGO", "Gana una partida al PPT", 1, LOGRO_PPT, 0},
	{"¿5 PIEDRAS?", "Gana 5 partidas al PPT", 2, LOGRO_PPT, 0},
	{"¿15 PAPELES?", "Gana 15 partidas al PPT", 3, LOGRO_PPT, 0},
	{"¿30 TIJERAS?", "Gana 30 partidas al PPT", 4, LOGRO_PPT, 0},
	{"SUMADO ME DA 50", "Gana 50 partidas al PPT", 5, LOGRO_PPT, 0},
	{"Y POR 2 SON 100", "Gana 100 partidas al PPT", 6, LOGRO_PPT, 0},
	{"MÁS 200 ME DA 300", "Gana 300 partidas al PPT", 10, LOGRO_PPT, 0},
	{"Y POR 1.67 ME DA 500", "Gana 500 partidas al PPT", 15, LOGRO_PPT, 0},
	{"A LA MIERDA LA LOTERÍA, YO QUIERO SER PPTERO", "Gana 1.000 partidas al PPT", 20, LOGRO_PPT, 0},
	{"¿EMPATE?", "Consigue empatar tres rondas en una misma partida", 3, LOGRO_PPT, 0},
	{"DEJÁ DE ELEGIR LO MISMO QUE YO", "Consigue empatar cinco rondas en una misma partida", 5, LOGRO_PPT, 0},
	{"DRAW DRAW DRAW", "Consigue empatar siete rondas en una misma partida", 7, LOGRO_PPT, 0},
	{"ESTO ME TIENE LOCO", "Consigue ganar tres partidas consecutivas^nen el mismo mapa y sin desconectarte", 5, LOGRO_PPT, 0},
	{"SOY INVENCIBLE", "Consigue ganar cinco partidas consecutivas^nen el mismo mapa y sin desconectarte", 10, LOGRO_PPT, 0},
	{"PRIMERO: SUERTE DE PRINCIPIANTE", "Gana el primer GK", 5, LOGRO_PRIMEROS, 0},
	{"DETONADOS", "Mata a cinco humanos en un DUELO FINAL de HE", 5, LOGRO_DUELO_FINAL, 0},
	{"BOMBAZO PARA TODOS", "Mata a diez humanos en un DUELO FINAL de HE", 10, LOGRO_DUELO_FINAL, 0},
	{"BOOOOOOM, EN TODA LA CARA", "Mata a quince humanos en un DUELO FINAL de HE", 20, LOGRO_DUELO_FINAL, 0},
	{"TODO UN AWPER", "Mata a cinco humanos en un DUELO FINAL de AWP", 3, LOGRO_DUELO_FINAL, 0},
	{"EXPERTO EN AWP", "Mata a diez humanos en un DUELO FINAL de AWP", 5, LOGRO_DUELO_FINAL, 0},
	{"PRO AWP", "Mata a quince humanos en un DUELO FINAL de AWP", 15, LOGRO_DUELO_FINAL, 0},
	{"CARNICERO", "Mata a quince zombies siendo JASON", 5, LOGRO_JASON, 0},
	{"MOTOSIERRA AFILADA", "Desbloquea la habilidad DAÑO JASON", 5, LOGRO_JASON, 0},
	{"¿Y EL SURVIVOR?", "Mata dos Nemesis en el modo PLAGUE siendo humano", 5, LOGRO_HUMANO, 0},
	{"100 NEMESIS", "Mata cien Nemesis", 10, LOGRO_HUMANO, 0},
	{"¿A ESTO LE LLAMÁS DESAFÍOS?", "Completa 20 desafíos", 10, LOGRO_OTROOS, 0},
	{"CHALLENGE ACEPTED", "Completa 25 desafíos", 15, LOGRO_OTROOS, 0},
	{"NO TENGO BALAS", "Gana el modo SNIPER sin realizar daño", 10, LOGRO_SNIPER, 20},
	{"DK BUGUEADA", "Finaliza el modo WEKSER sin haber realizado daño", 5, LOGRO_WESKER, 20},
	{"DOUBLE KILL", "Mata dos zombies de corrido sin que nadie infecte^nni mate de por medio y sin ser el último humano", 5, LOGRO_HUMANO, 15},
	{"TRIPLE KILL", "Mata tres zombies de corrido sin que nadie infecte^nni mate de por medio y sin ser el último humano", 15, LOGRO_HUMANO, 15},
	{"QUADRA KILL", "Mata cuatro zombies de corrido sin que nadie infecte^nni mate de por medio y sin ser el último humano", 20, LOGRO_HUMANO, 15},
	{"PENTA KILL", "Mata cinco zombies de corrido sin que nadie infecte^nni mate de por medio y sin ser el último humano", 25, LOGRO_HUMANO, 15},
	{"DECA KILL", "Realiza dos \yPENTA KILL\w en una misma ronda sin que te infecten", 40, LOGRO_HUMANO, 15},
	{"MI PRIMER REGALO", "Recoge un regalo", 1, LOGRO_NAVIDAD, 0},
	{"ACUMULANDO", "Acumula 25 regalos", 5, LOGRO_NAVIDAD, 0},
	{"MÁS REGALOS", "Acumula 50 regalos", 10, LOGRO_NAVIDAD, 0},
	{"SANTAZOM", "Acumula 100 regalos", 15, LOGRO_NAVIDAD, 0},
	{"YO SOY SANTA", "Acumula 200 regalos", 20, LOGRO_NAVIDAD, 0},
	{"ME HE PORTADO MUY BIEN", "Acumula 500 regalos", 30, LOGRO_NAVIDAD, 0},
	{"SABRÁS SI HAS SIDO BUENO", "Acumula 1000 regalos", 40, LOGRO_NAVIDAD, 0},
	{"PRIMERO: DIEZ REGALOS", "Primero en acumular 10 regalos", 15, LOGRO_PRIMEROS, 0},
	{"PRIMERO: SANTAZOM", "Primero en acumular 100 regalos", 30, LOGRO_PRIMEROS, 0},
	{"Y SIN VER", "Infecta a 5 humanos con una bomba de infección^nbajo el efecto de la bomba locura", 10, LOGRO_ZOMBIE, 0},
	{"DROGADO Y LOCO", "Infecta a 10 humanos con una bomba de infección^nbajo el efecto de la bomba locura", 15, LOGRO_ZOMBIE, 0},
	{"LA BOMBA LOCA", "Infecta a 15 humanos con una bomba de infección^nbajo el efecto de la bomba locura", 20, LOGRO_ZOMBIE, 0},
	{"PUZZLE", "Resuelve el puzzle del mapa \yzm_kpuzzle\w", 20, LOGRO_LEGENDARIA, 0},
	{"PRUEBA TU VALÍA I", "Mata a dos zombies con cuchillo en un mismo mapa sin desconectarte", 5, LOGRO_LEGENDARIA, 15},
	{"PRUEBA TU VALÍA II", "Mata a un NEMESIS con cuchillo", 5, LOGRO_LEGENDARIA, 15},
	{"PRUEBA TU VALÍA III", "Realiza \y1.000.000\w de daño con cuchillo siendo humano", 5, LOGRO_LEGENDARIA, 15},
	{"ARMANDO PIZZERO", "Sube todas las armas disponibles a nivel 20", 3000, LOGRO_ARMAS, 0},
	{"PARA EL LEA, EL PSYCHO Y EL MASIEE", "TURRA, TURRA TURRA TURRA (8)", 5, LOGRO_OTROOS, 0},
	{"YO COMBEO, VOS NO", "Desbloquea el COMBO WESKER", 5, LOGRO_WESKER, 0},
	{"HAGO OTRA COSA ADEMÁS DE CORTAR", "Desbloquea el COMBO JASON", 5, LOGRO_JASON, 0},
	{"PRIMER LUGAR", "Gana el premio de MEJOR TIRADOR", 5, LOGRO_OTROOS, 0},
	{"COMBO: IT'S A NIGHTMARE", "Realiza el Combo IT'S A NIGHTMARE", 30, LOGRO_HUMANO, 10},
	{"COMBO: WHAT THE FUUUUUUUU", "Realiza el Combo WHAT THE FUUUUUUUU", 35, LOGRO_HUMANO, 10},
	{"COMBO: I N F E R N O", "Realiza el Combo I N F E R N O", 40, LOGRO_HUMANO, 10},
	{"COMBO: AAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAA", 50, LOGRO_HUMANO, 10}
}

enum _:MaxStatsLogros {
	KILL_NEMESIS_IN_ARMAGEDDON = 0,
	ANTIDOTES_IN_MAP,
	COUNT_UNLIMITED_CLIP,
	DAMAGE_WITH_M4A1,
	DISPARO,
	RONDAS_SIN_INFECTAR,
	SIN_INFECTAR,
	KILL_ZOMBIES_IN_ROUND,
	KILL_SURVIVOR_IN_PLAGUE,
	COUNT_ANTIDOTE_BOMB,
	COUNT_INFECT_BURNING,
	COUNT_INFECT_FURIA,
	HEALTH_SURVIVOR,
	COUNT_HS_WESKER,
	INFECT_HUMANS_IN_ROUND,
	OPEN_HEADS,
	KILLS_CABEZON,
	JASON_DAMAGE_S,
	APUESTA_MAXIMA,
	ALIEN_KILL_HUMANS,
	ALIEN_HEALTH,
	ALIEN_KILL_HUMANS_WITH_FURY,
	PREDATOR_KILL_ZOMBIES,
	PREDATOR_HEALTH_IN_INVIS,
	ANNIHILATOR_WITH_KNIFE,
	ANNIHILATOR_WITH_BAZOOKA,
	WESKER_HEALTH,
	WESKER_LASER_NO_KILLS,
	ZOMBIE_HEALTH,
	ZOMBIE_KILLS_WITHOUT_FURY,
	ZOMBIE_KILLS_WITH_FURY,
	ZOMBIE_KILLS_IN_ROUND,
	ZOMBIE_BOMBS,
	SNIPER_KILL_AWP,
	SNIPER_KILL_SCOUT,
	SNIPER_KILL_HEADSHOT,
	TOXIC_INFECT,
	INFECT_ONE_MINUTE,
	WESKER_ULTRA_LASER,
	ANNIHILATOR_WITH_MAC10,
	INFECT_WITH_MADNESS,
	TWO_ZOMBIES,
	KILLS_MODE_SWARM,
	KILL_ZOMBIES_IN_PZ,
	KILL_NEMESIS_IN_SYNAPSIS,
	L_PPT_PIEDRA,
	L_PPT_PAPEL,
	L_PPT_TIJERA,
	L_PPT_ROUNDS_WINS,
	KILL_WITH_HE,
	KILL_WITH_AWP,
	KILL_JASON_ZOMBIES,
	KILL_NEMESIS_IN_PLAGUE,
	SNIPER_NO_DMG,
	WESKER_NO_DMG
};

enum _:MetaLogrosInt {
	BETA_TESTER_SUPREMO = 0,
	HEAD_MULTICOLOR,
	MAESTRO_DUELO,
	MAESTRO_NEMESIS,
	MAESTRO_SURVIVOR,
	MAESTRO_WESKER,
	MAESTRO_SNIPER,
	MAESTRO_ANIQUILADOR,
	MAESTRO_DEPREDADOR,
	MAESTRO_ALIEN,
};

new const META_LOGROS[][LogrosStruct] = {
	{"BETA TESTER SUPREMO", "Desbloquea \yBETA TESTER\w y \yBETA TESTER AVANZADO", 10, -1, 0},
	{"MULTICOLOR", "Acumula 100 cabezas zombie de todos los colores", 25, -1, 0},
	{"MAESTRO DEL DUELO", "Desbloquea \yPRO DUELO\w, \yTRANQUI... 120\w,^n\yAL MÁXIMO\w y \yOTRA FORMA DE JUGAR", 25, -1, 0},
	{"MAESTRO NEMESIS", "Desbloquea \yNEMESIS PRINCIPIANTE\w, \yAVANZADO\w, \yEXPERTO\w y \yPRO", 15, -1, 0},
	{"MAESTRO SURVIVOR", "Desbloquea \ySURVIVOR PRINCIPIANTE\w, \yAVANZADO\w, \yEXPERTO\w y \yPRO", 15, -1, 0},
	{"MAESTRO WESKER", "Desbloquea \y¡PUM, HEADSHOT!\w, \yMI DEAGLE Y YO\w, \yINTACTO\w,^n\yNO ME HACE FALTA\w y \yULTRA LASER", 20, -1, 0},
	{"MAESTRO SNIPER", "Desbloquea \yFRANCOTIRADOR\w, \yEL MEJOR EQUIPO\w, \yEN MEMORIA A ELLOS\w,^n\yMI AWP ES MEJOR\w, \yMI SCOUT ES MEJOR\w y \yZAS, EN TODA LA BOCA", 20, -1, 0},
	{"MAESTRO ANIQUILADOR", "Desbloquea \yMI CUCHILLA Y YO\w, \yANIQUILOSO\w, \yCIENFUEGOS\w,^n\yEL PEOR DEL SERVER\w y \y¡CARNE PARA TODOS!", 20, -1, 0},
	{"MAESTRO DEPREDADOR", "Desbloquea \yDEPREDADOR\w, \ySARGENTO DEPRE\w, \yDEPREDADOR 007\w,^n\yAHORA ME VES.. AHORA NO ME VES\w y \yMI HABILIDAD ES MEJOR", 20, -1, 0},
	{"MAESTRO ALIEN", "Desbloquea \yALIENÍGENA\w, \ySUPER ALIEN 86\w, \yRÁPIDO Y ALIENOSO\w,^n\y¡¡FURIAAAA!!\w, \y¡NO TE VEO, PERO TE HUELO!\w y \y¡ESTOY RE LOCO!", 20, -1, 0}
};

enum _:DesafiosStruct {
    desafioName[64],
    desafioDesc[128],
    desafioReward,
	desafioUsersNeed,
	desafioLevel,
	desafioLevelMult
};

enum _:ChallengesInt {
	PIROMANO = 0,
	FRIGOMANO,
	EL_TIEMPO_APREMIA,
	FULMINANTE,
	L_ANIQUILACION
};

new const DESAFIOS[][DesafiosStruct] = {
	{"PIRÓMANO", "Quema zombies con una sola granada de fuego", 1, 0, 15, 0}, // 1, 2, 3...
	{"FRIGÓMANO", "Congela zombies con una sola granada de hielo", 1, 0, 15, 0}, // 1, 2, 3...
	{"EL TIEMPO APREMIA", "Infecta humanos en un minuto (BOMBAS no cuentan)^nEl tiempo corre desde tu primera infección", 1, 0, 15, 1}, // 1, 3, 5...
	{"FULMINANTE", "Siendo Wesker mata zombies con tu \yULTRA LASER\w", 1, 0, 3, 2}, // 2, 4, 6...
	{"ANIQUILADOR", "Aniquila zombies con una bomba de aniquilación", 1, 0, 15, 0} // 1, 2, 3...
};

enum _:TutorColors {
	TUTOR_RED = 1,
	TUTOR_BLUE,
	TUTOR_YELLOW,
	TUTOR_GREEN
};

enum _:MaxHeadZombies {
	HEAD_RED = 0,
	HEAD_GREEN,
	HEAD_BLUE,
	HEAD_YELLOW,
	HEAD_WHITE,
	HEAD_VIOLET_SMALL,
	HEAD_VIOLET_BIG,
	HEAD_DARK_BLUE
}

new const HEAD_ZOMBIES_NAMES[][] = {
	"roja",
	"verde",
	"azul",
	"amarilla",
	"blanca",
	"violeta pequeña",
	"violeta grande",
	"celeste"
};

new const HEAD_ZOMBIES_MESSAGES[][] = {
	"La cabeza zombie tenía basura",
	"Ouuch! Solo tenia mugre",
	"La cabeza zombie estaba repleta de hongos",
	"Mala suerte! La cabeza zombie estaba vencida",
	"El demonio del quinto subsuelo se quedo con el premio",
	"Nada por aquí.. nada por allá",
	"Buena suerte tenemos todos, a pesar de que no te tocó nada"
};

new const AMULETOS_NAME_LIST[][] = {
	"ROSA DE LOS VIENTOS",
	"MARCA DE JO",
	"FUERZA DE LOS VIENTOS",
	"OLEADA",
	"BARREDOR HEXTECH",
	"CATALIZADOR PROTECTOR",
	"CHALECO DE CADENAS",
	"CORAZON DE HIELO",
	"CRISTAL DE RUBI",
	"EMBLEMA DE VALOR",
	"MEDALLON DE HIERRO",
	"PERLA DEL REJUVENECIMIENTO",
	"PICO DE LA SUERTE",
	"PIEDRA FILOSOFAL",
	"PETRINA DE DOMINAMUNDOS",
	"RAICES DE DOLOR",
	"SELLO EVOLUTIVO DE RA DEN",
	"ATADURAS DE FUEGO COSMICO",
	"ARMADURA DE VALOR",
	"ESCUDO DE LA ESPERANZA",
	"RUNA DIVINA",
	"BASTON ANTIGUO",
	"ELIXIR DE DEFENSA",
	"ELIXIR DE FUERZA",
	"OJO DE VENGANZA",
	"GEMA DE AISLAMIENTO",
	"FAJA DE PODER",
	"MANO DE LOS DIOSES",
	"MARCA DE LA VANGUARDIA",
	"CORREA DE LOS LAMENTOS",
	"MASCARA MISTICA",
	"FRAGMENTO DE OBSIDIANA",
	"COLLAR DE PURIFICACION",
	"VARA DE LA PERDICION",
	"PIEDRA EMBRUJADA",
	"HONOR",
	"RESISTENCIA DEL LOBO",
	"PIEDRA DEL DRAGON",
	"MARCA DEL PRINCIPIANTE",
	"FURIA DEL GUARDIAN",
	"MANIPULADOR DE EDADES",
	"GRAN TALISMAN",
	"ORNAMENTO REFRESCANTE",
	"RESTAURACION DE LA PIEDRA LUNAR",
	"CABELLO DE LA MADRE DEMONIACA",
	"ALAS DEL DESTINO",
	"ABRAZO DE SERAFIN",
	"ANTORCHA DE FUEGO NEGRO",
	"FRAGMENTO DE HORROCRUXES",
	"ESCARABAJO EGIPCIO",
	"RESGUARDO LUNAR",
	"COLLAR DE PITUSA",
	"OJO DE ETLICH",
	"RELICARIO DE RONAL",
	"TALISMAN DE ARANOCH",
	"LUZ SAGRADA",
	"LA ESENCIA DEL TIEMPO",
	"ORO DE KYMBO",
	"ESTRELLA DE AZKARANTH",
	"UROBORO LEGENDARIO",
	"AMULETO DE XEPHIRIA",
	"CALEIDOSCOPIO DE MARA",
	"CRUZ DE DUNCRAIG",
	"LEALTAD DE TAL RASHA",
	"SIGNO DEL VIAJERO",
	"BARBA DEL ENANO RAIMOND",
	"ESCAMA DEL DRAGON AZUL",
	"FRAGMENTO DE FLAUTA PETRIFICADA",
	"MELENA DE ASLAN",
	"TALISMAN DE CASPIAN",
	"DIENTE DE NASHOR",
	"SOMBRERO DEL MAGO HIBRIDO",
	"GARRA DEL LICANTROPO",
	"ANTIGUO COLMILLO SANGRIENTO"
};

new const AMULETOS_STAT_LIST[][] = {"VIDA", "VELOCIDAD", "GRAVEDAD", "DAÑO"};

enum _:MaxDuelos {
	MENU_DUELO_EXPERIENCIA = 0,
	MENU_DUELO_AMMOPACKS,
	MENU_DUELO_PH,
	MENU_DUELO_PZ,
	MENU_DUELO_PF
};

enum _:MaxDuelosTypes {
	DUELO_HUM_INF_ROUND = 0,
	DUELO_HUM_INF_MAP,
	DUELO_ZOM_MAT_ROUND,
	DUELO_ZOM_MAT_MAP,
	DUELO_DMG_DON_ROUND,
	DUELO_DMG_DON_MAP
};

new const MENU_DUELOS[][] = {
	"EXPERIENCIA", "AMMO PACKS", "PH", "PZ", "PF"
};

new const MENU_DUELOS_TYPE[][] = {
	"HUMANOS INFECTADOS EN UNA RONDA", "HUMANOS INFECTADOS EN UN MAPA", "ZOMBIES MATADOS EN UNA RONDA", "ZOMBIES MATADOS EN UN MAPA", "DAÑO HECHO EN UNA RONDA", "DAÑO HECHO EN UN MAPA"
};

new const MENU_DUELOS_PREFIX[][] = {
	"EXP", "APS", "PH", "PZ", "PF"
};

new const DIFICULT_NAMES[][] = {
	"NORMAL", "DIFÍCIL", "MUY DIFÍCIL"
};

new const GUILD_EXP_LEVEL[] = {0, 10000, 50000, 100000, 175000, 300000, 500000, 1000000, 1750000, 3000000, 5000000, 7500000, 10000000, 15000000, 23500000, 30000000, 40000000, 65000000, 100000000, 150000000, 300000000, 500000000, 750000000, 1000000000, 2000000000, 2100000000};

new const ZP_PREFIX[] = "!g[ZP]!y ";
new const ZP_PREFIX_GUILD[] = "!g[HERMANDAD]!y ";
new const ZP_PREFIX_LOTTERY[] = "!g[LOTERÍA]!y ";
new const ZP_PREFIX_PPT[] = "!g[ZP - PPT]!y ";
new const ZP_PREFIX_GK[] = "!g[ZP - GK]!y ";

#if defined NOTICIAS
	new const ZP_PREFIX_NOTICIAS[] = "!g[NOTICIA]!y ";
#endif

enum _:DueloFinalParts {
	TODOS = 0,
	CUARTOS,
	SEMIFINAL,
	FINAL
};

/** ==================================================
	[ FIN VARIABLES GENERALES ]
================================================== **/

/** ==================================================
	[ VARIABLES GLOBALES ]
================================================== **/

#define CLASSNAME_THINK_TOP_EXP		"think_EXP"
#define CLASSNAME_THINK_TOP_COMBO	"think_COMBO"
#define CLASSNAME_THINK_TOP_TIME		"think_TIME"
#define CLASSNAME_THINK_TOP_ACH		"think_ACH"
#define CLASSNAME_THINK_TOP_AMU		"think_AMU"
#define CLASSNAME_THINK_TOP_COMBOMAP "think_COMBO_MAP"
#define NEXTTHINK_THINK_TOP 			get_gametime() + 535.0

new Handle:g_sql_tuple;
new Handle:g_sql_connection;

#if defined USE_ORPHEU
	new OrpheuStruct:g_ppmove;
	
	new OrpheuHook:g_oMapConditions;
	new OrpheuHook:g_oWinConditions;
#endif

new g_TOP_EXP_player_name[32];
new g_TOP_EXP_exp[15];
new g_TOP_EXP_level;
new g_TOP_RNG_level;

new g_TOP_COMBO_player_name[32];
new g_TOP_COMBO_combo[15];

new g_TOP_TIME_player_name[32];
new g_TOP_TIME_hours;
new g_TOP_TIME_days;
new g_TOP_TIME_time;

new g_TOP_ACH_player_name[32];
new g_TOP_ACH_ach;

new g_TOP_AMU_AllUsers;

new g_sql_error[512];
new g_lights[2];
new g_duel_final_mode[15];
new g_confirmar_amuleto[32];

new g_taringa_at_night = 0;
new g_endround_forced = 0;
new g_mode_count[Modes];
new g_modes_count = 0;
new g_bazooka_ent = 0;
new g_bazooka_fly = 0;
new g_rank_global = 0;
new g_duel_final_first = 0;
new g_eegg_fake_global = 0;
new g_kiske_on = 0;
new g_pozo_acc = 0;
new g_slowdown = 0;
new g_gamblers = 0;
new g_mode[Modes];
new g_duel_final;
new g_cabezon_power_global = 0;
new g_grunt_nodamage;
new g_grunt_reward_global;
new g_grunt_power;
new g_win_nemesis_one_minute;
new g_speed_head = 300;
new g_duel_final_modeN = 0;
new g_eegg_global = 0;
new g_gk_last_winner = 0;
new g_gk_number_fake = 0;
new g_only_modes = 0;

//new g_fakeplayer;

#if defined USE_ORPHEU
	new g_message_hid[64];
	new g_user_hid[33][64];
	new g_user_hid_last[33][64];
#endif

//new Float:g_bazooka_time;
//new Float:g_bazooka_origin[3];

new Float:g_mult_add = 0.0;
new Float:g_mult_add_aux = 0.0;
new Float:g_sniper_damage;
new Float:g_systime_head;

new Float:g_hud_position[33][TypePositions][3];
new Float:g_head_zombie_lasttouch[33];
new Float:g_amuleto_stat2[33][5][2];
new Float:g_combo_need_damage[33];
new Float:g_ammos_need_damage[33];
//new Float:g_frozen_angles[33][3];
new Float:g_alien_origin[33][3];
new Float:g_frozen_gravity[33];
new Float:g_level_percent[33];
new Float:g_ammos_damage[33];
new Float:g_systime_link[33];
new Float:g_systime_tops[33];
new Float:g_zombie_speed[33];
new Float:g_human_speed[33];
new Float:g_damage[33][2];
new Float:g_mult_exp[33];
new Float:g_mult_aps[33];

new g_hab[33][MaxHabilitiesNormal][MaxClassNormal];
new g_metalogros_unlocked[33][MetaLogrosInt][32];
new g_logros_unlocked[33][LogrosInt][32];
new g_guild_userid_concat[MAX_GUILDS][5];
new g_guild_username[MAX_GUILDS][5][32];
new g_color[33][TypeColors][MaxColors];
new g_logros_stats[33][MaxStatsLogros];
new g_head_zombie[33][MaxHeadZombies];
new g_duelo_stats[33][MaxDuelosTypes];
new g_combo_max_guild[MAX_GUILDS][6];
new g_metalogros[33][MetaLogrosInt];
new g_dificult[33][MaxClassNormal];
new g_page_logros[33][LogrosClass];
new g_desafios[33][ChallengesInt];
new g_weapon_secondary_actual[33];
new g_guild_invite_again[33][32];
new g_duel_final_kills_total[33];
new g_points[33][MaxClassNormal];
new g_guild_name[MAX_GUILDS][32];
new g_burning_nitro_duration[33];
new g_combo_need_damage_fake[33];
new g_amuleto_name_FAKE[33][64];
new g_amuleto_name_menu[33][64];
new g_weapon_primary_actual[33];
new g_logros_int[33][LogrosInt];
new g_survivor_kill_zombies[33];
new g_user_reason_ban[33][128];
new g_distance_nightvision[33];
new g_skill_weapons[33][31][5];
new g_duelo_bet[33][MaxDuelos];
new g_combo_zombie_infects[33];
new g_amuleto_stat3[33][5][4];
new g_amuleto_stat1[33][5][4];
new g_user_expire_ban[33][32];
new g_nemesis_kill_humans[33];
new g_antidote_bomb_count[33];
new g_amuleto_name[33][5][64];
new g_guild_level[MAX_GUILDS];
new g_combo_guild[MAX_GUILDS];
new g_supernova_bomb_mode[33];
new g_combo_reward_zombie[33];
new g_supernova_bomb_pro[33];
new g_amuleto_next_equip[33];
new g_user_admin_ban[33][32];
new g_infection_bomb_map[33];
new g_madness_bomb_count[33];
new g_level_hardcore[33][2];
new g_madness_bomb_mode[33];
new g_guild_exp[MAX_GUILDS];
new g_level_weapons[33][31];
new g_annihilator_kills[33];
new g_logros[33][LogrosInt];
new g_kills_weapons[33][31];
new g_respawn_as_zombie[33];
new g_zombie_class_next[33];
new g_user_password[33][32];
new g_in_duelo_official[33];
new g_madness_bomb_move[33];
new g_bubble_bomb_mode[33];
new g_madness_bomb_pro[33];
new g_duel_final_kills[33];
new g_guild_invite[33][33];
new g_save_weapons[33][31];
new g_item_extra[33][8][2];
new g_human_class_next[33];
new g_chat_mode_prefix[33];
new g_burning_duration[33];
new g_weapon_secondary[33];
new g_duelo_invite[33][33];
new g_grunt_reward_PH[33];
new g_combo_zombie_ok[33];
new g_synapsis_damage[33];
new g_guild_userid[33][5];
new g_time_playing[33][4];
new g_pistol_autofire[33];
new g_stats[33][MaxStats];
new g_weapon_terciary[33];
new g_hudcombo_effect[33];
new g_playermodel[33][32];
new g_kill_bomb_count[33];
new g_bubble_bomb_pro[33];
new g_guild_abandono[33];
new g_desafios_count[33];
new g_predator_power[33];
new g_player_restore[33];
new g_unlimited_clip[33];
new g_playername[33][32];
new g_infection_bomb[33];
new g_weapon_primary[33];
new g_bazooka_follow[33];
new g_hudcombo_abrev[33];
new g_primary_weapon[33];
new g_points_lost[33][2];
new g_supernova_bomb[33];
new g_guild_creator[33];
new g_amuleto_equip[33];
new g_user_register[33];
new g_madness_count[33];
new g_currentweapon[33];
new g_chat_text[33][16];
new g_classname[33][32];
new g_cabezon_power[33];
new g_synapsis_head[33];
new g_antidote_bomb[33];
new g_grunt_reward[33];
new g_cost_amuleto[33];
new g_guild_united[33];
new g_madness_bomb[33];
new g_guild_ids[33][5];
new g_cabezon_head[33];
new g_player_solid[33];
new g_account_vinc[33];
new g_combo_reward[33];
new g_combo_damage[33];
new g_bazooka_mode[33];
new g_special_mode[33];
new g_zombie_class[33];
new g_sniper_power[33];
new g_logros_count[33];
new g_eegg_fake[33][2];
new g_anniq_knife[33];
new g_dead_health[33];
new g_grunt_flash[33];
new g_human_class[33];
new g_weapon_auto[33];
new g_user_logged[33];
new g_page[33][Pages];
new g_mult_points[33];
new g_human_model[33];
new g_annihilator[33];
new g_in_longjump[33];
new g_human_invis[33];
new g_firstzombie[33];
new g_isconnected[33];
new g_steamid[33][32];
new g_user_banned[33];
new g_alien_power[33];
new g_bubble_bomb[33];
new g_anniq_head[33];
new g_guild_slot[33];
new g_systime_in[33];
new g_duelo_lost[33];
new g_duelo_type[33];
new g_hud_effect[33];
new g_reduce_dmg[33];
new g_lastzombie[33];
new g_nitro_bomb[33];
new g_gk_number[33];
new g_buy_stuff[33];
new g_ammopacks[33];
new g_hud_abrev[33];
new g_kill_bomb[33];
new g_chat_mode[33];
new g_lasthuman[33];
new g_duelo_win[33];
new g_diamonds[33];
new g_combo_ok[33];
new g_in_duelo[33];
new g_longjump[33];
new g_nodamage[33];
new g_survivor[33];
new g_predator[33];
new g_bet_done[33];
new g_guild_id[33];
new g_user_id[33];
new g_isalive[33];
new g_cabezon[33];
new g_nvision[33];
new g_bazooka[33];
new g_nemesis[33];
new g_bet_num[33];
new g_sniper[33];
new g_wesker[33];
new g_health[33];
new g_zombie[33];
new g_frozen[33];
new g_canbuy[33];
new g_grunt[33];
new g_kiske[33];
new g_jason[33];
new g_alien[33];
new g_combo[33];
new g_laser[33];
new g_level[33];
new g_reset[33];
new g_duelo[33];
new g_guild[33];
new g_rank[33];
new g_exp[33];
new g_bet[33];

new g_ppt_play[33];
new g_ppt_enemy[33];
new g_ppt_played[33];
new g_ppt_round[33];
new g_ppt_win[33];

new g_ppt_drawround_global[33];
new g_ppt_winround_global[33];
new g_ppt_loseround_global[33];
new g_ppt_weapon_global[33][3];
new g_ppt_winppt_global[33];
new g_ppt_loseppt_global[33];
new g_ppt_maxround_global;

new g_eegg_kill_z_round[33];
new g_eegg_infects_round[33];
new g_eegg_antidote[33];
new g_eegg_madness[33];

new g_eegg_kill_z_map[33];
new g_eegg_infects_map[33];
new g_eegg_unclip[33];
new g_eegg_lj[33];

new Float:g_spawns[MAX_CSDM_SPAWNS][3];
new Float:g_models_targettime;
new Float:g_teams_targettime;

new g_logros_primeros_unlocked[LogrosInt][32];
new g_logros_primeros_name[LogrosInt][32];
new g_logros_primeros[LogrosInt];
new g_modes_count_map[Modes];
new g_antidotebombcounter = 0;
new g_cabezon_head_total = 0;
new g_killbombcounter = 0;
new g_infbombcounter = 0;
new g_madnesscounter = 0;
new g_fwPrecacheSound;
new g_Hud_ComboGuild;
new g_switchingteam;
new g_scorezombies;
new g_scorehumans;
new g_maxplayers;
new g_spawnCount;
new g_Hud_Combo;
new g_Hud_Perm;
new g_newround;
new g_endround;
new g_fwSpawn;
new g_Hud;

new g_message_scoreattrib;
new g_message_screenshake;
//new g_message_spechealth2;
new g_message_ammopickup;
new g_message_screenfade;
new g_message_flashlight;
new g_message_hideweapon;
new g_message_weappickup;
//new g_message_spechealth;
new g_message_tutorclose;
new g_message_scoreinfo;
new g_message_nvgtoggle;
new g_message_crosshair;
new g_message_curweapon;
new g_message_sendaudio;
new g_message_tutortext;
new g_message_teamscore;
new g_message_flashbat;
new g_message_teaminfo;
new g_message_deathmsg;
new g_message_textmsg;
new g_message_health;
new g_message_money;
new g_message_fov;

new g_CVAR_Delay;

/** ==================================================
	[ FIN VARIABLES GLOBALES ]
================================================== **/

/** ==================================================
	[ FORWARDS - AMXX ]
================================================== **/

/* === MODELOS PLAYERS === */
new const MODEL_NEMESIS[][] = {"gk_nemesis_00", "gk_nemesis_01", "tcs_nemesis_1"};
new const MODEL_SURVIVOR[][] = {"gk_survivor_00", "gk_lee", "gk_survivor_01"};
new const MODEL_WESKER[] = "gk_humano_05";
new const MODEL_CABEZON[] = "gk_zombie_03";
new const MODEL_JASON[] = "tcs_jason_1";
new const MODEL_ALIEN[] = "tcs_alien_1";
new const MODEL_PREDATOR[] = "tcs_predator_1";
new const MODEL_ANNIHILATOR[] = "tcs_annihilator_1";
new const MODEL_GRUNT[] = "gk_grunt";

new const MODELOS_HUMANOS[][] = {"tcs_humano13", "tcs_humano_1", "tcs_humano_2", "tcs_humano_3", "tcs_humano_4", "tcs_humano_5", "tcs_humano_6", "tcs_humano_7", "tcs_humano_8", "tcs_humano14", "tcs_humano15", "tcs_humano16", "tcs_humano20", "tcs_humano21", "tcs_humano23", "tcs_humano22", "tcs_humano24",
"gk_humano_00", "gk_humano_00", "gk_humano_01", "gk_humano_01",
"gk_humano_02", "gk_humano_02", "gk_humano_02", "gk_humano_02", // 600
"gk_humano_03", "gk_humano_03", "gk_humano_03", "gk_humano_03", // 700
"gk_humano_04", "gk_humano_04", "gk_humano_04", "gk_humano_04", // 800
"gk_humano_05", "gk_humano_05", "gk_humano_05", "gk_humano_05", // 900
"gk_humano_05", "gk_humano_05", "gk_humano_05", "gk_humano_05", // 1000
"gk_humano_07", "gk_humano_07", "gk_humano_07", "gk_humano_07", // 1100
"gk_humano_08", "gk_humano_08", "gk_humano_08", "gk_humano_08", // 1200
"gk_humano_09", "gk_humano_09", // 1250
"gk_humano_10", "gk_humano_10", // 1300
"gk_humano_11", "gk_humano_11", // 1350
"tcs_humano_11", "tcs_humano_11", // 1400
"gk_humano_12", "gk_humano_12", // 1450
"gk_human_16", "gk_human_16", // 1500
"gk_humano_14", "gk_humano_14", // 1550
"gk_humano_15", "gk_humano_15" // 1600
};

new const MODELOS_HUMANOS_PREC[][] = {"tcs_humano13", "tcs_humano_1", "tcs_humano_2", "tcs_humano_3", "tcs_humano_4", "tcs_humano_5", "tcs_humano_6", "tcs_humano_7", "tcs_humano_8", "tcs_humano14", "tcs_humano15", "tcs_humano16", "tcs_humano20", "tcs_humano21", "tcs_humano23", "tcs_humano22",
"tcs_humano24", "gk_humano_00", "gk_humano_01", "gk_humano_02", "gk_humano_03", "gk_humano_04", "gk_humano_05", /*"gk_humano_06",*/ "gk_humano_07", "gk_humano_08", "gk_humano_09", "gk_humano_10", "gk_humano_11", "tcs_humano_11", "gk_humano_12", "gk_human_16", "gk_humano_14", "gk_humano_15"};

/* === MODELOS === */
new const g_model_infectionbomb[] = "models/zombie_plague/v_grenade_infect.mdl";
new const g_model_hebomb[] = "models/zombie_plague/v_grenade_fire.mdl";
new const g_model_fbbomb[] = "models/zombie_plague/v_grenade_frost.mdl";
new const g_model_sgbomb[] = "models/zombie_plague/v_grenade_flare.mdl";
//new const g_model_toxicbomb[][] = {"models/zp5/v_toxicbomb.mdl", "models/zp5/p_toxicbomb.mdl", "models/zp5/w_toxicbomb.mdl"};
new const g_model_bazooka[][] = {"models/zombie_plague/tcs_v_bazooka.mdl", "models/zombie_plague/tcs_p_bazooka.mdl"};
new const g_model_rocket[][] = {"models/zombie_plague/tcs_rocket_1.mdl", "models/w_usp.mdl"};
new const g_model_killbomb[] = "models/zp5/gk_killbomb.mdl";
new const g_model_claws[][] = {"models/zombie_plague/v_knife_zombie.mdl", "models/zombie_plague/tcs_garras_1.mdl", "models/zombie_plague/tcs_garras_2.mdl", "models/zombie_plague/tcs_garras_3.mdl", "models/zombie_plague/tcs_garras_4.mdl", "models/zombie_plague/tcs_garras_5.mdl",
"models/zombie_plague/tcs_garras_8.mdl", "models/zombie_plague/tcs_garras_9.mdl", "models/zombie_plague/tcs_garras_10.mdl", "models/zombie_plague/tcs_garras_15.mdl", "models/zombie_plague/tcs_garras_16.mdl", "models/zp5/v_zombie_claw_00.mdl", "models/zp5/v_zombie_claw_01.mdl",
"models/zp5/v_zombie_claw_02.mdl", "models/zp5/v_zombie_claw_03.mdl", "models/zp5/v_zombie_claw_04.mdl", "models/zp5/v_zombie_claw_05.mdl", "models/zp5/v_zombie_claw_06.mdl", "models/zp5/v_zombie_claw_07.mdl", "models/zp5/v_zombie_claw_08.mdl"};
new const g_model_claws_nemesis[] = "models/zp5/gk_claws_nem.mdl";
new const g_model_chainsaw[][] = {"models/zp5/v_chainsaw.mdl", "models/zp5/p_chainsaw.mdl"};
new const g_model_headzombie[] = "models/zp_tcs/head_z_big.mdl";
new const g_model_headzombie_small[] = "models/zp_tcs/head_z_small.mdl";
new const g_model_claws_alien[] = "models/zombie_plague/v_alien_knife.mdl";
new const g_model_claws_annihilator[] = "models/zp_tcs/v_knife_anni.mdl";
new const g_model_madnessbomb[] = "models/zp_tcs/v_grenade.mdl";
new const g_model_bubblebomb[][] = {"models/zp_tcs/v_grenade_bubble.mdl", "models/zp_tcs/bubble_aura.mdl"};
new const g_model_nitrobomb[][] = {"models/zp5/gk_fbbomb_pro.mdl", "models/zp5/gk_w_fbbomb_pro.mdl"};
new const g_model_madnessbomb_pro[][] = {"models/zp5/gk_hebomb_pro.mdl", "models/zp5/w_killbomb.mdl"};
new const g_model_bubblebomb_pro[][] = {"models/zp5/gk_sgbomb_pro.mdl", "models/zp5/gk_w_sgbomb_pro.mdl"};

/* === SONIDOS === */
new const g_sound_buyammo[] = "items/9mmclip1.wav";
new const g_sound_flare[] = "zp5/flare_light.wav";
new const g_sound_win_humans[] = "zombie_plague/tcs_win_humans_4.wav";
new const g_sound_win_zombies[] = "zombie_plague/tcs_win_zombies_4.wav";
new const g_sound_win_noone[] = "ambience/3dmstart.wav";
new const g_sound_zombie_pain[][] = {"zombie_plague/zombie_pain1.wav", "zombie_plague/zombie_pain2.wav", "zombie_plague/zombie_pain_2_t.wav", "zombie_plague/zombie_pain3.wav", "zombie_plague/zombie_pain_1_t.wav", "zombie_plague/zombie_pain4.wav", "zombie_plague/zombie_pain5.wav",
"zombie_plague/nemesis_pain1.wav", "zombie_plague/nemesis_pain2.wav", "zombie_plague/nemesis_pain3.wav"};
new const g_sound_zombie_claw_slash[][] = {"zombie_plague/tcs_claw_slash_1.wav", "zombie_plague/tcs_claw_slash_2.wav"};
new const g_sound_zombie_claw_wall[][] = {"zombie_plague/zombie_claw_wall_1.wav", "zombie_plague/zombie_claw_wall_2.wav"};
new const g_sound_zombie_claw_hit[][] = {"zombie_plague/tcs_claw_attack_1.wav", "weapons/knife_hit2.wav", "weapons/knife_hit3.wav", "weapons/knife_hit4.wav"};
new const g_sound_zombie_claw_stab[] = "zombie_plague/tcs_claw_attack_2.wav";
new const g_sound_zombie_die[][] = {"zombie_plague/tcs_zombie_die_1.wav", "zombie_plague/zombie_die1.wav", "zombie_plague/zombie_die2.wav", "zombie_plague/tcs_zombie_die_2.wav", "zombie_plague/zombie_die3.wav", "zombie_plague/zombie_die4.wav", "zombie_plague/zombie_die5.wav", "zp5/zombie_death_00.wav"};
new const g_sound_zombie_madness[] = "zombie_plague/zombie_madness1.wav";
new const g_sound_modes[][] = {"zp5/mode_00.wav", "zombie_plague/survivor1.wav","ambience/the_horror2.wav", "zp5/gk_mode_01.wav", "zombie_plague/nemesis1.wav", "zombie_plague/survivor2.wav", "zombie_plague/nemesis2.wav"};
new const g_sound_zombie_infect[][] = {"zombie_plague/tcs_zombie_infect_1.wav", "zombie_plague/zombie_infec1.wav", "zombie_plague/zombie_infec2.wav", "zombie_plague/tcs_zombie_infect_2.wav", "zombie_plague/zombie_infec3.wav", "scientist/c1a0_sci_catscream.wav", "zombie_plague/tcs_zombie_infect_3.wav",
"scientist/scream01.wav", "zombie_plague/tcs_alert_1.wav", "zp5/zombie_infect_04.wav", "zp5/zombie_infect_05.wav", "scientist/scream20.wav", "scientist/scream22.wav", "scientist/scream05.wav"};
new const g_sound_antidote[] = "items/smallmedkit1.wav";
new const g_sound_grenade_infect[] = "zombie_plague/grenade_infect.wav";
new const g_sound_grenade_explode[] = "zombie_plague/grenade_explode.wav";
new const g_sound_grenade_frost[] = "warcraft3/frostnova.wav";
new const g_sound_grenade_frost_break[] = "warcraft3/impalelaunch1.wav";
new const g_sound_grenade_frost_player[] = "warcraft3/impalehit.wav";
//new const g_sound_toxic_bomb[] = "zp5/gk_toxic_bomb.wav";
new const g_sound_bazooka[][] = {"weapons/rocketfire1.wav", "weapons/mortarhit.wav", "zombie_plague/bazooka_01.wav", "zombie_plague/bazooka_00.wav", "weapons/explode4.wav"};
new const g_sound_bazooka_wtf[] = "sound/zp5/gk_wtf.mp3";
new const g_sound_armageddon[] = "zp5/gk_siren.wav";
new const g_sound_electro[] = "weapons/electro5.wav";
new const g_sound_cabezon[] = "weapons/mortar.wav";
new const g_sound_cabezon_power[] = "weapons/c4_explode1.wav";
new const g_sound_chainsaw[][] = {"zombie_plague/tcs_cs_deploy.wav", "zombie_plague/tcs_cs_hit1.wav", "zombie_plague/tcs_cs_hit2.wav", "zombie_plague/tcs_cs_hit1.wav", "zombie_plague/tcs_cs_hit2.wav", "zombie_plague/tcs_cs_hitwall.wav", "zombie_plague/tcs_cs_miss.wav", "zombie_plague/tcs_cs_miss.wav",
"zombie_plague/tcs_cs_stab.wav"};
new const g_sound_knife_default[][] = {"weapons/knife_deploy1.wav", "weapons/knife_hit1.wav", "weapons/knife_hit2.wav", "weapons/knife_hit3.wav", "weapons/knife_hit4.wav", "weapons/knife_hitwall1.wav", "weapons/knife_slash1.wav", "weapons/knife_slash2.wav", "weapons/knife_stab.wav"};
new const g_sound_warning[] = "zp5/warning.wav";
new const g_sound_congratz[] = "sound/zp5/cgz.mp3";
new const g_sound_grunt_hits[][] = {"player/bhit_flesh-1.wav", "player/bhit_helmet-1.wav", "player/bhit_flesh-2.wav", "player/bhit_flesh-3.wav"};
new const g_sound_grunt_mode[] = "zp5/gk_assasin.wav";

/* === SPRITES === */
new g_colorball_sprite[8];
new g_explo2_sprite;
new g_trail_sprite;
new g_explo_sprite;
new g_flame_sprite;
new g_smoke_sprite;
new g_glass_sprite;
//new g_toxic_sprite;
new g_nitro_sprite;
new g_beam_sprite;
new dotsprite;

new g_CountKnifeDamage;

enum _:MMIMD_Struct {
	mmimd_Day[15],
	mmimd_Mode
}

new const MENU_MINIEVENT_MODES_DAYS[][MMIMD_Struct] = {
	{"30/03/2014", MODE_WESKER},
	{"05/04/2014", MODE_PLAGUE},
	{"06/04/2014", MODE_SURVIVOR},
	{"12/04/2014", MODE_PLAGUE},
	{"13/04/2014", MODE_SYNAPSIS},
	{"19/04/2014", MODE_PLAGUE},
	{"20/04/2014", MODE_SURVIVOR},
	{"26/04/2014", MODE_ALVSPRED},
	{"27/04/2014", MODE_WESKER},
	{"03/05/2014", MODE_SYNAPSIS},
	{"04/05/2014", MODE_PLAGUE},
	{"10/05/2014", MODE_JASON},
	{"11/05/2014", MODE_SYNAPSIS},
	{"17/05/2014", MODE_SYNAPSIS},
	{"18/05/2014", MODE_NEMESIS},
	{"24/05/2014", MODE_ALVSPRED},
	{"25/05/2014", MODE_SNIPER},
	{"31/05/2014", MODE_SURVIVOR},
	{"01/06/2014", MODE_WESKER},
	{"07/06/2014", MODE_NEMESIS},
	{"08/06/2014", MODE_ALVSPRED},
	{"14/06/2014", MODE_PLAGUE},
	{"15/06/2014", MODE_SURVIVOR},
	{"21/06/2014", MODE_PLAGUE},
	{"22/06/2014", MODE_WESKER},
	{"28/06/2014", MODE_SYNAPSIS},
	{"29/06/2014", MODE_ALVSPRED},
	{"05/07/2014", MODE_NEMESIS},
	{"06/07/2014", MODE_SNIPER},
	{"12/07/2014", MODE_SURVIVOR},
	{"13/07/2014", MODE_JASON},
	{"19/07/2014", MODE_SNIPER},
	{"20/07/2014", MODE_PLAGUE},
	{"26/07/2014", MODE_PLAGUE},
	{"27/07/2014", MODE_NEMESIS},
	{"02/08/2014", MODE_WESKER},
	{"03/08/2014", MODE_WESKER},
	{"09/08/2014", MODE_JASON},
	{"10/08/2014", MODE_PLAGUE},
	{"16/08/2014", MODE_NEMESIS},
	{"17/08/2014", MODE_WESKER},
	{"23/08/2014", MODE_SYNAPSIS},
	{"24/08/2014", MODE_WESKER},
	{"30/08/2014", MODE_SNIPER},
	{"31/08/2014", MODE_NEMESIS},
	{"06/09/2014", MODE_JASON},
	{"07/09/2014", MODE_SNIPER},
	{"13/09/2014", MODE_JASON},
	{"14/09/2014", MODE_SURVIVOR},
	{"20/09/2014", MODE_ALVSPRED},
	{"21/09/2014", MODE_NEMESIS},
	{"27/09/2014", MODE_SURVIVOR},
	{"28/09/2014", MODE_SURVIVOR},
	{"04/10/2014", MODE_WESKER},
	{"05/10/2014", MODE_WESKER},
	{"11/10/2014", MODE_SURVIVOR},
	{"12/10/2014", MODE_ALVSPRED},
	{"18/10/2014", MODE_WESKER},
	{"19/10/2014", MODE_SYNAPSIS},
	{"25/10/2014", MODE_PLAGUE},
	{"26/10/2014", MODE_JASON},
	{"01/11/2014", MODE_JASON},
	{"02/11/2014", MODE_JASON},
	{"08/11/2014", MODE_ALVSPRED},
	{"09/11/2014", MODE_JASON},
	{"15/11/2014", MODE_PLAGUE},
	{"16/11/2014", MODE_NEMESIS},
	{"22/11/2014", MODE_ALVSPRED},
	{"23/11/2014", MODE_SURVIVOR},
	{"29/11/2014", MODE_SURVIVOR},
	{"30/11/2014", MODE_WESKER},
	{"06/12/2014", MODE_SURVIVOR},
	{"07/12/2014", MODE_NEMESIS},
	{"13/12/2014", MODE_JASON},
	{"14/12/2014", MODE_ALVSPRED},
	{"20/12/2014", MODE_SYNAPSIS},
	{"21/12/2014", MODE_WESKER},
	{"25/12/2014", MODE_SURVIVOR},
	{"27/12/2014", MODE_WESKER},
	{"28/12/2014", MODE_SNIPER},
	{"01/01/2015", MODE_SURVIVOR},
	{"03/01/2015", MODE_SYNAPSIS},
	{"04/01/2015", MODE_NEMESIS}
}

public plugin_precache()
{
	register_forward(FM_Sys_Error, "fw_SysError");
	
	register_plugin("Zombie Plague", PLUGIN_VERSION, "MeRcyLeZZ");
	
	new i;
	new j;
	new iEnt;
	new sBuffer[64];
	
	/* === MODELOS PLAYERS === */
	for(i = 0; i < sizeof(CLASES_ZOMBIE); ++i)
	{
		formatex(sBuffer, 63, "models/player/%s/%s.mdl", CLASES_ZOMBIE[i][zombieModel], CLASES_ZOMBIE[i][zombieModel]);
		precache_model(sBuffer);
		
		formatex(sBuffer, 63, "models/player/%s/%sT.mdl", CLASES_ZOMBIE[i][zombieModel], CLASES_ZOMBIE[i][zombieModel]);
		if(file_exists(sBuffer))
			precache_model(sBuffer);
	}
	
	for(i = 0; i < sizeof(MODELOS_HUMANOS_PREC); ++i)
	{
		formatex(sBuffer, 63, "models/player/%s/%s.mdl", MODELOS_HUMANOS_PREC[i], MODELOS_HUMANOS_PREC[i]);
		precache_model(sBuffer);
		
		formatex(sBuffer, 63, "models/player/%s/%sT.mdl", MODELOS_HUMANOS_PREC[i], MODELOS_HUMANOS_PREC[i]);
		if(file_exists(sBuffer))
			precache_model(sBuffer);
	}
	
	for(i = 0; i < 3; ++i)
	{
		formatex(sBuffer, 63, "models/player/%s/%s.mdl", MODEL_NEMESIS[i], MODEL_NEMESIS[i]);
		precache_model(sBuffer);
		
		formatex(sBuffer, 63, "models/player/%s/%sT.mdl", MODEL_NEMESIS[i], MODEL_NEMESIS[i]);
		precache_model(sBuffer);
	}
	
	for(i = 0; i < 3; ++i)
	{
		formatex(sBuffer, 63, "models/player/%s/%s.mdl", MODEL_SURVIVOR[i], MODEL_SURVIVOR[i]);
		precache_model(sBuffer);
	}
	
	/*formatex(sBuffer, 63, "models/player/%s/%s.mdl", MODEL_CABEZON, MODEL_CABEZON);
	precache_model(sBuffer);
	
	formatex(sBuffer, 63, "models/player/%s/%sT.mdl", MODEL_CABEZON, MODEL_CABEZON);
	precache_model(sBuffer);*/
	
	formatex(sBuffer, 63, "models/player/%s/%s.mdl", MODEL_JASON, MODEL_JASON);
	precache_model(sBuffer);
	
	formatex(sBuffer, 63, "models/player/%s/%s.mdl", MODEL_ALIEN, MODEL_ALIEN);
	precache_model(sBuffer);
	
	formatex(sBuffer, 63, "models/player/%s/%s.mdl", MODEL_PREDATOR, MODEL_PREDATOR);
	precache_model(sBuffer);
	
	formatex(sBuffer, 63, "models/player/%s/%s.mdl", MODEL_ANNIHILATOR, MODEL_ANNIHILATOR);
	precache_model(sBuffer);
	
	formatex(sBuffer, 63, "models/player/%s/%s.mdl", MODEL_GRUNT, MODEL_GRUNT);
	precache_model(sBuffer);
	
	/* === MODELOS === */
	precache_model(g_model_infectionbomb);
	precache_model(g_model_hebomb);
	precache_model(g_model_fbbomb);
	precache_model(g_model_sgbomb);
	precache_model(g_model_claws_nemesis);
	precache_model(g_model_killbomb);
	precache_model(g_model_headzombie);
	precache_model(g_model_headzombie_small);
	precache_model(g_model_claws_alien);
	precache_model(g_model_claws_annihilator);
	precache_model(g_model_madnessbomb);
	
	dotsprite = precache_model("sprites/dot.spr")
	
	precache_model("models/gib_skull.mdl")
	precache_model("models/gib_lung.mdl")
	
	for(i = 0; i < sizeof(g_model_claws); ++i) precache_model(g_model_claws[i]);
	//for(i = 0; i < sizeof(g_model_toxicbomb); ++i) precache_model(g_model_toxicbomb[i]);
	for(i = 0; i < sizeof(g_model_bazooka); ++i) precache_model(g_model_bazooka[i]);
	for(i = 0; i < sizeof(g_model_rocket); ++i) precache_model(g_model_rocket[i]);
	for(i = 0; i < sizeof(g_model_chainsaw); ++i) precache_model(g_model_chainsaw[i]);
	for(i = 0; i < 2; ++i)
	{
		precache_model(g_model_bubblebomb[i]);
		precache_model(g_model_nitrobomb[i]);
		precache_model(g_model_madnessbomb_pro[i]);
		precache_model(g_model_bubblebomb_pro[i]);
	}
	for(i = 0; i < sizeof(ARMAS_PRIMARIAS); ++i)
	{
		if(ARMAS_PRIMARIAS[i][weaponModel][0])
			precache_model(ARMAS_PRIMARIAS[i][weaponModel]);
	}
	for(i = 0; i < sizeof(ARMAS_SECUNDARIAS); ++i)
	{
		if(ARMAS_SECUNDARIAS[i][weaponModel][0])
			precache_model(ARMAS_SECUNDARIAS[i][weaponModel]);
	}
	
	/* === SONIDOS === */
	precache_sound(g_sound_buyammo);
	precache_sound(g_sound_flare);
	precache_sound(g_sound_win_humans);
	precache_sound(g_sound_win_zombies);
	precache_sound(g_sound_win_noone);
	precache_sound(g_sound_zombie_claw_stab);
	precache_sound(g_sound_zombie_madness);
	precache_sound(g_sound_antidote);
	precache_sound(g_sound_grenade_infect);
	precache_sound(g_sound_grenade_explode);
	precache_sound(g_sound_grenade_frost);
	precache_sound(g_sound_grenade_frost_break);
	precache_sound(g_sound_grenade_frost_player);
	//precache_sound(g_sound_toxic_bomb);
	//precache_sound(g_sound_welcome);
	precache_sound(g_sound_armageddon);
	precache_sound(g_sound_electro);
	precache_sound(g_sound_cabezon);
	precache_sound(g_sound_cabezon_power);
	precache_sound("items/ammopickup1.wav");
	precache_sound("buttons/button1.wav");
	precache_sound(g_sound_warning);
	precache_sound(g_sound_grunt_mode);
	precache_generic("sound/zp5/sound_op.mp3");
	precache_sound("weapons/xbow_fire1.wav")
	
	
	// precache_generic("sound/zp5/gk_double_kill_lol.mp3");
	// precache_generic("sound/zp5/gk_triple_kill_lol.mp3");
	// precache_generic("sound/zp5/gk_quadra_kill_lol.mp3");
	// precache_generic("sound/zp5/gk_penta_kill_lol.mp3");
	// precache_generic("sound/zp5/gk_e_double_kill_lol.mp3");
	// precache_generic("sound/zp5/gk_e_triple_kill_lol.mp3");
	// precache_generic("sound/zp5/gk_e_quadra_kill_lol.mp3");
	// precache_generic("sound/zp5/gk_e_penta_kill_lol.mp3");
	
	for(i = 0; i < sizeof(g_sound_zombie_pain); ++i) precache_sound(g_sound_zombie_pain[i]);
	for(i = 0; i < sizeof(g_sound_zombie_claw_slash); ++i) precache_sound(g_sound_zombie_claw_slash[i]);
	for(i = 0; i < sizeof(g_sound_zombie_claw_wall); ++i) precache_sound(g_sound_zombie_claw_wall[i]);
	for(i = 0; i < sizeof(g_sound_zombie_claw_hit); ++i) precache_sound(g_sound_zombie_claw_hit[i]);
	for(i = 0; i < sizeof(g_sound_zombie_die); ++i) precache_sound(g_sound_zombie_die[i]);
	for(i = 0; i < sizeof(g_sound_modes); ++i) precache_sound(g_sound_modes[i]);
	for(i = 0; i < sizeof(g_sound_zombie_infect); ++i) precache_sound(g_sound_zombie_infect[i]);
	for(i = 0; i < sizeof(g_sound_bazooka); ++i) precache_sound(g_sound_bazooka[i]);
	for(i = 0; i < sizeof(COMBOS); ++i) precache_sound(COMBOS[i][comboSound]);
	for(i = 0; i < sizeof(g_sound_chainsaw); ++i) precache_sound(g_sound_chainsaw[i]);
	for(i = 0; i < sizeof(g_sound_knife_default); ++i) precache_sound(g_sound_knife_default[i]);
	for(i = 0; i < sizeof(g_sound_grunt_hits); ++i) precache_sound(g_sound_grunt_hits[i]);
	
	precache_generic(g_sound_bazooka_wtf);
	precache_generic(g_sound_congratz);
	
	/* === SPRITES === */
	g_trail_sprite = precache_model("sprites/laserbeam.spr");
	g_explo_sprite = precache_model("sprites/shockwave.spr");
	g_flame_sprite = precache_model("sprites/flame.spr");
	g_smoke_sprite = precache_model("sprites/black_smoke3.spr");
	g_glass_sprite = precache_model("models/glassgibs.mdl");
	//g_toxic_sprite = precache_model("sprites/zp5/gas_puff_01g.spr");
	g_explo2_sprite = precache_model("sprites/fexplo.spr");
	precache_model("sprites/animglow01.spr");
	g_beam_sprite = precache_model("sprites/zbeam6.spr");
	g_nitro_sprite = precache_model("sprites/zp5/flame_nitr.spr");
	
	new const SPRITE_COLORS[][] = {"sprites/glow04.spr", "sprites/fireworks/rflare.spr", "sprites/fireworks/gflare.spr", "sprites/fireworks/bflare.spr", "sprites/fireworks/yflare.spr", "sprites/fireworks/pflare.spr", "sprites/fireworks/tflare.spr", "sprites/hotglow.spr"};
	for(i = 0; i < 8; ++i) g_colorball_sprite[i] = precache_model(SPRITE_COLORS[i]);
	
	iEnt = create_entity("hostage_entity");
	if(is_valid_ent(iEnt))
	{
		entity_set_origin(iEnt, Float:{8192.0, 8192.0, 8192.0});
		dllfunc(DLLFunc_Spawn, iEnt);
	}
	
	iEnt = create_entity("func_buyzone");
	if(is_valid_ent(iEnt))
	{
		entity_set_origin(iEnt, Float:{8192.0, 8192.0, 8192.0});
		dllfunc(DLLFunc_Spawn, iEnt);
	}
	
	
	/* === OTROS ==== */
	precache_generic("gfx/career/icon_!.tga");
	precache_generic("gfx/career/icon_!-bigger.tga");
	precache_generic("gfx/career/icon_i.tga");
	precache_generic("gfx/career/icon_i-bigger.tga");
	precache_generic("gfx/career/icon_skulls.tga");
	precache_generic("gfx/career/round_corner_ne.tga");
	precache_generic("gfx/career/round_corner_nw.tga");
	precache_generic("gfx/career/round_corner_se.tga");
	precache_generic("gfx/career/round_corner_sw.tga");
	
	precache_generic("resource/TutorScheme.res");
	precache_generic("resource/UI/TutorTextWindow.res");
	
	new const SKIES_TYPES[][] = {"bk.tga", "dn.tga", "ft.tga", "lf.tga", "rt.tga", "up.tga"};
	new const SKIES[][] = {"lostworld", "vlcno"};
	
	for(i = 0; i < sizeof(SKIES_TYPES); ++i)
	{
		for(j = 0; j < sizeof(SKIES); ++j)
		{
			formatex(sBuffer, charsmax(sBuffer), "gfx/env/%s%s", SKIES[j], SKIES_TYPES[i]);
			precache_generic(sBuffer);
		}
	}
	
	for(i = 0; i < MAX_GUILDS; ++i)
	{
		g_combo_max_guild[i] = {0, 0, 0, 0, 0, 0};
		g_guild_level[i] = 1;
		g_combo_guild[i] = 0;
		g_guild_exp[i] = 0;
	}
	
	g_fwSpawn = register_forward(FM_Spawn, "fw_Spawn");
	g_fwPrecacheSound = register_forward(FM_PrecacheSound, "fw_PrecacheSound");
}

public plugin_init()
{
	new i;
	
	set_task(0.4, "pluginSQL");
	//set_task(2.0, "updateBOT");
	
	cvar[0] = register_cvar("c1", "100");
	cvar[1] = register_cvar("c2", "100");
	cvar[2] = register_cvar("c3", "100");
	
	new sMapName[64];
	get_mapname(sMapName, 63);
	
	g_mult_add = 0.0;
	g_mult_add_aux = 0.0;
	g_ExtraMult = 0.0;
	
	g_systime_head = get_gametime();
	
	for(i = 0; i < sizeof(MULT_MAPS); ++i)
	{
		if(equali(sMapName, MULT_MAPS[i][mapName]))
		{
			g_mult_add = MULT_MAPS[i][mapMult];
			g_mult_add_aux = MULT_MAPS[i][mapMult];
			
			break;
		}
	}
	
	#if defined USE_ORPHEU
		OrpheuRegisterHook(OrpheuGetDLLFunction("pfnPM_Move", "PM_Move"), "OnPM_Move");
		OrpheuRegisterHook(OrpheuGetFunction("PM_Jump"), "OnPM_Jump");
		OrpheuRegisterHook(OrpheuGetFunction("PM_Duck"), "OnPM_Duck");
	#endif
	
	register_event("HLTV", "event_HLTV", "a", "1=0", "2=0");
	register_event("AmmoX", "event_AmmoX", "be");
	register_event("Health", "event_Health", "be");
	register_event("30", "event_Intermission", "a");
	
	register_logevent("logevent_RoundEnd", 2, "1=Round_End");
	
	RegisterHam(Ham_Spawn, "player", "fw_PlayerSpawn_Post", 1);
	RegisterHam(Ham_Killed, "player", "fw_PlayerKilled");
	RegisterHam(Ham_Killed, "player", "fw_PlayerKilled_Post", 1);
	RegisterHam(Ham_TakeDamage, "player", "fw_TakeDamage");
	RegisterHam(Ham_TakeDamage, "player", "fw_TakeDamage_Post", 1);
	RegisterHam(Ham_TraceAttack, "player", "fw_TraceAttack");
	RegisterHam(Ham_Player_ResetMaxSpeed, "player", "fw_ResetMaxSpeed_Post", 1);
	RegisterHam(Ham_Use, "func_tank", "fw_UseStationary");
	RegisterHam(Ham_Use, "func_tankmortar", "fw_UseStationary");
	RegisterHam(Ham_Use, "func_tankrocket", "fw_UseStationary");
	RegisterHam(Ham_Use, "func_tanklaser", "fw_UseStationary");
	RegisterHam(Ham_Use, "func_tank", "fw_UseStationary_Post", 1);
	RegisterHam(Ham_Use, "func_tankmortar", "fw_UseStationary_Post", 1);
	RegisterHam(Ham_Use, "func_tankrocket", "fw_UseStationary_Post", 1);
	RegisterHam(Ham_Use, "func_tanklaser", "fw_UseStationary_Post", 1);
	RegisterHam(Ham_Use, "func_pushable", "fw_UsePushable");
	
	if(equali(sMapName, "zm_kfox_b5") || equali(sMapName, "zm_kontrax_b5") || equali(sMapName, "zm_kpuzzle"))
	{
		register_clcmd("say /ee", "clcmd_EEgg");
		register_menu("Easter Egg Menu", KEYSMENU, "menuEEgg");
		
		if(equali(sMapName, "zm_kontrax_b5"))
			RegisterHam(Ham_Use, "func_button", "fw_UseButton");
		else if(equali(sMapName, "zm_kpuzzle"))
		{
			g_legendaria_kpuzzle = 1;
			RegisterHam(Ham_Use, "func_button", "fw_UseButtonKPUZZLE");
		}
		else
			RegisterHam(Ham_Use, "func_button", "fw_UseButtonKFOX");
	}
	
	RegisterHam(Ham_Touch, "weaponbox", "fw_TouchWeapon");
	RegisterHam(Ham_Touch, "armoury_entity", "fw_TouchWeapon");
	RegisterHam(Ham_Touch, "weapon_shield", "fw_TouchWeapon");
	RegisterHam(Ham_Think, "grenade", "fw_ThinkGrenade");
	//RegisterHam(Ham_AddPlayerItem, "player", "fw_AddPlayerItem");
	RegisterHam(Ham_Player_PreThink, "player", "fw_PlayerPreThink");
	RegisterHam(Ham_Player_PostThink, "player", "fw_PlayerPostThink");
	DisableHamForward(g_iHhCBasePlayerPreThink = RegisterHam(Ham_Player_PreThink, "player", "fw_PlayerPreThink_Post", 1));
	RegisterHam(Ham_Player_Jump, "player", "fw_PlayerJump");
	RegisterHam(Ham_Player_Duck, "player", "fw_PlayerDuck");
	RegisterHam(Ham_Touch, "func_wall", "fw_TouchWallAlien");
	RegisterHam(Ham_Touch, "func_breakable", "fw_TouchWallAlien");
	RegisterHam(Ham_Touch, "worldspawn", "fw_TouchWallAlien");
	
	for(i = 1; i < sizeof(WEAPONENTNAMES); ++i)
	{
		if(WEAPONENTNAMES[i][0])
		{
			if(i != CSW_HEGRENADE && i != CSW_C4 && i != CSW_SMOKEGRENADE && i != CSW_G3SG1 && i != CSW_SG550 && i != CSW_FLASHBANG)
			{
				RegisterHam(Ham_Weapon_PrimaryAttack, WEAPONENTNAMES[i], "fw_Weapon_PrimaryAttack_Post", 1);
				
				if(i != CSW_KNIFE)
				{
					RegisterHam(Ham_Item_AttachToPlayer, WEAPONENTNAMES[i], "fw_Item_AttachToPlayer");
					
					if(i != CSW_M3 && i != CSW_XM1014)
						RegisterHam(Ham_Item_PostFrame, WEAPONENTNAMES[i], "fw_Item_PostFrame");
					else
					{
						RegisterHam(Ham_Item_PostFrame, WEAPONENTNAMES[i], "fw_Shotgun_PostFrame");
						RegisterHam(Ham_Weapon_WeaponIdle, WEAPONENTNAMES[i], "fw_Shotgun_WeaponIdle");
					}
				}
			}
			
			if(i == CSW_KNIFE)
				RegisterHam(Ham_Weapon_SecondaryAttack, "weapon_knife", "fw_Weapon_SecondaryAttack_Post", 1);
			
			RegisterHam(Ham_Item_Deploy, WEAPONENTNAMES[i], "fw_Item_Deploy_Post", 1);
		}
	}
	
	register_forward(FM_ClientDisconnect, "fw_ClientDisconnect_Post", 1);
	register_forward(FM_ClientKill, "fw_ClientKill");
	register_forward(FM_EmitSound, "fw_EmitSound");
	register_forward(FM_SetClientKeyValue, "fw_SetClientKeyValue");
	register_forward(FM_ClientUserInfoChanged, "fw_ClientUserInfoChanged");
	register_forward(FM_SetModel, "fw_SetModel");
	register_forward(FM_CmdStart, "fw_CmdStart");
	register_forward(FM_AddToFullPack, "fw_AddToFullPack_Post", 1);
	register_forward(FM_GameShutdown, "fw_GameShutdown");
	/*register_forward(FM_ServerDeactivate, "fw_ServerDeactivate");
	register_forward(FM_ChangeLevel, "fw_ChangeLevel");*/
	
	unregister_forward(FM_Spawn, g_fwSpawn);
	unregister_forward(FM_PrecacheSound, g_fwPrecacheSound);
	
	formatex(g_confirmar_amuleto, 31, "zp_confirmar_amuleto %c%c%c", random_num('a', 'z'), random_num('a', 'z'), random_num('a', 'z'));
	
	register_clcmd("menuselect", "clcmd_MenuSelect");
	register_clcmd("joinclass", "clcmd_MenuSelect");
	register_clcmd("nightvision", "clcmd_Nightvision");
	register_clcmd("radio1", "clcmd_Block");
	register_clcmd("radio2", "clcmd_Block");
	register_clcmd("radio3", "clcmd_Block");
	register_clcmd("drop", "clcmd_Drop");
	register_clcmd("buyammo1", "clcmd_Buy");
	register_clcmd("buyammo2", "clcmd_Buy");
	register_clcmd("chooseteam", "clcmd_Changeteam");
	register_clcmd("jointeam", "clcmd_Changeteam");
	register_clcmd("CREAR_CONTRASENIA", "clcmd_CreatePassword");
	register_clcmd("REPETIR_CONTRASENIA", "clcmd_RepeatPassword");
	register_clcmd("INGRESAR_CONTRASENIA", "clcmd_EnterPassword");
	register_clcmd("LOTERIA_APOSTAR_EXP", "clcmd_EnterExp");
	register_clcmd("LOTERIA_APOSTAR_NUM", "clcmd_EnterNum");
	register_clcmd("DUELO_APOSTAR_EXP", "clcmd_DueloEnterExp");
	register_clcmd("DUELO_APOSTAR_APS", "clcmd_DueloEnterAPs");
	register_clcmd("DUELO_APOSTAR_PH", "clcmd_DueloEnterPH");
	register_clcmd("DUELO_APOSTAR_PZ", "clcmd_DueloEnterPZ");
	register_clcmd("DUELO_APOSTAR_PF", "clcmd_DueloEnterPF");
	register_clcmd("CREAR_HERMANDAD", "clcmd_CreateGuild");
	register_clcmd("INGRESAR_FECHA", "clcmd_EnterDate");
	register_clcmd("INGRESAR_NOMBRE_AMULETO", "clcmd_EnterNameAmuleto");
	register_clcmd("say /gan", "clcmd_TaringaAtNite");
	register_clcmd("say /invis", "clcmd_Invis");
	register_clcmd("say /guild", "clcmd_Guild");
	register_clcmd("say /fecha", "clcmd_Fecha");
	register_clcmd("say /rank", "clcmd_Rank");
	register_clcmd("say alohomora", "clcmd_EasterEggFake");
	register_clcmd("say /top", "showMenuTOPS");
	register_clcmd("say /top10", "showMenuTOPS");
	register_clcmd("say /top15", "showMenuTOPS");
	register_clcmd("/abrir", "clcmd_Abrir");
	register_clcmd("zp_crear_amuleto", "clcmd_CrearAmuleto");
	register_clcmd(g_confirmar_amuleto, "clcmd_ConfirmacionAmuleto");
	register_clcmd("say /kk", "clcmd_GameKiske");
	register_clcmd("INGRESAR_NUMERO_GK", "clcmd_EnterNumberGK");
	register_clcmd("say /robar", "clcmd_Robar");
	register_clcmd("say /c", "clcmd_Color");
	register_clcmd("COMERCIO_CANTIDAD_A_OFERTAR", "clcmd_ComercioCantOfertar");
	register_clcmd("COMERCIO_CANTIDAD_QUE_PEDIS", "clcmd_ComercioCantPedis");
	register_clcmd("say leg_door", "clcmd_Doors");
	register_clcmd("say /evento", "clcmd_MiniEvent");
	
	register_clcmd("say", "clcmd_Say");
	register_clcmd("say_team", "clcmd_SayTeam");
	
	register_clcmd("DISTANCIA_VISION_NOCTURNA", "clcmd_DistanciaVisionNocturna");
	
	register_impulse(OFF_IMPULSE_FLASHLIGHT, "impulse_Flashlight");
	register_impulse(IMPULSE_SPRAY, "clcmd_BlockSpray");
	
	register_touch("grenade", "*", "touch_GrenadeAll");
	register_touch("rocketBazooka", "*", "touch_RocketBazookaAll");
	register_touch("rocketBazooka__Mini", "*", "touch_RocketBazooka__MiniAll");
	register_touch("headZombie", "player", "touch_HeadZombiePlayer");
	//register_touch("giftZombie", "player", "touch_GiftZombiePlayer");
	register_touch("headZombie_Small", "player", "touch_HeadZombieSmallPlayer");
	//register_touch("grenade_bubble", "player", "touch_BubblePlayer");
	// register_forward(FM_Think, "fw_think");
	
	// register_concmd("amx_kick", "concmd_Kick", ADMIN_KICK, "<nombre o #id> <razon (OPCIONAL)>");
	
	// register_concmd("amx_ban", "concmd_Ban", ADMIN_BAN, "<nombre o #id> <minutos> <razon (OPCIONAL)>");
	// register_concmd("amx_banip", "concmd_Ban", ADMIN_BAN, "<nombre o #id> <minutos> <razon (OPCIONAL)>");
	// register_concmd("amx_addban", "concmd_Ban", ADMIN_BAN, "<nombre o #id> <minutos> <razon (OPCIONAL)>");
	
	register_concmd("l4d2_break", "concmd_Break");
	register_concmd("zp_level", "concmd_Level");
	register_concmd("zp_exp", "concmd_Exp");
	register_concmd("zp_points", "concmd_Points");
	register_concmd("zp_ammos", "concmd_Ammos");
	register_concmd("zp_health", "concmd_Health");
	register_concmd("zp_logro", "concmd_Logro");
	register_concmd("zp_metalogro", "concmd_MetaLogro");
	register_concmd("zp_speed_head", "concmd_SpeedHead");
	
	register_concmd("zp_revive", "concmd_Revive");
	register_concmd("zp_human", "concmd_Human");
	register_concmd("zp_zombie", "concmd_Zombie");
	register_concmd("zp_nemesis", "concmd_Nemesis");
	register_concmd("zp_survivor", "concmd_Survivor");
	register_concmd("zp_wesker", "concmd_Wesker");
	register_concmd("zp_cabezon", "concmd_Cabezon");
	register_concmd("zp_jason", "concmd_Jason");
	register_concmd("zp_annihilator", "concmd_Annihilator");
	register_concmd("zp_grunt", "concmd_Grunt");
	
	register_concmd("zp_swarm", "concmd_Swarm");
	register_concmd("zp_multi", "concmd_Multi");
	register_concmd("zp_plague", "concmd_Plague");
	register_concmd("zp_armageddon", "concmd_Armageddon");
	register_concmd("zp_alvspred", "concmd_AlienVsPredator");
	register_concmd("zp_synapsis", "concmd_Synapsis");
	register_concmd("zp_sniper", "concmd_Sniper");
	register_concmd("zp_duel", "concmd_DuelFinal");
	register_concmd("zp_gaminga", "concmd_Gaminga");
	
	register_concmd("zp_ban", "concmd_BanAccount");
	register_concmd("zp_unban", "concmd_UnBanAccount");
	
	register_concmd("zp_combo", "concmd_ComboNeedDamage");
	register_concmd("zp_gk_number", "concmd_GKNumber");
	
	register_concmd("zp_best_month", "concmd_BestMonth");
	register_concmd("zp_sound", "concmd_Sound");
	
	register_clcmd("zp_remove_weapons", "concmd_RemoveWeapons");
	register_clcmd("zp_block_clip", "concmd_BlockClip");
	register_clcmd("zp_set_glow", "concmd_SetGlow");
	register_clcmd("zp_remove_glow", "concmd_RemoveGlow");
	
	register_concmd("zp_bomb", "concmd_Bomb");
	register_concmd("zp_kill", "concmd_Kill");
	register_concmd("zp_nomove", "concmd_NoMove");
	
	register_concmd("+grab", "grab_on")
	register_concmd("-grab", "grab_off")
	
	register_concmd("zp_light", "concmd_Light");
	register_concmd("zp_race", "concmd_Race");
	
	register_concmd("zp_guerra", "concmd_Guerra");
	
	register_menu("Game Menu", KEYSMENU, "menuGame");
	register_menu("Buy Menu 1", KEYSMENU, "menuBuy1");
	register_menu("Buy Menu 2", KEYSMENU, "menuBuy2");
	register_menu("Buy Menu 3", KEYSMENU, "menuBuy3");
	register_menu("Colors Menu", KEYSMENU, "menuConfig__Color");
	register_menu("Chat Mode Menu", KEYSMENU, "menuConfig__ChatMode");
	register_menu("Stats Menu", KEYSMENU, "menuStats");
	register_menu("Create__Amuletos__Menu", KEYSMENU, "menuCreateAmuletos");
	register_menu("Weapon__Stats__Menu", KEYSMENU, "menuWeaponStats__Sub");
	register_menu("Register Login Menu", KEYSMENU, "menuRegisterLogin");
	register_menu("Banned Menu", KEYSMENU, "menuCSBuy");
	register_menu("Head Zombie Menu", KEYSMENU, "menuHeadZombie");
	register_menu("Loteria Menu", KEYSMENU, "menuLoteria");
	register_menu("Game Kiske Menu", KEYSMENU, "menuGK");
	register_menu("Comercio Menu", KEYSMENU, "menuComercio");
	register_menu("Comercio Ventas Menu", KEYSMENU, "menuComercioVenta");
	register_menu("Comercio Ventas Recurso Menu", KEYSMENU, "menuComercioVentaRecurso");
	register_menu("Comercio Ventas RecursoC Menu", KEYSMENU, "menuComercioVentaRecursoC");
	register_menu("Comercio Comprar Menu", KEYSMENU, "menuComercioComprar");
	register_menu("Reiniciar Habilidades", KEYSMENU, "menu__ReiniciarHabilidades");
	register_menu("Hermandades Abismo", KEYSMENU, "menu__GuildAbyss_INFO");
	
	register_menucmd(register_menuid("#Buy", 1), 511, "menuCSBuy");
	register_menucmd(register_menuid("BuyPistol", 1), 511, "menuCSBuy");
	register_menucmd(register_menuid("BuyShotgun", 1), 511, "menuCSBuy");
	register_menucmd(register_menuid("BuySub", 1), 511, "menuCSBuy");
	register_menucmd(register_menuid("BuyRifle", 1), 511, "menuCSBuy");
	register_menucmd(register_menuid("BuyMachine", 1), 511, "menuCSBuy");
	register_menucmd(register_menuid("BuyItem", 1), 511, "menuCSBuy");
	register_menucmd(register_menuid("BuyEquip", 1), 511, "menuCSBuy");
	register_menucmd(-28, 511, "menuCSBuy");
	register_menucmd(-29, 511, "menuCSBuy");
	register_menucmd(-30, 511, "menuCSBuy");
	register_menucmd(-32, 511, "menuCSBuy");
	register_menucmd(-31, 511, "menuCSBuy");
	register_menucmd(-33, 511, "menuCSBuy");
	register_menucmd(-34, 511, "menuCSBuy");
	
	g_message_scoreinfo = get_user_msgid("ScoreInfo");
	g_message_teaminfo = get_user_msgid("TeamInfo");
	g_message_deathmsg = get_user_msgid("DeathMsg");
	g_message_scoreattrib = get_user_msgid("ScoreAttrib");
	g_message_screenfade = get_user_msgid("ScreenFade");
	g_message_screenshake = get_user_msgid("ScreenShake");
	g_message_nvgtoggle = get_user_msgid("NVGToggle");
	g_message_flashlight = get_user_msgid("Flashlight");
	g_message_flashbat = get_user_msgid("FlashBat");
	g_message_ammopickup = get_user_msgid("AmmoPickup");
	g_message_hideweapon = get_user_msgid("HideWeapon");
	g_message_crosshair = get_user_msgid("Crosshair");
	g_message_curweapon = get_user_msgid("CurWeapon");
	g_message_money = get_user_msgid("Money");
	g_message_health = get_user_msgid("Health");
	g_message_weappickup = get_user_msgid("WeapPickup");
	g_message_textmsg = get_user_msgid("TextMsg");
	g_message_sendaudio = get_user_msgid("SendAudio");
	g_message_teamscore = get_user_msgid("TeamScore");
	/*g_message_spechealth = get_user_msgid("SpecHealth");
	g_message_spechealth2 = get_user_msgid("SpecHealth2");*/
	g_message_tutortext = get_user_msgid("TutorText");
	g_message_tutorclose = get_user_msgid("TutorClose");
	g_message_fov = get_user_msgid("SetFOV");
	
	register_message(g_message_curweapon, "message_CurWeapon");
	register_message(g_message_money, "message_Money");
	register_message(g_message_health, "message_Health");
	register_message(g_message_flashbat, "message_FlashBat");
	register_message(g_message_flashlight, "message_Flashlight");
	register_message(g_message_nvgtoggle, "message_NVGToggle");
	register_message(g_message_weappickup, "message_WeapPickup");
	register_message(g_message_ammopickup, "message_AmmoPickup");
	register_message(g_message_textmsg, "message_TextMsg");
	register_message(g_message_sendaudio, "message_SendAudio");
	register_message(g_message_teamscore, "message_TeamScore");
	register_message(g_message_teaminfo, "message_TeamInfo");
	/*register_message(g_message_spechealth, "message_SpecHealth");
	register_message(g_message_spechealth2, "message_SpecHealth");*/
	
	new const SPAWNS_ENTS[][] = {"info_player_start", "info_player_deathmatch"};
	new Float:vecOrigin[3];
	new iEnt;
	
	for(i = 0; i < 2; ++i)
	{
		iEnt = -1;
		while((iEnt = engfunc(EngFunc_FindEntityByString, iEnt, "classname", SPAWNS_ENTS[i])) != 0)
		{
			entity_get_vector(iEnt, EV_VEC_origin, vecOrigin);
			
			g_spawns[g_spawnCount][0] = vecOrigin[0];
			g_spawns[g_spawnCount][1] = vecOrigin[1];
			g_spawns[g_spawnCount][2] = vecOrigin[2];
			
			++g_spawnCount;
			
			if(g_spawnCount >= 128)
				break;
		}
	}
	
	new const SKIES[][] = {"space", "lostworld", "vlcno"};
	
	set_cvar_string("sv_skyname", SKIES[random_num(0, 2)]);
	
	set_cvar_num("sv_skycolor_r", 0);
	set_cvar_num("sv_skycolor_g", 0);
	set_cvar_num("sv_skycolor_b", 0);
	
	g_CVAR_Delay = register_cvar("zp_delay", "5");
	/*g_pCVAR_Test[0] = register_cvar("zp_push1", "500"); 
	g_pCVAR_Test[1] = register_cvar("zp_push2", "-3");*/
	
	g_Hud = CreateHudSyncObj();
	g_Hud_Perm = CreateHudSyncObj();
	g_Hud_Combo = CreateHudSyncObj();
	g_Hud_ComboGuild = CreateHudSyncObj();
	
	g_maxplayers = get_maxplayers();
	
	new iThinkHUD;
	iThinkHUD = create_entity("info_target");
	
	if(is_valid_ent(iThinkHUD))
	{
		entity_set_string(iThinkHUD, EV_SZ_classname, CLASSNAME_THINK_HUD);
		entity_set_float(iThinkHUD, EV_FL_nextthink, NEXTTHINK_THINK_HUD);
		
		register_think(CLASSNAME_THINK_HUD, "think__HUD");
	}
	
	#if defined NOTICIAS
		new iThinkNOTICIAS;
		iThinkNOTICIAS = create_entity("info_target");
		
		if(is_valid_ent(iThinkNOTICIAS))
		{
			entity_set_string(iThinkNOTICIAS, EV_SZ_classname, CLASSNAME_THINK_NOTICIAS);
			entity_set_float(iThinkNOTICIAS, EV_FL_nextthink, NEXTTHINK_THINK_NOTICIAS);
			
			register_think(CLASSNAME_THINK_NOTICIAS, "think__NOTICIAS");
		}
	#endif
	
	// new Float:xp = 1000.0;
	// new j;
	
	// static sMenu[1024];
	// static iLen;
	
	// iLen = 0;
	
	// for(j = 1; j <= 50; ++j)
	// {
		// for(i = 1; i <= 20; ++i)
		// {
			// iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "%d, ", floatround(xp));
			// xp += 1250.0 * float(i) * float(j) * 1.1;
		// }
		
		// server_print(sMenu);
		// iLen = 0;
	// }
	
	
	// new i;
	// new j;
	// new sMenu[1024];
	// new iLen;
	
	// iLen = 0;
	
	
	// for(j = 0; j < 14; ++j) {
		// for(i = 0; i < 75; ++i)
		// {
			// if(i % 20 == 0)
			// {
				// server_print(sMenu);
				// iLen = 0;
			// }
			
			// iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "%d, ", 28000000 * (i+1));
		// }
		// server_print("^n");
	// }
	
	// server_print("^n^n^n");
	
	// for(j = 0; j < 20; ++j) {
		// for(i = 0; i < 50; ++i)
		// {
			// if(i % 20 == 0)
			// {
				// server_print(sMenu);
				// iLen = 0;
			// }
			
			// iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "%d, ", 42000000 * (i+1));
		// }
	// }
	
	// server_print("^n^n^n");
	
	// for(j = 0; j < 40; ++j) {
		// for(i = 0; i < 25; ++i)
		// {
			// if(i % 20 == 0)
			// {
				// server_print(sMenu);
				// iLen = 0;
			// }
			
			// iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "%d, ", 84000000 * (i+1));
		// }
	// }
	
	// server_print("^n^n^n");
	
	// new k;
	// for(j = 0; j < 100; ++j) {
		// for(i = 0; i < 10; ++i)
		// {
			// if(k % 20 == 0)
			// {
				// server_print(sMenu);
				// iLen = 0;
			// }
			
			// iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "%d, ", 210000000 * (i+1));
			
			// ++k;
		// }
	// }
	
	// server_print("^n^n^n");
	
	// for(j = 0; j < 200; ++j) {
		// for(i = 0; i < 5; ++i)
		// {
			// if(k % 20 == 0)
			// {
				// server_print(sMenu);
				// iLen = 0;
			// }
			
			// iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "%d, ", 420000000 * (i+1));
			
			// ++k
		// }
	// }
	
	set_task(1200.0, "checkPistolHeads");
}

public plugin_end()
{
	new Handle:sqlQuery;
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE modes SET first_zombie='%d', nemesis='%d', survivor='%d', swarm='%d', multi='%d', plague='%d', armageddon='%d', wesker='%d', cabezon='%d', jason='%d', al_vs_pred='%d',\
	annihilator='%d', synapsis='%d', sniper='%d', duel='%d', grunt='%d',gaminga='%d';", g_mode_count[MODE_INFECTION], g_mode_count[MODE_NEMESIS], g_mode_count[MODE_SURVIVOR], g_mode_count[MODE_SWARM], g_mode_count[MODE_MULTI],
	g_mode_count[MODE_PLAGUE], g_mode_count[MODE_ARMAGEDDON], g_mode_count[MODE_WESKER], g_mode_count[MODE_CABEZON], g_mode_count[MODE_JASON], g_mode_count[MODE_ALVSPRED], g_mode_count[MODE_ANNIHILATOR],
	g_mode_count[MODE_SYNAPSIS], g_mode_count[MODE_SNIPER], g_mode_count[MODE_DUEL_FINAL], g_mode_count[MODE_GRUNT], g_mode_count[MODE_GAMINGA]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 25);
	else
		SQL_FreeHandle(sqlQuery);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE combos SET username=^"%s^", combo='%d' WHERE mapname=^"%s^"", g_TOP_COMBO_PER_MAP_NAME, g_TOP_COMBO_PER_MAP_COMBO, g_TOP_COMBO_PER_MAP_MAP);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 3458);
	else
		SQL_FreeHandle(sqlQuery);
	
	SQL_FreeHandle(g_sql_connection);
	SQL_FreeHandle(g_sql_tuple);
	
	#if defined USE_ORPHEU
		game_disableForwards();
	#endif
}

#define SQL_HOST		"127.0.0.1"
#define SQL_USER		""
#define SQL_PASS			""
#define SQL_TABLE		""

public pluginSQL()
{
	set_cvar_string("sv_voicecodec", "voice_speex");
	
	set_cvar_float("mp_roundtime", 6.0);
	
	set_cvar_num("mp_flashlight", 1);
	set_cvar_num("mp_footsteps", 1);
	set_cvar_num("mp_freezetime", 0);
	set_cvar_num("sv_maxspeed", 9999);
	set_cvar_num("sv_airaccelerate", 100);
	set_cvar_num("sv_alltalk", 1);
	set_cvar_num("sv_voicequality", 5);
	set_cvar_num("mp_autoteambalance", 0);
	set_cvar_num("mp_friendlyfire", 0);
	
	g_sql_tuple = SQL_MakeDbTuple(SQL_HOST, SQL_USER, SQL_PASS, SQL_TABLE);
	if(g_sql_tuple == Empty_Handle)
	{
		log_to_file("zp_sql_tuple.log", "%s", g_sql_error);
		set_fail_state(g_sql_error);
	}
	
	new iSql_ErrorNum;
	g_sql_connection = SQL_Connect(g_sql_tuple, iSql_ErrorNum, g_sql_error, 511);
	
	if(g_sql_connection == Empty_Handle)
	{
		log_to_file("zp_sql_connect.log", "%s", g_sql_error);
		set_fail_state(g_sql_error);
	}
	
	new Handle:sqlQuery;
	/*sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET online=0 WHERE online=1;");
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 121444);
	else
		SQL_FreeHandle(sqlQuery);*/
	
	new sTime[32];
	new sDate[32];
	
	get_time("%H:%M:%S", sTime, 31);
	get_time("%Y-%m-%d", sDate, 31);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT fecha_finish FROM comercio WHERE fecha_finish < ^"%s %s^" LIMIT 1;", sDate, sTime);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 4613213);
	else if(SQL_NumResults(sqlQuery))
	{
		SQL_FreeHandle(sqlQuery);
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "DELETE FROM comercio WHERE fecha_finish < ^"%s %s^";", sDate, sTime);
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 9573111);
		else
			SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT * FROM comercio;");
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 3517);
	else if(SQL_NumResults(sqlQuery))
	{
		while(SQL_MoreResults(sqlQuery))
		{
			g_comercio_compra_id[g_comercio_ofertas] = SQL_ReadResult(sqlQuery, 0); // ID
			g_comercio_compra_userid[g_comercio_ofertas] = SQL_ReadResult(sqlQuery, 1); // ZP_ID
			SQL_ReadResult(sqlQuery, 2, g_comercio_of_name[g_comercio_ofertas], 31); // NAME
			g_comercio_of_cant[g_comercio_ofertas] = SQL_ReadResult(sqlQuery, 3); // CANT_OF
			SQL_ReadResult(sqlQuery, 4, g_comercio_of_recurso[g_comercio_ofertas], 31); // RECURSO_OF
			g_comercio_of_rec_ganado[g_comercio_ofertas] = SQL_ReadResult(sqlQuery, 5); // RECURSO_OF_N
			g_comercio_of_cant_req[g_comercio_ofertas] = SQL_ReadResult(sqlQuery, 6); // CANT_REQ
			SQL_ReadResult(sqlQuery, 7, g_comercio_of_recurso_req[g_comercio_ofertas], 31); // RECURSO_REQ
			g_comercio_of_rec_req[g_comercio_ofertas] = SQL_ReadResult(sqlQuery, 8); // RECURSO_REQ_N
			SQL_ReadResult(sqlQuery, 9, g_comercio_fecha_expire[g_comercio_ofertas], 31);
			
			++g_comercio_ofertas;
			
			if(g_comercio_ofertas == 128)
				break;
			
			SQL_NextRow(sqlQuery);
		}
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT logro, user_name, logro_fecha FROM achievements WHERE logro_name LIKE 'PRIMERO:%%';");
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 14);
	else if(SQL_NumResults(sqlQuery))
	{
		new iAchievement;
		while(SQL_MoreResults(sqlQuery))
		{
			iAchievement = SQL_ReadResult(sqlQuery, 0);
			
			g_logros_primeros[iAchievement] = 1;
			SQL_ReadResult(sqlQuery, 1, g_logros_primeros_name[iAchievement], 31);
			SQL_ReadResult(sqlQuery, 2, g_logros_primeros_unlocked[iAchievement], 31);
			
			SQL_NextRow(sqlQuery);
		}
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT * FROM modes;");
	
	new iSorteoLoteria;
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 24);
	else if(SQL_NumResults(sqlQuery))
	{
		new sInfo__128[128];
		new sName1[32];
		new sName2[32];
		new sRounds[5];
		
		iSorteoLoteria = SQL_ReadResult(sqlQuery, 0);
		g_pozo_acc = SQL_ReadResult(sqlQuery, 1);
		g_gamblers = SQL_ReadResult(sqlQuery, 2);
		
		if(g_pozo_acc < 0)
			g_pozo_acc = 2100000000;
		
		g_mode_count[MODE_INFECTION] = SQL_ReadResult(sqlQuery, 3);
		g_mode_count[MODE_NEMESIS] = SQL_ReadResult(sqlQuery, 4);
		g_mode_count[MODE_SURVIVOR] = SQL_ReadResult(sqlQuery, 5);
		g_mode_count[MODE_SWARM] = SQL_ReadResult(sqlQuery, 6);
		g_mode_count[MODE_MULTI] = SQL_ReadResult(sqlQuery, 7);
		g_mode_count[MODE_PLAGUE] = SQL_ReadResult(sqlQuery, 8);
		g_mode_count[MODE_ARMAGEDDON] = SQL_ReadResult(sqlQuery, 9);
		g_mode_count[MODE_WESKER] = SQL_ReadResult(sqlQuery, 10);
		g_mode_count[MODE_CABEZON] = SQL_ReadResult(sqlQuery, 11);
		g_mode_count[MODE_JASON] = SQL_ReadResult(sqlQuery, 12);
		g_mode_count[MODE_ALVSPRED] = SQL_ReadResult(sqlQuery, 13);
		g_mode_count[MODE_ANNIHILATOR] = SQL_ReadResult(sqlQuery, 14);
		g_mode_count[MODE_SYNAPSIS] = SQL_ReadResult(sqlQuery, 15);
		g_mode_count[MODE_SNIPER] = SQL_ReadResult(sqlQuery, 16);
		g_mode_count[MODE_DUEL_FINAL] = SQL_ReadResult(sqlQuery, 17);
		g_mode_count[MODE_GRUNT] = SQL_ReadResult(sqlQuery, 18);
		
		SQL_ReadResult(sqlQuery, 19, sInfo__128, 128);
		parse(sInfo__128, sName1, 31, sName2, 31, sRounds, 4);
		
		g_ppt_maxround_global = str_to_num(sRounds);
		
		g_mode_count[MODE_GAMINGA] = SQL_ReadResult(sqlQuery, 20);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	new sCurrentTime[4];
	get_time("%A", sCurrentTime, 3);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT event_mode_num FROM modes;");
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 572111);
	else if(SQL_NumResults(sqlQuery))
	{
		g_MiniEvent_Num = SQL_ReadResult(sqlQuery, 0);
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	if(equal(sCurrentTime, "Sat")) {
		g_CheckMiniEvent = 1;
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT event_mode_num, event_mode_day FROM modes;");
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 572111);
		else if(SQL_NumResults(sqlQuery))
		{
			new sDayName[18];
			
			g_MiniEvent_Num = SQL_ReadResult(sqlQuery, 0);
			SQL_ReadResult(sqlQuery, 1, sDayName, 17);
			
			SQL_FreeHandle(sqlQuery);
			
			if(!equali(sDayName, sCurrentTime)) {
				++g_MiniEvent_Num;
				
				sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE modes SET event_mode_num='%d', event_mode_day=^"%s^";", g_MiniEvent_Num, sCurrentTime);
				if(!SQL_Execute(sqlQuery))
					executeQuery(0, sqlQuery, 5873234);
				else
					SQL_FreeHandle(sqlQuery);
			}
		}
		else
			SQL_FreeHandle(sqlQuery);
	}
	else if(equal(sCurrentTime, "Sun")) {
		g_CheckMiniEvent = 1;
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT event_mode_num, event_mode_day FROM modes;");
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 572111);
		else if(SQL_NumResults(sqlQuery))
		{
			new sDayName[18];
			
			g_MiniEvent_Num = SQL_ReadResult(sqlQuery, 0);
			SQL_ReadResult(sqlQuery, 1, sDayName, 17);
			
			SQL_FreeHandle(sqlQuery);
			
			if(!equali(sDayName, sCurrentTime)) {
				++g_MiniEvent_Num;
				
				sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE modes SET event_mode_num='%d', event_mode_day=^"%s^";", g_MiniEvent_Num, sCurrentTime);
				if(!SQL_Execute(sqlQuery))
					executeQuery(0, sqlQuery, 5873234);
				else
					SQL_FreeHandle(sqlQuery);
			}
		}
		else
			SQL_FreeHandle(sqlQuery);
		
		if(!iSorteoLoteria)
			set_task(380.0, "sorteoLoteria");
	}
	
	if(iSorteoLoteria && !equal(sCurrentTime, "Sun"))
	{
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE modes SET lot_sorteo = '0';");
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 43);
		else
			SQL_FreeHandle(sqlQuery);
	}
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT COUNT(id) FROM users WHERE id <> 1;");
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 53);
	else if(SQL_NumResults(sqlQuery))
	{
		g_rank_global = SQL_ReadResult(sqlQuery, 0);
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT name, level, evento, exp FROM users WHERE id <> 1 AND ban <> 1 ORDER BY lvl_total DESC, exp DESC LIMIT 1;");
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 60);
	else if(SQL_NumResults(sqlQuery))
	{
		SQL_ReadResult(sqlQuery, 0, g_TOP_EXP_player_name, 31);
		g_TOP_EXP_level = SQL_ReadResult(sqlQuery, 1);
		g_TOP_RNG_level = SQL_ReadResult(sqlQuery, 2);
		addDot(SQL_ReadResult(sqlQuery, 3), g_TOP_EXP_exp, 14);
		
		new iThinkTOP;
		iThinkTOP = create_entity("info_target");
		
		if(is_valid_ent(iThinkTOP))
		{
			entity_set_string(iThinkTOP, EV_SZ_classname, CLASSNAME_THINK_TOP_EXP);
			entity_set_float(iThinkTOP, EV_FL_nextthink, NEXTTHINK_THINK_TOP);
			
			register_think(CLASSNAME_THINK_TOP_EXP, "think__EXP");
		}
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT users.name, combos_max_d FROM users LEFT JOIN stats ON users.id = stats.zp_id WHERE users.id <> 1 AND users.ban <> 1 ORDER BY combos_max_d DESC LIMIT 1;");
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 61);
	else if(SQL_NumResults(sqlQuery))
	{
		SQL_ReadResult(sqlQuery, 0, g_TOP_COMBO_player_name, 31);
		addDot(SQL_ReadResult(sqlQuery, 1), g_TOP_COMBO_combo, 14);
		
		new iThinkTOP;
		iThinkTOP = create_entity("info_target");
		
		if(is_valid_ent(iThinkTOP))
		{
			entity_set_string(iThinkTOP, EV_SZ_classname, CLASSNAME_THINK_TOP_COMBO);
			entity_set_float(iThinkTOP, EV_FL_nextthink, NEXTTHINK_THINK_TOP + 60.0);
			
			register_think(CLASSNAME_THINK_TOP_COMBO, "think__COMBO");
		}
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT users.name, time FROM users LEFT JOIN stats ON users.id = stats.zp_id WHERE users.id <> 1 AND users.ban <> 1 ORDER BY time DESC LIMIT 1;");
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 62);
	else if(SQL_NumResults(sqlQuery))
	{
		SQL_ReadResult(sqlQuery, 0, g_TOP_TIME_player_name, 31);
		g_TOP_TIME_time = SQL_ReadResult(sqlQuery, 1);
		
		g_TOP_TIME_days = 0;
		g_TOP_TIME_hours = (g_TOP_TIME_time / 60);
		
		while(g_TOP_TIME_hours >= 24)
		{
			++g_TOP_TIME_days;
			g_TOP_TIME_hours -= 24;
		}
		
		g_TOP_TIME_time -= ((g_TOP_TIME_hours * 60) + (g_TOP_TIME_days * 24 * 60));
		
		new iThinkTOP;
		iThinkTOP = create_entity("info_target");
		
		if(is_valid_ent(iThinkTOP))
		{
			entity_set_string(iThinkTOP, EV_SZ_classname, CLASSNAME_THINK_TOP_TIME);
			entity_set_float(iThinkTOP, EV_FL_nextthink, NEXTTHINK_THINK_TOP + 120.0);
			
			register_think(CLASSNAME_THINK_TOP_TIME, "think__TIME");
		}
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT users.name, ach_count FROM users LEFT JOIN stats ON users.id = stats.zp_id WHERE users.id <> 1 AND users.ban <> 1 ORDER BY ach_count DESC LIMIT 1;");
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 63);
	else if(SQL_NumResults(sqlQuery))
	{
		SQL_ReadResult(sqlQuery, 0, g_TOP_ACH_player_name, 31);
		g_TOP_ACH_ach = SQL_ReadResult(sqlQuery, 1);
		
		new iThinkTOP;
		iThinkTOP = create_entity("info_target");
		
		if(is_valid_ent(iThinkTOP))
		{
			entity_set_string(iThinkTOP, EV_SZ_classname, CLASSNAME_THINK_TOP_ACH);
			entity_set_float(iThinkTOP, EV_FL_nextthink, NEXTTHINK_THINK_TOP + 180.0);
			
			register_think(CLASSNAME_THINK_TOP_ACH, "think__ACH");
		}
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT am_health FROM `amuletos` WHERE am_health='5' AND am_grav='5' AND am_speed='5' AND am_damage='5' AND am_mult_exp>'1.35' AND am_mult_aps>'1.35';");
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 64);
	else if(SQL_NumResults(sqlQuery))
	{
		g_TOP_AMU_AllUsers = SQL_NumResults(sqlQuery) - 1;
		
		new iThinkTOP;
		iThinkTOP = create_entity("info_target");
		
		if(is_valid_ent(iThinkTOP))
		{
			entity_set_string(iThinkTOP, EV_SZ_classname, CLASSNAME_THINK_TOP_AMU);
			entity_set_float(iThinkTOP, EV_FL_nextthink, NEXTTHINK_THINK_TOP + 240.0);
			
			register_think(CLASSNAME_THINK_TOP_AMU, "think__AMU");
		}
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	new sMapName[64];
	get_mapname(sMapName, 63);
	strtolower(sMapName);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT mapname, username, combo FROM combos WHERE mapname=^"%s^" LIMIT 1;", sMapName);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 6789);
	else if(SQL_NumResults(sqlQuery))
	{
		SQL_ReadResult(sqlQuery, 0, g_TOP_COMBO_PER_MAP_MAP, 63);
		SQL_ReadResult(sqlQuery, 1, g_TOP_COMBO_PER_MAP_NAME, 31);
		g_TOP_COMBO_PER_MAP_COMBO = SQL_ReadResult(sqlQuery, 2);
		
		addDot(g_TOP_COMBO_PER_MAP_COMBO, g_TOP_COMBO_PER_MAP_COMBO_DA, 14);
		
		new iThinkTOP;
		iThinkTOP = create_entity("info_target");
		
		if(is_valid_ent(iThinkTOP))
		{
			entity_set_string(iThinkTOP, EV_SZ_classname, CLASSNAME_THINK_TOP_COMBOMAP);
			entity_set_float(iThinkTOP, EV_FL_nextthink, NEXTTHINK_THINK_TOP + 300.0);
			
			register_think(CLASSNAME_THINK_TOP_COMBOMAP, "think__COMBO_MAP");
		}
		
		SQL_FreeHandle(sqlQuery);
	}
	else {
		SQL_FreeHandle(sqlQuery);
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO combos (mapname, username, combo) VALUES (^"%s^", '[GAM!NGA] KISKE', '0')", sMapName);
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 436234);
		else
			SQL_FreeHandle(sqlQuery);
	}
	
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT `guild_id`, `guild_name` FROM `guild` WHERE id1 = 0 AND `id2` = 0 AND `id3` = 0 AND `id4` = 0 AND `id5` = 0;");
	
	new guildAbyssId;
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 869995);
	else if(SQL_NumResults(sqlQuery))
	{
		while(SQL_MoreResults(sqlQuery))
		{
			guildAbyssId = SQL_ReadResult(sqlQuery, 0); // ID
			
			g_GuildAbyss_Id[guildAbyssId] = 1;
			SQL_ReadResult(sqlQuery, 1, g_GuildAbyss_Name[guildAbyssId], 31); // ZP_ID
			
			SQL_NextRow(sqlQuery);
		}
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
}

public think__EXP(const ent)
{
	colorChat(0, CT, "%s!t%s!y está liderando en !gniveles!y siendo !grango %s!y con !g%d niveles!y y !g%s EXP!y", ZP_PREFIX, g_TOP_EXP_player_name, LETRAS_RESET[g_TOP_RNG_level], g_TOP_EXP_level, g_TOP_EXP_exp);
	entity_set_float(ent, EV_FL_nextthink, NEXTTHINK_THINK_TOP);
}

public think__COMBO(const ent)
{
	colorChat(0, CT, "%s!t%s!y está liderando en !gcombo máximo general!y con un combo de !gx%s!y", ZP_PREFIX, g_TOP_COMBO_player_name, g_TOP_COMBO_combo);
	entity_set_float(ent, EV_FL_nextthink, NEXTTHINK_THINK_TOP + 60.0);
}

public think__COMBO_MAP(const ent)
{
	new sMapName[64];
	get_mapname(sMapName, 63);
	strtolower(sMapName)
	
	colorChat(0, CT, "%s!t%s!y está liderando en !gcombo máximo!y en el mapa !g%s!y con un combo de !gx%s!y", ZP_PREFIX, g_TOP_COMBO_PER_MAP_NAME, sMapName, g_TOP_COMBO_PER_MAP_COMBO_DA);
	entity_set_float(ent, EV_FL_nextthink, NEXTTHINK_THINK_TOP + 300.0);
}

public think__TIME(const ent)
{
	colorChat(0, CT, "%s!t%s!y es el más viciado del servidor con !g%d días!y, !g%d horas!y y !g%d minutos!y jugados", ZP_PREFIX, g_TOP_TIME_player_name, g_TOP_TIME_days, g_TOP_TIME_hours, g_TOP_TIME_time);
	entity_set_float(ent, EV_FL_nextthink, NEXTTHINK_THINK_TOP + 120.0);
}

public think__ACH(const ent)
{
	colorChat(0, CT, "%s!t%s!y está liderando en !glogros hechos!y con !g%d!y logros", ZP_PREFIX, g_TOP_ACH_player_name, g_TOP_ACH_ach);
	entity_set_float(ent, EV_FL_nextthink, NEXTTHINK_THINK_TOP + 180.0);
}

public think__AMU(const ent)
{
	colorChat(0, CT, "%s!tLeoneL_089!y y !t%d+!y tienen el mejor amuleto, !g+5H!y, !g+5S!y, !g+5G!y, !g+5D!y, !g+x1.4 EXP!y, !g+x1.4 APS!y", ZP_PREFIX, g_TOP_AMU_AllUsers);
	
	entity_set_float(ent, EV_FL_nextthink, NEXTTHINK_THINK_TOP + 240.0);
}

public executeQuery(const id, const Handle:query, const query_num)
{
	SQL_QueryError(query, g_sql_error, 511);
	
	log_to_file("zp_sql.log", "- LOG: %d - %s", query_num, g_sql_error);
	
	if(is_user_valid_connected(id))
		server_cmd("kick #%d ^"Hubo un error al guardar/cargar tus datos. Intente mas tarde^"", get_user_userid(id));
	
	SQL_FreeHandle(query);
}

public checkAccount(const id)
{
	if(!g_isconnected[id])
		return;
	
	new Handle:sqlQuery;
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT id, password, ip, ban, expireban, adminban, reasonban, vinc FROM users WHERE name = ^"%s^";", g_playername[id]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 1);
	else if(SQL_NumResults(sqlQuery)) // Registrado
	{
		new sIP[21];
		new sDB_IP[21];
		new sPassword[32];
		
		g_user_id[id] = SQL_ReadResult(sqlQuery, 0);
		// 1 = name
		SQL_ReadResult(sqlQuery, 1, g_user_password[id], 31);
		SQL_ReadResult(sqlQuery, 2, sDB_IP, 20);
		
		new i = 0;
		while(i < 512) {
			if(g_MiniEvent_List[i] == g_user_id[id]) {
				break;
			}
			
			if(g_MiniEvent_List[i]) {
				++i;
				continue;
			}
			
			g_MiniEvent_UserId[i] = id;
			g_MiniEvent_List[i] = g_user_id[id];
			
			break;
		}
		
		get_user_info(id, "zp5", sPassword, 31);
		get_user_ip(id, sIP, 20, 1);
		
		g_account_vinc[id] = SQL_ReadResult(sqlQuery, 7);
		
		g_user_register[id] = 1;
		
		if(SQL_ReadResult(sqlQuery, 3)) // Baneado
		{
			SQL_ReadResult(sqlQuery, 4, g_user_expire_ban[id], 31);
			
			new sDate[16];
			new sTime[16];
			
			new sYear[5];
			new sMonth[3];
			new sDay[3];
			new sHour[3];
			new sMin[3];
			new sSec[3];
			
			new iYear;
			new iMonth;
			new iDay;
			new iHour;
			new iMin;
			new iSec;
			
			new iActualTime;
			new iBannedTo;
			
			iActualTime = arg_time();
			
			parse(g_user_expire_ban[id], sDate, charsmax(sDate), sTime, charsmax(sTime));
			
			replace_all(sDate, charsmax(sDate), "-", " ");
			replace_all(sTime, charsmax(sTime), ":", " ");
			
			parse(sDate, sYear, 4, sMonth, 2, sDay, 2);
			parse(sTime, sHour, 2, sMin, 2, sSec, 2);
			
			iYear = str_to_num(sYear);
			iMonth = str_to_num(sMonth);
			iDay = str_to_num(sDay);
			iHour = str_to_num(sHour);
			iMin = str_to_num(sMin);
			iSec = str_to_num(sSec);
			
			iBannedTo = time_to_unix(iYear, iMonth, iDay, iHour, iMin, iSec);
			
			if(iActualTime < iBannedTo)
			{
				if(is_user_valid_connected(id))
				{
					SQL_ReadResult(sqlQuery, 5, g_user_admin_ban[id], 31);
					SQL_ReadResult(sqlQuery, 6, g_user_reason_ban[id], 127);
					
					g_user_banned[id] = 1;
					client_cmd(id, "chooseteam");
					
					set_task(3.0, "kickUser", id);
					
					SQL_FreeHandle(sqlQuery);
				}
				else
					SQL_FreeHandle(sqlQuery);
			}
			else
			{
				colorChat(0, _, "%sEl jugador !g%s!y ya no está baneado y puede volver a jugar", ZP_PREFIX, g_playername[id]);
				
				SQL_FreeHandle(sqlQuery);
				
				sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET ban = '0', expireban = 'NONE', adminban = 'NONE', reasonban = 'NONE' WHERE id = '%d';", g_user_id[id]);
				if(!SQL_Execute(sqlQuery))
					executeQuery(id, sqlQuery, 2);
				else
					SQL_FreeHandle(sqlQuery);
				
				if(equal(sDB_IP, sIP) && equal(g_user_password[id], sPassword)) // Logeado automáticamente
				{
					g_user_logged[id] = 1;
					g_systime_in[id] = get_systime();
					
					loadInfo(id);
					
					remove_task(id + TASK_SAVE);
					set_task(random_float(300.0, 600.0), "saveTask", id + TASK_SAVE, _, _, "b");
					
					clearDHUDs(id);
					
					remove_task(id + TASK_HELLODHUD);
					set_task(random_float(3.5, 7.5), "helloDHUD", id + TASK_HELLODHUD);
				}
				else clcmd_Changeteam(id);
			}
		}
		else
		{
			SQL_FreeHandle(sqlQuery);
			
			if(equal(sDB_IP, sIP) && equal(g_user_password[id], sPassword)) // Logeado automáticamente
			{
				g_user_logged[id] = 1;
				g_systime_in[id] = get_systime();
				
				loadInfo(id);
				
				remove_task(id + TASK_SAVE);
				set_task(random_float(300.0, 600.0), "saveTask", id + TASK_SAVE, _, _, "b");
				
				clearDHUDs(id);
				
				remove_task(id + TASK_HELLODHUD);
				set_task(random_float(3.5, 7.5), "helloDHUD", id + TASK_HELLODHUD);
			}
			
			clcmd_Changeteam(id);
		}
	}
	else
	{
		SQL_FreeHandle(sqlQuery);
		clcmd_Changeteam(id);
	}
}

public saveTask(const taskid)
{
	if(!g_isconnected[ID_SAVE])
		return;
	
	saveInfo(ID_SAVE);
}

loadInfo(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return;
	
	/* ==== ACCOUNT & STATS ==== */ /* ==== ACCOUNT & STATS ==== */ /* ==== ACCOUNT & STATS ==== */ /* ==== ACCOUNT & STATS ==== */
	new Handle:sqlQuery;
	/*sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET online=1 WHERE id='%d';", g_user_id[id]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 121449);
	else
		SQL_FreeHandle(sqlQuery);*/
	
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT * FROM users LEFT JOIN stats on stats.zp_id = '%d' WHERE id = '%d';", g_user_id[id], g_user_id[id]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 3);
	else if(SQL_NumResults(sqlQuery))
	{
		/*	0 = ID
			1 = NAME
			2 = PASSWORD
			3 = IP
			4 = BAN
				5 = EXPIREBAN
			6 = ADMINBAN
			7 = REASONBAN */
		
		SQL_ReadResult(sqlQuery, 5, g_guild_invite_again[id], 63);
		
		if(equal(g_guild_invite_again[id], "NONE"))
			g_guild_invite_again[id][0] = EOS;
		
		if(g_guild_invite_again[id][0])
		{
			new sDate[16];
			new sTime[16];
			
			new sYear[5];
			new sMonth[3];
			new sDay[3];
			new sHour[3];
			new sMin[3];
			new sSec[3];
			
			new iYear;
			new iMonth;
			new iDay;
			new iHour;
			new iMin;
			new iSec;
			
			new iActualTime;
			new iBannedTo;
			
			iActualTime = arg_time();
			
			parse(g_guild_invite_again[id], sDate, charsmax(sDate), sTime, charsmax(sTime));
			
			replace_all(sDate, charsmax(sDate), "-", " ");
			replace_all(sTime, charsmax(sTime), ":", " ");
			
			parse(sDate, sYear, 4, sMonth, 2, sDay, 2);
			parse(sTime, sHour, 2, sMin, 2, sSec, 2);
			
			iYear = str_to_num(sYear);
			iMonth = str_to_num(sMonth);
			iDay = str_to_num(sDay);
			iHour = str_to_num(sHour);
			iMin = str_to_num(sMin);
			iSec = str_to_num(sSec);
			
			iBannedTo = time_to_unix(iYear, iMonth, iDay, iHour, iMin, iSec);
			
			if(iActualTime >= iBannedTo)
				g_guild_invite_again[id][0] = EOS;
		}
		
		static sInfo__64[64];
		static sPoints_Human[6], sPoints_HumanLost[6], sPoints_Zombie[6], sPoints_ZombieLost[6], sPoints_Survivor[6], sPoints_Nemesis[6], sPoints_Fragments[6], sPoints_Diamonds[6];
		
		static sHabs[256];
		static sHab[24][4];
		
		static sColor[TypeColors][3][4];
		
		static sInfo__128[128];
		static sHud_Position[TypePositions][3][11], sHudCombo_Effect[2], sHudCombo_Abrev[2], sHud_Effect[2], sHud_Abrev[2];
		
		static sInfo_256[256];
		
		static sWeapons[20];
		static sWeap_Auto[2], sWeap_Primary[3], sWeap_Secondary[3], sWeap_Terciary[3];
		
		static sItemExtra[10][2][10];
		
		static sHeadZombie[8][6];
		
		static i;
		static j;
		
		g_level[id] = SQL_ReadResult(sqlQuery, 8);
		g_exp[id] = SQL_ReadResult(sqlQuery, 9);
		g_ammopacks[id] = SQL_ReadResult(sqlQuery, 10);
		
		g_rango[id] = SQL_ReadResult(sqlQuery, 35);
		
		g_level_total[id] = SQL_ReadResult(sqlQuery, 38);
		g_reset[id] = SQL_ReadResult(sqlQuery, 39);
		
		g_level_percent[id] = clampfloat(((float(g_exp[id]) - float(NEED_EXP_TOTAL[g_level_total[id]-1])) * 100.0) / (float(NEED_EXP_TOTAL[g_level_total[id]]) - float(NEED_EXP_TOTAL[g_level_total[id]-1])), 0.0, 100.0);
		
		g_human_model[id] = clamp((g_level_total[id] / 25), 0, charsmax(MODELOS_HUMANOS));
		
		if(g_level_total[id] < 1000 && !g_combo_need_damage_fake[id])
			g_combo_need_damage[id] = 1.0;
		
		g_zombie_class[id] = SQL_ReadResult(sqlQuery, 11);
		g_zombie_class_next[id] = g_zombie_class[id];
		g_human_class[id] = SQL_ReadResult(sqlQuery, 12);
		g_human_class_next[id] = g_human_class[id];
		
		g_dificult[id][CLASS_SURVIVOR] = SQL_ReadResult(sqlQuery, 13);
		g_dificult[id][CLASS_NEMESIS] = SQL_ReadResult(sqlQuery, 14);
		
		SQL_ReadResult(sqlQuery, 15, sInfo__64, 63);
		parse(sInfo__64, sPoints_Human, 5, sPoints_Zombie, 5, sPoints_Survivor, 5, sPoints_Nemesis, 5, sPoints_Fragments, 5, sPoints_HumanLost, 5, sPoints_ZombieLost, 5, sPoints_Diamonds, 5);
		
		g_points[id][CLASS_HUMAN] = str_to_num(sPoints_Human);
		g_points[id][CLASS_ZOMBIE] = str_to_num(sPoints_Zombie);
		g_points[id][CLASS_SURVIVOR] = str_to_num(sPoints_Survivor);
		g_points[id][CLASS_NEMESIS] = str_to_num(sPoints_Nemesis);
		g_points[id][CLASS_FRAGMENTOS] = str_to_num(sPoints_Fragments);
		
		g_points_lost[id][CLASS_HUMAN] = str_to_num(sPoints_HumanLost);
		g_points_lost[id][CLASS_ZOMBIE] = str_to_num(sPoints_ZombieLost);
		
		g_diamonds[id] = str_to_num(sPoints_Diamonds);
		
		SQL_ReadResult(sqlQuery, 16, sHabs, 255);
		parse(sHabs, sHab[0], 2, sHab[1], 2, sHab[2], 2, sHab[3], 2, sHab[4], 2, sHab[5], 2, sHab[6], 3, sHab[7], 2, sHab[8], 2, sHab[9], 2, sHab[10], 2, sHab[11], 2, sHab[12], 2, sHab[13], 2, sHab[14], 2, sHab[15], 2, sHab[16], 2, sHab[17], 2, sHab[18], 2,
		sHab[19], 2, sHab[20], 2, sHab[21], 2, sHab[22], 2);
		
		for(i = 0; i < 6; ++i)
			g_hab[id][i][CLASS_HUMAN] = str_to_num(sHab[i]);
		
		j = 6;
		for(i = 0; i < 4; ++i)
		{
			g_hab[id][i][CLASS_ZOMBIE] = str_to_num(sHab[j]);
			++j;
		}
		
		j = 10;
		for(i = 0; i < 3; ++i)
		{
			g_hab[id][i][CLASS_SURVIVOR] = str_to_num(sHab[j]);
			++j;
		}
		
		j = 13;
		for(i = 0; i < 3; ++i)
		{
			g_hab[id][i][CLASS_NEMESIS] = str_to_num(sHab[j]);
			++j;
		}
		
		g_hab[id][0][CLASS_FRAGMENTOS] = str_to_num(sHab[16]);
		g_hab[id][1][CLASS_FRAGMENTOS] = str_to_num(sHab[17]);
		g_hab[id][2][CLASS_FRAGMENTOS] = str_to_num(sHab[18]);
		g_combo_zombie_ok[id] = str_to_num(sHab[19]);
		g_hab[id][3][CLASS_FRAGMENTOS] = str_to_num(sHab[20]);
		g_hab[id][4][CLASS_FRAGMENTOS] = str_to_num(sHab[21]);
		g_hab[id][5][CLASS_FRAGMENTOS] = str_to_num(sHab[22]);
		
		SQL_ReadResult(sqlQuery, 17, sInfo__64, 63);
		parse(sInfo__64, sColor[COLOR_NIGHT][RED], 3, sColor[COLOR_NIGHT][GREEN], 3, sColor[COLOR_NIGHT][BLUE], 3, sColor[COLOR_HUD][RED], 3, sColor[COLOR_HUD][GREEN], 3, sColor[COLOR_HUD][BLUE], 3, sColor[COLOR_FLARE][RED], 3, sColor[COLOR_FLARE][GREEN], 3, sColor[COLOR_FLARE][BLUE], 3,
		sColor[COLOR_BAZOOKA][RED], 3, sColor[COLOR_BAZOOKA][GREEN], 3, sColor[COLOR_BAZOOKA][BLUE], 3, sColor[COLOR_BAZOOKA_SPECIAL][RED], 1, sColor[COLOR_LASER][RED], 3, sColor[COLOR_LASER][GREEN], 3, sColor[COLOR_LASER][BLUE], 3, sColor[COLOR_LASER_SPECIAL][RED], 1);
		
		for(i = 0; i < TypeColors; ++i)
		{
			for(j = 0; j < MaxColors; ++j)
				g_color[id][i][j] = str_to_num(sColor[i][j]);
		}
		
		SQL_ReadResult(sqlQuery, 18, sInfo__128, 127);
		parse(sInfo__128, sHud_Position[POSITION_HUD][0], 10, sHud_Position[POSITION_HUD][1], 10, sHud_Position[POSITION_HUD][2], 10, sHud_Position[POSITION_HUDCOMBO][0], 10, sHud_Position[POSITION_HUDCOMBO][1], 10, sHud_Position[POSITION_HUDCOMBO][2], 10, sHudCombo_Effect, 1, sHudCombo_Abrev, 1,
		sHud_Effect, 1, sHud_Abrev, 1, sHud_Position[POSITION_HUDGUILD][0], 10, sHud_Position[POSITION_HUDGUILD][1], 10, sHud_Position[POSITION_HUDGUILD][2], 10);
		
		g_hud_position[id][POSITION_HUD][0] = str_to_float(sHud_Position[POSITION_HUD][0]);
		g_hud_position[id][POSITION_HUD][1] = str_to_float(sHud_Position[POSITION_HUD][1]);
		g_hud_position[id][POSITION_HUD][2] = str_to_float(sHud_Position[POSITION_HUD][2]);
		g_hud_position[id][POSITION_HUDCOMBO][0] = str_to_float(sHud_Position[POSITION_HUDCOMBO][0]);
		g_hud_position[id][POSITION_HUDCOMBO][1] = str_to_float(sHud_Position[POSITION_HUDCOMBO][1]);
		g_hud_position[id][POSITION_HUDCOMBO][2] = str_to_float(sHud_Position[POSITION_HUDCOMBO][2]);
		
		g_hudcombo_effect[id] = str_to_num(sHudCombo_Effect);
		g_hudcombo_abrev[id] = str_to_num(sHudCombo_Abrev);
		g_hud_effect[id] = str_to_num(sHud_Effect);
		g_hud_abrev[id] = str_to_num(sHud_Abrev);
		
		g_hud_position[id][POSITION_HUDGUILD][0] = str_to_float(sHud_Position[POSITION_HUDGUILD][0]);
		g_hud_position[id][POSITION_HUDGUILD][1] = str_to_float(sHud_Position[POSITION_HUDGUILD][1]);
		g_hud_position[id][POSITION_HUDGUILD][2] = str_to_float(sHud_Position[POSITION_HUDGUILD][2]);
		
		if(g_hud_position[id][POSITION_HUDGUILD][0] == 0.0 && g_hud_position[id][POSITION_HUDGUILD][1] == 0.0)
			g_hud_position[id][POSITION_HUDGUILD] = Float:{-1.0, 0.80, 1.0};
		
		SQL_ReadResult(sqlQuery, 19, sWeapons, 19);
		parse(sWeapons, sWeap_Auto, 1, sWeap_Primary, 2, sWeap_Secondary, 2, sWeap_Terciary, 2);
		
		g_weapon_auto[id] = str_to_num(sWeap_Auto);
		g_weapon_primary[id] = str_to_num(sWeap_Primary);
		g_weapon_secondary[id] = str_to_num(sWeap_Secondary);
		g_weapon_terciary[id] = str_to_num(sWeap_Terciary);
		
		g_human_invis[id] = SQL_ReadResult(sqlQuery, 20);
		g_account_vinc[id] = SQL_ReadResult(sqlQuery, 21);
		g_chat_mode[id] = SQL_ReadResult(sqlQuery, 22);
		g_distance_nightvision[id] = SQL_ReadResult(sqlQuery, 23);
		g_chat_mode_prefix[id] = SQL_ReadResult(sqlQuery, 24);
		
		if(!g_account_vinc[id])
			set_task(random_float(200.0, 350.0), "message__VincAccount", id + TASK_MESSAGE_VINC, _, _, "b");
		
		set_task(120.0, "message_Tournament", id);
		
		switch(g_chat_mode[id])
		{
			case CHAT_MODE_NONE: formatex(g_chat_text[id], 15, "");
			case CHAT_MODE_NORMAL: formatex(g_chat_text[id], 15, " [%s](%s%d)", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			case CHAT_MODE_CORCHETES: formatex(g_chat_text[id], 15, " [%s][%s%d]", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			case CHAT_MODE_CORCHETES_PARENTESIS: formatex(g_chat_text[id], 15, " [%s][(%s%d)]", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			case CHAT_MODE_LLAVES: formatex(g_chat_text[id], 15, " [%s]{%s%d}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			case CHAT_MODE_LLAVES_PARENTESIS: formatex(g_chat_text[id], 15, " [%s]{(%s%d)}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			case CHAT_MODE_LLAVES_CORCHETES: formatex(g_chat_text[id], 15, " [%s]{[%s%d]}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			case CHAT_MODE_LLAVES_CORCHETES_P: formatex(g_chat_text[id], 15, " [%s]{[(%s%d)]}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
		}
		
		SQL_ReadResult(sqlQuery, 25, sInfo_256, 255);
		parse(sInfo_256, sItemExtra[EXTRA_NVISION][0], 9, sItemExtra[EXTRA_LONGJUMP_H][0], 9, sItemExtra[EXTRA_BOMBKILL][0], 9, sItemExtra[EXTRA_GRAVITY][0], 9, sItemExtra[EXTRA_TRANSP][0], 9, sItemExtra[EXTRA_UNLIMITED_CLIP][0], 9,
		sItemExtra[EXTRA_ANTIDOTE][1], 9, sItemExtra[EXTRA_MADNESS][1], 9, sItemExtra[EXTRA_INFBOMB][1], 9, sItemExtra[EXTRA_LONGJUMP_Z][1], 9, sItemExtra[EXTRA_TOXICBOMB][1], 9, sItemExtra[EXTRA_REDUCEDMG][1], 9, sItemExtra[EXTRA_ANTIDOTE_BOMB][0], 9,
		sItemExtra[EXTRA_PRECISION_SEMIPERFECTA][0], 9);
		
		for(i = 0; i < (sizeof(ITEMS_EXTRAS_HUMANS) - ADD_ITEMS_HUMANS); ++i)
			g_item_extra[id][i][CLASS_HUMAN] = str_to_num(sItemExtra[i][0]);
	
		for(i = 0; i < sizeof(ITEMS_EXTRAS_ZOMBIES); ++i)
			g_item_extra[id][i][CLASS_ZOMBIE] = str_to_num(sItemExtra[i][1]);
		
		g_item_extra[id][EXTRA_ANTIDOTE_BOMB][CLASS_HUMAN] = str_to_num(sItemExtra[EXTRA_ANTIDOTE_BOMB][0]);
		
		if(g_item_extra[id][EXTRA_ANTIDOTE_BOMB][CLASS_HUMAN] < 30)
			g_item_extra[id][EXTRA_ANTIDOTE_BOMB][CLASS_HUMAN] += 50;
		
		g_item_extra[id][EXTRA_PRECISION_SEMIPERFECTA][CLASS_HUMAN] = str_to_num(sItemExtra[EXTRA_PRECISION_SEMIPERFECTA][0]);
		
		if(g_item_extra[id][EXTRA_PRECISION_SEMIPERFECTA][CLASS_HUMAN] < 30)
			g_item_extra[id][EXTRA_PRECISION_SEMIPERFECTA][CLASS_HUMAN] += 50;
		
		g_amuleto_equip[id] = SQL_ReadResult(sqlQuery, 26);
		
		g_bet[id] = SQL_ReadResult(sqlQuery, 27);
		g_bet_num[id] = SQL_ReadResult(sqlQuery, 28);
		
		if(g_bet[id] > 0)
			g_bet_done[id] = 1;
		
		g_guild_id[id] = SQL_ReadResult(sqlQuery, 29);
		
		g_buy_stuff[id] = 0;
		g_buy_stuff[id] = SQL_ReadResult(sqlQuery, 30);
		
		SQL_ReadResult(sqlQuery, 33, g_user_hid_last[id], 63);
		
		g_level_hardcore[id][0] = SQL_ReadResult(sqlQuery, 36);
		g_level_hardcore[id][1] = SQL_ReadResult(sqlQuery, 37);
		
		/*		30 = COMPRO
			31 = REGISTER
			32 = LAST_C
				33 = HID_REGISTER
			34 = HID_LAST
				35 = EVENTO (RANGO)
				36 = LVL Z
				37 = LVL H
				38 = LEVEL_TOTAL
				39 = RESET
			40 = ONLINE
			
			41 = ZP_ID */
		
		for(i = 0; i < MaxStats; ++i)
			g_stats[id][i] = SQL_ReadResult(sqlQuery, (42 + i));
		
		SQL_ReadResult(sqlQuery, (42 + MaxStats), Float:g_damage[id][0]);
		SQL_ReadResult(sqlQuery, (43 + MaxStats), Float:g_damage[id][1]);
		
		SQL_ReadResult(sqlQuery, (44 + MaxStats), sInfo__128, 127);
		parse(sInfo__128, sHeadZombie[0], 5, sHeadZombie[1], 5, sHeadZombie[2], 5, sHeadZombie[3], 5, sHeadZombie[4], 5, sHeadZombie[5], 5, sHeadZombie[6], 5, sHeadZombie[7], 5);
		
		g_head_zombie[id][HEAD_RED] = str_to_num(sHeadZombie[0]);
		g_head_zombie[id][HEAD_GREEN] = str_to_num(sHeadZombie[1]);
		g_head_zombie[id][HEAD_BLUE] = str_to_num(sHeadZombie[2]);
		g_head_zombie[id][HEAD_YELLOW] = str_to_num(sHeadZombie[3]);
		g_head_zombie[id][HEAD_WHITE] = str_to_num(sHeadZombie[4]);
		g_head_zombie[id][HEAD_VIOLET_SMALL] = str_to_num(sHeadZombie[5]);
		g_head_zombie[id][HEAD_VIOLET_BIG] = str_to_num(sHeadZombie[6]);
		g_head_zombie[id][HEAD_DARK_BLUE] = str_to_num(sHeadZombie[7]);
		
		g_logros_stats[id][COUNT_UNLIMITED_CLIP] = SQL_ReadResult(sqlQuery, (45 + MaxStats));
		
		g_time_playing[id][0] = SQL_ReadResult(sqlQuery, (46 + MaxStats));
		
		new iHour = 0;
		new iDay = 0;
		
		iHour = g_time_playing[id][0] / 60;
		
		while(iHour >= 24)
		{
			++iDay;
			iHour -= 24;
		}
		
		g_time_playing[id][3] = g_time_playing[id][0] - ((iHour * 60) + (iDay * 24 * 60));
		g_time_playing[id][1] = iHour;
		g_time_playing[id][2] = iDay;
		
		g_logros_count[id] = SQL_ReadResult(sqlQuery, (47 + MaxStats));
		g_desafios_count[id] = SQL_ReadResult(sqlQuery, (48 + MaxStats));
		
		g_duelo_win[id] = SQL_ReadResult(sqlQuery, (49 + MaxStats));
		g_duelo_lost[id] = SQL_ReadResult(sqlQuery, (50 + MaxStats));
		
		g_gift[id] = SQL_ReadResult(sqlQuery, (51 + MaxStats));
		
		g_legendaria_knife_damage[id] = SQL_ReadResult(sqlQuery, (52 + MaxStats));
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	/* ==== AMULETOS ==== */ /* ==== AMULETOS ==== */ /* ==== AMULETOS ==== */ /* ==== AMULETOS ==== */
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT * FROM amuletos WHERE zp_id = '%d';", g_user_id[id]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 22);
	else if(SQL_NumResults(sqlQuery))
	{
		static iSlot;
		while(SQL_MoreResults(sqlQuery))
		{
			iSlot = SQL_ReadResult(sqlQuery, 1);
			
			SQL_ReadResult(sqlQuery, 2, g_amuleto_name[id][iSlot], 63);
			g_amuleto_stat1[id][iSlot][0] = SQL_ReadResult(sqlQuery, 3);
			g_amuleto_stat1[id][iSlot][1] = SQL_ReadResult(sqlQuery, 4);
			g_amuleto_stat1[id][iSlot][2] = SQL_ReadResult(sqlQuery, 5);
			g_amuleto_stat1[id][iSlot][3] = SQL_ReadResult(sqlQuery, 6);
			SQL_ReadResult(sqlQuery, 7, Float:g_amuleto_stat2[id][iSlot][0]);
			SQL_ReadResult(sqlQuery, 8, Float:g_amuleto_stat2[id][iSlot][1]);
			
			g_amuleto_stat3[id][iSlot][0] = SQL_ReadResult(sqlQuery, 9);
			g_amuleto_stat3[id][iSlot][1] = SQL_ReadResult(sqlQuery, 10);
			g_amuleto_stat3[id][iSlot][2] = SQL_ReadResult(sqlQuery, 11);
			g_amuleto_stat3[id][iSlot][3] = SQL_ReadResult(sqlQuery, 12);
			
			SQL_NextRow(sqlQuery);
		}
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	/* ==== WEAPON STATS ==== */ /* ==== WEAPON STATS ==== */ /* ==== WEAPON STATS ==== */ /* ==== WEAPON STATS ==== */
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT * FROM weapon_stats WHERE zp_id = '%d';", g_user_id[id]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 11);
	else if(SQL_NumResults(sqlQuery))
	{
		static iWeapon;
		while(SQL_MoreResults(sqlQuery))
		{
			iWeapon = SQL_ReadResult(sqlQuery, 1);
			
			g_level_weapons[id][iWeapon] = SQL_ReadResult(sqlQuery, 2);
			g_kills_weapons[id][iWeapon] = SQL_ReadResult(sqlQuery, 3);
			g_skill_weapons[id][iWeapon][4] = SQL_ReadResult(sqlQuery, 4);
			g_skill_weapons[id][iWeapon][0] = SQL_ReadResult(sqlQuery, 5);
			g_skill_weapons[id][iWeapon][1] = SQL_ReadResult(sqlQuery, 6);
			g_skill_weapons[id][iWeapon][2] = SQL_ReadResult(sqlQuery, 7);
			g_skill_weapons[id][iWeapon][3] = SQL_ReadResult(sqlQuery, 8);
			
			SQL_NextRow(sqlQuery);
		}
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	/* ==== ACHIEVEMENTS ==== */ /* ==== ACHIEVEMENTS ==== */ /* ==== ACHIEVEMENTS ==== */ /* ==== ACHIEVEMENTS ==== */
	if(g_logros_count[id] || g_desafios_count[id])
	{
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT logro, metalogro, logro_fecha FROM achievements WHERE zp_id = '%d';", g_user_id[id]);
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(id, sqlQuery, 13);
		else if(SQL_NumResults(sqlQuery))
		{
			static iAchievement;
			static iMetaAchievement;
			while(SQL_MoreResults(sqlQuery))
			{
				iAchievement = SQL_ReadResult(sqlQuery, 0);
				iMetaAchievement = SQL_ReadResult(sqlQuery, 1);
				
				switch(iMetaAchievement)
				{
					case 0:
					{
						g_logros[id][iAchievement] = 1;
						SQL_ReadResult(sqlQuery, 2, g_logros_unlocked[id][iAchievement], 31);
					}
					case 1:
					{
						g_metalogros[id][iAchievement] = 1;
						SQL_ReadResult(sqlQuery, 2, g_metalogros_unlocked[id][iAchievement], 31);
					}
					default: g_desafios[id][iAchievement] = (iMetaAchievement - 1);
				}
				
				SQL_NextRow(sqlQuery);
			}
			
			SQL_FreeHandle(sqlQuery);
		}
		else
			SQL_FreeHandle(sqlQuery);
	}
	
	/* ==== HERMANDAD ==== */ /* ==== HERMANDAD ==== */ /* ==== HERMANDAD ==== */ /* ==== HERMANDAD ==== */
	if(g_guild_id[id])
	{
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT * FROM guild WHERE guild_id='%d'", g_guild_id[id]);
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(id, sqlQuery, 48);
		else if(SQL_NumResults(sqlQuery))
		{
			g_guild[id] = 1;
			
			SQL_ReadResult(sqlQuery, 1, g_guild_name[g_guild_id[id]], 31);
			
			g_guild_userid[id][0] = SQL_ReadResult(sqlQuery, 4);
			g_guild_userid[id][1] = SQL_ReadResult(sqlQuery, 5);
			g_guild_userid[id][2] = SQL_ReadResult(sqlQuery, 6);
			g_guild_userid[id][3] = SQL_ReadResult(sqlQuery, 7);
			g_guild_userid[id][4] = SQL_ReadResult(sqlQuery, 8);
			
			g_combo_max_guild[g_guild_id[id]][2] = SQL_ReadResult(sqlQuery, 9);
			g_combo_max_guild[g_guild_id[id]][3] = SQL_ReadResult(sqlQuery, 10);
			g_combo_max_guild[g_guild_id[id]][4] = SQL_ReadResult(sqlQuery, 11);
			g_combo_max_guild[g_guild_id[id]][5] = SQL_ReadResult(sqlQuery, 12);
			
			if(g_guild_userid[id][0] == g_user_id[id])
				g_guild_creator[id] = 1;
			else if(!g_guild_userid[id][0])
			{
				if(!g_guild_userid[id][1])
				{
					if(!g_guild_userid[id][2])
					{
						if(!g_guild_userid[id][3])
						{
							if(g_guild_userid[id][4] == g_user_id[id])
								g_guild_creator[id] = 1;
						}
						else if(g_guild_userid[id][3] == g_user_id[id])
							g_guild_creator[id] = 1;
					}
					else if(g_guild_userid[id][2] == g_user_id[id])
						g_guild_creator[id] = 1;
				}
				else if(g_guild_userid[id][1] == g_user_id[id])
					g_guild_creator[id] = 1;
			}
			
			new i;
			new j = 0;
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				if(id == i)
					continue;
				
				if(g_guild_id[id] == g_guild_id[i])
				{
					/*g_guild_ids[id][0] = id;
					g_guild_ids[i][0] = i;
					
					++g_guild_slot[id];
					++g_guild_slot[i];
					
					if(g_guild_slot[id] > 4) g_guild_slot[id] = 1;
					if(g_guild_slot[i] > 4) g_guild_slot[i] = 1;
					
					g_guild_ids[id][g_guild_slot[id]] = i;
					g_guild_ids[i][g_guild_slot[i]] = id;*/
					
					g_guild_ids[id][0] = id;
					
					++g_guild_slot[id];
					
					if(g_guild_slot[id] > 4)
						g_guild_slot[id] = 1;
					
					g_guild_ids[id][g_guild_slot[id]] = i;
					
					++j;
				}
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				if(id == i)
					continue;
				
				if(g_guild_id[id] == g_guild_id[i])
				{
					g_guild_slot[i] = g_guild_slot[id];
					
					g_guild_ids[i][0] = g_guild_ids[id][0];
					g_guild_ids[i][1] = g_guild_ids[id][1];
					g_guild_ids[i][2] = g_guild_ids[id][2];
					g_guild_ids[i][3] = g_guild_ids[id][3];
					g_guild_ids[i][4] = g_guild_ids[id][4];
				}
			}
			
			if(!j)
			{
				g_guild_level[g_guild_id[id]] = SQL_ReadResult(sqlQuery, 2);
				g_guild_exp[g_guild_id[id]] = SQL_ReadResult(sqlQuery, 3);
			}
			
			SQL_FreeHandle(sqlQuery);
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT users.name, users.id FROM guild LEFT JOIN users ON users.guildid = guild_id WHERE guild_id='%d';", g_guild_id[id]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 120);
			else if(SQL_NumResults(sqlQuery))
			{
				i = 0;
				while(SQL_MoreResults(sqlQuery))
				{
					if(i == 5)
						break;
					
					SQL_ReadResult(sqlQuery, 0, g_guild_username[g_guild_id[id]][i], 31);
					g_guild_userid_concat[g_guild_id[id]][i] = SQL_ReadResult(sqlQuery, 1);
					
					++i;
					
					SQL_NextRow(sqlQuery);
				}
				
				SQL_FreeHandle(sqlQuery);
			}
			else
				SQL_FreeHandle(sqlQuery);
		}
		else
			SQL_FreeHandle(sqlQuery);
	}
	
	g_mult_exp[id] = ((get_user_flags(id) & ADMIN_RESERVATION) ? 2.0 : 1.0) + ((g_taringa_at_night == 1) ? 1.0 : (g_taringa_at_night == 2) ? 2.0 : 0.0) + ((g_amuleto_equip[id] != -1) ? g_amuleto_stat2[id][g_amuleto_equip[id]][0] : 0.0) + g_mult_add + g_ExtraMult;
	g_mult_aps[id] = ((get_user_flags(id) & ADMIN_RESERVATION) ? 2.0 : 1.0) + ((g_taringa_at_night == 1) ? 1.0 : (g_taringa_at_night == 2) ? 2.0 : 0.0) + ((g_amuleto_equip[id] != -1) ? g_amuleto_stat2[id][g_amuleto_equip[id]][1] : 0.0);
	
	if(!g_combo_need_damage_fake[id])
	{
		if(g_reset[id])
			g_combo_need_damage[id] = (10.0 / g_mult_exp[id]);
		else
			g_combo_need_damage[id] = (g_level_total[id] >= 1000) ? (10.0 / g_mult_exp[id]) : 1.0;
	}
	
	g_ammos_need_damage[id] = (250.0 / g_mult_aps[id]);
}

saveInfo(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return;
	
	new Handle:sqlQuery;
	
	static sIp[21];
	static sPoints[64];
	static sHabilities[256];
	static sColors[64];
	static sHud[128];
	static sWeapons[20];
	static sHID_Last[64];
	static sItemsExtras[256];
	static sQuery[750];
	static iLen;
	static i;
	
	iLen = 0;
	
	get_user_ip(id, sIp, 20, 1);
	
	formatex(sPoints, 63, "%d %d %d %d %d %d %d %d", g_points[id][CLASS_HUMAN], g_points[id][CLASS_ZOMBIE], g_points[id][CLASS_SURVIVOR], g_points[id][CLASS_NEMESIS], g_points[id][CLASS_FRAGMENTOS], g_points_lost[id][CLASS_HUMAN], g_points_lost[id][CLASS_ZOMBIE], g_diamonds[id]);
	
	formatex(sHabilities, 255, "%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d", g_hab[id][0][CLASS_HUMAN], g_hab[id][1][CLASS_HUMAN], g_hab[id][2][CLASS_HUMAN], g_hab[id][3][CLASS_HUMAN], g_hab[id][4][CLASS_HUMAN], g_hab[id][5][CLASS_HUMAN], g_hab[id][0][CLASS_ZOMBIE], g_hab[id][1][CLASS_ZOMBIE],
	g_hab[id][2][CLASS_ZOMBIE], g_hab[id][3][CLASS_ZOMBIE], g_hab[id][0][CLASS_SURVIVOR], g_hab[id][1][CLASS_SURVIVOR], g_hab[id][2][CLASS_SURVIVOR], g_hab[id][0][CLASS_NEMESIS], g_hab[id][1][CLASS_NEMESIS], g_hab[id][2][CLASS_NEMESIS], g_hab[id][0][CLASS_FRAGMENTOS], g_hab[id][1][CLASS_FRAGMENTOS],
	g_hab[id][2][CLASS_FRAGMENTOS], g_combo_zombie_ok[id], g_hab[id][3][CLASS_FRAGMENTOS], g_hab[id][4][CLASS_FRAGMENTOS], g_hab[id][5][CLASS_FRAGMENTOS]);
	
	formatex(sColors, 63, "%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d", g_color[id][COLOR_NIGHT][RED], g_color[id][COLOR_NIGHT][GREEN], g_color[id][COLOR_NIGHT][BLUE], g_color[id][COLOR_HUD][RED], g_color[id][COLOR_HUD][GREEN], g_color[id][COLOR_HUD][BLUE],
	g_color[id][COLOR_FLARE][RED], g_color[id][COLOR_FLARE][GREEN], g_color[id][COLOR_FLARE][BLUE], g_color[id][COLOR_BAZOOKA][RED], g_color[id][COLOR_BAZOOKA][GREEN], g_color[id][COLOR_BAZOOKA][BLUE], g_color[id][COLOR_BAZOOKA_SPECIAL][RED],
	g_color[id][COLOR_LASER][RED], g_color[id][COLOR_LASER][GREEN], g_color[id][COLOR_LASER][BLUE], g_color[id][COLOR_LASER_SPECIAL][RED]);
	
	formatex(sHud, 127, "%f %f %0.1f %f %f %0.1f %d %d %d %d %f %f %0.1f", g_hud_position[id][POSITION_HUD][0], g_hud_position[id][POSITION_HUD][1], g_hud_position[id][POSITION_HUD][2], g_hud_position[id][POSITION_HUDCOMBO][0], g_hud_position[id][POSITION_HUDCOMBO][1], g_hud_position[id][POSITION_HUDCOMBO][2],
	g_hudcombo_effect[id], g_hudcombo_abrev[id], g_hud_effect[id], g_hud_abrev[id], g_hud_position[id][POSITION_HUDGUILD][0], g_hud_position[id][POSITION_HUDGUILD][1], g_hud_position[id][POSITION_HUDGUILD][2]);
	
	formatex(sWeapons, 19, "%d %d %d %d", g_weapon_auto[id], g_weapon_primary[id], g_weapon_secondary[id], g_weapon_terciary[id]);
	
	for(i = 0; i < (sizeof(ITEMS_EXTRAS_HUMANS) - ADD_ITEMS_HUMANS); ++i)
		iLen += formatex(sItemsExtras[iLen], charsmax(sItemsExtras) - iLen, "%d ", g_item_extra[id][i][CLASS_HUMAN]);
	
	for(i = 0; i < sizeof(ITEMS_EXTRAS_ZOMBIES); ++i)
		iLen += formatex(sItemsExtras[iLen], charsmax(sItemsExtras) - iLen, "%d ", g_item_extra[id][i][CLASS_ZOMBIE]);
	
	iLen += formatex(sItemsExtras[iLen], charsmax(sItemsExtras) - iLen, "%d %d ", g_item_extra[id][EXTRA_ANTIDOTE_BOMB][CLASS_HUMAN], g_item_extra[id][EXTRA_PRECISION_SEMIPERFECTA][CLASS_HUMAN]);
	
	if(equal(g_user_hid_last[id], g_user_hid[id]) || (equal(g_user_hid_last[id], "no HID present, try again.")))
		formatex(sHID_Last, 63, ",");
	else
		formatex(sHID_Last, 63, ", hid_last=^"%s^",", g_user_hid[id]);
	
	formatex(sQuery, charsmax(sQuery), "weapons='%s', invis='%d', chatmode='%d', distance_nvg='%d', chatprefix='%d', items='%s', am_equip='%d', last_c=now(), hid_register=^"%s^" %s guildid='%d', expireban=^"%s^", evento='%d', reset='%d' WHERE id='%d';",
	sWeapons, g_human_invis[id], g_chat_mode[id], g_distance_nightvision[id], g_chat_mode_prefix[id], sItemsExtras, g_amuleto_equip[id], (g_user_hid_last[id][0]) ? g_user_hid_last[id] : g_user_hid[id], sHID_Last, g_guild_id[id],
	(!g_guild_invite_again[id][0] && !g_user_banned[id]) ? "NONE" : g_guild_invite_again[id], g_rango[id], g_reset[id], g_user_id[id]);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET ip=^"%s^", level='%d', lvl_total='%d', exp='%d', ammopacks='%d', zclass='%d', hclass='%d', difsurv='%d', difneme='%d', points='%s', habilities='%s', colors='%s', hudoptions='%s', lvl_z='%d', lvl_h='%d', %s", sIp, g_level[id], g_level_total[id], g_exp[id], g_ammopacks[id],
	g_zombie_class[id],	g_human_class[id], g_dificult[id][CLASS_SURVIVOR], g_dificult[id][CLASS_NEMESIS], sPoints, sHabilities, sColors, sHud, g_level_hardcore[id][0], g_level_hardcore[id][1], sQuery);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 4);
	else
		SQL_FreeHandle(sqlQuery);
	
	iLen = 0;
	
	formatex(sHud, 127, "%d %d %d %d %d %d %d %d", g_head_zombie[id][HEAD_RED], g_head_zombie[id][HEAD_GREEN], g_head_zombie[id][HEAD_BLUE], g_head_zombie[id][HEAD_YELLOW], g_head_zombie[id][HEAD_WHITE], g_head_zombie[id][HEAD_VIOLET_SMALL], g_head_zombie[id][HEAD_VIOLET_BIG], g_head_zombie[id][HEAD_DARK_BLUE]);
	
	iLen += formatex(sQuery[iLen], charsmax(sQuery) - iLen, "UPDATE stats SET head_d='%d', head_t='%d', kill_zd='%d', kill_zt='%d', kill_hd='%d', kill_ht='%d', infects_d='%d', infects_t='%d', combos_d='%d', combos_max_d='%d', kill_nd='%d', kill_sd='%d', kill_wd='%d', kill_jd='%d',",
	g_stats[id][HEADSHOTS_D], g_stats[id][HEADSHOTS_T], g_stats[id][KILL_ZOMBIES_D], g_stats[id][KILL_ZOMBIES_T], g_stats[id][KILL_HUMANS_D], g_stats[id][KILL_HUMANS_T], g_stats[id][INFECTS_D], g_stats[id][INFECTS_T], g_stats[id][COMBOS_D], g_stats[id][COMBO_MAX_D], g_stats[id][KILL_NEMESIS_D],
	g_stats[id][KILL_SURVIVOR_D], g_stats[id][KILL_WESKER_D], g_stats[id][KILL_JASON_D]);
	
	iLen += formatex(sQuery[iLen], charsmax(sQuery) - iLen, "kill_cd='%d', kill_zhsd='%d', kill_zhst='%d', damage_d='%0.20f', damage_t='%0.20f', kill_zkd='%d', kill_zkt='%d', head_zombie='%s', kill_al='%d', kill_pr='%d', kill_an='%d', kill_sn='%d',", g_stats[id][KILL_CABEZON_D],
	g_stats[id][KILL_ZOMBIES_HS_D], g_stats[id][KILL_ZOMBIES_HS_T], g_damage[id][0], g_damage[id][1], g_stats[id][KILL_ZOMBIES_KNIFE_D], g_stats[id][KILL_ZOMBIES_KNIFE_T], sHud, g_stats[id][KILL_ALIEN_D], g_stats[id][KILL_PREDATOR_D], g_stats[id][KILL_ANNIHILATOR_D], g_stats[id][KILL_SNIPER_D]);
	
	iLen += formatex(sQuery[iLen], charsmax(sQuery) - iLen, "count_unclip='%d', time='%d', dmg_armor='%d', am_crea='%d', duel_final_win='%d', ach_count='%d', chall_count='%d', duel_win='%d', duel_lost='%d', gift='%d', knife_dmg='%d' WHERE zp_id='%d';", g_logros_stats[id][COUNT_UNLIMITED_CLIP], g_time_playing[id][0],
	g_stats[id][DAMAGE_ARMOR], g_stats[id][AMULETOS_CREATE], g_stats[id][DUEL_FINAL_WINS], g_logros_count[id], g_desafios_count[id], g_duelo_win[id], g_duelo_lost[id], g_gift[id], g_legendaria_knife_damage[id], g_user_id[id]);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, sQuery);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 8);
	else
		SQL_FreeHandle(sqlQuery);
	
	for(i = 1; i < 31; ++i)
	{
		if(!g_save_weapons[id][i])
			continue;
		
		g_save_weapons[id][i] = 0;
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE weapon_stats SET level='%d', kills='%d', points='%d', damage='%d', speed='%d', recoil='%d', bullets='%d' WHERE zp_id='%d' AND weapon='%d';", g_level_weapons[id][i], g_kills_weapons[id][i], g_skill_weapons[id][i][4], g_skill_weapons[id][i][0],
		g_skill_weapons[id][i][1], g_skill_weapons[id][i][2], g_skill_weapons[id][i][3], g_user_id[id], i);
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(id, sqlQuery, 9);
		else
			SQL_FreeHandle(sqlQuery);
	}
	
	if(g_guild_id[id])
	{
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE guild SET `guild_level`='%d', `guild_exp`='%d', `g_combo_2`='%d', `g_combo_3`='%d', `g_combo_4`='%d', `g_combo_5`='%d' WHERE guild_id='%d';", g_guild_level[g_guild_id[id]], g_guild_exp[g_guild_id[id]],
		g_combo_max_guild[g_guild_id[id]][2], g_combo_max_guild[g_guild_id[id]][3], g_combo_max_guild[g_guild_id[id]][4], g_combo_max_guild[g_guild_id[id]][5], g_guild_id[id]);
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(id, sqlQuery, 73);
		else
			SQL_FreeHandle(sqlQuery);
	}
	
	if(g_ppt_weapon_global[id][0] || g_ppt_weapon_global[id][1] || g_ppt_weapon_global[id][2])
	{
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE eventos SET `winround`=`winround`+'%d', `loseround`=`loseround`+'%d', `drawround`=`drawround`+'%d', `piedra`=`piedra`+'%d', `papel`=`papel`+'%d', `tijera`=`tijera`+'%d', `winppt`=`winppt`+'%d', `loseppt`=`loseppt`+'%d' WHERE zp_id='%d';", 
		g_ppt_winround_global[id], g_ppt_loseround_global[id], g_ppt_drawround_global[id], g_ppt_weapon_global[id][0], g_ppt_weapon_global[id][1], g_ppt_weapon_global[id][2], g_ppt_winppt_global[id], g_ppt_loseppt_global[id], g_user_id[id]);
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(id, sqlQuery, 302);
		else
			SQL_FreeHandle(sqlQuery);
		
		g_ppt_drawround_global[id] = 0;
		g_ppt_winround_global[id] = 0;
		g_ppt_loseround_global[id] = 0;
		g_ppt_weapon_global[id] = {0, 0, 0};
		g_ppt_winppt_global[id] = 0;
		g_ppt_loseppt_global[id] = 0;
	}
	
	if(is_user_connected(id))
		colorChat(id, _, "%sTUS DATOS HAN SIDO GUARDADOS", ZP_PREFIX);
}

public resetInfo(const id)
{
	if(!g_isconnected[id])
		return;
	
	client_cmd(id, "setinfo bottomcolor ^"^"");
	client_cmd(id, "setinfo cl_lc ^"^"");
	client_cmd(id, "setinfo model ^"^"");
	client_cmd(id, "setinfo topcolor ^"^"");
	client_cmd(id, "setinfo _9387 ^"^"");
	client_cmd(id, "setinfo _iv ^"^"");
	client_cmd(id, "setinfo _ah ^"^"");
	client_cmd(id, "setinfo _puqz ^"^"");
	client_cmd(id, "setinfo _ndmh ^"^"");
	client_cmd(id, "setinfo _ndmf ^"^"");
	client_cmd(id, "setinfo _ndms ^"^"");
	client_cmd(id, "setinfo zpt ^"^"");
}

public plugin_cfg()
{
	set_task(0.5, "event_HLTV");
}

public plugin_natives()
{
	register_native("zp_get_duelo", "native_get_duelo", 1);
	register_native("zp_is_special_mode", "native_is_special_mode", 1);
}

public native_get_duelo(const id)
	return g_in_duelo_official[id];

public native_is_special_mode(const id)
	return g_special_mode[id];

/*public client_authorized(id)
{
	new sPassword[32];
	get_cvar_string("sv_password", sPassword, charsmax(sPassword));
	
	if(equal(sPassword, "hpotter") && !access(id, ADMIN_RESERVATION))
	{
		emessage_begin(MSG_ONE, SVC_DISCONNECT, _, id);
		ewrite_string("No tenes permisos para entrar al servidor");
		emessage_end();
	}
}*/

public client_putinserver(id)
{
	g_isconnected[id] = 1;
	
	g_MenuPage_ColorsFix[id] = 0;
	
	g_gk_race_clas[id] = 0;
	
	g_MenuPage_MiniEvent[id] = 0;
	g_Achievement_MiniEvent[id] = 0;
	
	get_user_name(id, g_playername[id], charsmax(g_playername[]));
	get_user_authid(id, g_steamid[id], charsmax(g_steamid[]));
	
	if(containi(g_playername[id], "DROP TABLE") != -1 || containi(g_playername[id], "TRUNCATE") != -1 || containi(g_playername[id], "INSERT") != -1 || containi(g_playername[id], "UPDATE") != -1 || containi(g_playername[id], "DELETE") != -1 ||
	containi(g_playername[id], "NO HUBO APOSTADORES") != -1 || containi(g_playername[id], "\") != -1)
	{
		server_cmd("kick #%d ^"Tu nombre tiene algun caracter invalido^"", get_user_userid(id));
		return;
	}
	
	resetVars(id, 1);
	
	if(equali(g_playername[id], "[GAM!NGA] Kiske"))
	{
		g_kiske_on = 1;
		g_kiske[id] = 1;
	}
	
	set_task(0.2, "checkAccount", id);
	set_task(3.0, "modifCommands", id);
}

public client_disconnect(id)
{
	/*if(g_fakeplayer == id)
	{
		set_task(0.5, "updateBOT");
		g_fakeplayer = 0;
		
		return;
	}*/
	
	remove_task(id + TASK_20SEC_ZOMBIE);
	remove_task(id + TASK_JASON_SPEED);
	remove_task(id + TASK_NEMESIS_OM);
	
	if(g_isalive[id])
		checkRound(id);
	
	if(equali(g_playername[id], "[GAM!NGA] Kiske"))
		g_kiske_on = 0;
	
	g_combo_need_damage_fake[id] = 0;
	
	if(task_exists(id + TASK_FINISHCOMBO))
	{
		remove_task(id + TASK_FINISHCOMBO);
		
		static iReward;
		iReward = (g_combo[id] * (g_combo_reward[id] + 1));
		
		if(iReward > 0)
		{
			addXp(id, iReward, 0);
			
			g_stats[id][COMBOS_D] += g_combo[id];
			
			if(g_combo[id] > g_stats[id][COMBO_MAX_D] && !g_special_mode[id] && !g_mode[MODE_ANNIHILATOR])
				g_stats[id][COMBO_MAX_D] = g_combo[id];
		}
		
		g_combo[id] = 0;
		g_combo_damage[id] = 0;
		g_combo_reward[id] = 0;
	}
	
	if(g_ppt_played[id])
	{
		remove_task(id + TASK_PPT);
		remove_task(g_ppt_enemy[id] + TASK_PPT);
		
		colorChat(g_ppt_enemy[id], _, "%sEl contrincante del !gPPT!y se ha desconectado!", ZP_PREFIX_PPT);
		
		g_ppt_played[id] = 0;
		g_ppt_played[g_ppt_enemy[id]] = 0;
		
		g_ppt_play[id] = 0;
		g_ppt_play[g_ppt_enemy[id]] = 0;
		
		g_ppt_round[id] = 0;
		g_ppt_play[g_ppt_enemy[id]] = 0;
		
		g_ppt_win[id] = 0;
		g_ppt_win[g_ppt_enemy[id]] = 0;
		
		g_logros_stats[id][L_PPT_PIEDRA] = 0;
		g_logros_stats[id][L_PPT_PAPEL] = 0;
		g_logros_stats[id][L_PPT_TIJERA] = 0;
		
		g_logros_stats[g_ppt_enemy[id]][L_PPT_PIEDRA] = 0;
		g_logros_stats[g_ppt_enemy[id]][L_PPT_PAPEL] = 0;
		g_logros_stats[g_ppt_enemy[id]][L_PPT_TIJERA] = 0;
		
		g_ppt_enemy[id] = 0;
		g_ppt_enemy[g_ppt_enemy[id]] = 0;
	}
	
	remove_task(id + TASK_TEAM);
	remove_task(id + TASK_MODEL);
	remove_task(id + TASK_SPAWN);
	remove_task(id + TASK_BLOOD);
	remove_task(id + TASK_AURA);
	remove_task(id + TASK_BURN);
	remove_task(id + TASK_NVISION);
	remove_task(id + TASK_FINISHCOMBO);
	remove_task(id + TASK_TUTOR_TEXT);
	remove_task(id + TASK_SAVE);
	remove_task(id + TASK_FROZEN);
	remove_task(id + TASK_HELLODHUD);
	remove_task(id + TASK_INFECT_1_MINUTE);
	remove_task(id + TASK_MADNESS_BOMB);
	remove_task(id + TASK_MESSAGE_VINC);
	remove_task(id + TASK_ALOHOMORA);
	remove_task(id + TASK_FINISHCOMBO_ZOMBIE);
	remove_task(id + TASK_GLOW_GRUNT);
	
	if(g_in_duelo[id])
	{
		if(g_in_duelo_official[id])
		{
			colorChat(g_in_duelo[id], _, "%sEl contrincante (!g%s!y) se ha desconectado, eres el ganador del duelo", ZP_PREFIX, g_playername[id]);
			colorChat(g_in_duelo[id], _, "%sHas ganado !g%d %s!y", ZP_PREFIX, g_duelo_bet[g_in_duelo[id]][g_duelo[g_in_duelo[id]]], MENU_DUELOS_PREFIX[g_duelo[g_in_duelo[id]]]);
			
			/*log_to_file("duelos.txt", "%s vs. %s  (GANÓ %s por que el contrincante se desconectó)^nAPUESTA: %d %s^n^nHumanos infectados: %d - %d^nZombies matados: %d - %d^nDaño hecho: %d - %d^n^n", g_playername[id], g_playername[g_in_duelo[id]], g_playername[g_in_duelo[id]],
			g_duelo_bet[g_in_duelo[id]][g_duelo[g_in_duelo[id]]], MENU_DUELOS_PREFIX[g_duelo[g_in_duelo[id]]], g_duelo_stats[id][DUELO_HUM_INF_ROUND], g_duelo_stats[g_in_duelo[id]][DUELO_HUM_INF_ROUND], g_duelo_stats[id][DUELO_ZOM_MAT_ROUND], g_duelo_stats[g_in_duelo[id]][DUELO_ZOM_MAT_ROUND],
			g_duelo_stats[id][DUELO_DMG_DON_ROUND], g_duelo_stats[g_in_duelo[id]][DUELO_DMG_DON_ROUND]);*/
			
			++g_duelo_win[g_in_duelo[id]];
			++g_duelo_lost[id];
			
			#if defined CHECK_PRIMERO_BUEN_COMIENZO
				setAchievement__First(g_in_duelo[id], PRIMERO_BUEN_COMIENZO);
			#endif
			
			if(g_duelo_win[g_in_duelo[id]] == 1)
				setAchievement(g_in_duelo[id], BUEN_COMIENZO);
			else if(g_duelo_win[g_in_duelo[id]] == 50)
				setAchievement(g_in_duelo[id], PRO_DUELO);
			else if(g_duelo_win[g_in_duelo[id]] == 120)
				setAchievement(g_in_duelo[id], TRANQUI_120);
			else if(g_duelo_win[g_in_duelo[id]] == 200)
				setAchievement(g_in_duelo[id], AL_MAXIMO);
			
			if(g_logros_stats[g_in_duelo[id]][APUESTA_MAXIMA] || g_logros_stats[id][APUESTA_MAXIMA])
				setAchievement(g_in_duelo[id], OTRA_FORMA_DE_JUGAR);
			
			switch(g_duelo[g_in_duelo[id]])
			{
				case MENU_DUELO_EXPERIENCIA:
				{
					addXp(g_in_duelo[id], g_duelo_bet[g_in_duelo[id]][MENU_DUELO_EXPERIENCIA], 0);
					g_exp[id] -= g_duelo_bet[id][MENU_DUELO_EXPERIENCIA];
				}
				case MENU_DUELO_AMMOPACKS:
				{
					g_ammopacks[g_in_duelo[id]] += g_duelo_bet[g_in_duelo[id]][MENU_DUELO_AMMOPACKS];
					g_ammopacks[id] -= g_duelo_bet[id][MENU_DUELO_AMMOPACKS];
				}
				case MENU_DUELO_PH:
				{
					g_points[g_in_duelo[id]][CLASS_HUMAN] += g_duelo_bet[g_in_duelo[id]][MENU_DUELO_PH];
					g_points[id][CLASS_HUMAN] -= g_duelo_bet[id][MENU_DUELO_PH];
				}
				case MENU_DUELO_PZ:
				{
					g_points[g_in_duelo[id]][CLASS_ZOMBIE] += g_duelo_bet[g_in_duelo[id]][MENU_DUELO_PZ];
					g_points[id][CLASS_ZOMBIE] -= g_duelo_bet[id][MENU_DUELO_PZ];
				}
				case MENU_DUELO_PF:
				{
					g_points[g_in_duelo[id]][CLASS_FRAGMENTOS] += g_duelo_bet[g_in_duelo[id]][MENU_DUELO_PF];
					g_points[id][CLASS_FRAGMENTOS] -= g_duelo_bet[id][MENU_DUELO_PF];
				}
			}
		}
		else
			colorChat(g_in_duelo[id], _, "%sEl contrincante se ha desconectado antes de empezar el duelo, el duelo se cencela", ZP_PREFIX);
		
		g_duelo_type[g_in_duelo[id]] = -1;
		g_duelo_type[id] = -1;
		
		g_duelo_bet[g_in_duelo[id]][g_duelo[g_in_duelo[id]]] = 0;
		g_duelo_bet[id][g_duelo[id]] = 0;
		
		g_duelo_invite[id][g_in_duelo[id]] = 0;
		g_duelo_invite[g_in_duelo[id]][id] = 0;
		
		g_duelo[g_in_duelo[id]] = -1;
		g_duelo[id] = -1;
		
		g_in_duelo_official[g_in_duelo[id]] = 0;
		g_in_duelo_official[id] = 0;
		
		g_in_duelo[g_in_duelo[id]] = 0;
		g_in_duelo[id] = 0;
	}
	else
	{
		new i;
		for(i = 0; i <= g_maxplayers; ++i)
		{
			g_duelo_invite[id][i] = 0;
			g_duelo_invite[i][id] = 0;
		}
	}
	
	if(g_user_logged[id])
	{
		/*new Handle:sqlQuery;
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET online=0 WHERE id='%d';", g_user_id[id]);
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 121447);
		else
			SQL_FreeHandle(sqlQuery);*/
		
		g_systime_in[id] = (get_systime() - g_systime_in[id]);
		g_time_playing[id][0] += (g_systime_in[id] / 60);
		
		if(!g_zombie[id] && g_guild[id] && g_combo_guild[g_guild_id[id]])
		{
			new i;
			new j = 0;
			new iReward;
			
			for(i = 0; i < 5; ++i)
			{
				if(!g_isalive[g_guild_ids[id][i]])
					continue;
				
				if(g_zombie[g_guild_ids[id][i]])
					continue;
				
				if(task_exists(g_guild_ids[id][i] + TASK_FINISHCOMBO_GUILD) && g_combo_ok[g_guild_ids[id][i]])
				{
					++j;
					remove_task(g_guild_ids[id][i] + TASK_FINISHCOMBO_GUILD);
				}
				
				colorChat(g_guild_ids[id][i], TERRORIST, "%sEl combo ha finalizado porque !t%s!y se ha desconectado", ZP_PREFIX_GUILD, g_playername[id]);
			}
			
			if(j != 0)
			{
				iReward = g_combo_guild[g_guild_id[id]] / j;
				
				if(iReward > 0)
				{
					if(j != 1)
					{
						new k = 0;
						new l = 0;
						
						if(g_combo_guild[g_guild_id[id]] > g_combo_max_guild[g_guild_id[id]][j])
						{
							l = g_combo_max_guild[g_guild_id[id]][j];
							g_combo_max_guild[g_guild_id[id]][j] = g_combo_guild[g_guild_id[id]];
							k = 1;
						}
						
						for(i = 0; i < 5; ++i)
						{
							if(k && g_isconnected[g_guild_ids[id][i]])
								colorChat(g_guild_ids[id][i], CT, "%sHan superado su viejo mejor combo de !gx%d!t [%d HM]!y por el recién hecho de !gx%d!t [%d HM]!y", ZP_PREFIX_GUILD, l, j, g_combo_max_guild[g_guild_id[id]][j], j);
							
							if(j == 4)
								g_combo_guild[g_guild_id[id]] = 0;
							
							if(!g_isalive[g_guild_ids[id][i]])
								continue;
							
							if(g_zombie[g_guild_ids[id][i]])
								continue;
							
							addXp(g_guild_ids[id][i], iReward, 0);
							
							if(g_level_total[g_guild_ids[id][i]] >= 100)
							{
								g_guild_exp[g_guild_id[g_guild_ids[id][i]]] += iReward;
								
								if(g_guild_exp[g_guild_id[g_guild_ids[id][i]]] >= GUILD_EXP_LEVEL[g_guild_level[g_guild_id[g_guild_ids[id][i]]]] && g_guild_level[g_guild_id[g_guild_ids[id][i]]] != MAX_LEVEL_GUILD)
								{
									++g_guild_level[g_guild_id[g_guild_ids[id][i]]];
									colorChat(0, CT, "%sLa hermandad !t%s!y subió al nivel !g%d!y", ZP_PREFIX, g_guild_name[g_guild_id[g_guild_ids[id][i]]], g_guild_level[g_guild_id[g_guild_ids[id][i]]]);
								}
							}
							
							static sReward[11];
							addDot(iReward, sReward, 10);
							
							set_hudmessage(0, 255, 0, g_hud_position[g_guild_ids[id][i]][POSITION_HUDGUILD][0], g_hud_position[g_guild_ids[id][i]][POSITION_HUDGUILD][1], g_hudcombo_effect[g_guild_ids[id][i]], 0.0, 8.0, 0.0, 0.0, -1);
							ShowSyncHudMsg(g_guild_ids[id][i], g_Hud_ComboGuild, "%s | Ganaste %s de EXP", g_guild_name[g_guild_id[g_guild_ids[id][i]]], sReward);
						}
					}
					else
					{
						for(i = 0; i < 5; ++i)
						{
							if(!g_isalive[g_guild_ids[id][i]])
								continue;
							
							if(g_zombie[g_guild_ids[id][i]])
								continue;
							
							set_hudmessage(0, 255, 0, -1.0, 0.8, g_hudcombo_effect[g_guild_ids[id][i]], 0.0, 8.0, 0.0, 0.0, -1);
							ShowSyncHudMsg(g_guild_ids[id][i], g_Hud_ComboGuild, "COMBO %s DESACTIVADO^nSE NECESITA 2+ HUMANOS VIVOS", g_guild_name[g_guild_id[g_guild_ids[id][i]]]);
						}
					}
				}
			}
		}
		
		saveInfo(id);
		
		if(g_guild[id])
		{
			new i;
			new j = 0;
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				if(id == i)
					continue;
				
				if(g_guild_id[id] == g_guild_id[i])
				{
					j = i;
					
					g_guild_slot[i] = 0;
					
					g_guild_ids[i][0] = 0;
					g_guild_ids[i][1] = 0;
					g_guild_ids[i][2] = 0;
					g_guild_ids[i][3] = 0;
					g_guild_ids[i][4] = 0;
					
					break;
				}
			}
			
			if(j)
			{
				for(i = 1; i <= g_maxplayers; ++i)
				{
					if(!g_isconnected[i])
						continue;
					
					if(id == i)
						continue;
					
					if(g_guild_id[j] == g_guild_id[i])
					{
						if(g_guild_slot[j] > 4)
							g_guild_slot[j] = 0;
						
						g_guild_ids[j][g_guild_slot[j]] = i;
						
						++g_guild_slot[j];
					}
				}
				
				for(i = 1; i <= g_maxplayers; ++i)
				{
					if(!g_isconnected[i])
						continue;
					
					if(id == i)
						continue;
					
					if(j == i)
						continue;
					
					if(g_guild_id[j] == g_guild_id[i])
					{
						g_guild_slot[i] = g_guild_slot[j];
						
						g_guild_ids[i][0] = g_guild_ids[j][0];
						g_guild_ids[i][1] = g_guild_ids[j][1];
						g_guild_ids[i][2] = g_guild_ids[j][2];
						g_guild_ids[i][3] = g_guild_ids[j][3];
						g_guild_ids[i][4] = g_guild_ids[j][4];
					}
				}
			}
		}
	}
	
	g_isconnected[id] = 0;
	g_isalive[id] = 0;
}

/** ==================================================
	[ FIN FORWARDS - AMXX ]
================================================== **/


/** ==================================================
	[ EVENTOS ]
================================================== **/
public event_HLTV()
{
	set_cvar_num("pbk_afk_time", 60);
	set_cvar_num("sv_alltalk", 1);
	
	g_gk_guerra = 0;
	g_FirstInfect = 0;
	
	g_kill_sound_id = -1;
	g_kill_sound = 0;
	
	set_task(0.1, "removeStuff");
	
	g_newround = 1;
	g_endround = 0;
	g_slowdown = 0;
	g_bazooka_ent = 0;
	g_bazooka_fly = 0;
	g_endround_forced = 0;
	g_duel_final_modeN = 0;
	
	if(g_mode[MODE_DUEL_FINAL])
	{
		#if defined USE_ORPHEU
			game_disableForwards();
		#endif
	}
	
	new i;
	for(i = 0; i < Modes; ++i)
		g_mode[i] = 0;
	
	g_lights[0] = 'm';
	
	remove_task(TASK_WELCOMEMSG);
	remove_task(TASK_SOUND_LOL);
	
	for(i = 1; i <= g_maxplayers; ++i)
	{
		g_eegg_kill_z_round[i] = 0;
		g_eegg_infects_round[i] = 0;
		g_eegg_antidote[i] = 0;
		g_eegg_madness[i] = 0;
	}
	
	set_task(2.0, "welcomeMsg", TASK_WELCOMEMSG);
	
	remove_task(TASK_MAKEZOMBIE);
	set_task(get_pcvar_float(g_CVAR_Delay), "makeZombieTask", TASK_MAKEZOMBIE);
	
	g_taringa_at_night = 0;
	g_only_modes = 0;
	
	static iYearMonthDay[3];
	static iTimeToUnix[3];
	
	date(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2]);
	
	iTimeToUnix[0] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 13, 00, 00);
	iTimeToUnix[1] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 17, 00, 00);
	
	if(arg_time() >= iTimeToUnix[0] && arg_time() < iTimeToUnix[1])
	{
		g_taringa_at_night = 1;
		colorChat(0, TERRORIST, "%s!tGAM!NGA AT DAY!!y Tu experiencia y ammo packs sube un !g+x1!y", ZP_PREFIX);
	}
	
	iTimeToUnix[0] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 22, 00, 00);
	iTimeToUnix[2] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 00, 00, 00);
	iTimeToUnix[1] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 06, 00, 00);
	
	if((arg_time() >= iTimeToUnix[0]) || (arg_time() >= iTimeToUnix[2] && arg_time() < iTimeToUnix[1]))
	{
		g_taringa_at_night = 1;
		
		iTimeToUnix[0] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 02, 30, 00);
		iTimeToUnix[1] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 04, 30, 00);
		
		if(arg_time() >= iTimeToUnix[0] && arg_time() < iTimeToUnix[1])
		{
			g_taringa_at_night = 2;
			colorChat(0, TERRORIST, "%s!tSÚPER GAM!NGA AT NITE!!y Tu experiencia y ammo packs sube un !g+x2!y y tus puntos !g+x1!y", ZP_PREFIX);
		}
		else
			colorChat(0, TERRORIST, "%s!tGAM!NGA AT NITE!!y Tu experiencia y ammo packs sube un !g+x1!y", ZP_PREFIX);
		
		iTimeToUnix[0] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 01, 15, 00);
		iTimeToUnix[1] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 02, 15, 00);
		
		if(arg_time() >= iTimeToUnix[0] && arg_time() < iTimeToUnix[1])
		{
			g_only_modes = 1;
			colorChat(0, TERRORIST, "%s!tMINI EVENTO ACTIVADO:!y !gSolo salen modos especiales!", ZP_PREFIX);
		}
	}
	
	if(g_CheckMiniEvent) {
		iTimeToUnix[0] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 12, 00, 00);
		iTimeToUnix[1] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 12, 30, 00);
		
		if(arg_time() >= iTimeToUnix[0] && arg_time() < iTimeToUnix[1]) {
			g_only_modes = MENU_MINIEVENT_MODES_DAYS[g_MiniEvent_Num][mmimd_Mode];
			colorChat(0, TERRORIST, "%s!tMINI EVENTO ACTIVADO:!y !gSolo modo %s!", ZP_PREFIX, MESSAGE_MODES[g_only_modes]);
		}
		
		iTimeToUnix[0] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 23, 00, 00);
		iTimeToUnix[1] = time_to_unix(iYearMonthDay[0], iYearMonthDay[1], iYearMonthDay[2], 23, 30, 00);
		
		if(arg_time() >= iTimeToUnix[0] && arg_time() < iTimeToUnix[1]) {
			g_only_modes = MENU_MINIEVENT_MODES_DAYS[g_MiniEvent_Num][mmimd_Mode];
			colorChat(0, TERRORIST, "%s!tMINI EVENTO ACTIVADO:!y !gSolo modo %s!", ZP_PREFIX, MESSAGE_MODES[g_only_modes]);
		}
		
		if(!g_MiniEvent_UserId[0]) {
			g_MiniEvent_Number = 0;
			
			i = 0;
			new id;
			
			while(i < 26) {
				id = getBetterRandomAlive_MiniEvent();
				
				if(id == -1) {
					break;
				}
				
				if(g_isconnected[id]) {
					g_MiniEvent_UserId[i] = id;
					g_MiniEvent_List[i] = g_user_id[id];
				}
				
				++i;
			}
		}
	}
	
	g_mult_add = g_mult_add_aux;
	
	g_CountKnifeDamage = 0;
	
	new iPlaying = getPlaying();
	
	g_ExtraMult = iPlaying * 0.05;
	
	if(iPlaying < 8)
	{
		g_mult_add = 0.0;
		colorChat(0, _, "%sLo sentimos, pero el bonus del mapa está deshabilitado porque hay pocos jugadores", ZP_PREFIX);
	}
	else if(iPlaying >= 15)
		g_CountKnifeDamage = 1;
	
	if(g_mult_add)
		colorChat(0, _, "%sEstás recibiendo un bonus de !g+x%0.2f!y por jugar en este mapa", ZP_PREFIX, g_mult_add);
}

public event_AmmoX(const id)
{
	if(g_zombie[id])
		return;
	
	static iType;
	iType = read_data(1);
	
	if(iType >= sizeof(AMMOWEAPON))
		return;
	
	static iWeapon;
	iWeapon = AMMOWEAPON[iType];
	
	if(MAXBPAMMO[iWeapon] <= 2)
		return;
	
	static iAmount;
	iAmount = read_data(2);
	
	if(iAmount < MAXBPAMMO[iWeapon])
	{
		static sArgs[1];
		sArgs[0] = iWeapon;
		
		set_task(0.1, "refillBPAmmo", id, sArgs, 1);
	}
}

public event_Health(const id)
{
	static iHealth;
	iHealth = read_data(1);
	
	g_health[id] = iHealth;
}

public event_Intermission()
	forceFinishDuel();

public logevent_RoundEnd()
{
	static Float:fLastEndTime;
	static Float:fCurrentTime;
	
	fCurrentTime = get_gametime();
	
	if((fCurrentTime - fLastEndTime) < 0.5)
		return;
	
	fLastEndTime = fCurrentTime;
	
	g_endround = 1;
	
	remove_task(TASK_WELCOMEMSG);
	remove_task(TASK_MAKEZOMBIE);
	remove_task(TASK_MUERTE_SUBITA);
	
	static i;
	static iUsersNum;
	
	iUsersNum = getPlaying();
	
	if(!getZombies())
	{
		set_hudmessage(0, 0, 255, -1.0, 0.2, 0, 1.0, 7.0, 2.0, 1.0, -1);
		ShowSyncHudMsg(0, g_Hud, "=========================^n ¡ GANARON LOS HUMANOS !^n=========================");
		
		playSound(0, g_sound_win_humans);
	}
	else if(!getHumans())
	{
		set_hudmessage(255, 0, 0, -1.0, 0.2, 0, 1.0, 7.0, 2.0, 1.0, -1);
		ShowSyncHudMsg(0, g_Hud, "=========================^n ¡ GANARON LOS ZOMBIES !^n=========================");
		
		playSound(0, g_sound_win_zombies);
	}
	else
	{
		set_hudmessage(0, 255, 0, -1.0, 0.2, 0, 1.0, 7.0, 2.0, 1.0, -1);
		ShowSyncHudMsg(0, g_Hud, "===================^n ¡ NO GANÓ NADIE !^n===================");
		
		playSound(0, g_sound_win_noone);
		
		if(g_mode[MODE_INFECTION] && iUsersNum >= 20)
		{
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(!g_lasthuman[i])
					continue;
				
				setAchievement(i, VENGAN_LOS_ESPERO);
				
				break;
			}
		}
	}
	
	if((g_only_modes == MODE_SURVIVOR || g_only_modes == MODE_NEMESIS || g_only_modes == MODE_WESKER || g_only_modes == MODE_JASON)) {
		new i = 1;
		new id;
		while(i) {
			id = g_MiniEvent_UserId[g_MiniEvent_Number];
			if(id) {
				if(!g_isconnected[id]) {
					++g_MiniEvent_Number;
				} else {
					colorChat(0, CT, "%sEl próximo !g%s!y será de !t%s!y", ZP_PREFIX, (g_only_modes == MODE_SURVIVOR) ? "SURVIVOR" : (g_only_modes == MODE_NEMESIS) ? "NEMESIS" : (g_only_modes == MODE_WESKER) ? "WESKER" : "JASON", g_playername[id]);
					break;
				}
			} else {
				g_MiniEvent_Number = 0;
				id = g_MiniEvent_UserId[g_MiniEvent_Number];
				
				colorChat(0, CT, "%sEl próximo !g%s!y será de !t%s!y", ZP_PREFIX, (g_only_modes == MODE_SURVIVOR) ? "SURVIVOR" : (g_only_modes == MODE_NEMESIS) ? "NEMESIS" : (g_only_modes == MODE_WESKER) ? "WESKER" : "JASON", g_playername[id]);
				
				break;
			}
		}
	}
	
	if(g_mode[MODE_CABEZON])
	{
		static iReward;
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
			
			if(!g_cabezon[i])
			{
				iReward = clamp(((g_cabezon_head[i] * (10 + g_reset[i])) * g_level_total[i] * 5), 0, MAX_EXP_PER_HS_CABEZON);
				colorChat(i, _, "%sGanaste !g%d EXP!y por realizar !g%d disparos en la cabeza!y", ZP_PREFIX, iReward, g_cabezon_head[i]);
				
				addXp(i, iReward, 0);
				
				if(g_cabezon_head[i] >= 200)
					setAchievement(i, COMO_PARA_NO_PEGARLE);
			}
			else
			{
				new iRand = random_num(2, 3);
				
				iReward = ((iUsersNum * 50) - g_cabezon_head_total);
				
				if(iReward <= 0)
				{
					iReward = iReward * 5000;
					iRand = 0;
					
					if(iReward <= -20000000)
						iReward = -20000000;
					
					colorChat(0, _, "%sEl !gCABEZÓN!y recibió !g%d disparos en la cabeza!y y por eso perdió !g%d EXP!y", ZP_PREFIX, g_cabezon_head_total, iReward);
				}
				else
				{
					iReward = iReward * 15000;
					colorChat(0, _, "%sEl !gCABEZÓN!y recibió !g%d disparos en la cabeza!y y por eso ganó !g%d EXP!y y !g%d pF!y", ZP_PREFIX, g_cabezon_head_total, iReward, iRand);
				}
				
				g_points[i][CLASS_FRAGMENTOS] += iRand;
				
				if(iReward > 0)
					addXp(i, iReward, 0);
				else
					g_exp[i] = clamp(g_exp[i] + iReward, 0, MAX_EXP);
				
				if(getPlaying() >= 20)
				{
					setAchievement(i, EL_CABEZA);
					
					if(!g_cabezon_power_global)
						setAchievement(i, COMO_USABA_EL_PODER);
					
					if(g_cabezon_head_total < 20)
						setAchievement(i, MEJOREN_LA_PUNTERIA);
					
					if(g_cabezon_head_total < 10)
						setAchievement(i, A_ESO_LE_LLAMAN_DISPARAR);
				}
			}
			
			g_cabezon_head[i] = 0;
		}
	}
	else if(g_mode[MODE_ANNIHILATOR])
	{
		new iReward;
		
		new iKnife[33];
		new iHeads[33];
		
		new iHumKnife;
		new iHumHead;
		
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
			
			if(!g_annihilator[i])
			{
				remove_task(i + TASK_FINISHCOMBO);
				set_task(random_float(0.1, 0.7), "finishCombo", i + TASK_FINISHCOMBO);
				
				if(g_anniq_knife[i] < 0)
					g_anniq_knife[i] += 1000;
				
				iKnife[i] = g_anniq_knife[i];
				iHeads[i] = g_anniq_head[i];
				
				continue;
			}
			
			iReward = clamp((g_annihilator_kills[i] * (g_reset[i]+1) * g_level[i] * 10), 0, MAX_EXP_PER_ANNIHILATOR);
			colorChat(0, TERRORIST, "%s!t%s!y ganó !g%d EXP!y por matar a !g%d humanos!y", ZP_PREFIX, g_playername[i], iReward, g_annihilator_kills[i]);
			
			addXp(i, iReward, 0);
			
			if((g_logros_stats[i][ANNIHILATOR_WITH_KNIFE] - g_logros_stats[i][ANNIHILATOR_WITH_BAZOOKA]) >= 200)
				setAchievement(i, ANIQUILOSO);
			
			if(g_logros_stats[i][ANNIHILATOR_WITH_BAZOOKA] >= 100)
				setAchievement(i, CIENFUEGOS);
			else if(!g_logros_stats[i][ANNIHILATOR_WITH_BAZOOKA] && !g_bazooka[i])
				setAchievement(i, EL_PEOR_DEL_SERVER);
			
			new sWeaponName[32];
			new iWeaponEntId;
			
			get_weaponname(CSW_MAC10, sWeaponName, 31);
			iWeaponEntId = fm_find_ent_by_owner(-1, sWeaponName, i);
			
			if(get_pdata_int(iWeaponEntId, OFFSET_CLIPAMMO, OFFSET_LINUX_WEAPONS) == 30 && get_pdata_int(i, AMMOOFFSET[CSW_MAC10], OFFSET_LINUX) == 100)
				setAchievement(i, MI_MAC10_ESTA_LLENA);
			else if(!g_logros_stats[i][ANNIHILATOR_WITH_MAC10] && get_pdata_int(iWeaponEntId, OFFSET_CLIPAMMO, OFFSET_LINUX_WEAPONS) == 0 && get_pdata_int(i, AMMOOFFSET[CSW_MAC10], OFFSET_LINUX) == 0)
				setAchievement(i, SOY_UN_MANCO);
			else if(g_logros_stats[i][ANNIHILATOR_WITH_MAC10] >= 50)
			{
				setAchievement(i, CINCUENTA_SON_CINCUENTA);
				if(g_logros_stats[i][ANNIHILATOR_WITH_MAC10] >= 100)
				{
					setAchievement(i, YO_SI_PEGO_CON_ESTO);
					
					if(g_logros_stats[i][ANNIHILATOR_WITH_MAC10] == 130)
						setAchievement(i, MUCHA_PRECISION);
				}
			}
			
			if(g_annihilator_kills[i] >= 300)
			{
				setAchievement(i, CARNE);
				if(g_annihilator_kills[i] >= 400)
				{
					setAchievement(i, MUCHA_CARNE);
					if(g_annihilator_kills[i] >= 450)
					{
						setAchievement(i, DEMASIADA_CARNE);
						if(g_annihilator_kills[i] >= 500)
							setAchievement(i, CARNE_PARA_TODOS);
					}
				}
			}
		}
		
		SortIntegers(iKnife, 32, Sort_Descending);
		SortIntegers(iHeads, 32, Sort_Descending);
		
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
			
			if(iKnife[0] == g_anniq_knife[i])
				iHumKnife = i;
			
			if(iHeads[0] == g_anniq_head[i])
				iHumHead = i;
			
			g_anniq_knife[i] = 0;
			g_anniq_head[i] = 0;
		}
		
		new iPH;
		if(iKnife[0] > 0)
		{
			new iPF = random_num(1, 3);
			iPH = random_num(1, 3);
			
			colorChat(0, CT, "%s!t%s!y ganó !g%d pH!y y !g%d pF!y por acuchillar !g%d veces!y antes de su primera muerte", ZP_PREFIX, g_playername[iHumKnife], iPH, iPF, iKnife[0]);
			
			g_points[iHumKnife][CLASS_FRAGMENTOS] += iPF;
			g_points[iHumKnife][CLASS_HUMAN] += iPH;
		}
		
		if(iHeads[0] > 0)
		{
			iPH = random_num(1, 3);
			new iPZ = random_num(1, 3);
			
			colorChat(0, CT, "%s!t%s!y ganó !g%d pH!y y !g%d pZ!y por realizar !g%d disparos en la cabeza!y", ZP_PREFIX, g_playername[iHumHead], iPH, iPZ, iHeads[0]);
			
			g_points[iHumHead][CLASS_HUMAN] += iPH;
			g_points[iHumHead][CLASS_ZOMBIE] += iPZ;
		}
		
		new iMax = 0;
		new iMaxId = 0;
		for(i = 1; i <= g_maxplayers; ++i) {
			if(!g_isconnected[i])
				continue;
			
			if(g_Annihilator_BalasAcertadas[i] > iMax) {
				iMax = g_Annihilator_BalasAcertadas[i];
				iMaxId = i;
			}
			
			g_Annihilator_BalasAcertadas[i] = 0;
		}
		
		if(iMaxId) {
			colorChat(0, CT, "%s!t%s!y ganó !g5 pH!y por realizar !g%d disparos acertados!y", ZP_PREFIX, g_playername[iMaxId], iMax);
			g_points[iMaxId][CLASS_HUMAN] += 5;
		}
	}
	else if(g_mode[MODE_NEMESIS])
	{
		new iEnt = find_ent_by_class(-1, "rocketBazooka");
		while(iEnt > 0)
		{
			removeRocket(iEnt);
			remove_entity(iEnt);
			
			iEnt = find_ent_by_class(-1, "rocketBazooka");
		}
		
		iEnt = find_ent_by_class(-1, "rocketBazooka__Mini");
		while(iEnt > 0)
		{
			removeRocket(iEnt);
			remove_entity(iEnt);
			
			iEnt = find_ent_by_class(-1, "rocketBazooka__Mini");
		}
		
		g_slowdown = 0;
		g_bazooka_fly = 0;
		
		if(g_win_nemesis_one_minute)
		{
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				attach_view(i, i);
				
				if(!g_isalive[i])
					continue;
				
				if(g_nemesis[i])
					setAchievement(i, LA_BAZOOKA_MAS_VELOZ);
				
				set_task(0.1, "hideHUDs", i + TASK_SPAWN);
				ExecuteHamB(Ham_Player_ResetMaxSpeed, i);
			}
		}
		else
		{
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				attach_view(i, i);
				
				if(!g_isalive[i])
					continue;
				
				set_task(0.1, "hideHUDs", i + TASK_SPAWN);
				ExecuteHamB(Ham_Player_ResetMaxSpeed, i);
			}
		}
	}
	else if(g_mode[MODE_SYNAPSIS])
	{
		new iNemKillHumans[33];
		new iDamage[33];
		new iHeads[33];
		
		new iNem;
		new iHumDmg;
		new iHumHead;
		
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
			
			iNemKillHumans[i] = g_nemesis_kill_humans[i];
			iDamage[i] = g_synapsis_damage[i];
			iHeads[i] = g_synapsis_head[i];
		}
		
		SortIntegers(iNemKillHumans, 32, Sort_Descending);
		SortIntegers(iDamage, 32, Sort_Descending);
		SortIntegers(iHeads, 32, Sort_Descending);
		
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
			
			if(iNemKillHumans[0] == g_nemesis_kill_humans[i])
				iNem = i;
			
			if(iDamage[0] == g_synapsis_damage[i])
				iHumDmg = i;
			
			if(iHeads[0] == g_synapsis_head[i])
				iHumHead = i;
		}
		
		new iRand = random_num(1, 3);
		new iPoints = (iNemKillHumans[0] >= 10) ? 1 : 0;
		
		if(iNemKillHumans[0] > 0)
		{
			g_points[iNem][CLASS_FRAGMENTOS] += iRand;
			g_points[iNem][CLASS_NEMESIS] += iPoints;
			
			colorChat(0, TERRORIST, "%s!t%s!y ganó !g%d pF!y%s por matar !g%d humanos!y", ZP_PREFIX, g_playername[iNem], iRand, (iPoints) ? " y !g1 pN!y" : "", iNemKillHumans[0]);
		}
		
		if(iDamage[0] > 0)
		{
			iPoints = (iDamage[0] >= 150000) ? 3 : (iDamage[0] >= 75000) ? 2 : 1;
			colorChat(0, CT, "%s!t%s!y ganó !g%d pH!y y !g1 pF!y por realizar !g%d de daño!y", ZP_PREFIX, g_playername[iHumDmg], iPoints, iDamage[0]);
			
			++g_points[iHumDmg][CLASS_FRAGMENTOS];
			g_points[iHumDmg][CLASS_HUMAN] += iPoints;
		}
		
		if(iHeads[0] > 0)
		{
			iPoints = (iHeads[0] >= 250) ? 3 : (iHeads[0] >= 100) ? 2 : 1;
			colorChat(0, CT, "%s!t%s!y ganó !g%d pH!y y !g1 pF!y por realizar !g%d disparos en la cabeza!y", ZP_PREFIX, g_playername[iHumHead], iPoints, iHeads[0]);
			
			++g_points[iHumHead][CLASS_FRAGMENTOS];
			g_points[iHumHead][CLASS_HUMAN] += iPoints;
		}
	}
	else if(g_mode[MODE_GRUNT])
	{
		g_grunt_reward_global = 0;
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
				
			addXp(i, g_grunt_reward[i], 0);
			colorChat(i, _, "%sGanaste !g%d EXP!y!", ZP_PREFIX, g_grunt_reward[i]);
		}
	}
	
	if(iUsersNum < 1)
		return;
	
	if(g_endround_forced)
	{
		static iClass;
		
		if(g_mode[MODE_SURVIVOR] || g_mode[MODE_WESKER] || g_mode[MODE_JASON])
		{
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
					
				if(!g_special_mode[i] && !g_lastzombie[i])
					continue;
				
				if(g_special_mode[i])
				{
					iClass = CLASS_HUMAN;
					
					if(g_survivor[i])
					{
						iClass = CLASS_SURVIVOR;
						
						if(iUsersNum >= 15)
						{
							if(get_user_health(i) == g_logros_stats[i][HEALTH_SURVIVOR])
								setAchievement(i, NO_ME_TOQUES);
							
							if(iUsersNum >= 20)
							{
								if(g_kill_bomb[i])
									setAchievement(i, SIN_BOMBA_DE_ANIQUILACION);
								
								if(g_survivor_kill_zombies[i] >= 20)
								{
									switch(g_dificult[i][CLASS_SURVIVOR])
									{
										case DIF_NORMAL: setAchievement(i, SURVIVOR_NOOB);
										case DIF_DIFICIL: setAchievement(i, SURVIVOR_AVANZADO);
										case DIF_MUY_DIFICIL:
										{
											setAchievement(i, SURVIVOR_EXPERTO);
											
											if(g_kill_bomb[i])
												setAchievement(i, SURVIVOR_PRO);
										}
									}
								}
							}
						}
					}
					else if(iUsersNum >= 20)
					{
						if(g_wesker[i])
						{
							setAchievement(i, MI_DEAGLE_Y_YO);
							
							if(g_health[i] == g_logros_stats[i][WESKER_HEALTH])
								setAchievement(i, L_INTACTO);
						}
						else if(g_jason[i])
						{
							setAchievement(i, JASON);
							
							if(task_exists(i + TASK_JASON_SPEED))
								setAchievement(i, SPEED_HACK_DONDE);
						}
					}
					
					g_points[i][iClass] += (g_mult_points[i] * ((g_dificult[i][iClass] >= 1) ? (g_dificult[i][iClass] + 1) : 0));
					colorChat(0, CT, "%s!t%s!y ganó !g%d p%s!y por ganar el modo !g%s!y", ZP_PREFIX, g_playername[i], g_mult_points[i], (iClass == CLASS_SURVIVOR) ? "S" : "H", g_classname[i]);
				}
				else
				{
					g_points[i][CLASS_ZOMBIE] += g_mult_points[i];
					colorChat(0, TERRORIST, "%s!t%s!y ganó !g%d pZ!y porque el !gMODO ESPECIAL!y se desconectó", ZP_PREFIX, g_playername[i], g_mult_points[i]);
				}
			}
		}
		else if(g_mode[MODE_NEMESIS] || g_mode[MODE_CABEZON])
		{
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
					
				if(!g_special_mode[i] && !g_lasthuman[i])
					continue;
				
				if(g_special_mode[i])
				{
					if(g_nemesis[i] && iUsersNum >= 20)
					{
						if(g_bazooka[i] == 15)
							setAchievement(i, CRATER_SANGRIENTO);
						
						if(g_nemesis_kill_humans[i] >= 20)
						{
							switch(g_dificult[i][CLASS_NEMESIS])
							{
								case DIF_NORMAL: setAchievement(i, NEMESIS_NOOB);
								case DIF_DIFICIL: setAchievement(i, NEMESIS_AVANZADO);
								case DIF_MUY_DIFICIL:
								{
									setAchievement(i, NEMESIS_EXPERTO);
									
									if(g_bazooka[i] == 15)
										setAchievement(i, NEMESIS_PRO);
								}
							}
						}
					}
					
					iClass = (g_special_mode[i] == MODE_NEMESIS) ? CLASS_NEMESIS : CLASS_ZOMBIE;
					
					g_points[i][iClass] += (g_mult_points[i] * ((g_dificult[i][iClass] >= 1) ? (g_dificult[i][iClass] + 1) : 0));
					colorChat(0, TERRORIST, "%s!t%s!y ganó !g%d p%s!y por ganar el modo !g%s!y", ZP_PREFIX, g_playername[i], g_mult_points[i], (iClass == CLASS_NEMESIS) ? "N" : "Z", g_classname[i]);
				}
				else
				{
					g_points[i][CLASS_HUMAN] += g_mult_points[i];
					colorChat(0, CT, "%s!t%s!y ganó !g%d pH!y porque el !gMODO ESPECIAL!y se desconectó", ZP_PREFIX, g_playername[i], g_mult_points[i]);
				}
			}
		}
	}
	
	static iTerrors;
	static iMaxTerrors;
	static iTeam[33];
	static iReward;
	static j;
	
	iMaxTerrors = iUsersNum / 2;
	iTerrors = 0;
	
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isconnected[i])
			continue;
		
		iTeam[i] = getUserTeam(i);
		
		if(iTeam[i] == FM_CS_TEAM_SPECTATOR || iTeam[i] == FM_CS_TEAM_UNASSIGNED)
			continue;
		
		/*if(g_isalive[i])
			stripUserWeapons(i);*/
		
		remove_task(i + TASK_TEAM);
		
		setUserTeam(i, FM_CS_TEAM_CT);
		iTeam[i] = FM_CS_TEAM_CT;
		
		if(task_exists(i + TASK_FINISHCOMBO))
			change_task(i + TASK_FINISHCOMBO, 0.1);
		
		if(task_exists(i + TASK_FINISHCOMBO_ZOMBIE) && g_combo_zombie_ok[i])
			change_task(i + TASK_FINISHCOMBO_ZOMBIE, 0.1);
		
		if(g_guild[i] && g_combo_guild[g_guild_id[i]])
		{
			for(j = 0; j < 5; ++j)
			{
				if(!g_isalive[g_guild_ids[i][j]])
					continue;
				
				if(g_zombie[g_guild_ids[i][j]])
					continue;
				
				if(task_exists(g_guild_ids[i][j] + TASK_FINISHCOMBO_GUILD) && g_combo_ok[g_guild_ids[i][j]])
				{
					change_task(g_guild_ids[i][j] + TASK_FINISHCOMBO_GUILD, 0.1);
					colorChat(i, _, "%sEl combo ha finalizado porque la ronda ha terminado", ZP_PREFIX_GUILD);
				}
			}
		}
		
		if(g_in_duelo_official[i] && g_mode[MODE_INFECTION])
		{
			new iWin;
			iReward = -2;
			
			switch(g_duelo_type[i])
			{
				case DUELO_HUM_INF_ROUND:
				{
					iReward = (g_duelo_stats[i][DUELO_HUM_INF_ROUND] > g_duelo_stats[g_in_duelo[i]][DUELO_HUM_INF_ROUND]) ? i : (g_duelo_stats[i][DUELO_HUM_INF_ROUND] < g_duelo_stats[g_in_duelo[i]][DUELO_HUM_INF_ROUND]) ? g_in_duelo[i] : -1;
					iWin = DUELO_HUM_INF_ROUND;
				}
				case DUELO_ZOM_MAT_ROUND:
				{
					iReward = (g_duelo_stats[i][DUELO_ZOM_MAT_ROUND] > g_duelo_stats[g_in_duelo[i]][DUELO_ZOM_MAT_ROUND]) ? i : (g_duelo_stats[i][DUELO_ZOM_MAT_ROUND] < g_duelo_stats[g_in_duelo[i]][DUELO_ZOM_MAT_ROUND]) ? g_in_duelo[i] : -1;
					iWin = DUELO_ZOM_MAT_ROUND;
				}
				case DUELO_DMG_DON_ROUND:
				{
					iReward = (g_duelo_stats[i][DUELO_DMG_DON_ROUND] > g_duelo_stats[g_in_duelo[i]][DUELO_DMG_DON_ROUND]) ? i : (g_duelo_stats[i][DUELO_DMG_DON_ROUND] < g_duelo_stats[g_in_duelo[i]][DUELO_DMG_DON_ROUND]) ? g_in_duelo[i] : -1;
					iWin = DUELO_DMG_DON_ROUND;
				}
			}
			
			if(iReward != -2)
			{
				if(iReward != -1)
				{
					colorChat(i, _, "%sEl duelo contra !g%s!y ha finalizado!", ZP_PREFIX, g_playername[g_in_duelo[i]]);
					colorChat(g_in_duelo[i], _, "%sEl duelo contra !g%s!y ha finalizado!", ZP_PREFIX, g_playername[i]);
					
					colorChat(iReward, _, "%sEl ganador es !g%s!y. Has ganado !g%d %s!y", ZP_PREFIX, g_playername[iReward], g_duelo_bet[iReward][g_duelo[iReward]], MENU_DUELOS_PREFIX[g_duelo[iReward]]);
					colorChat(g_in_duelo[iReward], _, "%sEl ganador es !g%s!y. Has perdido !g%d %s!y", ZP_PREFIX, g_playername[iReward], g_duelo_bet[g_in_duelo[iReward]][g_duelo[g_in_duelo[iReward]]], MENU_DUELOS_PREFIX[g_duelo[g_in_duelo[iReward]]]);
					
					colorChat(0, CT, "%sDuelo de !g%s!y finalizado. !g%s!y !t[%d]!y - !t[%d]!g %s!y", ZP_PREFIX, MENU_DUELOS[g_duelo[iReward]], g_playername[iReward], g_duelo_stats[iReward][iWin], g_duelo_stats[g_in_duelo[iReward]][iWin], g_playername[g_in_duelo[iReward]]);
					
					/*log_to_file("duelos.txt", "%s vs. %s  (GANÓ %s)^nAPUESTA: %d %s^n^nHumanos infectados: %d - %d^nZombies matados: %d - %d^nDaño hecho: %d - %d^n^n", g_playername[iReward], g_playername[g_in_duelo[iReward]], g_playername[iReward], g_duelo_bet[g_in_duelo[iReward]][g_duelo[g_in_duelo[iReward]]], 
					MENU_DUELOS_PREFIX[g_duelo[g_in_duelo[iReward]]], g_duelo_stats[iReward][DUELO_HUM_INF_ROUND], g_duelo_stats[g_in_duelo[iReward]][DUELO_HUM_INF_ROUND], g_duelo_stats[iReward][DUELO_ZOM_MAT_ROUND], g_duelo_stats[g_in_duelo[iReward]][DUELO_ZOM_MAT_ROUND],
					g_duelo_stats[iReward][DUELO_DMG_DON_ROUND], g_duelo_stats[g_in_duelo[iReward]][DUELO_DMG_DON_ROUND]);*/
					
					++g_duelo_win[iReward];
					++g_duelo_lost[g_in_duelo[iReward]];
				
					#if defined CHECK_PRIMERO_BUEN_COMIENZO
						setAchievement__First(iReward, PRIMERO_BUEN_COMIENZO);
					#endif
					
					if(g_duelo_win[iReward] == 1)
						setAchievement(iReward, BUEN_COMIENZO);
					else if(g_duelo_win[iReward] == 50)
						setAchievement(iReward, PRO_DUELO);
					else if(g_duelo_win[iReward] == 120)
						setAchievement(iReward, TRANQUI_120);
					else if(g_duelo_win[iReward] == 200)
						setAchievement(iReward, AL_MAXIMO);
					
					if(g_logros_stats[iReward][APUESTA_MAXIMA] || g_logros_stats[g_in_duelo[iReward]][APUESTA_MAXIMA])
						setAchievement(iReward, OTRA_FORMA_DE_JUGAR);
					
					switch(g_duelo[iReward])
					{
						case MENU_DUELO_EXPERIENCIA:
						{
							addXp(iReward, g_duelo_bet[i][MENU_DUELO_EXPERIENCIA], 0);
							g_exp[g_in_duelo[iReward]] -= g_duelo_bet[i][MENU_DUELO_EXPERIENCIA];
						}
						case MENU_DUELO_AMMOPACKS:
						{
							g_ammopacks[iReward] += g_duelo_bet[i][MENU_DUELO_AMMOPACKS];
							g_ammopacks[g_in_duelo[iReward]] -= g_duelo_bet[i][MENU_DUELO_AMMOPACKS];
						}
						case MENU_DUELO_PH: 
						{
							g_points[iReward][CLASS_HUMAN] += g_duelo_bet[i][MENU_DUELO_PH];
							g_points[g_in_duelo[iReward]][CLASS_HUMAN] -= g_duelo_bet[i][MENU_DUELO_PH];
						}
						case MENU_DUELO_PZ:
						{
							g_points[iReward][CLASS_ZOMBIE] += g_duelo_bet[i][MENU_DUELO_PZ];
							g_points[g_in_duelo[iReward]][CLASS_ZOMBIE] -= g_duelo_bet[i][MENU_DUELO_PZ];
						}
						case MENU_DUELO_PF:
						{
							g_points[iReward][CLASS_FRAGMENTOS] += g_duelo_bet[i][MENU_DUELO_PF];
							g_points[g_in_duelo[iReward]][CLASS_FRAGMENTOS] -= g_duelo_bet[i][MENU_DUELO_PF];
						}
					}
				}
				else
				{
					colorChat(i, _, "%sEl duelo contra !g%s!y ha finalizado en un empate!", ZP_PREFIX, g_playername[g_in_duelo[i]]);
					colorChat(g_in_duelo[i], _, "%sEl duelo contra !g%s!y ha finalizado en un empate!", ZP_PREFIX, g_playername[i]);
					
					colorChat(0, CT, "%sDuelo de !g%s!y finalizado. !g%s!y !t[%d]!y - !t[%d]!g %s!y", ZP_PREFIX, MENU_DUELOS[g_duelo[i]], g_playername[i], g_duelo_stats[i][iWin], g_duelo_stats[g_in_duelo[i]][iWin], g_playername[g_in_duelo[i]]);
				}
				
				g_duelo_type[g_in_duelo[i]] = -1;
				g_duelo_type[i] = -1;
				
				g_duelo_bet[g_in_duelo[i]][g_duelo[g_in_duelo[i]]] = 0;
				g_duelo_bet[i][g_duelo[i]] = 0;
				
				g_duelo_invite[i][g_in_duelo[i]] = 0;
				g_duelo_invite[g_in_duelo[i]][i] = 0;
				
				g_duelo[g_in_duelo[i]] = -1;
				g_duelo[i] = -1;
				
				g_in_duelo_official[g_in_duelo[i]] = 0;
				g_in_duelo_official[i] = 0;
				
				g_in_duelo[g_in_duelo[i]] = 0;
				g_in_duelo[i] = 0;
			}
		}
		
		if(g_logros_stats[i][DAMAGE_WITH_M4A1] >= 5000000)
			setAchievement(i, SWAT);
		
		if(!g_logros_stats[i][SIN_INFECTAR] && g_mode[MODE_INFECTION] && iUsersNum >= 15)
		{
			++g_logros_stats[i][RONDAS_SIN_INFECTAR];
			
			if(g_logros_stats[i][RONDAS_SIN_INFECTAR] >= 5)
			{
				if(g_logros_stats[i][RONDAS_SIN_INFECTAR] == 10)
				{
					setAchievement(i, TENGO_AGUANTE);
					g_logros_stats[i][RONDAS_SIN_INFECTAR] = -25;
				}
				else
					setAchievement(i, LA_SALUD_ES_LO_PRIMERO);
			}
		}
		
		if(get_user_armor(i) == 200 && g_mode[MODE_INFECTION])
			setAchievement(i, AFILATE_LAS_GARRAS);
	}
	
	i = 0;
	
	while(iTerrors < iMaxTerrors)
	{
		if(++i > g_maxplayers)
			i = 1;
		
		if(!g_isconnected[i])
			continue;
		
		if(iTeam[i] != FM_CS_TEAM_CT)
			continue;
		
		if(random_num(0, 1))
		{
			setUserTeam(i, FM_CS_TEAM_T);
			iTeam[i] = FM_CS_TEAM_T;
			
			++iTerrors;
		}
	}
	
	g_cabezon_head_total = 0;
}

/** ==================================================
	[ FIN EVENTOS ]
================================================== **/

/** ==================================================
	[ FORWARDS - HAMSANDWICH ]
================================================== **/

public fw_PlayerSpawn_Post(const id)
{
	if(!is_user_alive(id) || !getUserTeam(id))
		return;
	
	g_isalive[id] = 1;
	
	remove_task(id + TASK_SPAWN);
	remove_task(id + TASK_MODEL);
	remove_task(id + TASK_BLOOD);
	remove_task(id + TASK_AURA);
	remove_task(id + TASK_BURN);
	remove_task(id + TASK_NVISION);
	remove_task(id + TASK_MADNESS_BOMB);
	remove_task(id + TASK_JASON_SPEED);
	remove_task(id + TASK_NEMESIS_OM);
	
	g_madness_bomb_count[id] = 0;
	g_madness_bomb_move[id] = 0;
	//client_cmd(id, "-moveleft; -moveright; -back");
	
	randomSpawn(id);
	
	set_task(0.4, "hideHUDs", id + TASK_SPAWN);
	
	if(!g_mode[MODE_ARMAGEDDON])
	{
		set_task(2.0, "respawnUserCheck", id + TASK_SPAWN);
		
		if(g_mode[MODE_GRUNT])
			set_task(0.1, "gruntAiming", id);
	}
	
	if(g_mode[MODE_ANNIHILATOR] && g_anniq_knife[id] == 0) {
		g_anniq_knife[id] = -1000;
	}
	
	g_respawn_as_zombie[id] = 0;
	
	if(g_amuleto_next_equip[id] != -1)
	{
		g_amuleto_equip[id] = g_amuleto_next_equip[id];
		g_amuleto_next_equip[id] = -1;
	}
	
	if(task_exists(id + TASK_INFECT_1_MINUTE))
	{
		if(g_logros_stats[id][INFECT_ONE_MINUTE] >= (DESAFIOS[EL_TIEMPO_APREMIA][desafioLevel] + g_desafios[id][EL_TIEMPO_APREMIA] + (DESAFIOS[EL_TIEMPO_APREMIA][desafioLevelMult] * g_desafios[id][EL_TIEMPO_APREMIA])))
			setChallenge(id, EL_TIEMPO_APREMIA);
		
		g_logros_stats[id][INFECT_ONE_MINUTE] = 0;
		remove_task(id + TASK_INFECT_1_MINUTE);
	}
	
	if(!g_newround && !g_endround)
	{
		if(g_mode[MODE_ARMAGEDDON])
		{
			resetVars(id, 0);
			zombieMe(id, .nemesis = 1);
			
			g_bazooka[id] = 0;
			strip_user_weapons(id);
			
			give_item(id, "weapon_knife");
			
			return;
		}
		else if(!g_mode[MODE_NEMESIS] && !g_mode[MODE_CABEZON] && !g_mode[MODE_ANNIHILATOR] && !g_mode[MODE_SYNAPSIS] && !g_mode[MODE_DUEL_FINAL] && !g_mode[MODE_GRUNT])
			g_respawn_as_zombie[id] = 1;
	}
	
	if(g_respawn_as_zombie[id] && !g_newround)
	{
		resetVars(id, 0);
		zombieMe(id);
		
		return;
	}
	
	g_combo_ok[id] = 1;
	
	resetVars(id, 0);
	
	g_dead_health[id] = 0;
	
	g_logros_stats[id][ALIEN_KILL_HUMANS_WITH_FURY] = 0;
	g_logros_stats[id][INFECT_HUMANS_IN_ROUND] = 0;
	g_logros_stats[id][KILL_ZOMBIES_IN_ROUND] = 0;
	g_logros_stats[id][ZOMBIE_KILLS_IN_ROUND] = 0;
	g_logros_stats[id][SNIPER_KILL_HEADSHOT] = 0;
	g_logros_stats[id][ALIEN_KILL_HUMANS] = 0;
	g_logros_stats[id][SNIPER_KILL_SCOUT] = 0;
	g_logros_stats[id][SNIPER_KILL_AWP] = 0;
	g_logros_stats[id][ZOMBIE_BOMBS] = 0;
	g_logros_stats[id][TOXIC_INFECT] = 0;
	g_logros_stats[id][SIN_INFECTAR] = 0;
	g_logros_stats[id][DISPARO] = 0;
	
	set_task(0.19, "clearWeapons", id + TASK_SPAWN);
	set_task(0.2, "showMenuBuy1", id + TASK_SPAWN);
	
	g_human_class[id] = g_human_class_next[id];
	
	set_user_health(id, AMOUNT_HEALTH_HUMAN(id));
	set_user_armor(id, AMOUNT_ARMOR_EXTRA(id));
	set_user_gravity(id, AMOUNT_GRAVITY_HUMAN(id));
	g_human_speed[id] = AMOUNT_SPEED_HUMAN(id);
	
	if(g_mode[MODE_DUEL_FINAL] || (g_no_buy && !g_kiske[id]) || g_legendaria_kpuzzle)
	{
		set_user_health(id, 100);
		set_user_armor(id, 0);
		set_user_gravity(id, 1.0);
		g_human_speed[id] = 240.0;
	}
	
	g_health[id] = get_user_health(id);
	
	ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
	
	copy(g_classname[id], charsmax(g_classname[]), CLASES_HUMANAS[g_human_class[id]][humanName]);
	
	if(!g_newround && getUserTeam(id) != FM_CS_TEAM_CT)
	{
		remove_task(id + TASK_TEAM);
		setUserTeam(id, FM_CS_TEAM_CT);
		userTeamUpdate(id);
	}
	
	static sCurrentModel[32];
	static iAlreadyHasModel;
	
	iAlreadyHasModel = 0;
	
	getUserModel(id, sCurrentModel, charsmax(sCurrentModel));
	
	if(equal(sCurrentModel, MODELOS_HUMANOS[g_human_model[id]]))
		iAlreadyHasModel = 1;
	
	if(!iAlreadyHasModel)
	{
		copy(g_playermodel[id], 31, MODELOS_HUMANOS[g_human_model[id]]);
		
		if(g_newround) set_task(5.0 * MODELS_CHANGE_DELAY, "userModelUpdate", id + TASK_MODEL);
		else userModelUpdate(id + TASK_MODEL);
	}
	
	set_user_rendering(id);
	
	turnOffFlashlight(id);
	
	static iWeaponEnt;
	iWeaponEnt = getCurrentWeaponEnt(id);
	
	if(pev_valid(iWeaponEnt))
		replaceWeaponModels(id, cs_get_weapon_id(iWeaponEnt));
	
	checkLastZombie();
}

public fw_PlayerKilled(const victim, const killer, const shouldgib)
{
	remove_task(victim + TASK_AURA);
	remove_task(victim + TASK_MADNESS_BOMB);
	
	g_madness_bomb_count[victim] = 0;
	g_madness_bomb_move[victim] = 0;
	//client_cmd(victim, "-moveleft; -moveright; -back");
	
	if(g_zombie[victim])
	{
		remove_task(victim + TASK_BLOOD);
		remove_task(victim + TASK_BURN);
		
		if(g_nemesis[victim])
			SetHamParamInteger(3, 2);
	}
	else if(g_guild[victim] && g_combo_guild[g_guild_id[victim]] && !g_mode[MODE_DUEL_FINAL])
	{
		new i;
		new j = 0;
		new iReward;
		
		for(i = 0; i < 5; ++i)
		{
			if(!g_isalive[g_guild_ids[victim][i]])
				continue;
			
			if(g_zombie[g_guild_ids[victim][i]])
				continue;
			
			if(task_exists(g_guild_ids[victim][i] + TASK_FINISHCOMBO_GUILD) && g_combo_ok[g_guild_ids[victim][i]])
			{
				++j;
				remove_task(g_guild_ids[victim][i] + TASK_FINISHCOMBO_GUILD);
			}
			
			colorChat(g_guild_ids[victim][i], TERRORIST, "%sEl combo ha finalizado porque mataron a !t%s!y", ZP_PREFIX_GUILD, g_playername[victim]);
		}
		
		if(j != 0)
		{
			iReward = g_combo_guild[g_guild_id[victim]] / j;
			
			if(iReward > 0)
			{
				if(j != 1)
				{
					new k = 0;
					new l = 0;
					
					if(g_combo_guild[g_guild_id[victim]] > g_combo_max_guild[g_guild_id[victim]][j])
					{
						l = g_combo_max_guild[g_guild_id[victim]][j];
						g_combo_max_guild[g_guild_id[victim]][j] = g_combo_guild[g_guild_id[victim]];
						k = 1;
					}
					
					for(i = 0; i < 5; ++i)
					{
						if(k && g_isconnected[g_guild_ids[victim][i]])
							colorChat(g_guild_ids[victim][i], CT, "%sHan superado su viejo mejor combo de !gx%d!t [%d HM]!y por el recién hecho de !gx%d!t [%d HM]!y", ZP_PREFIX_GUILD, l, j, g_combo_max_guild[g_guild_id[victim]][j], j);
						
						if(j == 4)
							g_combo_guild[g_guild_id[victim]] = 0;
						
						if(!g_isalive[g_guild_ids[victim][i]])
							continue;
						
						if(g_zombie[g_guild_ids[victim][i]])
							continue;
							
						addXp(g_guild_ids[victim][i], iReward, 0);
						
						if(g_level_total[g_guild_ids[victim][i]] >= 100)
						{
							g_guild_exp[g_guild_id[g_guild_ids[victim][i]]] += iReward;
							
							if(g_guild_exp[g_guild_id[g_guild_ids[victim][i]]] >= GUILD_EXP_LEVEL[g_guild_level[g_guild_id[g_guild_ids[victim][i]]]] && g_guild_level[g_guild_id[g_guild_ids[victim][i]]] != MAX_LEVEL_GUILD)
							{
								++g_guild_level[g_guild_id[g_guild_ids[victim][i]]];
								colorChat(0, CT, "%sLa hermandad !t%s!y subió al nivel !g%d!y", ZP_PREFIX, g_guild_name[g_guild_id[g_guild_ids[victim][i]]], g_guild_level[g_guild_id[g_guild_ids[victim][i]]]);
							}
						}
						
						static sReward[11];
						addDot(iReward, sReward, 10);
						
						set_hudmessage(0, 255, 0, g_hud_position[g_guild_ids[victim][i]][POSITION_HUDGUILD][0], g_hud_position[g_guild_ids[victim][i]][POSITION_HUDGUILD][1], g_hudcombo_effect[g_guild_ids[victim][i]], 0.0, 8.0, 0.0, 0.0, -1);
						ShowSyncHudMsg(g_guild_ids[victim][i], g_Hud_ComboGuild, "%s | Ganaste %s de EXP", g_guild_name[g_guild_id[g_guild_ids[victim][i]]], sReward);
					}
				}
				else
				{
					for(i = 0; i < 5; ++i)
					{
						if(!g_isalive[g_guild_ids[victim][i]])
							continue;
						
						if(g_zombie[g_guild_ids[victim][i]])
							continue;
						
						set_hudmessage(0, 255, 0, -1.0, 0.8, g_hudcombo_effect[g_guild_ids[victim][i]], 0.0, 8.0, 0.0, 0.0, -1);
						ShowSyncHudMsg(g_guild_ids[victim][i], g_Hud_ComboGuild, "COMBO %s DESACTIVADO^nSE NECESITA 2+ HUMANOS VIVOS", g_guild_name[g_guild_id[g_guild_ids[victim][i]]]);
					}
				}
			}
		}
	}
	
	g_isalive[victim] = 0;
	g_nodamage[victim] = 0;
	g_player_solid[victim] = 0;
	g_player_restore[victim] = 0;
	
	set_task(0.1, "specNightvision", victim);
	
	if(task_exists(victim + TASK_FINISHCOMBO))
		change_task(victim + TASK_FINISHCOMBO, 0.1);
	
	if(task_exists(victim + TASK_FINISHCOMBO_ZOMBIE) && g_combo_zombie_ok[victim])
		change_task(victim + TASK_FINISHCOMBO_ZOMBIE, 0.1);
	
	if(g_mode[MODE_ALVSPRED])
	{
		if(g_alien[victim])
		{
			new i;
			new iRandEXP = random_num(10, 20);
			new iRandAPS = random_num(100000, 200000);
			new iExp;
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_alien[i])
					continue;
				
				if(g_zombie[i])
				{
					ExecuteHamB(Ham_Killed, i, killer, 2);
					continue;
				}
				
				iExp = ((NEED_EXP_TOTAL[g_level_total[i]] - NEED_EXP_TOTAL[g_level_total[i] - 1]) * iRandEXP) / 100;
				
				colorChat(i, _, "%sGanaste !g%d EXP!y y !g%d APS!y por ganar el modo", ZP_PREFIX, iExp, iRandAPS);
				
				addXp(i, iExp, 0);
				g_ammopacks[i] += iRandAPS;
			}
		}
		else if(g_predator[victim])
		{
			new i;
			new iRandEXP = random_num(10, 20);
			new iRandAPS = random_num(100000, 200000);
			new iExp;
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_predator[i])
					continue;
				
				if(!g_zombie[i])
				{
					ExecuteHamB(Ham_Killed, i, killer, 2);
					continue;
				}
				
				iExp = ((NEED_EXP_TOTAL[g_level_total[i]] - NEED_EXP_TOTAL[g_level_total[i] - 1]) * iRandEXP) / 100;
				
				colorChat(i, _, "%sGanaste !g%d EXP!y y !g%d APS!y por ganar el modo", ZP_PREFIX, iRandEXP, iRandAPS);
				
				addXp(i, iExp, 0);
				g_ammopacks[i] += iRandAPS;
			}
		}
	} else if(g_mode[MODE_GAMINGA]) {
		if(getZombies() < 1) {
			new i;
			for(i = 1; i <= g_maxplayers; ++i) {
				if(!g_isalive[i])
					continue;
				
				if(g_zombie[i])
					continue;
				
				g_points[i][CLASS_HUMAN] += 2;
				g_points[i][CLASS_ZOMBIE] += 2;
				
				if(!g_sniper[i]) {
					colorChat(i, _, "%sGanaste !g2pHZ!y por ganar el modo !gGAM!NGA!y.", ZP_PREFIX);
				} else {
					++g_points[i][CLASS_HUMAN];
					
					colorChat(i, _, "%sGanaste !g3pH!y y !g2pZ!y por ganar el modo !gGAM!NGA!y siendo !gSNIPER!y.", ZP_PREFIX);
				}
			}
		} else if(getHumans() < 1) {
			new i;
			for(i = 1; i <= g_maxplayers; ++i) {
				if(!g_isalive[i])
					continue;
				
				if(!g_zombie[i])
					continue;
				
				g_points[i][CLASS_HUMAN] += 2;
				g_points[i][CLASS_ZOMBIE] += 2;
				
				colorChat(i, _, "%sGanaste !g2pHZ!y por ganar el modo !gGAM!NGA!y.", ZP_PREFIX);
			}
		}
	} else if(g_mode[MODE_DUEL_FINAL])
	{
		if(victim != killer && is_user_valid_connected(killer))
		{
			static iVictimTeam;
			iVictimTeam = getUserTeam(victim);
			
			if(iVictimTeam == getUserTeam(killer))
			{
				setUserTeam(victim, (iVictimTeam == 1) ? 2 : 1);
				ExecuteHamB(Ham_Killed, victim, killer, shouldgib);
				setUserTeam(victim, iVictimTeam);
			}
			
			++g_duel_final_kills_total[killer];
			++g_duel_final_kills[killer];
			
			if(g_duel_final_modeN >= 2)
			{
				if(g_duel_final_modeN == 3)
				{
					++g_logros_stats[killer][KILL_WITH_HE];
					
					if(g_logros_stats[killer][KILL_WITH_HE] >= 5)
					{
						setAchievement(killer, DETONADOS);
						if(g_logros_stats[killer][KILL_WITH_HE] >= 10)
						{
							setAchievement(killer, BOMBAZO_PARA_TODOS);
							if(g_logros_stats[killer][KILL_WITH_HE] >= 15)
								setAchievement(killer, BOOM_EN_TODA_LA_CARA);
						}
					}
				}
				else
				{
					++g_logros_stats[killer][KILL_WITH_AWP];
					
					if(g_logros_stats[killer][KILL_WITH_AWP] >= 5)
					{
						setAchievement(killer, TODO_UN_AWPER);
						if(g_logros_stats[killer][KILL_WITH_AWP] >= 10)
						{
							setAchievement(killer, EXPERTO_EN_AWP);
							if(g_logros_stats[killer][KILL_WITH_AWP] >= 15)
								setAchievement(killer, PRO_AWP);
						}
					}
				}
			}
			
			if(!g_duel_final_first)
			{
				g_duel_final_first = 1;
				setAchievement(victim, SOY_MUY_NOOB);
			}
		}
		
		if(getHumans() == 1)
		{
			++g_duel_final;
			
			if(g_duel_final == CUARTOS || g_duel_final == SEMIFINAL || g_duel_final == FINAL)
				user_kill(killer, 1);
			
			set_task(1.0, "finishDuelFinal");
		}
		
		return;
	}
	else if(g_gk_guerra)
	{
		if(((g_glow_color[killer] == g_gk_glow_color_a || g_gk_glow_color_a == 5) && (g_glow_color[victim] == g_gk_glow_color_v || g_gk_glow_color_v == 5)) ||
		((g_glow_color[killer] == g_gk_glow_color_v || g_gk_glow_color_v == 5) && (g_glow_color[victim] == g_gk_glow_color_a || g_gk_glow_color_a == 5)))
		{
			static iVictimTeam;
			iVictimTeam = getUserTeam(victim);
			
			if(iVictimTeam == getUserTeam(killer))
			{
				setUserTeam(victim, (iVictimTeam == 1) ? 2 : 1);
				ExecuteHamB(Ham_Killed, victim, killer, shouldgib);
				setUserTeam(victim, iVictimTeam);
			}
		}
		
		return;
	}
	
	if(victim == killer || !is_user_valid_connected(killer))
		return;
	
	if(!g_zombie[killer])
	{
		static iWeapon;
		iWeapon = g_currentweapon[killer];
		
		if(g_reset[killer])
			++g_level_hardcore[killer][0];
		
		/*if((g_mode[MODE_INFECTION] || g_mode[MODE_MULTI]) && getPlaying() >= 13)
		{
			new Float:vecOrigin[3];
			new Float:vecEndOrigin[3];
			new Float:fFraction;
			new iTraceResult;
			
			entity_get_vector(victim, EV_VEC_origin, vecOrigin);
			getDropOrigin(victim, vecEndOrigin, 20);
			
			iTraceResult = 0;
			engfunc(EngFunc_TraceLine, vecOrigin, vecEndOrigin, IGNORE_MONSTERS, victim, iTraceResult);
			
			get_tr2(iTraceResult, TR_flFraction, fFraction);
			
			if(fFraction == 1.0)
				dropGift(victim);
		}*/
		
		if((g_mode[MODE_INFECTION] || g_mode[MODE_MULTI] || g_kiske[killer]) && getPlaying() >= 15 && !g_lasthuman[killer] && !g_kill_by_bomb[victim] && shouldgib == 1 && iWeapon != CSW_HEGRENADE && iWeapon != CSW_FLASHBANG && iWeapon != CSW_SMOKEGRENADE)
		{
			if(g_kill_sound_id == killer)
			{
				++g_kill_sound;
				
				if(g_kill_sound == 6)
					g_kill_sound = 1;
				
				remove_task(TASK_SOUND_LOL);
				
				// new i;
				switch(g_kill_sound)
				{
					case 1: set_task(10.0, "removeSoundLOL", TASK_SOUND_LOL);
					case 2: 
					{
						// client_cmd(killer, "MP3Volume 1.4");
						// client_cmd(killer, "mp3 play sound/zp5/gk_double_kill_lol.mp3");
						
						// client_cmd(victim, "MP3Volume 1.4");
						// client_cmd(victim, "mp3 play sound/zp5/gk_e_double_kill_lol.mp3");
						
						set_task(15.0, "removeSoundLOL", TASK_SOUND_LOL);
						
						setAchievement(killer, DOUBLE_KILL);
					}
					case 3: 
					{
						// for(i = 1; i <= g_maxplayers; ++i)
						// {
							// if(!g_isconnected[i])
								// continue;
							
							// client_cmd(i, "MP3Volume 1.4");
							
							// if(!g_zombie[i])
								// client_cmd(i, "mp3 play sound/zp5/gk_triple_kill_lol.mp3");
							// else
								// client_cmd(i, "mp3 play sound/zp5/gk_e_triple_kill_lol.mp3");
						// }
						
						set_task(20.0, "removeSoundLOL", TASK_SOUND_LOL);
						
						setAchievement(killer, TRIPLE_KILL);
					}
					case 4: 
					{
						// for(i = 1; i <= g_maxplayers; ++i)
						// {
							// if(!g_isconnected[i])
								// continue;
							
							// client_cmd(i, "MP3Volume 1.4");
							
							// if(!g_zombie[i])
								// client_cmd(i, "mp3 play sound/zp5/gk_quadra_kill_lol.mp3");
							// else
								// client_cmd(i, "mp3 play sound/zp5/gk_e_quadra_kill_lol.mp3");
						// }
						
						set_task(20.0, "removeSoundLOL", TASK_SOUND_LOL);
						
						setAchievement(killer, QUADRA_KILL);
					}
					case 5: 
					{
						// for(i = 1; i <= g_maxplayers; ++i)
						// {
							// if(!g_isconnected[i])
								// continue;
							
							// client_cmd(i, "MP3Volume 1.4");
							
							// if(!g_zombie[i])
								// client_cmd(i, "mp3 play sound/zp5/gk_penta_kill_lol.mp3");
							// else
								// client_cmd(i, "mp3 play sound/zp5/gk_e_penta_kill_lol.mp3");
						// }
						
						set_task(20.0, "removeSoundLOL", TASK_SOUND_LOL);
						
						setAchievement(killer, PENTA_KILL);
						
						g_penta_kill[killer]++;
						
						if(g_penta_kill[killer] == 2)
							setAchievement(killer, DECA_KILL);
					}
				}
			}
			else
			{
				g_kill_sound_id = killer;
				remove_task(TASK_SOUND_LOL);
				
				g_kill_sound = 1;
				set_task(10.0, "removeSoundLOL", TASK_SOUND_LOL);
			}
		}
		
		if(g_mode[MODE_INFECTION])
		{
			++g_logros_stats[killer][KILL_ZOMBIES_IN_PZ];
			
			if(g_logros_stats[killer][KILL_ZOMBIES_IN_PZ] == 10)
				setAchievement(killer, DIEZ_A_LA_Z);
		}
		else if(g_survivor[killer])
			++g_survivor_kill_zombies[killer];
		else if(g_predator[killer])
		{
			++g_logros_stats[killer][PREDATOR_KILL_ZOMBIES];
			
			if(g_logros_stats[killer][PREDATOR_KILL_ZOMBIES] == 8)
				setAchievement(killer, SARGENTO_DEPRE);
			else if(g_logros_stats[killer][PREDATOR_KILL_ZOMBIES] == 12)
				setAchievement(killer, DEPREDADOR_007);
		}
		else if(g_sniper[killer] && !g_mode[MODE_GAMINGA])
		{
			if(iWeapon == CSW_AWP)
			{
				++g_logros_stats[killer][SNIPER_KILL_AWP];
				
				if(g_logros_stats[killer][SNIPER_KILL_AWP] == 8)
					setAchievement(killer, MI_AWP_ES_MEJOR);
			}
			else
			{
				++g_logros_stats[killer][SNIPER_KILL_SCOUT];
				
				if(g_logros_stats[killer][SNIPER_KILL_SCOUT] == 8)
					setAchievement(killer, MI_SCOUT_ES_MEJOR);
			}
		}
		else if(g_jason[killer])
		{
			++g_logros_stats[killer][KILL_JASON_ZOMBIES];
			
			if(g_logros_stats[killer][KILL_JASON_ZOMBIES] >= 5)
				setAchievement(killer, CARNICERO);
		}
		
		++g_stats[killer][KILL_ZOMBIES_D];
		++g_stats[victim][KILL_ZOMBIES_T];
		
		++g_eegg_kill_z_map[killer];
		++g_eegg_kill_z_round[killer];
		
		++g_dead_health[victim];
		
		if(g_stats[killer][KILL_ZOMBIES_D] == 1000)
			setAchievement(killer, KILL_ZOMBIES_1000);
		else if(g_stats[killer][KILL_ZOMBIES_D] == 2500)
			setAchievement(killer, KILL_ZOMBIES_2500);
		else if(!(g_stats[killer][KILL_ZOMBIES_D] % 5000))
		{
			switch(g_stats[killer][KILL_ZOMBIES_D])
			{
				case 5000: setAchievement(killer, KILL_ZOMBIES_5000);
				case 10000: setAchievement(killer, KILL_ZOMBIES_10000);
				case 20000: setAchievement(killer, KILL_ZOMBIES_20000);
				case 50000: setAchievement(killer, KILL_ZOMBIES_50000);
				case 100000: setAchievement(killer, KILL_ZOMBIES_100000);
				case 500000: setAchievement(killer, KILL_ZOMBIES_500000);
				case 1000000: setAchievement(killer, KILL_ZOMBIES_1000000);
			}
		}
		
		if(getPlaying() >= 15)
		{
			++g_logros_stats[killer][KILL_ZOMBIES_IN_ROUND];
			
			if(g_logros_stats[killer][KILL_ZOMBIES_IN_ROUND] == 50)
				setAchievement(killer, IMPECABLE);
		}
		
		if(g_in_duelo_official[killer] && g_mode[MODE_INFECTION])
		{
			++g_duelo_stats[killer][DUELO_ZOM_MAT_ROUND];
			++g_duelo_stats[killer][DUELO_ZOM_MAT_MAP];
		}
		
		if(get_pdata_int(victim, 75) == HIT_HEAD)
		{
			++g_stats[killer][KILL_ZOMBIES_HS_D];
			++g_stats[victim][KILL_ZOMBIES_HS_T];
			
			if(g_stats[killer][KILL_ZOMBIES_HS_D] == 1000)
				setAchievement(killer, LIDER_EN_CABEZAS);
			else if(g_stats[killer][KILL_ZOMBIES_HS_D] == 10000)
				setAchievement(killer, AGUJEREANDO_CABEZAS);
			
			if(g_wesker[killer])
			{
				++g_logros_stats[killer][COUNT_HS_WESKER];
				
				if(g_logros_stats[killer][COUNT_HS_WESKER] == 10)
					setAchievement(killer, RESIDENT_EVIL);
			}
			else if(g_sniper[killer] && !g_mode[MODE_GAMINGA])
			{
				++g_logros_stats[killer][SNIPER_KILL_HEADSHOT];
				
				if(g_logros_stats[killer][SNIPER_KILL_HEADSHOT] == 8)
					setAchievement(killer, ZAS_EN_TODA_LA_BOCA);
			}
			
			new Float:vecOrigin[3];
			new Float:vecEndOrigin[3];
			new Float:fFraction;
			new iTraceResult;
			
			entity_get_vector(victim, EV_VEC_origin, vecOrigin);
			getDropOrigin(victim, vecEndOrigin, 20);
			
			iTraceResult = 0;
			engfunc(EngFunc_TraceLine, vecOrigin, vecEndOrigin, IGNORE_MONSTERS, victim, iTraceResult);
			
			get_tr2(iTraceResult, TR_flFraction, fFraction);
			
			if(fFraction == 1.0)
				dropHeadZombie__Violet(victim);
		}
		else
		{
			new iRand = random_num(1, 10);
			
			if(iRand <= 3)
			{
				new Float:vecOrigin[3];
				new Float:vecEndOrigin[3];
				new Float:fFraction;
				new iTraceResult;
				
				entity_get_vector(victim, EV_VEC_origin, vecOrigin);
				getDropOrigin(victim, vecEndOrigin, 20);
				
				iTraceResult = 0;
				engfunc(EngFunc_TraceLine, vecOrigin, vecEndOrigin, IGNORE_MONSTERS, victim, iTraceResult);
				
				get_tr2(iTraceResult, TR_flFraction, fFraction);
				
				if(fFraction == 1.0)
					dropHeadZombie__Big(victim);
			}
		}
		
		if(shouldgib == 1)
		{
			if(!g_special_mode[killer] && iWeapon != CSW_KNIFE && iWeapon != CSW_HEGRENADE && iWeapon != CSW_FLASHBANG && iWeapon != CSW_SMOKEGRENADE)
			{
				if(!g_kills_weapons[killer][iWeapon])
				{
					new Handle:sqlQuery;
					sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO weapon_stats (`zp_id`, `weapon`) VALUES ('%d', '%d');", g_user_id[killer], iWeapon);
					
					if(!SQL_Execute(sqlQuery))
						executeQuery(killer, sqlQuery, 51);
					else
						SQL_FreeHandle(sqlQuery);
				}
				else
					g_save_weapons[killer][iWeapon] = 1;
				
				++g_kills_weapons[killer][iWeapon];
				
				if(g_kills_weapons[killer][iWeapon] >= NEED_KILLS_WEAPONS[iWeapon][g_level_weapons[killer][iWeapon]])
				{
					++g_level_weapons[killer][iWeapon];
					++g_skill_weapons[killer][iWeapon][4];
					
					colorChat(killer, _, "%sTu !g%s!y ha subido al !gnivel %d!y", ZP_PREFIX, WEAPON_NAMES[iWeapon], g_level_weapons[killer][iWeapon]);
					
					if(!(g_level_weapons[killer][iWeapon] % 5))
					{
						switch(g_level_weapons[killer][iWeapon])
						{
							case 5: setAchievement(killer, LA_MEJOR_OPCION);
							case 10: setAchievement(killer, UNA_DE_LAS_MEJORES);
							case 15: setAchievement(killer, MI_PREFERIDA);
						}
					}
				}
			}
			else if(iWeapon == CSW_KNIFE)
			{
				++g_stats[victim][KILL_ZOMBIES_KNIFE_T];
				
				if(!g_special_mode[killer])
				{
					++g_stats[killer][KILL_ZOMBIES_KNIFE_D];
					
					if(g_stats[killer][KILL_ZOMBIES_KNIFE_D] >= 1)
					{
						setAchievement(killer, AFILANDO_CUCHILLO);
						
						if(g_stats[killer][KILL_ZOMBIES_KNIFE_D] == 30)
							setAchievement(killer, KILL_ZOMBIES_KNIFE_100);
						else if(!(g_stats[killer][KILL_ZOMBIES_KNIFE_D] % 50))
						{
							switch(g_stats[killer][KILL_ZOMBIES_KNIFE_D])
							{
								case 50: setAchievement(killer, KILL_ZOMBIES_KNIFE_500);
								case 100: setAchievement(killer, KILL_ZOMBIES_KNIFE_1000);
								case 150: setAchievement(killer, KILL_ZOMBIES_KNIFE_5000);
								case 200: setAchievement(killer, KILL_ZOMBIES_KNIFE_10000);
								case 250: setAchievement(killer, KILL_ZOMBIES_KNIFE_50000);
							}
						}
					}
					
					if(getPlaying() >= 15)
					{
						++g_legendaria_zombies_knife[killer];
						
						if(g_legendaria_zombies_knife[killer] == 2)
							setAchievement(killer, LEGENDARIA_CINCO_ZOMBIES);
					}
					
					if(g_nemesis[victim])
					{
						setAchievement(killer, KILL_NEMESIS_KNIFE);
						
						if(getPlaying() >= 15)
							setAchievement(killer, LEGENDARIA_NEMESIS);
					}
				}
			}
			
			addXp(killer, clamp((random_num(5, 20) * g_level_total[victim]), 5, MAX_EXP_PER_KILL_ZOMBIE), 0);
		}
	}
	else
	{
		++g_stats[killer][KILL_HUMANS_D];
		++g_stats[victim][KILL_HUMANS_T];
		
		if(g_mode[MODE_SWARM])
		{
			++g_logros_stats[killer][KILLS_MODE_SWARM];
			
			if(g_logros_stats[killer][KILLS_MODE_SWARM] == 5)
				setAchievement(killer, APLICANDO_MAFIA);
		}
		
		if(g_nemesis[killer])
			++g_nemesis_kill_humans[killer];
		else if(g_annihilator[killer])
		{
			++g_annihilator_kills[killer];
			
			if(g_currentweapon[killer] == CSW_KNIFE)
				++g_logros_stats[killer][ANNIHILATOR_WITH_KNIFE];
			else if(g_currentweapon[killer] == CSW_MAC10)
				++g_logros_stats[killer][ANNIHILATOR_WITH_MAC10];
			
			if(g_anniq_knife[victim] >= 0)
				g_anniq_knife[victim] -= 1000;
		}
		else if(g_alien[killer])
		{
			++g_logros_stats[killer][ALIEN_KILL_HUMANS];
			
			if(g_nodamage[killer])
			{
				++g_logros_stats[killer][ALIEN_KILL_HUMANS_WITH_FURY];
				
				if(g_logros_stats[killer][ALIEN_KILL_HUMANS_WITH_FURY] == 3)
					setAchievement(killer, L_FURIA);
			}
			
			if(g_logros_stats[killer][ALIEN_KILL_HUMANS] == 8)
				setAchievement(killer, ALIEN_ENTRENADO);
			else if(g_logros_stats[killer][ALIEN_KILL_HUMANS] == 12)
				setAchievement(killer, SUPER_ALIEN_86);
		}
		
		addXp(killer, clamp((random_num(1, 10) * g_level_total[victim]), 1, MAX_EXP_PER_KILL_HUMAN), 0);
	}
	
	if(g_special_mode[victim])
	{
		if(!g_annihilator[victim]) {
			addPoints(victim, killer);
		}
		
		if(g_nemesis[victim])
		{
			++g_stats[killer][KILL_NEMESIS_D];
			
			if(g_stats[killer][KILL_NEMESIS_D] == 50)
				setAchievement(killer, NEMESIS_50);
			else if(g_stats[killer][KILL_NEMESIS_D] == 100)
				setAchievement(killer, NEMESIS_100);
			
			if(g_mode[MODE_SYNAPSIS])
			{
				++g_logros_stats[killer][KILL_NEMESIS_IN_SYNAPSIS];
				
				if(g_logros_stats[killer][KILL_NEMESIS_IN_SYNAPSIS] == 3)
					setAchievement(killer, TRIPLETA);
			}
			else if(g_mode[MODE_ARMAGEDDON])
			{
				++g_logros_stats[killer][KILL_NEMESIS_IN_ARMAGEDDON];
				
				if(g_logros_stats[killer][KILL_NEMESIS_IN_ARMAGEDDON] == 5)
					setAchievement(killer, MI_SUERTE_ES_UNICA);
			}
			else if(g_mode[MODE_PLAGUE] && !g_survivor[killer])
			{
				++g_logros_stats[killer][KILL_NEMESIS_IN_PLAGUE];
				
				if(g_logros_stats[killer][KILL_NEMESIS_IN_PLAGUE] == 2)
					setAchievement(killer, Y_EL_SURVIVOR);
			}
		}
		else if(g_survivor[victim])
		{
			++g_stats[killer][KILL_SURVIVOR_D];
			
			if(g_mode[MODE_PLAGUE] && !g_special_mode[killer])
			{
				++g_logros_stats[killer][KILL_SURVIVOR_IN_PLAGUE];
				
				if(g_logros_stats[killer][KILL_SURVIVOR_IN_PLAGUE] == 2)
					setAchievement(killer, Y_EL_NEMESIS);
			}
			
			if(g_stats[killer][KILL_SURVIVOR_D] == 50)
				setAchievement(killer, CAZADOR);
		}
		else if(g_wesker[victim])
		{
			++g_stats[killer][KILL_WESKER_D];
			
			if(g_stats[killer][KILL_WESKER_D] == 30)
				setAchievement(killer, VI_MEJORES);
			
			if(!g_logros_stats[victim][WESKER_NO_DMG])
				setAchievement(victim, DK_BUGUEADA);
			
			g_logros_stats[victim][WESKER_NO_DMG] = 0;
		}
		else if(g_jason[victim])
		{
			++g_stats[killer][KILL_JASON_D];
			
			if(!g_logros_stats[victim][JASON_DAMAGE_S])
				setAchievement(victim, CUCHILLO_QUE_NO_CORTA);
		}
		else if(g_cabezon[victim]) ++g_stats[killer][KILL_CABEZON_D];
		else if(g_alien[victim])
		{
			++g_stats[killer][KILL_ALIEN_D];
			
			if(g_stats[killer][KILL_ALIEN_D] == 50)
				setAchievement(killer, ALIENS);
			
			if(g_mode[MODE_ALVSPRED] && g_predator[killer])
			{
				setAchievement(killer, L_DEPREDADOR);
				
				if(entity_get_float(killer, EV_FL_renderamt) == 0.0)
					setAchievement(killer, MI_HABILIDAD_ES_MEJOR);
			}
		}
		else if(g_predator[victim])
		{
			++g_stats[killer][KILL_PREDATOR_D];
			
			if(g_mode[MODE_ALVSPRED] && g_alien[killer])
			{
				setAchievement(killer, L_ALIENIGENA);
				
				if(g_health[killer] >= g_logros_stats[killer][ALIEN_HEALTH])
					setAchievement(killer, RAPIDO_Y_ALIENOSO);
				
				if(entity_get_float(victim, EV_FL_renderamt) == 0.0)
					setAchievement(killer, NO_TE_VEO_PERO_TE_HUELO);
				
				if(g_nodamage[killer])
					setAchievement(killer, ESTOY_RE_LOCO);
			}
		}
		else if(g_annihilator[victim]) {
			++g_stats[killer][KILL_ANNIHILATOR_D];
			
			new iPF = random_num(1, 3);
			new iPH = random_num(1, 3);
			new iPZ = random_num(1, 3);
			
			colorChat(0, CT, "%s!t%s!y ganó !g%d pH!y, !g%d pZ!y y !g%d pF!y por matar un !gANIQUILADOR!y", ZP_PREFIX, g_playername[killer], iPH, iPZ, iPF);
			
			g_points[killer][CLASS_FRAGMENTOS] += iPF;
			g_points[killer][CLASS_ZOMBIE] += iPZ;
			g_points[killer][CLASS_HUMAN] += iPH;
		}
		else if(g_sniper[victim])
		{
			++g_stats[killer][KILL_SNIPER_D];
			
			if(g_stats[killer][KILL_SNIPER_D] == 15)
				setAchievement(killer, Y_EL_SNIPER);
		}
		
		#if defined CHECK_PRIMERO_QUE_SUERTE
			if(!g_logros_primeros[PRIMERO_QUE_SUERTE] && g_stats[killer][KILL_ALIEN_D] && g_stats[killer][KILL_PREDATOR_D] && g_stats[killer][KILL_JASON_D] && g_stats[killer][KILL_NEMESIS_D] && g_stats[killer][KILL_SURVIVOR_D] && g_stats[killer][KILL_WESKER_D] && g_stats[killer][KILL_SNIPER_D])
				setAchievement__First(killer, PRIMERO_QUE_SUERTE);
		#endif
		
		if(g_stats[killer][KILL_ALIEN_D] && g_stats[killer][KILL_PREDATOR_D] && g_stats[killer][KILL_JASON_D] && g_stats[killer][KILL_NEMESIS_D] && g_stats[killer][KILL_SURVIVOR_D] && g_stats[killer][KILL_WESKER_D] && g_stats[killer][KILL_SNIPER_D])
			setAchievement(killer, QUE_SUERTE);
	}
	
	if(!g_mode[MODE_ARMAGEDDON] && !g_mode[MODE_PLAGUE] && !g_mode[MODE_SYNAPSIS] && !g_mode[MODE_ALVSPRED] && g_special_mode[killer] && (g_lasthuman[victim] || g_lastzombie[victim]))
	{
		static iUsersNum;
		static iClass;
		static iMode;
		
		iUsersNum = getPlaying();
		iClass = 0;
		iMode = g_special_mode[killer];
		
		if(g_lastzombie[victim] && (iMode == MODE_SURVIVOR || iMode == MODE_WESKER || iMode == MODE_JASON))
			iClass = (iMode == MODE_SURVIVOR) ? CLASS_SURVIVOR : CLASS_HUMAN;
		else if(g_lasthuman[victim] && (iMode == MODE_NEMESIS || iMode == MODE_CABEZON || iMode == MODE_ANNIHILATOR || iMode == MODE_GRUNT))
			iClass = (iMode == MODE_NEMESIS) ? CLASS_NEMESIS : CLASS_ZOMBIE;
		
		if(iClass == CLASS_SURVIVOR || iClass == CLASS_NEMESIS)
		{
			new iReward;
			
			g_currentweapon[killer] = CSW_KNIFE;
			
			iReward = g_mult_points[killer] + ((g_dificult[killer][iClass] >= 1) ? (g_dificult[killer][iClass] + 1) : 0);
			g_points[killer][iClass] += iReward;
			
			if(iClass == CLASS_SURVIVOR) {
				g_points[killer][CLASS_HUMAN] += 2;
				colorChat(0, CT, "%s!t%s!y ganó !g%d pHS!y por ganar el modo !gSURVIVOR!y en !g%s!y", ZP_PREFIX, g_playername[killer], iReward, DIFICULT_NAMES[g_dificult[killer][iClass]]);
			} else {
				g_points[killer][CLASS_ZOMBIE] += 2;
				colorChat(0, TERRORIST, "%s!t%s!y ganó !g%d pZN!y por ganar el modo !gNEMESIS!y en !g%s!y", ZP_PREFIX, g_playername[killer], iReward, DIFICULT_NAMES[g_dificult[killer][iClass]]);
			}
			
			if(g_mode[MODE_SURVIVOR])
			{
				if(iUsersNum >= 15)
				{
					if(get_user_health(killer) == g_logros_stats[killer][HEALTH_SURVIVOR])
						setAchievement(killer, NO_ME_TOQUES);
					
					if(iUsersNum >= 20)
					{
						if(g_kill_bomb[killer])
							setAchievement(killer, SIN_BOMBA_DE_ANIQUILACION);
						
						if(g_survivor_kill_zombies[killer] >= 20)
						{
							switch(g_dificult[killer][CLASS_SURVIVOR])
							{
								case DIF_NORMAL: setAchievement(killer, SURVIVOR_NOOB);
								case DIF_DIFICIL: setAchievement(killer, SURVIVOR_AVANZADO);
								case DIF_MUY_DIFICIL:
								{
									setAchievement(killer, SURVIVOR_EXPERTO);
									
									if(g_kill_bomb[killer])
										setAchievement(killer, SURVIVOR_PRO);
								}
							}
						}
					}
				}
			}
			else if(g_mode[MODE_NEMESIS] && iUsersNum >= 20)
			{
				if(g_bazooka[killer] == 15)
					setAchievement(killer, CRATER_SANGRIENTO);
				
				if(g_nemesis_kill_humans[killer] >= 20)
				{
					switch(g_dificult[killer][CLASS_NEMESIS])
					{
						case DIF_NORMAL: setAchievement(killer, NEMESIS_NOOB);
						case DIF_DIFICIL: setAchievement(killer, NEMESIS_AVANZADO);
						case DIF_MUY_DIFICIL:
						{
							setAchievement(killer, NEMESIS_EXPERTO);
							
							if(g_bazooka[killer] == 15)
								setAchievement(killer, NEMESIS_PRO);
						}
					}
				}
			}
		}
		else
		{
			if(!g_mode[MODE_SNIPER])
			{
				if(g_mode[MODE_GRUNT]) {
					new i;
					for(i = 1; i <= g_maxplayers; ++i) {
						if(!g_isalive[i])
							continue;
						
						if(g_grunt[i]) {
							colorChat(0, TERRORIST, "%s!t%s!y ganó !g%d pZ!y por ganar el modo !gGRUNT!y", ZP_PREFIX, g_playername[i], g_mult_points[i]);
							g_points[i][iClass] += g_mult_points[i];
						}
					}
				} else {
					if(!g_mode[MODE_ANNIHILATOR]) {
						colorChat(0, (g_zombie[killer]) ? TERRORIST : CT, "%s!t%s!y ganó !g%d p%s!y por ganar el modo !g%s!y", ZP_PREFIX, g_playername[killer], g_mult_points[killer], (iClass == CLASS_HUMAN) ? "H" : "Z", g_classname[killer]);
						g_points[killer][iClass] += g_mult_points[killer];
					} else {
						colorChat(0, (g_zombie[killer]) ? TERRORIST : CT, "%s!t%s!y ganó !g%d pHZ!y por ganar el modo !gANIQUILADOR!y", ZP_PREFIX, g_playername[killer], g_mult_points[killer]);
						g_points[killer][CLASS_HUMAN] += g_mult_points[killer];
						g_points[killer][CLASS_ZOMBIE] += g_mult_points[killer];
					}
					
					if(iUsersNum >= 20)
					{
						if(g_mode[MODE_JASON])
						{
							setAchievement(killer, JASON);
							
							if(task_exists(killer + TASK_JASON_SPEED))
								setAchievement(killer, SPEED_HACK_DONDE);
						}
						else if(g_mode[MODE_ANNIHILATOR])
							setAchievement(killer, MI_CUCHILLA_Y_YO);
						else if(g_mode[MODE_WESKER])
						{
							setAchievement(killer, MI_DEAGLE_Y_YO);
							
							if(g_health[killer] == g_logros_stats[killer][WESKER_HEALTH])
								setAchievement(killer, L_INTACTO);
						}
					}
				}
			}
			else
			{
				new i;
				new j = 0;
				new k = 0;
				new iSnipers[4] = {0, 0, 0, 0};
				new iReward = 0;
				new iRewardPoints = 0;
				
				for(i = 1; i <= g_maxplayers; ++i)
				{
					if(!g_isconnected[i])
						continue;
					
					if(!g_sniper[i])
						continue;
					
					iSnipers[j] = i;
					
					colorChat(i, CT, "%sGanaste !g%d pH!y por ganar el modo !gSNIPER!y", ZP_PREFIX, g_mult_points[i]);
					g_points[i][CLASS_HUMAN] += g_mult_points[i];
					
					iReward += g_combo[i];
					
					++j;
				}
				
				g_mult_points[0] = 0;
				
				colorChat(0, CT, "%sLos !tSNIPER!y ganaron !g%d !y/!g %d !y/!g %d !y/!g %d pH!y y !g%d EXP!y por ganar el modo !gSNIPER!y", ZP_PREFIX, g_mult_points[iSnipers[0]], g_mult_points[iSnipers[1]], g_mult_points[iSnipers[2]], g_mult_points[iSnipers[3]], iReward);
				
				if(g_sniper_damage >= 500000)
				{
					if(g_sniper_damage >= 1000000)
					{
						if(g_sniper_damage >= 2000000)
						{
							if(g_sniper_damage >= 5000000)
								iRewardPoints = 4;
							else
								iRewardPoints = 3;
						}
						else
							iRewardPoints = 2;
					}
					else
						iRewardPoints = 1;
					
					colorChat(0, CT, "%s!tBONUS:!y !g%d pH!y por realizar mucho daño", ZP_PREFIX, iRewardPoints);
				}
				
				k = 0;
				for(i = 0; i < j; ++i)
				{
					addXp(iSnipers[i], iReward, 0);
					g_points[iSnipers[i]][CLASS_HUMAN] += iRewardPoints;
					
					if(g_isalive[iSnipers[i]])
					{
						setAchievement(iSnipers[i], L_FRANCOTIRADOR);
						++k;
						
						if(!g_logros_stats[iSnipers[i]][SNIPER_NO_DMG])
							setAchievement(iSnipers[i], NO_TENGO_BALAS);
					}
					
					g_logros_stats[iSnipers[i]][SNIPER_NO_DMG] = 0;
				}
				
				switch(k)
				{
					case 1: 
					{
						for(i = 0; i < j; ++i)
						{
							if(g_isalive[iSnipers[i]])
							{
								setAchievement(iSnipers[i], EN_MEMORIA_A_ELLOS);
								break;
							}
						}
					}
					case 2:
					{
						new iAwp = 0;
						new iScout = 0;
						
						for(i = 0; i < j; ++i)
						{
							if(user_has_weapon(iSnipers[i], CSW_AWP))
								++iAwp;
							
							if(user_has_weapon(iSnipers[i], CSW_SCOUT))
								++iScout;
						}
						
						if(iAwp == 2)
						{
							setAchievement(iSnipers[0], SOBREVIVEN_LOS_DUROS);
							setAchievement(iSnipers[1], SOBREVIVEN_LOS_DUROS);
						}
						else if(iScout == 2)
						{
							setAchievement(iSnipers[0], NO_SOLO_LA_GANAN_LOS_DUROS);
							setAchievement(iSnipers[1], NO_SOLO_LA_GANAN_LOS_DUROS);
						}
					}
					case 4:
					{
						setAchievement(iSnipers[0], EL_MEJOR_EQUIPO);
						setAchievement(iSnipers[1], EL_MEJOR_EQUIPO);
						setAchievement(iSnipers[2], EL_MEJOR_EQUIPO);
						setAchievement(iSnipers[3], EL_MEJOR_EQUIPO);
					}
				}
			}
		}
	}
}

public fw_PlayerKilled_Post(const victim, const attacker, const shouldgib)
{
	checkLastZombie();
	
	set_task(random_float(0.7, 2.3), "respawnUser", victim + TASK_SPAWN);
}

public fw_TakeDamage(const victim, const inflictor, const attacker, Float:damage, const damage_type)
{
	if(damage_type & DMG_FALL)
		return HAM_SUPERCEDE;
	
	if(victim == attacker || !is_user_valid_connected(attacker))
		return HAM_IGNORED;
	
	if(g_mode[MODE_DUEL_FINAL])
	{
		static iVictimTeam;
		iVictimTeam = getUserTeam(victim);
		if(iVictimTeam == getUserTeam(attacker))
		{
			setUserTeam(victim, (iVictimTeam == 1) ? 2 : 1);
			ExecuteHamB(Ham_TakeDamage, victim, inflictor, attacker, damage, damage_type);
			setUserTeam(victim, iVictimTeam);
			
			return HAM_SUPERCEDE;
		}
		
		return HAM_IGNORED;
	}
	else if(g_gk_guerra)
	{
		if(((g_glow_color[attacker] == g_gk_glow_color_a || g_gk_glow_color_a == 5) && (g_glow_color[victim] == g_gk_glow_color_v || g_gk_glow_color_v == 5)) ||
		((g_glow_color[attacker] == g_gk_glow_color_v || g_gk_glow_color_v == 5) && (g_glow_color[victim] == g_gk_glow_color_a || g_gk_glow_color_a == 5)))
		{
			static iVictimTeam;
			iVictimTeam = getUserTeam(victim);
			
			if(iVictimTeam == getUserTeam(attacker))
			{
				setUserTeam(victim, (iVictimTeam == 1) ? 2 : 1);
				ExecuteHamB(Ham_TakeDamage, victim, inflictor, attacker, damage, damage_type);
				setUserTeam(victim, iVictimTeam);
				
				return HAM_SUPERCEDE;
			}
			
			return HAM_IGNORED;
		}
	}
	
	if(g_newround || g_endround || g_frozen[attacker])
		return HAM_SUPERCEDE;
	
	if(g_zombie[attacker] == g_zombie[victim])
		return HAM_SUPERCEDE;
	
	if(g_FirstInfect && (g_InBubble[victim] && !g_nodamage[attacker]) && (g_InBubble[victim] && g_zombie[attacker] && !g_special_mode[attacker])) {
		return HAM_SUPERCEDE;
	}
	
	/*if(g_nodamage[victim] && ((!g_nodamage[attacker] && !g_special_mode[attacker]) || g_alien[victim]))
		return HAM_SUPERCEDE;
	
	if(g_nodamage[victim] && g_nodamage[attacker] && !g_zombie[attacker])
		return HAM_SUPERCEDE;*/
	
	if(g_nodamage[victim])
		return HAM_SUPERCEDE;
	
	if(g_cabezon[victim])
	{
		if(get_pdata_int(victim, 75) != HIT_HEAD)
			return HAM_SUPERCEDE;
		
		++g_cabezon_head[attacker];
		++g_cabezon_head_total;
	}
	
	if(!g_zombie[attacker])
	{
		if(g_mode[MODE_ANNIHILATOR]) {
			++g_Annihilator_BalasAcertadas[attacker];
		}
		
		if(get_pdata_int(victim, 75) == HIT_HEAD)
		{
			++g_stats[attacker][HEADSHOTS_D];
			++g_stats[victim][HEADSHOTS_T];
			
			++g_synapsis_head[attacker];
			
			if(g_mode[MODE_ANNIHILATOR])
				++g_anniq_head[attacker];
			
			if(!g_primary_weapon[attacker] && ARMAS_SECUNDARIAS[g_weapon_secondary_actual[attacker]][weaponDamageMult]) {
				++g_PistolHeads[attacker];
			}
		}
		
		if(g_wesker[attacker] || g_jason[attacker] || g_sniper[attacker])
		{
			if(g_wesker[attacker])
			{
				static Float:iHealth;
				iHealth = float(g_health[victim]);
			
				iHealth *= 20.0;
				iHealth /= 100.0;
				
				damage = (iHealth < 20.0) ? 20.0 : iHealth;
				
				g_logros_stats[attacker][WESKER_NO_DMG] = 1;
				
				g_ammos_damage[attacker] += damage;
				
				while(g_ammos_damage[attacker] >= g_ammos_need_damage[attacker])
				{
					++g_ammopacks[attacker];
					g_ammos_damage[attacker] -= g_ammos_need_damage[attacker];
				}
			}
			else if(g_jason[attacker])
			{
				if(!g_hab[attacker][JASON_DAMAGE][CLASS_FRAGMENTOS])
					damage *= (get_user_button(attacker) & IN_ATTACK) ? 250.0 : 200.0;
				else
					damage *= (get_user_button(attacker) & IN_ATTACK) ? 350.0 : 300.0;
				
				g_logros_stats[attacker][JASON_DAMAGE_S] = 1;
				
				g_ammos_damage[attacker] += damage;
				
				while(g_ammos_damage[attacker] >= g_ammos_need_damage[attacker])
				{
					++g_ammopacks[attacker];
					g_ammos_damage[attacker] -= g_ammos_need_damage[attacker];
				}
			}
			else
			{
				if(g_currentweapon[attacker] == CSW_SCOUT)
					damage *= 12.5;
				else if(g_currentweapon[attacker] == CSW_AWP)
					damage *= 150.0;
				
				g_sniper_damage += damage;
				
				g_logros_stats[attacker][SNIPER_NO_DMG] = 1;
			}
			
			if(g_frozen[victim])
			{
				if(g_frozen[victim] == 2)
					damage /= 2.0;
				else
					damage = 0.01;
			}
			
			SetHamParamFloat(4, damage);
			
			static iDamage;
			iDamage = floatround(damage);
			
			g_combo_damage[attacker] += iDamage;
			
			while(g_combo_damage[attacker] >= (g_combo_need_damage[attacker] * (g_combo[attacker] + 1)))
			{
				++g_combo[attacker];
				addXp(attacker, 1, 0);
			}
			
			if((g_wesker[attacker] && g_hab[attacker][WESKER_COMBO][CLASS_FRAGMENTOS]) || (g_jason[attacker] && g_hab[attacker][JASON_COMBO][CLASS_FRAGMENTOS])) {
				showCurrentCombo(attacker, iDamage);
				
				remove_task(attacker + TASK_FINISHCOMBO);
				set_task(5.5, "finishCombo", attacker + TASK_FINISHCOMBO);
			}
			
			return HAM_IGNORED;
		}
		
		damage *= (g_primary_weapon[attacker] == 1) ? ARMAS_PRIMARIAS[g_weapon_primary_actual[attacker]][weaponDamageMult] : (!g_primary_weapon[attacker]) ? ARMAS_SECUNDARIAS[g_weapon_secondary_actual[attacker]][weaponDamageMult] : 1.0;
		damage += ((((!g_special_mode[attacker]) ? (((float(g_hab[attacker][HAB_DAMAGE][CLASS_HUMAN]) + ((g_amuleto_equip[attacker] != -1) ? (float(g_amuleto_stat1[attacker][g_amuleto_equip[attacker]][3])) : 0.0) + float(g_skill_weapons[attacker][g_currentweapon[attacker]][0])) * 10.0) + 
		CLASES_HUMANAS[g_human_class[attacker]][humanDamage]) : (float(g_hab[attacker][HAB_SPEED][CLASS_SURVIVOR]) * 1000.0)) * damage) / 100.0); // HAB_SPEED en SURVIVOR es HAB_DAMAGE!
		
		if(g_reduce_dmg[victim])
			damage /= 2.0;
		
		if(g_frozen[victim])
		{
			if(g_frozen[victim] == 2)
				damage /= 2.0;
			else
				damage = 0.01;
		}
		
		g_damage[attacker][0] += damage / DIV_DAMAGE;
		g_damage[victim][1] += damage / DIV_DAMAGE;
		
		SetHamParamFloat(4, damage);
		
		static iDamage;
		iDamage = floatround(damage);
		
		if(g_currentweapon[attacker] == CSW_KNIFE && g_CountKnifeDamage)
			g_legendaria_knife_damage[attacker] += iDamage;
		
		if(g_in_duelo_official[attacker] && g_mode[MODE_INFECTION])
		{
			g_duelo_stats[attacker][DUELO_DMG_DON_ROUND] += iDamage;
			g_duelo_stats[attacker][DUELO_DMG_DON_MAP] += iDamage;
		}
		
		if(g_mode[MODE_ANNIHILATOR] && g_anniq_knife[attacker] >= 0 && g_currentweapon[attacker] == CSW_KNIFE)
			++g_anniq_knife[attacker];
		
		g_synapsis_damage[attacker] += iDamage;
		
		g_combo_damage[attacker] += iDamage;
		g_ammos_damage[attacker] += damage;
		//g_combo_damage_guild[g_guild_id[attacker]] += iDamage;
		
		if(!g_logros[attacker][SWAT] && g_currentweapon[attacker] == CSW_M4A1)
			g_logros_stats[attacker][DAMAGE_WITH_M4A1] += iDamage;
		
		while(g_combo_damage[attacker] >= (g_combo_need_damage[attacker] * (g_combo[attacker] + 1)))
		{
			++g_combo[attacker];
			addXp(attacker, 1, 0);
			
			++g_combo_guild[g_guild_id[attacker]];
		}
		
		while(g_ammos_damage[attacker] >= g_ammos_need_damage[attacker])
		{
			++g_ammopacks[attacker];
			g_ammos_damage[attacker] -= g_ammos_need_damage[attacker];
		}
		
		showCurrentCombo(attacker, iDamage);
		
		if(!g_mode[MODE_ANNIHILATOR])
		{
			remove_task(attacker + TASK_FINISHCOMBO);
			set_task(5.5, "finishCombo", attacker + TASK_FINISHCOMBO);
		}
		
		if(g_guild[attacker])
			showCurrentComboGuild(attacker);
		
		return HAM_IGNORED;
	}
	
	if(damage_type & DMG_HEGRENADE)
		return HAM_SUPERCEDE;
	
	if(g_nemesis[attacker] || g_alien[attacker] || g_annihilator[attacker])
	{
		if(!g_annihilator[attacker])
			damage += (get_user_button(attacker) & IN_ATTACK) ? 100.0 : 300.0 + ((float(g_hab[attacker][HAB_SPEED][CLASS_NEMESIS]) * damage) / 100.0); // HAB_SPEED en NEMESIS es HAB_DAMAGE!
		else
			damage = 9999.9;
		
		SetHamParamFloat(4, damage);
		return HAM_IGNORED;
	}
	
	static Float:fArmor;
	fArmor = float(get_user_armor(victim));
	
	if(fArmor > 0.0 && !g_firstzombie[attacker])
	{
		damage += ((float(g_hab[attacker][HAB_DAMAGE][CLASS_ZOMBIE]) * 10.0 * damage) / 100.0);
		
		emitSound(victim, CHAN_BODY, g_sound_grunt_hits[1]);
		
		if((fArmor - damage) > 0.0)
		{
			set_user_armor(victim, floatround(fArmor - damage));
			g_stats[attacker][DAMAGE_ARMOR] += floatround(fArmor - damage);
		}
		else
		{
			cs_set_user_armor(victim, 0, CS_ARMOR_NONE);
			g_stats[attacker][DAMAGE_ARMOR] += floatround(fArmor);
		}
		
		return HAM_SUPERCEDE;
	}
	
	if(g_mode[MODE_SWARM] || g_mode[MODE_PLAGUE] || g_mode[MODE_ALVSPRED] || g_mode[MODE_SNIPER] || g_mode[MODE_GAMINGA] || g_special_mode[attacker] || getHumans() == 1)
	{
		damage += ((float(g_hab[attacker][HAB_DAMAGE][CLASS_ZOMBIE]) * 10.0 * damage) / 100.0);
		
		SetHamParamFloat(4, damage);
		return HAM_IGNORED;
	}
	
	zombieMe(victim, attacker, .cortarcombo = 1);
	return HAM_SUPERCEDE;
}

public fw_TakeDamage_Post(const victim)
{
	if(g_zombie[victim])
	{
		if(!g_lastzombie[victim])
			return;
	}
	else if(!g_survivor[victim] && !g_jason[victim] && !g_predator[victim])
		return;
	
	if(pev_valid(victim) != PDATA_SAFE)
		return;
	
	set_pdata_float(victim, OFFSET_PAINSHOCK, 1.0, OFFSET_LINUX);
}

public fw_TraceAttack(const victim, const attacker, const Float:damage, const Float:direction[3], const tracehandle, const damage_type)
{
	if(victim == attacker || !is_user_valid_connected(attacker))
		return HAM_IGNORED;
	
	if(g_mode[MODE_DUEL_FINAL])
	{
		static iVictimTeam;
		iVictimTeam = getUserTeam(victim);
		if(iVictimTeam == getUserTeam(attacker))
		{
			setUserTeam(victim, (iVictimTeam == 1) ? 2 : 1);
			ExecuteHamB(Ham_TraceAttack, victim, attacker, damage, direction, tracehandle, damage_type);
			setUserTeam(victim, iVictimTeam);
			
			return HAM_SUPERCEDE;
		}
		
		return HAM_IGNORED;
	}
	else if(g_gk_guerra)
	{
		if(((g_glow_color[attacker] == g_gk_glow_color_a || g_gk_glow_color_a == 5) && (g_glow_color[victim] == g_gk_glow_color_v || g_gk_glow_color_v == 5)) ||
		((g_glow_color[attacker] == g_gk_glow_color_v || g_gk_glow_color_v == 5) && (g_glow_color[victim] == g_gk_glow_color_a || g_gk_glow_color_a == 5)))
		{
			static iVictimTeam;
			iVictimTeam = getUserTeam(victim);
			if(iVictimTeam == getUserTeam(attacker))
			{
				setUserTeam(victim, (iVictimTeam == 1) ? 2 : 1);
				ExecuteHamB(Ham_TraceAttack, victim, attacker, damage, direction, tracehandle, damage_type);
				setUserTeam(victim, iVictimTeam);
				
				return HAM_SUPERCEDE;
			}
			
			return HAM_IGNORED;
		}
	}
	
	if(g_newround || g_endround || g_frozen[attacker])
		return HAM_SUPERCEDE;
	
	if(g_zombie[attacker] == g_zombie[victim])
		return HAM_SUPERCEDE;
	
	if(g_FirstInfect && (g_InBubble[victim] && !g_nodamage[attacker]) && (g_InBubble[victim] && g_zombie[attacker] && !g_special_mode[attacker])) {
		return HAM_SUPERCEDE;
	}
	
	/*if(g_nodamage[victim] && ((!g_nodamage[attacker] && !g_special_mode[attacker]) || g_alien[victim]))
		return HAM_SUPERCEDE;
	
	if(g_nodamage[victim] && g_nodamage[attacker] && !g_zombie[attacker])
		return HAM_SUPERCEDE;*/
	
	if(g_nodamage[victim])
		return HAM_SUPERCEDE;
	
	return HAM_IGNORED;
}

public fw_ResetMaxSpeed_Post(const id)
{
	if(!is_user_alive(id))
		return;
	
	setUserMaxspeed(id);
}

public fw_UseStationary(const entity, const caller, const activator, const use_type)
{
	if(use_type == USE_USING && is_user_valid_connected(caller) && g_zombie[caller])
		return HAM_SUPERCEDE;
	
	return HAM_IGNORED;
}

public fw_UseStationary_Post(entity, caller, activator, use_type)
{
	if(use_type == USE_STOPPED && is_user_valid_connected(caller))
		replaceWeaponModels(caller, g_currentweapon[caller]);
}

public fw_UsePushable()
	return HAM_SUPERCEDE;

public fw_UseButton(const ent, const id)
{
	if(!ent || id > 32)
		return HAM_IGNORED;
	
	if(!g_isalive[id])
		return HAM_IGNORED;
	
	new sTargetName[32];
	entity_get_string(ent, EV_SZ_target, sTargetName, 31);
	
	if(equal(sTargetName, "boton_01"))
	{
		if(g_eegg_kill_z_round[id] >= 1 && 			// MATAR 1 ZOMBIE EN LA MISMA RONDA QUE HAY QUE TOCAR EL BOTÓN
			g_eegg_kill_z_map[id] >= 10 &&			// MATAR 10 ZOMBIES EN EL MISMO MAPA
			g_eegg_infects_round[id] >= 1 &&	// INFECTAR 1 HUMANO EN LA MISMA RONDA QUE HAY QUE TOCAR EL BOTÓN
			g_eegg_infects_map[id] >= 15 &&			// INFECTAR 15 EN EL MISMO MAPA
			g_eegg_antidote[id] &&				// COMPRAR ANTIDOTO EN LA MISMA RONDA QUE HAY QUE TOCAR EL BOTÓN
			g_eegg_madness[id] >= 1 &&			// COMPRAR 1 FURIA EN LA MISMA RONDA QUE HAY QUE TOCAR EL BOTÓN
			g_eegg_unclip[id] >= 1 &&				// COMPRAR 1 BALAS INFINITAS EN EL MISMO MAPA
			g_eegg_lj[id] >= 1 &&					// COMPRAR 1 LJ EN EL MISMO MAPA
			!g_eegg_global)
		{
			if(!g_logros[id][EASTER_EGG] && g_user_id[id] != 1)
			{
				g_eegg_global = 1;
				setAchievement(id, EASTER_EGG);
				
				message_begin(MSG_BROADCAST, g_message_screenfade);
				write_short(UNIT_SECOND * 4);
				write_short(UNIT_SECOND * 4);
				write_short(FFADE_IN);
				write_byte(255);
				write_byte(255);
				write_byte(255);
				write_byte(150);
				message_end();
				
				message_begin(MSG_BROADCAST, g_message_screenshake);
				write_short(UNIT_SECOND * 14);
				write_short(UNIT_SECOND * 14);
				write_short(UNIT_SECOND * 14);
				message_end();
				
				new iEnt;
				iEnt = -1;
				
				while((iEnt = engfunc(EngFunc_FindEntityByString, iEnt, "classname", "func_door")) != 0)
					entity_set_origin(iEnt, Float:{8192.0, 8192.0, 8192.0});
				
				client_cmd(0, "MP3Volume 1.4");
				client_cmd(0, "mp3 play %s", g_sound_congratz);
			}
		}
	}
	
	if(g_eegg_fake[id][0] && g_eegg_fake[id][1] && !g_eegg_fake_global)
	{
		if(!g_logros[id][EASTER_EGG_FAKE])
		{
			g_eegg_fake_global = 1;
			setAchievement(id, EASTER_EGG_FAKE);
		}
	}
	
	if(equal(sTargetName, "polla"))
		setAchievement(id, EL_VERDULERO);
	
	return HAM_IGNORED;
}

public fw_UseButtonKPUZZLE(const ent, const id)
{
	if(!ent || id > 32)
		return HAM_IGNORED;
	
	if(!g_isalive[id])
		return HAM_IGNORED;
	
	new sTargetName[32];
	entity_get_string(ent, EV_SZ_target, sTargetName, 31);
	
	if(equal(sTargetName, "gaminga") && !g_logros[id][LEGENDARIA_KPUZZLE])
		setAchievement(id, LEGENDARIA_KPUZZLE);
	
	return HAM_IGNORED;
}

public fw_UseButtonKFOX(const ent, const id)
{
	if(!ent || id > 32)
		return HAM_IGNORED;
	
	if(!g_isalive[id])
		return HAM_IGNORED;
		
	if(g_eegg_kill_z_round[id] >= 1 && 			// MATAR 1 ZOMBIE EN LA MISMA RONDA QUE HAY QUE TOCAR EL BOTÓN
		g_eegg_kill_z_map[id] >= 10 &&			// MATAR 10 ZOMBIES EN EL MISMO MAPA
		g_eegg_infects_round[id] >= 1 &&	// INFECTAR 1 HUMANO EN LA MISMA RONDA QUE HAY QUE TOCAR EL BOTÓN
		g_eegg_infects_map[id] >= 15 &&			// INFECTAR 15 EN EL MISMO MAPA
		g_eegg_antidote[id] &&				// COMPRAR ANTIDOTO EN LA MISMA RONDA QUE HAY QUE TOCAR EL BOTÓN
		g_eegg_madness[id] >= 1 &&			// COMPRAR 1 FURIA EN LA MISMA RONDA QUE HAY QUE TOCAR EL BOTÓN
		g_eegg_unclip[id] >= 1 &&				// COMPRAR 1 BALAS INFINITAS EN EL MISMO MAPA
		g_eegg_lj[id] >= 1 &&					// COMPRAR 1 LJ EN EL MISMO MAPA
		!g_eegg_global)
	{
		if(!g_logros[id][EASTER_EGG])
		{
			g_eegg_global = 1;
			setAchievement(id, EASTER_EGG);
			
			message_begin(MSG_BROADCAST, g_message_screenfade);
			write_short(UNIT_SECOND * 4);
			write_short(UNIT_SECOND * 4);
			write_short(FFADE_IN);
			write_byte(255);
			write_byte(255);
			write_byte(255);
			write_byte(150);
			message_end();
			
			message_begin(MSG_BROADCAST, g_message_screenshake);
			write_short(UNIT_SECOND * 14);
			write_short(UNIT_SECOND * 14);
			write_short(UNIT_SECOND * 14);
			message_end();
			
			new iEnt;
			iEnt = -1;
			
			while((iEnt = engfunc(EngFunc_FindEntityByString, iEnt, "classname", "func_door")) != 0)
				entity_set_origin(iEnt, Float:{8192.0, 8192.0, 8192.0});
			
			client_cmd(0, "MP3Volume 1.4");
			client_cmd(0, "mp3 play %s", g_sound_congratz);
		}
	}
	
	if(g_eegg_fake[id][0] && g_eegg_fake[id][1] && !g_eegg_fake_global)
	{
		if(!g_logros[id][EASTER_EGG_FAKE])
		{
			g_eegg_fake_global = 1;
			setAchievement(id, EASTER_EGG_FAKE);
		}
	}
	
	return HAM_IGNORED;
}

public fw_TouchWeapon(const weapon, const id)
{
	if(!is_user_valid_connected(id))
		return HAM_IGNORED;
	
	if(g_zombie[id] || g_special_mode[id])
		return HAM_SUPERCEDE;
	
	return HAM_IGNORED;
}

/*public fw_AddPlayerItem(const id, const weapon_ent)
{
	static iExtraAmmo;
	iExtraAmmo = entity_get_int(weapon_ent, EV_ADDITIONAL_AMMO);
	
	if(iExtraAmmo)
	{
		static iWeaponId;
		iWeaponId = cs_get_weapon_id(weapon_ent);
		
		ExecuteHamB(Ham_GiveAmmo, id, iExtraAmmo, AMMOTYPE[iWeaponId], MAXBPAMMO[iWeaponId]);
		entity_set_int(weapon_ent, EV_ADDITIONAL_AMMO, 0);
	}
}*/

public fw_PlayerPreThink(const id)
{
	if(!g_isalive[id])
		return;
	
	if(g_frozen[id])
	{
		set_user_velocity(id, Float:{0.0, 0.0, 0.0});
		
		/*entity_set_vector(id, EV_VEC_angles, g_frozen_angles[id]);
		entity_set_int(id, EV_INT_fixangle, 1);*/
		
		return;
	}
	
	if(g_zombie[id])
	{
		entity_set_int(id, EV_NADE_TYPE, STEPTIME_SILENT);
		
		if(g_nemesis[id] && g_bazooka[id] && g_bazooka_mode[id] && g_currentweapon[id] == CSW_AK47)
		{
			static vecAimingOrigin[3];
			static Float:fVecAimingOrigin[3];
			
			get_user_origin(id, vecAimingOrigin, 3);
			
			message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
			write_byte(TE_BEAMENTPOINT);
			write_short(id | 0x1000);
			write_coord(vecAimingOrigin[0]);
			write_coord(vecAimingOrigin[1]);
			write_coord(vecAimingOrigin[2]);
			write_short(g_trail_sprite);
			write_byte(1);
			write_byte(1);
			write_byte(1);
			write_byte(5);
			write_byte(0);
			write_byte(255);
			write_byte(0);
			write_byte(0);
			write_byte(255);
			write_byte(25);
			message_end();
			
			fVecAimingOrigin[0] = float(vecAimingOrigin[0]);
			fVecAimingOrigin[1] = float(vecAimingOrigin[1]);
			fVecAimingOrigin[2] = float(vecAimingOrigin[2]);
			
			if(!is_valid_ent(g_bazooka_ent))
				return;
			
			entity_set_float(g_bazooka_ent, EV_FL_scale, 0.3);
			entity_set_int(g_bazooka_ent, EV_INT_spawnflags, SF_SPRITE_STARTON);
			entity_set_int(g_bazooka_ent, EV_INT_solid, SOLID_NOT);
			entity_set_vector(g_bazooka_ent, EV_VEC_origin, fVecAimingOrigin);
			entity_set_float(g_bazooka_ent, EV_FL_framerate, 25.0);
			
			set_rendering(g_bazooka_ent, kRenderFxNone, 255, 0, 0, kRenderTransAdd, 255);
			
			DispatchSpawn(g_bazooka_ent);
		}
		else if(g_bazooka_ent)
		{
			entity_set_vector(g_bazooka_ent, EV_VEC_origin, Float:{8192.0, 8192.0, 8192.0});
			DispatchSpawn(g_bazooka_ent);
		}
	}
	
	if(g_mode[MODE_DUEL_FINAL] || g_mode[MODE_GRUNT] || g_no_semiclip || g_legendaria_kpuzzle)
		return;
	
	static iLastThink;
	static i;
	
	if(iLastThink > id)
	{
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isalive[i])
			{
				g_player_solid[i] = 0;
				continue;
			}
			
			g_player_solid[i] = entity_get_int(i, EV_INT_solid) == SOLID_SLIDEBOX ? 1 : 0;
		}
	}
	
	iLastThink = id;
	
	if(g_player_solid[id])
	{
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_player_solid[i] || id == i)
				continue;
			
			if((g_newround || g_endround) || (!g_zombie[id] && !g_zombie[i]))
			{
				entity_set_int(i, EV_INT_solid, SOLID_NOT);
				g_player_restore[i] = 1;
			}
		}
	}
}

public fw_PlayerPostThink(const id)
{
	if(g_mode[MODE_DUEL_FINAL] || g_mode[MODE_GRUNT] || g_no_semiclip || g_legendaria_kpuzzle)
		return;
	
	if(!g_isalive[id])
		return;

	new i;
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(g_player_restore[i])
		{
			entity_set_int(i, EV_INT_solid, SOLID_SLIDEBOX);
			g_player_restore[i] = 0;
		}
	}
}

public fw_PlayerPreThink_Post(const id)
{
	DisableHamForward(g_iHhCBasePlayerPreThink);

	if(!g_isalive[id])
		respawnUser(id + TASK_SPAWN);
}

public fw_PlayerJump(const id)
{
	if(!g_isalive[id] || !g_longjump[id])
		return HAM_IGNORED;

	static iFlags;
	iFlags = entity_get_int(id, EV_INT_flags);

	if(iFlags & FL_WATERJUMP || entity_get_int(id, EV_INT_waterlevel) >= 2)
		return HAM_IGNORED;

	const OFFSET_ButtonPressed = 246;
	static iButtonPressed;
	
	iButtonPressed = get_pdata_int(id, OFFSET_ButtonPressed, OFFSET_LINUX);

	if(!(iButtonPressed & IN_JUMP) || !(iFlags & FL_ONGROUND))
		return HAM_IGNORED;

	const OFFSET_LongJump = 356;

	if((entity_get_int(id, EV_INT_bInDuck) || iFlags & FL_DUCKING)
	&& get_pdata_int(id, OFFSET_LongJump, OFFSET_LINUX)
	&& entity_get_int(id, EV_INT_button) & IN_DUCK
	&& entity_get_int(id, EV_INT_flDuckTime))
	{
		static Float:vecVelocity[3];
		entity_get_vector(id, EV_VEC_velocity, vecVelocity);
		
		if(vector_length(vecVelocity) > ((g_user_id[id] != 1) ? 20 : 1))
		{
			const OFFSET_Acitvity = 73;
			const OFFSET_IdealActivity = 74;
			const OFFSET_LEAP = 8;

			entity_get_vector(id, EV_FLARE_COLOR, vecVelocity);
			vecVelocity[0] = -5.0;
			entity_set_vector(id, EV_FLARE_COLOR, vecVelocity);

			get_global_vector(GL_v_forward, vecVelocity);
			
			static Float:fSpeed;
			static Float:fHeight;
			
			fSpeed = 576.0;
			fHeight = 310.0;
			
			vecVelocity[0] *= fSpeed;
			vecVelocity[1] *= fSpeed;
			vecVelocity[2] = fHeight;

			entity_set_vector(id, EV_VEC_velocity, vecVelocity);

			set_pdata_int(id, OFFSET_Acitvity, OFFSET_LEAP, OFFSET_LINUX);
			set_pdata_int(id, OFFSET_IdealActivity, OFFSET_LEAP, OFFSET_LINUX);
			
			g_in_longjump[id] = 1;

			entity_set_int(id, EV_INT_oldbuttons, entity_get_int(id, EV_INT_oldbuttons) | IN_JUMP);

			entity_set_int(id, EV_INT_gaitsequence, 7);
			entity_set_float(id, EV_FL_frame, 0.0);

			set_pdata_int(id, OFFSET_ButtonPressed, iButtonPressed & ~IN_JUMP, OFFSET_LINUX);
			
			return HAM_SUPERCEDE;
		}
	}
	
	return HAM_IGNORED;
}

public fw_PlayerDuck(const id)
{
	if(g_in_longjump[id])
	{
		g_in_longjump[id] = 0;
		return HAM_SUPERCEDE;
	}
	
	return HAM_IGNORED;
}

public fw_TouchWallAlien(const ent, const id)
{
	if(!is_user_valid_alive(id) || !pev_valid(id) || !g_alien[id])
		return FMRES_IGNORED;
	
	entity_get_vector(id, EV_VEC_origin, g_alien_origin[id]);
	
	return FMRES_IGNORED;
}

public fw_Weapon_PrimaryAttack_Post(const weapon)
{	
	if(!pev_valid(weapon))
		return HAM_IGNORED;
	
	static id;
	id = get_pdata_cbase(weapon, OFFSET_WEAPONOWNER, OFFSET_LINUX_WEAPONS);
	
	if(!is_user_valid_alive(id))
		return HAM_IGNORED;
	
	if(g_zombie[id])
		return HAM_IGNORED;
	
	if(g_jason[id])
	{
		static Float:vecPunchangle[3];
		static Float:fSpeed;
		
		fSpeed = 0.05;
		vecPunchangle[0] = -4.0;
		
		set_pdata_float(weapon, OFFSET_NEXT_PRIMARY_ATTACK, fSpeed, OFFSET_LINUX_WEAPONS);
		set_pdata_float(weapon, OFFSET_NEXT_SECONDARY_ATTACK, fSpeed, OFFSET_LINUX_WEAPONS);
		set_pdata_float(weapon, OFFSET_TIME_WEAPON_IDLE, fSpeed, OFFSET_LINUX_WEAPONS);
		
		entity_set_vector(id, EV_VEC_punchangle, vecPunchangle);
		
		return HAM_IGNORED;
	}
	else if(g_sniper[id])
	{
		if(g_sniper_power[id] == 1)
		{
			static Float:vecPunchangle[3];
			static Float:fSpeed;
			
			fSpeed = (g_currentweapon[id] == CSW_SCOUT) ? 0.05 : 0.4;
			vecPunchangle[0] = (g_currentweapon[id] == CSW_SCOUT) ? -5.5 : 0.0;
			
			set_pdata_float(weapon, OFFSET_NEXT_PRIMARY_ATTACK, fSpeed, OFFSET_LINUX_WEAPONS);
			set_pdata_float(weapon, OFFSET_NEXT_SECONDARY_ATTACK, fSpeed, OFFSET_LINUX_WEAPONS);
			set_pdata_float(weapon, OFFSET_TIME_WEAPON_IDLE, fSpeed, OFFSET_LINUX_WEAPONS);
			
			entity_set_vector(id, EV_VEC_punchangle, vecPunchangle);
			
			return HAM_IGNORED;
		}
		else if(g_currentweapon[id] == CSW_SCOUT)
		{
			static Float:vecPunchangle[3];
			static Float:fSpeed;
			
			fSpeed = 0.1;
			vecPunchangle[0] = -5.5;
			
			set_pdata_float(weapon, OFFSET_NEXT_PRIMARY_ATTACK, fSpeed, OFFSET_LINUX_WEAPONS);
			set_pdata_float(weapon, OFFSET_NEXT_SECONDARY_ATTACK, fSpeed, OFFSET_LINUX_WEAPONS);
			set_pdata_float(weapon, OFFSET_TIME_WEAPON_IDLE, fSpeed, OFFSET_LINUX_WEAPONS);
			
			entity_set_vector(id, EV_VEC_punchangle, vecPunchangle);
			
			return HAM_IGNORED;
		}
	}
	
	static iWeapon;
	iWeapon = g_currentweapon[id];
	
	if(g_Precission_SemiPerfecta[id]) {
		if(cs_get_weapon_ammo(weapon) < 1)
			return HAM_IGNORED;
		
		static Float:vecPunchangle[3];
		
		entity_get_vector(id, EV_VEC_punchangle, vecPunchangle);
		
		vecPunchangle[0] = vecPunchangle[0] - ((vecPunchangle[0] * 50.0) / 100.0);
		vecPunchangle[1] = vecPunchangle[1] - ((vecPunchangle[1] * 50.0) / 100.0);
		vecPunchangle[2] = vecPunchangle[2] - ((vecPunchangle[2] * 50.0) / 100.0);
		
		entity_set_vector(id, EV_VEC_punchangle, vecPunchangle);
	}
	
	if(g_skill_weapons[id][iWeapon][1] || g_skill_weapons[id][iWeapon][2])
	{
		if(cs_get_weapon_ammo(weapon) < 1)
			return HAM_IGNORED;
		
		static Float:vecPunchangle[3];
		static Float:fSpeed[3];
		
		if(g_skill_weapons[id][iWeapon][2])
		{
			entity_get_vector(id, EV_VEC_punchangle, vecPunchangle);
			
			vecPunchangle[0] = vecPunchangle[0] - (((vecPunchangle[0] * (float(g_skill_weapons[id][iWeapon][2]) * 6.0))) / 100.0);
			vecPunchangle[1] = vecPunchangle[1] - (((vecPunchangle[1] * (float(g_skill_weapons[id][iWeapon][2]) * 6.0))) / 100.0);
			vecPunchangle[2] = vecPunchangle[2] - (((vecPunchangle[2] * (float(g_skill_weapons[id][iWeapon][2]) * 6.0))) / 100.0);
			
			entity_set_vector(id, EV_VEC_punchangle, vecPunchangle);
		}
		
		if(g_skill_weapons[id][iWeapon][1])
		{
			fSpeed[0] = get_pdata_float(weapon, OFFSET_NEXT_PRIMARY_ATTACK, OFFSET_LINUX_WEAPONS);
			fSpeed[1] = get_pdata_float(weapon, OFFSET_NEXT_SECONDARY_ATTACK, OFFSET_LINUX_WEAPONS);
			fSpeed[2] = get_pdata_float(weapon, OFFSET_TIME_WEAPON_IDLE, OFFSET_LINUX_WEAPONS);
			
			fSpeed[0] = fSpeed[0] - (((fSpeed[0] * (float(g_skill_weapons[id][iWeapon][1]) * 5.0))) / 100.0);
			fSpeed[1] = fSpeed[1] - (((fSpeed[1] * (float(g_skill_weapons[id][iWeapon][1]) * 5.0))) / 100.0);
			fSpeed[2] = fSpeed[2] - (((fSpeed[2] * (float(g_skill_weapons[id][iWeapon][1]) * 5.0))) / 100.0);
			
			set_pdata_float(weapon, OFFSET_NEXT_PRIMARY_ATTACK, fSpeed[0], OFFSET_LINUX_WEAPONS);
			set_pdata_float(weapon, OFFSET_NEXT_SECONDARY_ATTACK, fSpeed[1], OFFSET_LINUX_WEAPONS);
			set_pdata_float(weapon, OFFSET_TIME_WEAPON_IDLE, fSpeed[2], OFFSET_LINUX_WEAPONS);
		}
		
		if(g_level_weapons[id][iWeapon] >= 10 && ((1 << iWeapon) & SECONDARY_WEAPONS_BIT_SUM))
			g_pistol_autofire[id] = 1;
	}
	
	return HAM_IGNORED;
}

public fw_Weapon_SecondaryAttack_Post(const weapon)
{	
	if(!pev_valid(weapon))
		return HAM_IGNORED;
	
	static id;
	id = get_pdata_cbase(weapon, OFFSET_WEAPONOWNER, OFFSET_LINUX_WEAPONS);
	
	if(!is_user_valid_alive(id))
		return HAM_IGNORED;
	
	if(!g_jason[id])
		return HAM_IGNORED;
	
	static Float:fSpeed;
	fSpeed = 0.3;
	
	set_pdata_float(weapon, OFFSET_NEXT_PRIMARY_ATTACK, fSpeed, OFFSET_LINUX_WEAPONS);
	set_pdata_float(weapon, OFFSET_NEXT_SECONDARY_ATTACK, fSpeed, OFFSET_LINUX_WEAPONS);
	set_pdata_float(weapon, OFFSET_TIME_WEAPON_IDLE, fSpeed, OFFSET_LINUX_WEAPONS);
	
	static Float:vecPunchangle[3];
	vecPunchangle[0] = -8.5;
	
	entity_set_vector(id, EV_VEC_punchangle, vecPunchangle);
	
	return HAM_IGNORED;
}

public fw_Item_Deploy_Post(const weapon_ent)
{
	static iId;
	iId = getWeaponEntId(weapon_ent);
	
	if(!pev_valid(iId))
		return;
	
	static iWeaponId;
	iWeaponId = cs_get_weapon_id(weapon_ent);
	
	g_currentweapon[iId] = iWeaponId;
	
	g_primary_weapon[iId] = ((1 << iWeaponId) & PRIMARY_WEAPONS_BIT_SUM) ? 1 : ((1 << iWeaponId) & SECONDARY_WEAPONS_BIT_SUM) ? 0 : -1;
	
	if(g_zombie[iId] && !((1<<iWeaponId) & ZOMBIE_ALLOWED_WEAPONS_BITSUM))
	{
		g_currentweapon[iId] = CSW_KNIFE;
		engclient_cmd(iId, "weapon_knife");
	}
	
	replaceWeaponModels(iId, iWeaponId);
	
	/*if(((1<<iWeaponId) & HIDE_WEAPONS_BITSUM) || (g_bazooka[iId] && g_currentweapon[iId] == CSW_AK47)) set_task(0.1, "hideHUDs__Complete", iId + TASK_SPAWN);
	else set_task(0.1, "hideHUDs", iId + TASK_SPAWN);*/
}

public fw_Item_AttachToPlayer(const iEnt, const id)
{
	if(!pev_valid(iEnt))
		return;
	
	static iWeapon;
	iWeapon = get_pdata_int(iEnt, OFFSET_ID, OFFSET_LINUX_WEAPONS);

	if(!g_skill_weapons[id][iWeapon][3])
		return;
	
	if(get_pdata_int(iEnt, OFFSET_KNOWN, OFFSET_LINUX_WEAPONS))
		return;
	
	static iAmmoExtra;
	iAmmoExtra = (2 * g_skill_weapons[id][iWeapon][3]);
	
	set_pdata_int(iEnt, OFFSET_CLIPAMMO, DEFAULT_MAXCLIP[iWeapon] + iAmmoExtra, OFFSET_LINUX_WEAPONS);
}

public fw_Item_PostFrame(const iEnt)
{
	if(!pev_valid(iEnt))
		return;
	
	static id;
	id = get_pdata_cbase(iEnt, OFFSET_WEAPONOWNER, OFFSET_LINUX_WEAPONS);
	
	if(!is_user_valid_alive(id))
		return;
	
	static iWeapon;
	iWeapon = get_pdata_int(iEnt, OFFSET_ID, OFFSET_LINUX_WEAPONS);
	
	if(!g_skill_weapons[id][iWeapon][3])
		return;
	
	static iMaxClip;
	static iReload;
	static Float:fNextAttack;
	static iAmmoType;
	static iBPAmmo;
	static iClip;
	static iButton;
	
	iMaxClip = DEFAULT_MAXCLIP[iWeapon] + (2 * g_skill_weapons[id][iWeapon][3]);
	iReload = get_pdata_int(iEnt, OFFSET_IN_RELOAD, OFFSET_LINUX_WEAPONS);
	fNextAttack = get_pdata_float(id, OFFSET_NEXT_ATTACK, OFFSET_LINUX);
	iAmmoType = OFFSET_AMMO_PLAYER_SLOT0 + get_pdata_int(iEnt, OFFSET_PRIMARY_AMMO_TYPE, OFFSET_LINUX_WEAPONS);
	iBPAmmo = get_pdata_int(id, iAmmoType, OFFSET_LINUX);
	iClip = get_pdata_int(iEnt, OFFSET_CLIPAMMO, OFFSET_LINUX_WEAPONS);
	iButton = entity_get_int(id, EV_INT_button);
	
	if(iReload && fNextAttack <= 0.0)
	{
		static i;
		i = min(iMaxClip - iClip, iBPAmmo);
		
		set_pdata_int(iEnt, OFFSET_CLIPAMMO, iClip + i, OFFSET_LINUX_WEAPONS);
		set_pdata_int(id, iAmmoType, iBPAmmo - i, OFFSET_LINUX);
		set_pdata_int(iEnt, OFFSET_IN_RELOAD, 0, OFFSET_LINUX_WEAPONS);
		
		iReload = 0;
	}
	
	if((iButton & IN_ATTACK && get_pdata_float(iEnt, OFFSET_NEXT_PRIMARY_ATTACK, OFFSET_LINUX_WEAPONS) <= 0.0) || (iButton & IN_ATTACK2 && get_pdata_float(iEnt, OFFSET_NEXT_SECONDARY_ATTACK, OFFSET_LINUX_WEAPONS) <= 0.0))
		return;

	if((iButton & IN_RELOAD) && !iReload)
	{
		if(iClip >= iMaxClip)
		{
			entity_set_int(id, EV_INT_button, iButton & ~IN_RELOAD);
			
			if(((1<<iWeapon) & WEAPONS_SILENT_BIT_SUM) && !get_pdata_int(iEnt, OFFSET_SILENT, OFFSET_LINUX_WEAPONS))
				setAnimation(id, (iWeapon == CSW_USP) ? 8 : 7);
			else
				setAnimation(id, 0);
		}
		else if(iClip == DEFAULT_MAXCLIP[iWeapon])
		{
			if(iBPAmmo)
			{
				set_pdata_float(id, OFFSET_NEXT_ATTACK, DEFAULT_DELAY[iWeapon], OFFSET_LINUX);

				if(((1<<iWeapon) & WEAPONS_SILENT_BIT_SUM) && get_pdata_int(iEnt, OFFSET_SILENT, OFFSET_LINUX_WEAPONS))
					setAnimation(id, (iWeapon == CSW_USP) ? 5 : 4);
				else
					setAnimation(id, DEFAULT_ANIMS[iWeapon]);
				
				set_pdata_int(iEnt, OFFSET_IN_RELOAD, 1, OFFSET_LINUX_WEAPONS);
				set_pdata_float(iEnt, OFFSET_TIME_WEAPON_IDLE, DEFAULT_DELAY[iWeapon] + 0.5, OFFSET_LINUX_WEAPONS);
			}
		}
	}
}

public fw_Shotgun_WeaponIdle(const iEnt)
{
	if(!pev_valid(iEnt))
		return;
	
	static id;
	id = get_pdata_cbase(iEnt, OFFSET_WEAPONOWNER, OFFSET_LINUX_WEAPONS);
	
	if(!is_user_valid_alive(id))
		return;
	
	static iWeapon;
	iWeapon = get_pdata_int(iEnt, OFFSET_ID, OFFSET_LINUX_WEAPONS);
	
	if(!g_skill_weapons[id][iWeapon][3])
		return;
	
	if(get_pdata_float(iEnt, OFFSET_TIME_WEAPON_IDLE, OFFSET_LINUX_WEAPONS) > 0.0)
		return;
	
	static iMaxClip;
	static iClip;
	static iSpecialReload;
	
	iMaxClip = DEFAULT_MAXCLIP[iWeapon] + (2 * g_skill_weapons[id][iWeapon][3]);
	iClip = get_pdata_int(iEnt, OFFSET_CLIPAMMO, OFFSET_LINUX_WEAPONS);
	iSpecialReload = get_pdata_int(iEnt, OFFSET_IN_SPECIAL_RELOAD, OFFSET_LINUX_WEAPONS);

	if(!iClip && !iSpecialReload)
		return;

	if(iSpecialReload)
	{
		static iBPAmmo;
		static iDefaultMaxClip;
		
		iBPAmmo = get_pdata_int(id, OFFSET_M3_AMMO, OFFSET_LINUX);
		iDefaultMaxClip = DEFAULT_MAXCLIP[iWeapon];
		
		if(iClip < iMaxClip && iClip == iDefaultMaxClip && iBPAmmo)
		{
			shotgunReload(iEnt, iWeapon, iMaxClip, iClip, iBPAmmo, id);
			return;
		}
		else if(iClip == iMaxClip && iClip != iDefaultMaxClip)
		{
			setAnimation(id, 4);
			
			set_pdata_int(iEnt, OFFSET_IN_SPECIAL_RELOAD, 0, OFFSET_LINUX_WEAPONS);
			set_pdata_float(iEnt, OFFSET_TIME_WEAPON_IDLE, 1.5, OFFSET_LINUX_WEAPONS);
		}
	}
	
	//return;
}

public fw_Shotgun_PostFrame(const iEnt)
{
	if(!pev_valid(iEnt))
		return;
	
	static id;
	id = get_pdata_cbase(iEnt, OFFSET_WEAPONOWNER, OFFSET_LINUX_WEAPONS);
	
	if(!is_user_valid_alive(id))
		return;
	
	static iWeapon;
	iWeapon = get_pdata_int(iEnt, OFFSET_ID, OFFSET_LINUX_WEAPONS);
	
	if(!g_skill_weapons[id][iWeapon][3])
		return;
	
	static iBPAmmo;
	static iClip;
	static iMaxClip;
	
	iBPAmmo = get_pdata_int(id, OFFSET_M3_AMMO, OFFSET_LINUX);
	iClip = get_pdata_int(iEnt, OFFSET_CLIPAMMO, OFFSET_LINUX_WEAPONS);
	iMaxClip = DEFAULT_MAXCLIP[iWeapon] + (2 * g_skill_weapons[id][iWeapon][3]);
	
	if(get_pdata_int(iEnt, OFFSET_IN_RELOAD, OFFSET_LINUX_WEAPONS) && get_pdata_float(id, OFFSET_NEXT_ATTACK, OFFSET_LINUX) <= 0.0)
	{
		static i;
		i = min((iMaxClip - iClip), iBPAmmo);
		
		set_pdata_int(iEnt, OFFSET_CLIPAMMO, iClip + i, OFFSET_LINUX_WEAPONS);
		set_pdata_int(id, OFFSET_M3_AMMO, iBPAmmo - i, OFFSET_LINUX);
		set_pdata_int(iEnt, OFFSET_IN_RELOAD, 0, OFFSET_LINUX_WEAPONS);
		
		return;
	}

	static iButton;
	iButton = entity_get_int(id, EV_INT_button);
	
	if(iButton & IN_ATTACK && get_pdata_float(iEnt, OFFSET_NEXT_PRIMARY_ATTACK, OFFSET_LINUX_WEAPONS) <= 0.0)
		return;

	if(iButton & IN_RELOAD)
	{
		if(iClip >= iMaxClip)
		{
			entity_set_int(id, EV_INT_button, iButton & ~IN_RELOAD);
			set_pdata_float(iEnt, OFFSET_NEXT_PRIMARY_ATTACK, 0.5, OFFSET_LINUX_WEAPONS);
		}
		else if(iClip == DEFAULT_MAXCLIP[iWeapon] && iBPAmmo)
			shotgunReload(iEnt, iWeapon, iMaxClip, iClip, iBPAmmo, id);
	}
}

/** ==================================================
	[ FIN FORWARDS - HAMSANDWICH ]
================================================== **/

/** ==================================================
	[ FORWARDS - FAKEMETA ]
================================================== **/

public fw_SysError(const error[])
{
	new sMapName[64];
	get_mapname(sMapName, 63);
	
	new sError[512];
	formatex(sError, 511, "FORWARD: FM_Sys_Error | Error: %s | MAPA: %s", (error[0]) ? error : "Ninguno", sMapName);
	
	log_to_file("zp_errores.log", sError);
}

public fw_GameShutdown(const error[])
{
	new sMapName[64];
	get_mapname(sMapName, 63);
	
	new sError[512];
	formatex(sError, 511, "FORWARD: FM_GameShutdown | Error: %s | MAPA: %s", (error[0]) ? error : "Ninguno", sMapName);
	
	log_to_file("zp_errores.log", sError);
}

/*public fw_ServerDeactivate(const error[])
{
	new sMapName[64];
	get_mapname(sMapName, 63);
	
	new sError[512];
	formatex(sError, 511, "FORWARD: FM_ServerDeactivate | Error: %s | MAPA: %s", (error[0]) ? error : "Ninguno", sMapName);
	
	log_to_file("zp_errores.log", sError);
}

public fw_ChangeLevel(const error[])
{
	new sMapName[64];
	get_mapname(sMapName, 63);
	
	new sError[512];
	formatex(sError, 511, "FORWARD: FM_ChangeLevel | Error: %s | MAPA: %s", (error[0]) ? error : "Ninguno", sMapName);
	
	log_to_file("zp_errores.log", sError);
}*/

public fw_ClientDisconnect_Post()
	checkLastZombie();

public fw_ClientKill()
	return FMRES_SUPERCEDE;

public fw_EmitSound(const id, const channel, const sample[], const Float:volume, const Float:attn, const flags, const pitch)
{
	if(sample[0] == 'h' && sample[1] == 'o' && sample[2] == 's' && sample[3] == 't' && sample[4] == 'a' && sample[5] == 'g' && sample[6] == 'e') // HOSTAGE
		return FMRES_SUPERCEDE;
	
	if(sample[10] == 'f' && sample[11] == 'a' && sample[12] == 'l' && sample[13] == 'l') // FALL
		return FMRES_SUPERCEDE;
	
	if(!is_user_valid_connected(id))
		return FMRES_IGNORED;
	
	if(g_jason[id])
	{
		new i;
		for(i = 0; i < sizeof(g_sound_chainsaw); ++i)
		{
			if(equal(sample, g_sound_knife_default[i]))
			{
				emit_sound(id, channel, g_sound_chainsaw[i], 1.0, ATTN_NORM, 0, PITCH_NORM);
				return FMRES_SUPERCEDE;
			}
		}
	}
	
	if(!g_zombie[id])
		return FMRES_IGNORED;
	
	if(sample[7] == 'b' && sample[8] == 'h' && sample[9] == 'i' && sample[10] == 't') // BHIT
	{
		emit_sound(id, channel, g_sound_zombie_pain[random_num(0, charsmax(g_sound_zombie_pain))], volume, attn, flags, pitch);
		return FMRES_SUPERCEDE;
	}
	
	if(sample[8] == 'k' && sample[9] == 'n' && sample[10] == 'i') // KNI
	{
		if(sample[14] == 's' && sample[15] == 'l' && sample[16] == 'a') // SLA
		{
			emit_sound(id, channel, g_sound_zombie_claw_slash[random_num(0, charsmax(g_sound_zombie_claw_slash))], volume, attn, flags, pitch);
			return FMRES_SUPERCEDE;
		}
		
		if(sample[14] == 'h' && sample[15] == 'i' && sample[16] == 't') // HIT
		{
			if(sample[17] == 'w') // WALL
			{
				emit_sound(id, channel, g_sound_zombie_claw_wall[random_num(0, charsmax(g_sound_zombie_claw_wall))], volume, attn, flags, pitch);
				return FMRES_SUPERCEDE;
			}
			else
			{
				emit_sound(id, channel, g_sound_zombie_claw_hit[random_num(0, charsmax(g_sound_zombie_claw_hit))], volume, attn, flags, pitch);
				return FMRES_SUPERCEDE;
			}
		}
		
		if (sample[14] == 's' && sample[15] == 't' && sample[16] == 'a') // STAB
		{
			emit_sound(id, channel, g_sound_zombie_claw_stab, volume, attn, flags, pitch);
			return FMRES_SUPERCEDE;
		}
	}
	
	if(sample[7] == 'd' && ((sample[8] == 'i' && sample[9] == 'e') || (sample[8] == 'e' && sample[9] == 'a'))) // DIE / DEAD
	{
		emit_sound(id, channel, g_sound_zombie_die[random_num(0, charsmax(g_sound_zombie_die))], volume, attn, flags, pitch);
		return FMRES_SUPERCEDE;
	}
	
	return FMRES_IGNORED;
}

public fw_SetClientKeyValue(id, const infobuffer[], const key[])
{
	if (key[0] == 'm' && key[1] == 'o' && key[2] == 'd' && key[3] == 'e' && key[4] == 'l')
		return FMRES_SUPERCEDE;
	
	if(key[0] == 'n' && key[1] == 'a' && key[2] == 'm' && key[3] == 'e')
		return FMRES_SUPERCEDE;
	
	return FMRES_IGNORED;
}

public fw_ClientUserInfoChanged(const id, const buffer)
{
	if(!g_isconnected[id])
		return FMRES_IGNORED;
	
	get_user_name(id, g_playername[id], charsmax(g_playername[]));
	
	static sCurrentModel[32];
	getUserModel(id, sCurrentModel, charsmax(sCurrentModel));
	
	if(!equal(sCurrentModel, g_playermodel[id]) && !task_exists(id + TASK_MODEL))
		setUserModel(id + TASK_MODEL);
	
	static sNewName[32];
	engfunc(EngFunc_InfoKeyValue, buffer, "name", sNewName, charsmax(sNewName));
	
	if(equal(sNewName, g_playername[id]))
		return FMRES_IGNORED;
	
	engfunc(EngFunc_SetClientKeyValue, id, buffer, "name", g_playername[id]);
	client_cmd(id, "name ^"%s^"; setinfo name ^"%s^"", g_playername[id], g_playername[id]);
	
	console_print(id, "[ZP] No podes cambiarte el nombre dentro del servidor");
	
	return FMRES_SUPERCEDE;
}

public fw_SetModel(const entity, const model[])
{
	if(strlen(model) < 8)
		return FMRES_IGNORED;
	
	static sClassName[10];
	entity_get_string(entity, EV_SZ_classname, sClassName, charsmax(sClassName));
	
	if(equal(sClassName, "weaponbox"))
	{
		entity_set_float(entity, EV_FL_nextthink, get_gametime() + 0.01);
		return FMRES_IGNORED;
	}
	
	if(model[7] != 'w' || model[8] != '_')
		return FMRES_IGNORED;
	
	static Float:fDamageTime;
	fDamageTime = entity_get_float(entity, EV_FL_dmgtime);
	
	if(fDamageTime == 0.0)
		return FMRES_IGNORED;
	
	static id;
	id = entity_get_edict(entity, EV_ENT_owner);
	
	if(model[9] == 'h')
	{
		if(g_mode[MODE_DUEL_FINAL])
			return FMRES_IGNORED;
		
		if(g_zombie[id] && g_infection_bomb[id])
		{
			effectGrenade(entity, 0, 255, 0, _, _, NADE_TYPE_INFECTION);
			--g_infection_bomb[id];
			
			replaceWeaponModels(id, CSW_HEGRENADE);
		}
		else if(g_kill_bomb[id])
		{
			effectGrenade(entity, 200, 100, 50, _, _, NADE_TYPE_KILL);
			--g_kill_bomb[id];
			
			replaceWeaponModels(id, CSW_HEGRENADE);
		}
		else if(g_madness_bomb[id])
		{
			effectGrenade(entity, 255, 0, 0, _, _, (!g_madness_bomb_mode[id]) ? NADE_TYPE_MADNESS : NADE_TYPE_NAPALM);
			
			--g_madness_bomb[id];
			
			replaceWeaponModels(id, CSW_HEGRENADE);
			
			if(g_madness_bomb_pro[id])
			{
				--g_madness_bomb_pro[id];
				
				entity_set_model(entity, g_model_madnessbomb_pro[1]);
				return FMRES_SUPERCEDE;
			}
		}
		else
			effectGrenade(entity, 255, 0, 0, _, _, NADE_TYPE_NAPALM);
	}
	else if(model[9] == 'f')
	{
		if(!g_nitro_bomb[id] && !g_supernova_bomb[id])
			effectGrenade(entity, 0, 100, 200, _, _, NADE_TYPE_FROST);
		else if(g_nitro_bomb[id])
		{
			effectGrenade(entity, 0, 125, 250, _, _, NADE_TYPE_NITRO);
			--g_nitro_bomb[id];
			
			entity_set_model(entity, g_model_nitrobomb[1]);
			
			replaceWeaponModels(id, CSW_FLASHBANG);
			
			return FMRES_SUPERCEDE;
		}	
		else if(g_supernova_bomb[id])
		{
			if(!g_supernova_bomb_mode[id])
				effectGrenade(entity, 0, 255, 255, _, _, (!g_supernova_bomb_pro[id]) ? NADE_TYPE_SUPERNOVA : NADE_TYPE_SUPERNOVA_PRO);
			else
				effectGrenade(entity, 0, 125, 250, _, _, NADE_TYPE_NITRO);
			
			--g_supernova_bomb[id];
			--g_supernova_bomb_pro[id];
			
			entity_set_model(entity, g_model_nitrobomb[1]);
			
			replaceWeaponModels(id, CSW_FLASHBANG);
			
			return FMRES_SUPERCEDE;
		}
	}
	else if(model[9] == 's')
	{
		if(g_antidote_bomb[id])
		{
			effectGrenade(entity, 0, 255, 255, _, _, NADE_TYPE_ANTIDOTE);
			--g_antidote_bomb[id];
			
			replaceWeaponModels(id, CSW_SMOKEGRENADE);
		}
		else if(!g_bubble_bomb[id])
			effectGrenade(entity, g_color[id][COLOR_FLARE][RED], g_color[id][COLOR_FLARE][GREEN], g_color[id][COLOR_FLARE][BLUE], _, _, NADE_TYPE_FLARE);
		else
		{
			effectGrenade(entity, g_color[id][COLOR_FLARE][RED], g_color[id][COLOR_FLARE][GREEN], g_color[id][COLOR_FLARE][BLUE], _, _, (!g_bubble_bomb_mode[id]) ? NADE_TYPE_BUBBLE : NADE_TYPE_FLARE);
			--g_bubble_bomb[id];
			
			replaceWeaponModels(id, CSW_SMOKEGRENADE);
			
			if(g_bubble_bomb_pro[id])
			{
				--g_bubble_bomb_pro[id];
				
				entity_set_model(entity, g_model_bubblebomb_pro[1]);
				return FMRES_SUPERCEDE;
			}
		}
	}
	
	return FMRES_IGNORED;
}

public fw_ThinkGrenade(const entity)
{
	if(!pev_valid(entity))
		return HAM_IGNORED;
	
	static Float:fDamageTime;
	static Float:fCurrentTime;
	
	fDamageTime = entity_get_float(entity, EV_FL_dmgtime);
	fCurrentTime = get_gametime();
	
	if(fDamageTime > fCurrentTime)
		return HAM_IGNORED;
	
	switch(entity_get_int(entity, EV_NADE_TYPE))
	{
		case NADE_TYPE_INFECTION:
		{
			infectionExplode(entity);
			return HAM_SUPERCEDE;
		}
		case NADE_TYPE_NAPALM:
		{
			fireExplode(entity);
			return HAM_SUPERCEDE;
		}
		case NADE_TYPE_FROST:
		{
			frostExplode(entity);
			return HAM_SUPERCEDE;
		}
		case NADE_TYPE_FLARE:
		{
			static iDuration;
			iDuration = entity_get_int(entity, EV_FLARE_DURATION);
			
			if(iDuration > 0)
			{
				if(iDuration == 1)
				{
					remove_entity(entity);
					return HAM_SUPERCEDE;
				}
				
				static id;
				id = entity_get_edict(entity, EV_ENT_owner);
				
				flareLighting(entity, iDuration, AMOUNT_FLARE_EXTRA(id) + ((g_amuleto_equip[id] != -1) ? g_amuleto_stat3[id][g_amuleto_equip[id]][3] : 0));
				
				entity_set_int(entity, EV_FLARE_DURATION, --iDuration);
				entity_set_float(entity, EV_FL_dmgtime, fCurrentTime + 2.0);
			}
			else if((get_entity_flags(entity) & FL_ONGROUND) && fm_get_speed(entity) < 10)
			{
				if(g_endround)
					return HAM_SUPERCEDE;
					
				emitSound(entity, CHAN_WEAPON, g_sound_flare);
				
				entity_set_int(entity, EV_FLARE_DURATION, 30);
				entity_set_float(entity, EV_FL_dmgtime, fCurrentTime + 0.1);
			}
			else
				entity_set_float(entity, EV_FL_dmgtime, fCurrentTime + 1.0);
		}
		case NADE_TYPE_KILL:
		{
			killExplode(entity);
			return HAM_SUPERCEDE;
		}
		case NADE_TYPE_MADNESS:
		{
			madnessExplode(entity);
			return HAM_SUPERCEDE;
		}
		case NADE_TYPE_NITRO:
		{
			nitroExplode(entity);
			return HAM_SUPERCEDE;
		}
		case NADE_TYPE_BUBBLE:
		{
			static iDuration;
			iDuration = entity_get_int(entity, EV_FLARE_DURATION);
			
			if(iDuration > 0)
			{
				if(iDuration == 1)
				{
					static Victima, Float:Origin[3], players[33], i, id;
					entity_get_vector( entity, EV_VEC_origin, Origin )
					
					Victima = -1
					i = 0
					
					while( ( Victima = find_ent_in_sphere( Victima, Origin, 145.0 ) ) != 0 )
					{
						if(is_user_alive(Victima))
							players[i++] = Victima;
					}
					
					remove_entity(entity)
					
					for(id = 0; id < i; ++id)
					{
						if(!g_zombie[players[id]]) {
							g_InBubble[players[id]] = 0
						}
					}
					
					return HAM_SUPERCEDE;
				}
				
				if(!(iDuration % 20)) {
					static id;
					id = entity_get_edict(entity, EV_ENT_owner);
					
					flareLighting(entity, iDuration, AMOUNT_FLARE_EXTRA(id) - 7 + ((g_amuleto_equip[id] != -1) ? g_amuleto_stat3[id][g_amuleto_equip[id]][3] : 0));
				}
				
				bubblePush(entity);
				
				entity_set_int(entity, EV_FLARE_DURATION, --iDuration);
				entity_set_float(entity, EV_FL_dmgtime, fCurrentTime + 0.1);
			}
			else if((get_entity_flags(entity) & FL_ONGROUND) && fm_get_speed(entity) < 10)
			{
				emitSound(entity, CHAN_WEAPON, "buttons/button1.wav");
				
				entity_set_model(entity, g_model_bubblebomb[1]);
				
				entity_set_vector(entity, EV_VEC_angles, Float:{0.0, 0.0, 0.0});
				
				static Float:vecColor[3];
				entity_get_vector(entity, EV_FLARE_COLOR, vecColor);
				
				fm_set_rendering(entity, kRenderFxGlowShell, floatround(vecColor[0]), floatround(vecColor[1]), floatround(vecColor[2]), kRenderTransAlpha, 32);
				
				static id;
				id = entity_get_edict(entity, EV_ENT_owner);
				
				entity_set_int(entity, EV_FLARE_DURATION, 120 + (g_hab[id][HUMAN_BUBBLE_DURATION][CLASS_FRAGMENTOS] * 10));
				entity_set_float(entity, EV_FL_dmgtime, fCurrentTime + 0.01);
			}
			else
				entity_set_float(entity, EV_FL_dmgtime, fCurrentTime + 0.5);
		}
		case NADE_TYPE_ANTIDOTE:
		{
			antidoteExplode(entity);
			return HAM_SUPERCEDE;
		}
		case NADE_TYPE_SUPERNOVA:
		{
			superNovaExplode(entity, 0);
			return HAM_SUPERCEDE;
		}
		case NADE_TYPE_SUPERNOVA_PRO:
		{
			superNovaExplode(entity, 1);
			return HAM_SUPERCEDE;
		}
	}
	
	return HAM_IGNORED;
}

public fw_CmdStart(const id, const handle)
{
	if(!g_isalive[id])
		return FMRES_IGNORED;
	
	static iButton;
	iButton = get_uc(handle, UC_Buttons);
	
	if(g_slowdown)
	{
		if(iButton & IN_ATTACK) iButton &= ~IN_ATTACK;
		if(iButton & IN_ATTACK2) iButton &= ~IN_ATTACK2;
		
		set_uc(handle, UC_Buttons, iButton);
		
		return FMRES_SUPERCEDE;
	}
	
	static iOldButton;
	iOldButton = entity_get_int(id, EV_INT_oldbuttons);
	
	if(g_bazooka[id] && g_currentweapon[id] == CSW_AK47 && (g_nemesis[id] || g_annihilator[id]) && !g_endround)
	{
		if(g_hab[id][HAB_GRAVITY][CLASS_NEMESIS] && g_bazooka[id] >= 15 && !g_annihilator[id] && (iButton & IN_ATTACK2) && !(iOldButton & IN_ATTACK2)) // HAB_GRAVITY = BAZOOKA en Nemesis!
		{
			g_bazooka_mode[id] = !g_bazooka_mode[id];
			
			if(g_bazooka_mode[id])
			{
				client_print(id, print_center, "Bazooka: Mini misiles teledirigidos");
				
				if(!g_bazooka_ent)
				{
					g_bazooka_ent = create_entity("env_sprite");
					
					if(!is_valid_ent(g_bazooka_ent))
						return 0;
					
					entity_set_model(g_bazooka_ent, "sprites/animglow01.spr");
					
					entity_set_vector(g_bazooka_ent, EV_VEC_origin, Float:{8192.0, 8192.0, 8192.0});
					
					DispatchSpawn(g_bazooka_ent);
				}
			}
			else
			{
				client_print(id, print_center, "Normal");
				
				remove_entity(g_bazooka_ent);
				g_bazooka_ent = 0;
			}
		}
		else if(!g_bazooka_mode[id] && !g_bazooka_fly && iButton & IN_ATTACK && !(iOldButton & IN_ATTACK))
			fireRocket(id, .mode = 0);
		else if(g_bazooka_mode[id] && iButton & IN_ATTACK && !(iOldButton & IN_ATTACK))
			fireRocket(id, .mode = 1);
	}
	else if(g_laser[id] && g_wesker[id] && (iButton & IN_ATTACK2) && !(iOldButton & IN_ATTACK2))
		fireLASER(id);
	else if(g_alien[id] && (iButton & IN_USE))
	{
		static Float:vecOrigin[3];
		entity_get_vector(id, EV_VEC_origin, vecOrigin);
		
		if(get_distance_f(vecOrigin, g_alien_origin[id]) > 25.0)
			return FMRES_IGNORED;
		
		if(get_entity_flags(id) & FL_ONGROUND)
			return FMRES_IGNORED;
		
		if(iButton & IN_FORWARD)
		{
			static Float:vecVelocity[3];
			velocity_by_aim(id, 350, vecVelocity);
			entity_set_vector(id, EV_VEC_velocity, vecVelocity);
		}
		else if(iButton & IN_BACK)
		{
			static Float:vecVelocity[3];
			velocity_by_aim(id, -350, vecVelocity);
			entity_set_vector(id, EV_VEC_velocity, vecVelocity);
		}
	}
	else if(g_level_weapons[id][g_currentweapon[id]] >= 10 && (iButton & IN_ATTACK) && g_pistol_autofire[id] && ((1<<g_currentweapon[id]) & SECONDARY_WEAPONS_BIT_SUM))
	{
		set_uc(handle, UC_Buttons, iButton & ~IN_ATTACK);
		g_pistol_autofire[id] = 0;
	}
	
	return FMRES_IGNORED;
}

public fw_AddToFullPack_Post(const es, const e, const ent, const host, const host_flags, const player, const player_set)
{	
	if(g_mode[MODE_DUEL_FINAL] || g_mode[MODE_GRUNT] || g_no_semiclip || g_legendaria_kpuzzle)
		return FMRES_IGNORED;
	
	if(player && g_isalive[host] && g_isalive[ent] && !g_zombie[host] && !g_zombie[ent]/* && g_player_solid[host] && g_player_solid[ent]*/)
	{
		set_es(es, ES_Solid, SOLID_NOT);
		
		if(g_human_invis[host])
		{
			set_es(es, ES_RenderMode, kRenderTransTexture);
			set_es(es, ES_RenderAmt, 0);
		}
		else
		{
			set_es(es, ES_RenderMode, kRenderTransAlpha);
			set_es(es, ES_RenderAmt, 50);
		}
	}
	
	return FMRES_IGNORED;
}

public fw_Spawn(const entity)
{
	if(!pev_valid(entity))
		return FMRES_IGNORED;
	
	new const REMOVE_ENTS[][] =	{
		"func_bomb_target", "info_bomb_target", "info_vip_start", "func_vip_safetyzone", "func_escapezone", "hostage_entity", "monster_scientist", "info_hostage_rescue",
		"func_hostage_rescue", "env_rain", "env_snow", "env_fog", "func_vehicle", "info_map_parameters", "func_buyzone", "armoury_entity", "game_text", "func_tank", "func_tankcontrols"
	};
	
	new i;
	new sClassName[32];
	
	entity_get_string(entity, EV_SZ_classname, sClassName, charsmax(sClassName));
	
	for(i = 0; i < sizeof(REMOVE_ENTS); ++i)
	{
		if(equal(sClassName, REMOVE_ENTS[i]))
		{
			remove_entity(entity);
			return FMRES_SUPERCEDE;
		}
	}
	
	return FMRES_IGNORED;
}

public fw_PrecacheSound(const sound[])
{
	if (equal(sound, "hostage", 7))
		return FMRES_SUPERCEDE;
	
	return FMRES_IGNORED;
}

/** ==================================================
	[ FIN FORWARDS - FAKEMETA ]
================================================== **/

/** ==================================================
	[ COMANDOS CLIENTE ]
================================================== **/

public clcmd_MenuSelect(const id)
{
    if(get_pdata_int(id, OFFSET_CSMENUCODE) == 3 && get_pdata_int(id, OFFSET_JOINSTATE) == 4)
        EnableHamForward(g_iHhCBasePlayerPreThink);
}

public clcmd_Nightvision(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(g_nvision[id])
	{
		if(task_exists(id + TASK_NVISION))
			remove_task(id + TASK_NVISION);
		else if(!g_mode[MODE_NEMESIS]) set_task(0.3, "setUserNightvision", id + TASK_NVISION, _, _, "b");
		else set_task(0.1, "setUserNightvision__Nemesis", id + TASK_NVISION, _, _, "b");
	}
	
	return PLUGIN_HANDLED;
}

public clcmd_Block()
	return PLUGIN_HANDLED;
	
public clcmd_BlockSpray()
	return (g_no_buy) ? PLUGIN_CONTINUE : PLUGIN_HANDLED;

public clcmd_Drop(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(g_cabezon[id] && !g_cabezon_power[id])
	{
		if(!(entity_get_int(id, EV_INT_flags) & FL_ONGROUND))
		{
			colorChat(id, _, "%sTenés que estar sobre el suelo para lanzar el poder", ZP_PREFIX);
			return PLUGIN_HANDLED;
		}
		
		g_cabezon_power_global = 1;
		
		g_cabezon_power[id] = 1;
		set_task(60.0, "resetPowerCabezon", id);
		
		set_user_gravity(id, 0.000001);
		client_cmd(id, "+jump;wait;-jump");
		
		emitSound(id, CHAN_VOICE, g_sound_cabezon);
		
		set_task(1.55, "powerCabezon0", id);
		set_task(1.7, "powerCabezon1", id);
		
		return PLUGIN_HANDLED;
	}
	else if(g_alien[id] && !g_alien_power[id])
	{
		g_alien_power[id] = 1;
		
		client_print(0, print_center, "¡El ALIEN desató un FRENESÍ DE LOCURA!");
		
		new i;
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isalive[i])
				continue;
			
			if(!g_zombie[i])
				continue;
			
			if(g_frozen[i])
				continue;
			
			g_nodamage[i] = 1;
			
			remove_task(i + TASK_AURA);
			remove_task(i + TASK_BLOOD);
			
			set_task(0.1, "zombieAura", i + TASK_AURA, _, _, "b");
			set_task(6.0, "madnessOver", i + TASK_BLOOD);
			
			if(random_num(1, 5) == 1)
				emitSound(id, CHAN_VOICE, g_sound_zombie_madness, .pitch = (random_num(50, 200)));
		}
		
		return PLUGIN_HANDLED;
	}
	else if(g_predator[id] && !g_predator_power[id])
	{
		g_predator_power[id] = 1;
		g_nvision[id] = 1;
		
		remove_task(id + TASK_NVISION);
		
		set_task(0.3, "setUserNightvision", id + TASK_NVISION, _, _, "b");
		
		set_user_rendering(id);
		
		remove_task(id + TASK_AURA);
		
		entity_set_int(id, EV_INT_rendermode, kRenderTransAlpha);
		entity_set_float(id, EV_FL_renderamt, 0.0);
		
		client_print(0, print_center, "¡El DEPREDADOR se volvió invisible!");
		
		g_logros_stats[id][PREDATOR_HEALTH_IN_INVIS] = g_health[id];
		
		set_task(15.0, "finishPredatorPower", id);
		
		return PLUGIN_HANDLED;
	}
	else if(g_sniper[id] && !g_sniper_power[id])
	{
		remove_task(id + TASK_AURA);
		
		g_sniper_power[id] = 1;
		g_nvision[id] = 1;
		
		client_print(0, print_center, "¡El SNIPER activó su DISPARO VELOZ!");
		
		set_task(10.0, "finishSniperPower", id);
		set_task(0.1, "sniperPowerAura", id + TASK_AURA, _, _, "b");
		
		return PLUGIN_HANDLED;
	}
	else if(g_grunt[id] && g_grunt_power == 0)
	{
		g_grunt_power = 1;
		
		set_task(0.1, "changeLights");
		return PLUGIN_HANDLED;
	}
	else if(g_hab[id][CHANGE_TYPE_BOMBS][CLASS_FRAGMENTOS] && !g_zombie[id] && !g_mode[MODE_DUEL_FINAL])
	{
		if(g_madness_bomb[id] && g_currentweapon[id] == CSW_HEGRENADE)
		{
			g_madness_bomb_mode[id] = !g_madness_bomb_mode[id];
			client_print(id, print_center, "Modo: %s", (g_madness_bomb_mode[id]) ? "Fuego" : "Locura");
			
			return PLUGIN_HANDLED;
		}
		else if(g_supernova_bomb[id] && g_currentweapon[id] == CSW_FLASHBANG)
		{
			g_supernova_bomb_mode[id] = !g_supernova_bomb_mode[id];
			client_print(id, print_center, "Modo: %s", (g_supernova_bomb_mode[id]) ? "Nitrógeno" : "Supernova");
			
			return PLUGIN_HANDLED;
		}
		else if(g_bubble_bomb[id] && g_currentweapon[id] == CSW_SMOKEGRENADE)
		{
			g_bubble_bomb_mode[id] = !g_bubble_bomb_mode[id];
			client_print(id, print_center, "Modo: %s", (g_bubble_bomb_mode[id]) ? "Luz" : "Bubble");
			
			return PLUGIN_HANDLED;
		}
	}
	
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new Float:vecOrigin[3];
	new Float:vecEndOrigin[3];
	new Float:fFraction;
	new iTraceResult;
	
	entity_get_vector(id, EV_VEC_origin, vecOrigin);
	getDropOrigin(id, vecEndOrigin, 20);
	
	iTraceResult = 0;
	engfunc(EngFunc_TraceLine, vecOrigin, vecEndOrigin, IGNORE_MONSTERS, id, iTraceResult);
	
	get_tr2(iTraceResult, TR_flFraction, fFraction);
	
	if(fFraction == 1.0)
		dropHeadZombie__Violet(id);
	
	return PLUGIN_HANDLED;
}

public clcmd_Changeteam(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(g_user_banned[id])
	{
		showMenuBanned(id);
		return PLUGIN_HANDLED;
	}
	
	if(!g_user_register[id] || !g_user_logged[id])
	{
		showMenuRegisterLogin(id);
		return PLUGIN_HANDLED;
	}
	
	static iTeam;
	iTeam = getUserTeam(id);
	
	if(iTeam == FM_CS_TEAM_SPECTATOR || iTeam == FM_CS_TEAM_UNASSIGNED)
		return PLUGIN_CONTINUE;
	
	showMenuGame(id);
	return PLUGIN_HANDLED;
}

public clcmd_TaringaAtNite(const id)
{
	if(g_isconnected[id])
	{
		colorChat(id, _, "%sDaño necesario para realizar un combo: !g%0.2f!y", ZP_PREFIX, g_combo_need_damage[id]);
		colorChat(id, _, "%sExperiencia: !tx%0.2f!y | Ammo packs: !tx%0.2f!y | Puntos: !tx%d!y", ZP_PREFIX, g_mult_exp[id], g_mult_aps[id], g_mult_points[id]);
	}
	
	return PLUGIN_HANDLED;
}

public clcmd_Invis(const id)
{
	if(g_isconnected[id])
	{
		g_human_invis[id] = !g_human_invis[id];
		colorChat(id, _, "%sAhora tus compañeros humanos son !g%svisibles!y", ZP_PREFIX, (g_human_invis[id]) ? "in" : "");
	}
	
	return PLUGIN_HANDLED;
}

public clcmd_CreatePassword(const id)
{
	if(!g_isconnected[id] || g_user_register[id])
		return PLUGIN_HANDLED;
	
	new sPassword[32];
	
	read_args(sPassword, 31);
	remove_quotes(sPassword);
	trim(sPassword);
	
	if(contain(sPassword, "%") != -1)
	{
		client_print(id, print_center, "Tu contraseña no puede contener el simbolo %%");
		
		clearDHUDs(id);
		
		showMenuRegisterLogin(id);
		return PLUGIN_HANDLED;
	}
	
	new iLenPassword = strlen(sPassword);
	new iLenName = strlen(g_playername[id]);
	
	if(iLenName < 3)
	{
		client_print(id, print_center, "Tu nombre debe tener al menos tres caracteres");
		
		clearDHUDs(id);
		
		showMenuRegisterLogin(id);
		return PLUGIN_HANDLED;
	}
	
	if(iLenPassword < 4)
	{
		client_print(id, print_center, "La contraseña debe tener al menos 4 caracteres");
		
		clearDHUDs(id);
		
		showMenuRegisterLogin(id);
		return PLUGIN_HANDLED;
	}
	else if(iLenPassword > 30)
	{
		client_print(id, print_center, "La contraseña no puede superar los treinta caracteres");
		
		clearDHUDs(id);
		
		showMenuRegisterLogin(id);
		return PLUGIN_HANDLED;
	}
	
	copy(g_user_password[id], 31, sPassword);
	
	client_cmd(id, "messagemode REPETIR_CONTRASENIA");
	
	clearDHUDs(id);
	
	set_dhudmessage(200, 0, 200, -1.0, 0.2, 0, 0.0, 500.0, 1.0, 1.0);
	show_dhudmessage(id, "REPITA LA CONTRASEÑA^nPARA SU CONFIRMACIÓN");
	
	return PLUGIN_HANDLED;
}

public clcmd_RepeatPassword(const id)
{
	if(!g_isconnected[id] || g_user_register[id])
		return PLUGIN_HANDLED;
	
	new sPassword[32];
	
	read_args(sPassword, 31);
	remove_quotes(sPassword);
	trim(sPassword);
	
	if(!equal(g_user_password[id], sPassword))
	{
		g_user_password[id][0] = EOS;
	
		showMenuRegisterLogin(id);
		
		set_dhudmessage(255, 0, 0, -1.0, 0.2, 0, 0.0, 5.0, 1.0, 1.0);
		show_dhudmessage(id, "LA CONTRASEÑA INGRESADA^nNO COINCIDE CON LA ANTERIOR");
		
		return PLUGIN_HANDLED;
	}
	
	clearDHUDs(id);
	
	new sIP[21];
	new sMD5_Password[34];
	
	get_user_ip(id, sIP, 20, 1);
	
	md5(sPassword, sMD5_Password);
	sMD5_Password[6] = EOS;
	
	new Handle:sqlQuery;
	#if defined USE_ORPHEU
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO users (`name`, `password`, `ip`, `last_c`, `hid_register`) VALUES (^"%s^", '%s', '%s', now(), ^"%s^");", g_playername[id], sMD5_Password, sIP, g_user_hid[id]);
	#else
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO users (`name`, `password`, `ip`, `last_c`) VALUES (^"%s^", '%s', '%s', now());", g_playername[id], sMD5_Password, sIP);
	#endif
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 5);
	else
	{
		SQL_FreeHandle(sqlQuery);
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT id FROM users WHERE name=^"%s^";", g_playername[id]);
		if(!SQL_Execute(sqlQuery))
			executeQuery(id, sqlQuery, 6);
		else if(SQL_NumResults(sqlQuery))
		{
			g_user_id[id] = SQL_ReadResult(sqlQuery, 0);
			
			SQL_FreeHandle(sqlQuery);
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO stats (`zp_id`) VALUES ('%d');", g_user_id[id]);
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 7);
			else
			{
				SQL_FreeHandle(sqlQuery);
				
				new sRegisterCount[15];
				addDot(g_user_id[id], sRegisterCount, 14);
				
				if(g_user_id[id] != 100 && g_user_id[id] != 1000 && g_user_id[id] != 5000 && g_user_id[id] != 10000)
					colorChat(0, _, "!g[ZP]!y Bienvenido !g%s!y, eres la cuenta registrada !g#%s!y", g_playername[id], sRegisterCount);
				else
				{
					colorChat(0, _, "!g[ZP]!y Bienvenido !g%s!y, eres la cuenta registrada !g#%s!y", g_playername[id], sRegisterCount);
					colorChat(0, _, "!g[ZP]!y Todos los jugadores conectados ganaron !g10 pHZ!y");
					
					new i;
					for(i = 1; i <= g_maxplayers; i++)
					{
						if(!g_isconnected[i] || !g_user_logged[i])
							continue;
						
						g_points[i][CLASS_HUMAN] += 10;
						g_points[i][CLASS_ZOMBIE] += 10;
					}
				}
				
				g_points[id][CLASS_HUMAN] += 50;
				g_points[id][CLASS_ZOMBIE] += 50;
				
				formatex(g_chat_text[id], 15, " [%s](%d)", LETRAS_RESET[g_rango[id]], g_level[id]);
				
				if(!g_combo_need_damage_fake[id])
					g_combo_need_damage[id] = 1.0;
				
				g_user_register[id] = 1;
				g_user_logged[id] = 1;
				
				g_systime_in[id] = get_systime();
			}
		}
		else
		{
			SQL_FreeHandle(sqlQuery);
			return PLUGIN_HANDLED;
		}
		
		remove_task(id + TASK_SAVE);
		set_task(random_float(300.0, 600.0), "saveTask", id + TASK_SAVE, _, _, "b");
		
		resetInfo(id);
		client_cmd(id, "setinfo zp5 ^"%s^"", sMD5_Password);
		
		client_cmd(id, "chooseteam");
		
		set_dhudmessage(255, 255, 0, -1.0, 0.2, 0, 0.0, 5.0, 1.0, 1.0);
		show_dhudmessage(id, "¡SE HA REGISTRADO EXITOSAMENTE!");
	}
	
	return PLUGIN_HANDLED;
}

public clcmd_EnterPassword(const id)
{
	if(!g_isconnected[id] || !g_user_register[id] || g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sPassword[32];
	new sMD5_Password[34];
	
	read_args(sPassword, 31);
	remove_quotes(sPassword);
	trim(sPassword);
	
	md5(sPassword, sMD5_Password);
	sMD5_Password[6] = EOS;
	
	if(!equal(g_user_password[id], sMD5_Password))
	{
		showMenuRegisterLogin(id);
		
		set_dhudmessage(255, 0, 0, -1.0, 0.2, 0, 0.0, 5.0, 1.0, 1.0);
		show_dhudmessage(id, "LA CONTRASEÑA INGRESADA^nNO COINCIDE CON LA DE ESTA CUENTA");
		
		return PLUGIN_HANDLED;
	}
	
	g_user_logged[id] = 1;
	g_systime_in[id] = get_systime();
	
	resetInfo(id);
	client_cmd(id, "setinfo zp5 ^"%s^"", sMD5_Password);
	
	loadInfo(id);
	
	remove_task(id + TASK_SAVE);
	set_task(random_float(300.0, 600.0), "saveTask", id + TASK_SAVE, _, _, "b");
	
	clearDHUDs(id);
	
	set_task(random_float(3.5, 7.5), "helloDHUD", id + TASK_HELLODHUD);
	
	client_cmd(id, "chooseteam");
	return PLUGIN_HANDLED;
}

public helloDHUD(id)
{
	id -= TASK_HELLODHUD;
	
	if(!g_isconnected[id] || !g_user_logged[id])
		return;
	
	new Handle:sqlQuery;
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT COUNT(id) AS rank FROM users u WHERE (u.lvl_total > (SELECT lvl_total FROM users u2 WHERE u2.id = %d) OR (u.lvl_total = (SELECT lvl_total FROM users u2 WHERE u2.id = %d) AND u.id <= %d)) AND u.id <> 1;", g_user_id[id], g_user_id[id], g_user_id[id]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 52);
	else if(SQL_NumResults(sqlQuery))
	{
		g_rank[id] = SQL_ReadResult(sqlQuery, 0);
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	set_dhudmessage(255, 255, 0, -1.0, 0.4, 0, 0.0, 5.0, 1.0, 1.0);
	show_dhudmessage(id, "BIENVENIDO DE VUELTA %s^nRANGO: %s^nNIVEL %d | RANK %d / %d", g_playername[id], LETRAS_RESET[g_rango[id]], g_level[id], g_rank[id], g_rank_global);
	
	if(g_ammopacks[id] >= 10000)
	{
		setAchievement(id, COLECCIONISTA);
		if(g_ammopacks[id] >= 100000)
		{
			setAchievement(id, AMMO_MACHINE);
			if(g_ammopacks[id] >= 500000)
			{
				setAchievement(id, JUNTANDO);
				
				if(g_ammopacks[id] >= 1000000)
					setAchievement(id, DE_SOBRA);
			}
		}
	}
	
	if(g_damage[id][0] >= 1000.0) // SI EL DIV_DAMAGE ES 1000 HAY QUE SACAR UN 0 EN TODOS
	{
		setAchievement(id, DANIO_100_000);
		if(g_damage[id][0] >= 5000.0)
		{
			setAchievement(id, DANIO_500_000);
			if(g_damage[id][0] >= 10000.0)
			{
				setAchievement(id, DANIO_1_000_000);
				if(g_damage[id][0] >= 50000.0)
				{
					setAchievement(id, DANIO_5_000_000);
					if(g_damage[id][0] >= 250000.0)
					{
						if(g_damage[id][0] >= 500000.0)
						{
							if(g_damage[id][0] >= 1000000.0)
							{
								if(g_damage[id][0] >= 5000000.0)
								{
									if(g_damage[id][0] >= 10000000.0)
									{
										if(g_damage[id][0] >= 50000000.0)
										{
											if(g_damage[id][0] >= 200000000.0)
											{
												if(g_damage[id][0] >= 500000000.0)
												{
													if(g_damage[id][0] >= 1000000000.0)
													{
														if(g_damage[id][0] >= 2147483648.0)
															setAchievement(id, DANIO_EVER);
														else
															setAchievement(id, DANIO_100_000_000_000);
													}
													else
														setAchievement(id, DANIO_50_000_000_000);
												}
												else
													setAchievement(id, DANIO_20_000_000_000);
											}
											else
												setAchievement(id, DANIO_5_000_000_000);
										}
										else
											setAchievement(id, DANIO_1_000_000_000);
									}
									else
										setAchievement(id, DANIO_500_000_000);
								}
								else
									setAchievement(id, DANIO_100_000_000);
							}
							else
								setAchievement(id, DANIO_50_000_000);
						}
						else
							setAchievement(id, DANIO_25_000_000);
					}
				}
			}
		}
	}
	
	if(g_buy_stuff[id])
	{
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT puntosh, puntosz, dinero, diamantes, puntoss, puntosn, ammop FROM compras WHERE zp_id='%d' AND entregado='0';", g_user_id[id]);
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(id, sqlQuery, 100);
		else if(SQL_NumResults(sqlQuery))
		{
			new iPH;
			new iPZ;
			new iPF;
			new iDiamonds;
			new iPS;
			new iPN;
			new iAPs;
			
			while(SQL_MoreResults(sqlQuery))
			{
				iPH = SQL_ReadResult(sqlQuery, 0);
				iPZ = SQL_ReadResult(sqlQuery, 1);
				iPF = SQL_ReadResult(sqlQuery, 2);
				iDiamonds = SQL_ReadResult(sqlQuery, 3);
				iPS = SQL_ReadResult(sqlQuery, 4);
				iPN = SQL_ReadResult(sqlQuery, 5);
				iAPs = SQL_ReadResult(sqlQuery, 6);
				
				g_points[id][CLASS_HUMAN] += iPH;
				g_points[id][CLASS_ZOMBIE] += iPZ;
				g_points[id][CLASS_FRAGMENTOS] += iPF;
				
				g_points[id][CLASS_SURVIVOR] += iPS;
				g_points[id][CLASS_NEMESIS] += iPN;
				
				g_ammopacks[id] += iAPs;
				
				g_diamonds[id] += iDiamonds;
				
				colorChat(id, _, "%sTu compra de !g%d pH!y, !g%d pZ!y, !g%d pS!y, !g%d pN!y, !g%d pF!y, !g%d APs!y y !g%d DIAMANTES!y se acreditó con exito!", ZP_PREFIX, iPH, iPZ, iPS, iPN, iPF, iAPs, iDiamonds);
				
				SQL_NextRow(sqlQuery);
			}
			
			SQL_FreeHandle(sqlQuery);
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET compro='0' WHERE id='%d';", g_user_id[id]);
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 101);
			else
				SQL_FreeHandle(sqlQuery);
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE compras SET entregado='1' WHERE zp_id='%d';", g_user_id[id]);
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 102);
			else
				SQL_FreeHandle(sqlQuery);
			
			g_buy_stuff[id] = 0;
			
			saveInfo(id);
		}
		else
		{
			g_buy_stuff[id] = 0;
			SQL_FreeHandle(sqlQuery);
		}
	}
	
	set_task(random_float(4.5, 7.5), "helloDHUD__2", id + TASK_HELLODHUD);
}

public helloDHUD__2(id)
{
	id -= TASK_HELLODHUD;
	
	if(!g_isconnected[id] || !g_user_logged[id])
		return;
	
	new Handle:sqlQuery;
	if(!g_logros[id][LA_SUERTE_ESTA_DE_MI_LADO])
	{
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT ganancia FROM loteria WHERE nombre = ^"%s^";", g_playername[id]);
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 44);
		else if(SQL_NumResults(sqlQuery))
		{
			new iTimes = 0;
			while(SQL_MoreResults(sqlQuery))
			{
				++iTimes;
				SQL_NextRow(sqlQuery);
			}
			
			SQL_FreeHandle(sqlQuery);
			
			if(iTimes == 2)
				setAchievement(id, LA_SUERTE_ESTA_DE_MI_LADO);
		}
		else
			SQL_FreeHandle(sqlQuery);
	}

	if(g_time_playing[id][2] == 7)
		setAchievement(id, ESTOY_MUY_SOLO);
	else if(g_time_playing[id][2] == 15)
		setAchievement(id, FOREVER_ALONE);
	else if(g_time_playing[id][2] == 30)
		setAchievement(id, CREO_QUE_TENGO_UN_PROBLEMA);
	else if(g_time_playing[id][2] == 50)
		setAchievement(id, SOLO_EL_ZP_ME_ENTIENDE);
	
	if(get_user_flags(id) & ADMIN_RESERVATION)
		setAchievement(id, SOY_DORADO);
	
	if(g_stats[id][DAMAGE_ARMOR] >= 500)
	{
		setAchievement(id, CHALECO_500);
		if(g_stats[id][DAMAGE_ARMOR] >= 2000)
		{
			setAchievement(id, CHALECO_2000);
			if(g_stats[id][DAMAGE_ARMOR] >= 5000)
			{
				if(g_stats[id][DAMAGE_ARMOR] >= 30000)
				{
					if(g_stats[id][DAMAGE_ARMOR] >= 60000)
					{
						if(g_stats[id][DAMAGE_ARMOR] >= 100000)
							setAchievement(id, CHALECO_100000);
						else
							setAchievement(id, CHALECO_60000);
					}
					else
						setAchievement(id, CHALECO_30000);
				}
				else
					setAchievement(id, CHALECO_5000);
			}
		}
	}
	
	if(g_account_vinc[id])
		setAchievement(id, VINCULADO);
	
	if(g_stats[id][HEADSHOTS_D] >= 5000)
	{
		setAchievement(id, HEAD_5000);
		if(g_stats[id][HEADSHOTS_D] >= 15000)
		{
			setAchievement(id, HEAD_15000);
			if(g_stats[id][HEADSHOTS_D] >= 50000)
			{
				setAchievement(id, HEAD_50000);
				if(g_stats[id][HEADSHOTS_D] >= 150000)
				{
					setAchievement(id, HEAD_150K);
					if(g_stats[id][HEADSHOTS_D] >= 300000)
					{
						setAchievement(id, HEAD_300K);
						if(g_stats[id][HEADSHOTS_D] >= 500000)
						{
							setAchievement(id, HEAD_500K);
							if(g_stats[id][HEADSHOTS_D] >= 1000000)
								setAchievement(id, HEAD_1M);
						}
					}
				}
			}
		}
	}
	
	if(g_hab[id][HAB_GRAVITY][CLASS_NEMESIS])
		setAchievement(id, BAZOOKA_PRO);
	
	if(g_level_total[id] >= 100)
	{
		setAchievement(id, NIVEL_100);
		if(g_level_total[id] >= 200)
		{
			setAchievement(id, NIVEL_200);
			if(g_level_total[id] >= 300)
			{
				setAchievement(id, NIVEL_300);
				if(g_level_total[id] >= 400)
				{
					setAchievement(id, NIVEL_400);
					if(g_level_total[id] >= 500)
					{
						setAchievement(id, NIVEL_500);
						if(g_level_total[id] >= 600)
						{
							if(g_level_total[id] >= 700)
							{
								if(g_level_total[id] >= 800)
								{
									if(g_level_total[id] >= 900)
									{
										if(g_level_total[id] >= 1000)
										{
											if(g_level_total[id] >= 1250)
											{
												setAchievement(id, NIVEL_1250);
												if(g_level_total[id] >= 1500)
												{
													setAchievement(id, NIVEL_1500);
													if(g_level_total[id] >= 1750)
													{
														setAchievement(id, NIVEL_1750);
														if(g_level_total[id] >= 2000)
															setAchievement(id, NIVEL_2000);
													}
												}
											}
											else
												setAchievement(id, NIVEL_1000);
										}
										else
											setAchievement(id, NIVEL_900);
									}
									else
										setAchievement(id, NIVEL_800);
								}
								else
									setAchievement(id, NIVEL_700);
							}
							else
								setAchievement(id, NIVEL_600);
						}
					}
				}
			}
		}
	}
	
	if(g_hab[id][JASON_DAMAGE][CLASS_FRAGMENTOS])
		setAchievement(id, MOTOSIERRA_AFILADA);
	
	if(g_hab[id][HAB_DAMAGE][CLASS_HUMAN] == 30)
		setAchievement(id, EL_HUMANO_MAS_FUERTE);
	
	if(g_legendaria_knife_damage[id] >= 1000000)
		setAchievement(id, LEGENDARIA_KNIFE);
	
	/*sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT winppt FROM eventos WHERE zp_id = '%d';", g_user_id[id]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 353);
	else if(SQL_NumResults(sqlQuery))
	{
		new iWins = SQL_ReadResult(sqlQuery, 0);
		
		if(iWins >= 1)
		{
			setAchievement(id, PPT_WIN);
			if(iWins >= 5)
			{
				setAchievement(id, PPT_WIN_5);
				if(iWins >= 15)
				{
					setAchievement(id, PPT_WIN_15);
					if(iWins >= 30)
					{
						setAchievement(id, PPT_WIN_30);
						if(iWins >= 50)
						{
							setAchievement(id, PPT_WIN_50);
							if(iWins >= 100)
							{
								setAchievement(id, PPT_WIN_100);
								if(iWins >= 300)
								{
									setAchievement(id, PPT_WIN_300);
									if(iWins >= 500)
									{
										setAchievement(id, PPT_WIN_500);
										if(iWins >= 1000)
											setAchievement(id, PPT_WIN_1000);
									}
								}
							}
						}
					}
				}
			}
		}
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);*/
}

public clcmd_Say(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(g_mode[MODE_GRUNT])
	{
		if(!g_isalive[id])
		{
			colorChat(id, _, "%sNo podés usar el chat estando muerto en modo !gGrunt!y", ZP_PREFIX);
			return PLUGIN_HANDLED;
		}
	}
	
	static sMsg[191];
	static sMessage[191];
	
	read_args(sMsg, 190);
	remove_quotes(sMsg);
	
	replace_all(sMsg, 190, "%", "");
	replace_all(sMsg, 190, "!y", "");
	replace_all(sMsg, 190, "!t", "");
	replace_all(sMsg, 190, "!g", "");
	
	if(equal(sMsg, "") || sMsg[0] == '/' || sMsg[0] == '@' || sMsg[0] == '!')
		return PLUGIN_HANDLED;
	
	if(g_kiske_on)
		copy(sMessage, 190, sMsg);
	
	static iTeam;
	iTeam = getUserTeam(id);
	
	if(iTeam != FM_CS_TEAM_T && iTeam != FM_CS_TEAM_CT)
	{
		if(g_user_logged[id])
			format(sMsg, 190, "!y(ESPECTADOR)!t %s !y: %s", g_playername[id], sMsg);
		else if(g_user_register[id])
			format(sMsg, 190, "!y(SIN LOGUEARSE)!t %s !y: %s", g_playername[id], sMsg);
		else
			format(sMsg, 190, "!y(SIN REGISTRARSE)!t %s !y: %s", g_playername[id], sMsg);
		
		iTeam = 3;
	}
	else
	{
		format(sMsg, 190, "%s!t%s!g%s!y : %s", (g_isalive[id]) ? "" : "!y*DEAD* ", g_playername[id], g_chat_text[id], sMsg);
	}
	
	if(!g_kiske_on)
		colorChat(0, iTeam, sMsg);
	else
	{
		if(g_chat_mode[id] == CHAT_MODE_NONE)
		{
			static i;
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				if(!g_kiske[i])
					colorChat(i, iTeam, sMsg);
				else
					colorChat(i, iTeam, "%s!t%s!g [%s](%d)!y : %s", (g_isalive[id]) ? "" : "!y*DEAD* ", g_playername[id], LETRAS_RESET[g_rango[id]], g_level[id], sMessage);
			}
		}
		else
			colorChat(0, iTeam, sMsg);
	}
	
	return PLUGIN_HANDLED;
}

public clcmd_SayTeam(const id)
{
	if(g_mode[MODE_GRUNT])
	{
		colorChat(id, _, "%sEste chat está bloqueado durante el modo !gGrunt!y", ZP_PREFIX);
		return PLUGIN_HANDLED;
	}
	
	if(g_guild[id])
	{
		static sMsg[191];
		static sMessage[191];
		
		read_args(sMsg, 190);
		remove_quotes(sMsg);
		
		replace_all(sMsg, 190, "%", "");
		replace_all(sMsg, 190, "!y", "");
		replace_all(sMsg, 190, "!t", "");
		replace_all(sMsg, 190, "!g", "");
		
		if(equal(sMsg, "") || sMsg[0] == '/' || sMsg[0] == '@' || sMsg[0] == '!')
			return PLUGIN_HANDLED;
		
		if(g_kiske_on)
			copy(sMessage, 190, sMsg);
		
		static iTeam;
		iTeam = getUserTeam(id);
		
		if(iTeam != FM_CS_TEAM_T && iTeam != FM_CS_TEAM_CT)
		{
			if(g_user_logged[id])
				format(sMsg, 190, "!y(ESPECTADOR)!t %s !y: %s", g_playername[id], sMsg);
			else if(g_user_register[id])
				format(sMsg, 190, "!y(SIN LOGUEARSE)!t %s !y: %s", g_playername[id], sMsg);
			else
				format(sMsg, 190, "!y(SIN REGISTRARSE)!t %s !y: %s", g_playername[id], sMsg);
		}
		else
		{
			format(sMsg, 190, "%s!t%s !g[%s]!y !g[%s](%d)!y : %s", (g_isalive[id]) ? "" : "!y*DEAD* ", g_playername[id], g_guild_name[g_guild_id[id]], LETRAS_RESET[g_rango[id]], g_level[id], sMsg);
		}
		
		new i;
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
			
			if((get_user_flags(i) & ADMIN_BAN))
				colorChat(i, iTeam, sMsg);
			
			if(g_guild_id[id] == g_guild_id[i] && !(get_user_flags(i) & ADMIN_BAN))
				colorChat(i, iTeam, sMsg);
		}
	}
	
	return PLUGIN_HANDLED;
}

public clcmd_DistanciaVisionNocturna(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	new sText[50];
	
	read_args(sText, 49);
	remove_quotes(sText);
	trim(sText);
	
	if(!containLetters(sText) && countNumbers(sText))
	{
		new iDist = str_to_num(sText);
		if(iDist < 10 || iDist > 255)
		{
			colorChat(id, _, "%sSolo números del !g10 al 255!y", ZP_PREFIX);
			return PLUGIN_HANDLED;
		}
		
		g_distance_nightvision[id] = iDist;
		colorChat(id, _, "%sSi no te gusta como quedó podés volver a cambiarlo. La distancia !gpor defecto es 70!y", ZP_PREFIX);
		
		showMenuConfig(id);
	}
	else
	{
		colorChat(id, _, "%sSolo números del !g10 al 255!y", ZP_PREFIX);
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_HANDLED;
}

public impulse_Flashlight(const id)
{
	if(g_zombie[id])
		return PLUGIN_HANDLED;
	
	if(g_mode[MODE_GRUNT])
		g_grunt_flash[id] = !g_grunt_flash[id];
	
	return PLUGIN_CONTINUE;
}

public touch_GrenadeAll(const grenade, const ent)
{
	if(is_valid_ent(grenade) && isSolid(ent) && !g_mode[MODE_DUEL_FINAL])
	{
		static iNadeType;
		iNadeType = entity_get_int(grenade, EV_NADE_TYPE);
		
		if(iNadeType != NADE_TYPE_FLARE && iNadeType != NADE_TYPE_BUBBLE)
			entity_set_float(grenade, EV_FL_dmgtime, get_gametime() + 0.001);
	}
}

public touch_RocketBazookaAll(const rocket, const ent)
{
	if(is_valid_ent(rocket))
	{
		static iAttacker;
		iAttacker = entity_get_edict(rocket, EV_ENT_owner);
		
		if(!g_isconnected[iAttacker])
		{
			removeRocket(rocket);
			remove_entity(rocket);
			
			g_slowdown = 0;
			g_bazooka_fly = 0;
			
			new i;
			for(i = 0; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				attach_view(i, i);
				
				if(g_isalive[i])
				{
					set_task(0.1, "hideHUDs", i + TASK_SPAWN);
					ExecuteHamB(Ham_Player_ResetMaxSpeed, i);
				}
			}
			
			return;
		}
		
		static iVictim;
		static Float:fRadius;
		static Float:vecOrigin[3];
		//static sClassName[32];
		static iCountVictims;
		
		fRadius = 600.0;
		entity_get_vector(rocket, EV_VEC_origin, vecOrigin);
		
		iVictim = -1;
		iCountVictims = 0;
		
		engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, vecOrigin, 0);
		write_byte(TE_EXPLOSION);
		engfunc(EngFunc_WriteCoord, vecOrigin[0]);
		engfunc(EngFunc_WriteCoord, vecOrigin[1]);
		engfunc(EngFunc_WriteCoord, vecOrigin[2]);
		write_short(g_explo2_sprite);
		write_byte(90);
		write_byte(10);
		write_byte(TE_EXPLFLAG_NOSOUND | TE_EXPLFLAG_NODLIGHTS);
		message_end();
		
		engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, vecOrigin, 0);
		write_byte(TE_WORLDDECAL);
		engfunc(EngFunc_WriteCoord, vecOrigin[0]);
		engfunc(EngFunc_WriteCoord, vecOrigin[1]);
		engfunc(EngFunc_WriteCoord, vecOrigin[2]);
		write_byte(random_num(46, 48));
		message_end();
		
		engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, vecOrigin, 0);
		write_byte(TE_DLIGHT);
		engfunc(EngFunc_WriteCoord, vecOrigin[0]);
		engfunc(EngFunc_WriteCoord, vecOrigin[1]);
		engfunc(EngFunc_WriteCoord, vecOrigin[2]);
		write_byte(150);
		write_byte(g_color[iAttacker][COLOR_BAZOOKA][RED]);
		write_byte(g_color[iAttacker][COLOR_BAZOOKA][GREEN]);
		write_byte(g_color[iAttacker][COLOR_BAZOOKA][BLUE]);
		write_byte(150);
		write_byte(15);
		message_end();
		
		/*if((ent > 0) && is_valid_ent(ent))
		{
			entity_get_string(ent, EV_SZ_classname, sClassName, charsmax(sClassName));
			
			if(equal(sClassName, "player") && is_user_valid_alive(ent) && !g_zombie[ent])
				ExecuteHamB(Ham_Killed, ent, iAttacker, 2);
		}*/
		
		client_cmd(0, "stopsound");
		playSound(0, g_sound_bazooka[random_num(1, 2)]);
		
		if(g_nemesis[iAttacker])
		{
			while((iVictim = find_ent_in_sphere(iVictim, vecOrigin, fRadius)) != 0)
			{
				/*if(!is_user_valid_alive(iVictim))
				{
					entity_get_string(iVictim, EV_SZ_classname, sClassName, charsmax(sClassName));
				
					if(equal(sClassName, "func_breakable"))
						force_use(rocket, iVictim);
					
					continue;
				}*/
				
				if(!is_user_valid_connected(iVictim))
					continue;
				
				attach_view(iVictim, iVictim);
				
				if(!g_isalive[iVictim])
					continue;
				
				if(g_zombie[iVictim])
					continue;
				
				ExecuteHamB(Ham_Killed, iVictim, iAttacker, 2);
				++iCountVictims;
			}
		}
		else
		{
			while((iVictim = find_ent_in_sphere(iVictim, vecOrigin, fRadius)) != 0)
			{
				/*if(!is_user_valid_alive(iVictim))
				{
					entity_get_string(iVictim, EV_SZ_classname, sClassName, charsmax(sClassName));
				
					if(equal(sClassName, "func_breakable"))
						force_use(rocket, iVictim);
					
					continue;
				}*/
				
				if(!is_user_valid_alive(iVictim))
					continue;
				
				if(g_zombie[iVictim])
					continue;
				
				ExecuteHamB(Ham_Killed, iVictim, iAttacker, 1);
				++iCountVictims;
			}
		}
		
		if(g_nemesis[iAttacker])
		{
			if(iCountVictims >= 20)
				setAchievement(iAttacker, LA_EXPLOSION_SI_MATA);
			else if(!iCountVictims)
				setAchievement(iAttacker, LA_EXPLOSION_NO_MATA);
		}
		else
		{
			g_logros_stats[iAttacker][ANNIHILATOR_WITH_BAZOOKA] += iCountVictims;
			
			if(!getHumans())
				setAchievement(iAttacker, OOPS_MATE_A_TODOS);
		}
		
		removeRocket(rocket);
		remove_entity(rocket);
		
		g_bazooka_fly = 0;
		g_slowdown = 0;
		
		new i;
		for(i = 0; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
			
			attach_view(i, i);
			
			message_begin(MSG_ONE_UNRELIABLE, g_message_screenfade, _, i);
			write_short(UNIT_SECOND * 3);
			write_short(UNIT_SECOND * 3);
			write_short(FFADE_IN);
			write_byte(g_color[iAttacker][COLOR_BAZOOKA][RED]);
			write_byte(g_color[iAttacker][COLOR_BAZOOKA][GREEN]);
			write_byte(g_color[iAttacker][COLOR_BAZOOKA][BLUE]);
			write_byte(200);
			message_end();
			
			message_begin(MSG_ONE_UNRELIABLE, g_message_screenshake, _, i);
			write_short(UNIT_SECOND * 14);
			write_short(UNIT_SECOND * 14);
			write_short(UNIT_SECOND * 14);
			message_end();
			
			if(g_isalive[i])
			{
				set_task(0.1, "hideHUDs", i + TASK_SPAWN);
				ExecuteHamB(Ham_Player_ResetMaxSpeed, i);
			}
		}
	}
}

public touch_RocketBazooka__MiniAll(const rocket, const ent)
{
	if(is_valid_ent(rocket))
	{
		static iVictim;
		static iAttacker;
		static Float:fDamage;
		static Float:fDistance;
		static Float:fRadius;
		static Float:vecOrigin[3];
		static sClassName[32];
		
		iAttacker = entity_get_edict(rocket, EV_ENT_owner);
		
		if(!g_isconnected[iAttacker])
		{
			removeRocket(rocket);
			remove_entity(rocket);
			
			--g_bazooka_fly;
			
			new i;
			for(i = 0; i <= g_maxplayers; ++i)
			{
				if(g_isalive[i])
					ExecuteHamB(Ham_Player_ResetMaxSpeed, i);
			}
			
			return;
		}
		
		fRadius = 100.0;
		entity_get_vector(rocket, EV_VEC_origin, vecOrigin);
		
		iVictim = -1;
		
		engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, vecOrigin, 0);
		write_byte(TE_EXPLOSION);
		engfunc(EngFunc_WriteCoord, vecOrigin[0]);
		engfunc(EngFunc_WriteCoord, vecOrigin[1]);
		engfunc(EngFunc_WriteCoord, vecOrigin[2]);
		write_short(g_explo2_sprite);
		write_byte(20);
		write_byte(10);
		write_byte(TE_EXPLFLAG_NOSOUND | TE_EXPLFLAG_NODLIGHTS);
		message_end();
		
		engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, vecOrigin, 0);
		write_byte(TE_DLIGHT);
		engfunc(EngFunc_WriteCoord, vecOrigin[0]);
		engfunc(EngFunc_WriteCoord, vecOrigin[1]);
		engfunc(EngFunc_WriteCoord, vecOrigin[2]);
		write_byte(25);
		write_byte(255);
		write_byte(255);
		write_byte(255);
		write_byte(150);
		write_byte(15);
		message_end();
		
		if((ent > 0) && is_valid_ent(ent))
		{
			entity_get_string(ent, EV_SZ_classname, sClassName, charsmax(sClassName));
			
			if(equal(sClassName, "player") && is_user_valid_alive(ent) && !g_zombie[ent])
				ExecuteHamB(Ham_Killed, ent, iAttacker, 2);
		}
		
		emitSound(rocket, CHAN_WEAPON, g_sound_bazooka[4]);
		
		while((iVictim = find_ent_in_sphere(iVictim, vecOrigin, fRadius)) != 0)
		{
			if(!is_user_valid_alive(iVictim))
			{
				entity_get_string(iVictim, EV_SZ_classname, sClassName, charsmax(sClassName));
			
				if(equal(sClassName, "func_breakable"))
					force_use(rocket, iVictim);
				
				continue;
			}
			
			if(g_zombie[iVictim] && iVictim != iAttacker)
				continue;
			
			fDistance = entity_range(rocket, iVictim);
			fDamage = floatsub(2500.0, floatmul(floatdiv(2500.0, fRadius), fDistance)); // 1 = MAX DAMAGE
			
			if(fDamage > 0)
			{
				if(g_health[iVictim] <= fDamage) ExecuteHamB(Ham_Killed, iVictim, iAttacker, 2);
				else ExecuteHam(Ham_TakeDamage, iVictim, rocket, iAttacker, fDamage, DMG_BLAST);
			}
		}
		
		removeRocket(rocket);
		remove_entity(rocket);
		
		--g_bazooka_fly;
		
		new i;
		for(i = 0; i <= g_maxplayers; ++i)
		{
			if(g_isalive[i])
				ExecuteHamB(Ham_Player_ResetMaxSpeed, i);
			
		}
		
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isalive[i])
				continue;
			
			if(g_bazooka_follow[i])
			{
				g_bazooka_follow[i] = 0;
				break;
			}
		}
	}
}

/*public touch_GiftZombiePlayer(const head, const id)
{
	if(!is_valid_ent(head) || !g_isalive[id])
		return PLUGIN_CONTINUE;
	
	if(g_zombie[id])
		return PLUGIN_CONTINUE;
	
	if(g_speed_head > 300 && checkAccess(id))
		return PLUGIN_CONTINUE;
		
	new Float:fCurrentTime;
	fCurrentTime = halflife_time();
	
	if(fCurrentTime - g_head_zombie_lasttouch[id] < 2.5)
		return PLUGIN_CONTINUE;
		
	g_head_zombie_lasttouch[id] = fCurrentTime;
	
	++g_gift[id];
	colorChat(id, _, "%sAgarraste un regalo!", ZP_PREFIX);
	
	switch(g_gift[id])
	{
		case 1: setAchievement(id, GIFT_1);
		case 25: setAchievement(id, GIFT_25);
		case 50: setAchievement(id, GIFT_50);
		case 100: setAchievement(id, GIFT_100);
		case 200: setAchievement(id, GIFT_200);
		case 500: setAchievement(id, GIFT_500);
		case 1000: setAchievement(id, GIFT_1000);
	}
	
	#if defined CHECK_PRIMERO_GIFT_10
		if(!g_logros_primeros[PRIMERO_GIFT_10] && g_gift[id] == 10)
			setAchievement__First(id, PRIMERO_GIFT_10);
	#endif
	
	#if defined CHECK_PRIMERO_GIFT_100
		if(!g_logros_primeros[PRIMERO_GIFT_100] && g_gift[id] == 100)
			setAchievement__First(id, PRIMERO_GIFT_100);
	#endif
	
	g_head_zombie_lasttouch[id] = 0.0;
	
	emit_sound(head, CHAN_VOICE, "items/ammopickup1.wav", 1.0, ATTN_NORM, 0, PITCH_NORM);
	
	remove_entity(head);
	
	return PLUGIN_CONTINUE;
}*/

public touch_HeadZombiePlayer(const head, const id)
{
	if(!is_valid_ent(head) || !g_isalive[id])
		return PLUGIN_CONTINUE;
	
	if(g_zombie[id])
		return PLUGIN_CONTINUE;
	
	if(g_speed_head > 300 && checkAccess(id))
		return PLUGIN_CONTINUE;
		
	new Float:fCurrentTime;
	fCurrentTime = halflife_time();
	
	if(fCurrentTime - g_head_zombie_lasttouch[id] < 2.5)
		return PLUGIN_CONTINUE;
		
	g_head_zombie_lasttouch[id] = fCurrentTime;
	
	new iHeadColor;
	iHeadColor = entity_get_edict(head, EV_ENT_euser4);
	
	++g_head_zombie[id][iHeadColor];
	colorChat(id, _, "%sAgarraste una cabeza zombie %s", ZP_PREFIX, HEAD_ZOMBIES_NAMES[iHeadColor]);
	
	if(g_head_zombie[id][0] == 100)
		setAchievement(id, HEAD_100_RED);
		
	if(g_head_zombie[id][1] == 75)
		setAchievement(id, HEAD_75_GREEN);
		
	if(g_head_zombie[id][2] == 50)
		setAchievement(id, HEAD_50_BLUE);
		
	if(g_head_zombie[id][3] == 25)
		setAchievement(id, HEAD_25_YELLOW);
		
	if(g_head_zombie[id][4] == 10)
		setAchievement(id, HEAD_10_WHITE);
	
	#if defined CHECK_PRIMERO_COLORIDO
		if(!g_logros_primeros[PRIMERO_COLORIDO] && g_head_zombie[id][0] && g_head_zombie[id][1] && g_head_zombie[id][2] && g_head_zombie[id][3] && g_head_zombie[id][4])
			setAchievement__First(id, PRIMERO_COLORIDO);
	#endif
	
	if(g_head_zombie[id][0] && g_head_zombie[id][1] && g_head_zombie[id][2] && g_head_zombie[id][3] && g_head_zombie[id][4])
	{
		setAchievement(id, COLORIDO);
		
		if(g_head_zombie[id][4] >= 100 && g_head_zombie[id][3] >= 100 && g_head_zombie[id][2] >= 100 && g_head_zombie[id][0] >= 100 && g_head_zombie[id][1] >= 100)
			setMetaAchievement(id, HEAD_MULTICOLOR);
	}
	
	g_head_zombie_lasttouch[id] = 0.0;
	
	emit_sound(head, CHAN_VOICE, "items/ammopickup1.wav", 1.0, ATTN_NORM, 0, PITCH_NORM);
	
	remove_entity(head);
	
	return PLUGIN_CONTINUE;
}

public touch_HeadZombieSmallPlayer(const head, const id)
{
	if(!is_valid_ent(head) || !g_isalive[id])
		return PLUGIN_CONTINUE;
	
	if(g_zombie[id])
		return PLUGIN_CONTINUE;
		
	new Float:fCurrentTime;
	fCurrentTime = halflife_time();
	
	if(fCurrentTime - g_head_zombie_lasttouch[id] < 2.5)
		return PLUGIN_CONTINUE;
		
	g_head_zombie_lasttouch[id] = fCurrentTime;
	
	++g_head_zombie[id][HEAD_VIOLET_SMALL];
	colorChat(id, _, "%sAgarraste una cabeza zombie %s", ZP_PREFIX, HEAD_ZOMBIES_NAMES[HEAD_VIOLET_SMALL]);
	
	g_head_zombie_lasttouch[id] = 0.0;
	
	emit_sound(head, CHAN_VOICE, "items/ammopickup1.wav", 1.0, ATTN_NORM, 0, PITCH_NORM);
	
	remove_entity(head);
	
	return PLUGIN_CONTINUE;
}

/*public touch_BubblePlayer(const bubble, const id)
{
	if(!is_valid_ent(bubble) || !g_isalive[id])
		return;
	
	if(!g_zombie[id])
		return;
	
	if(g_special_mode[id])
		return;
	
	if(g_zombie[id] && g_nodamage[id])
		return;
	
	static Float:vecBubbleOrigin[3];
	static Float:vecOrigin[3];
	static Float:fDistance;
	
	entity_get_vector(bubble, EV_VEC_origin, vecBubbleOrigin);
	entity_get_vector(id, EV_VEC_origin, vecOrigin);
	
	fDistance = get_distance_f(vecBubbleOrigin, vecOrigin);
	
	xs_vec_sub(vecOrigin, vecBubbleOrigin, vecOrigin);
	xs_vec_normalize(vecOrigin, vecOrigin);
	xs_vec_mul_scalar(vecOrigin, (fDistance - get_pcvar_float(g_pCVAR_Test[0])) * get_pcvar_num(g_pCVAR_Test[1]), vecOrigin);
	
	entity_set_vector(id, EV_VEC_velocity, vecOrigin);
}*/

// public concmd_Kick(const id, const level, const cid)
// {
	// if(!cmd_access(id, level, cid, 2))
		// return PLUGIN_HANDLED;
	
	// new sArg1[32];
	// new iUser = -1;
	// new i;
	
	// read_argv(1, sArg1, 31);
	
	// for(i = 1; i <= g_maxplayers; ++i)
	// {
		// if(!g_isconnected[i])
			// continue;
		
		// if(equal(g_playername[i], sArg1))
		// {
			// iUser = i;
			// break;
		// }
	// }
	
	// if(iUser == -1)
	// {
		// if(get_user_flags(id) & ADMIN_LEVEL_A)
			// iUser = cmd_target(id, sArg1, CMDTARGET_ALLOW_SELF);
		// else
			// iUser = cmd_target(id, sArg1, CMDTARGET_OBEY_IMMUNITY);
	// }
	
	// if(!iUser)
	// {
		// console_print(id, "El usuario indicado no existe");
		// return PLUGIN_HANDLED;
	// }
	// else if(iUser == id && !(get_user_flags(id) & ADMIN_LEVEL_A))
	// {
		// console_print(id, "No te podes expulsar vos mismo");
		// return PLUGIN_HANDLED;
	// }
	// else if((get_user_flags(iUser) & ADMIN_LEVEL_A) && iUser != id && !(get_user_flags(id) & ADMIN_RCON))
	// {
		// console_print(id, "No podes expulsar a un miembro del Staff");
		// return PLUGIN_HANDLED;
	// }
	
	// new iUserId;
	// new sReason[32];
	
	// iUserId = get_user_userid(iUser);
	
	// read_argv(2, sReason, 31);
	// remove_quotes(sReason);
	
	// colorChat(0, _, "%s!g%s!y expulsó a !g%s!y - Razón: [!g%s!y]", ZP_PREFIX, g_playername[id], g_playername[iUser], (sReason[0]) ? sReason : " - ");
	// console_print(id, "[GAM!NGA] Usuario: ^"%s^" ha sido expulsado", g_playername[iUser]);
	
	// if(!is_user_bot(iUser))
	// {
		// if(sReason[0])
			// server_cmd("kick #%d ^"%s^"", iUserId, sReason);
		// else
			// server_cmd("kick #%d", iUserId);
	// }
	// else
		// server_cmd("kick #%d", iUserId);
	
	// return PLUGIN_HANDLED;
// }

// public concmd_Ban(const id, const level, const cid)
// {
	// if(!cmd_access(id, level, cid, 3))
		// return PLUGIN_HANDLED;
	
	// new sArg1[32];
	// new sArg2[11];
	// new iUser = -1;
	// new i;
	
	// read_argv(1, sArg1, 31);
	// read_argv(2, sArg2, 10);
	
	// for(i = 1; i <= g_maxplayers; ++i)
	// {
		// if(!g_isconnected[i])
			// continue;
		
		// if(equal(g_playername[i], sArg1))
		// {
			// iUser = i;
			// break;
		// }
	// }
	
	// if(iUser == -1)
	// {
		// if(get_user_flags(id) & ADMIN_LEVEL_A)
			// iUser = cmd_target(id, sArg1, CMDTARGET_ALLOW_SELF);
		// else
			// iUser = cmd_target(id, sArg1, CMDTARGET_OBEY_IMMUNITY);
	// }
	
	// if(!iUser)
	// {
		// console_print(id, "El usuario indicado no existe");
		// return PLUGIN_HANDLED;
	// }
	// else if(iUser == id && !(get_user_flags(id) & ADMIN_LEVEL_A))
	// {
		// console_print(id, "No te podes banear vos mismo");
		// return PLUGIN_HANDLED;
	// }
	// else if((get_user_flags(iUser) & ADMIN_LEVEL_A) && iUser != id && !(get_user_flags(id) & ADMIN_RCON))
	// {
		// console_print(id, "No podes banear a un miembro del Staff");
		// return PLUGIN_HANDLED;
	// }
	
	// new sArg3[64];
	// new iUserId;
	
	// if(sArg2[0] == '0')
	// {
		// console_print(id, "No podes banear por 0 minutos, si queres banear permanentemente usa el * (ASTERISCO)");
		// return PLUGIN_HANDLED;
	// }
	
	// iUserId = get_user_userid(iUser);
	// read_argv(3, sArg3, 63);
	// remove_quotes(sArg3);
	
	// colorChat(0, _, "%s!g%s!y baneo a !g%s!y - Razón: [!g%s!y] - Tiempo: [!g%s%s!y]", ZP_PREFIX, g_playername[id], g_playername[iUser], (sArg3[0]) ? sArg3 : " - ", (sArg2[0] != '*') ? sArg2 : "PERMANENTE", (sArg2[0] != '*') ? " minutos" : "");
	// console_print(id, "[GAM!NGA] Usuario: ^"%s^" ha sido baneado", g_playername[iUser]);
	
	// console_print(iUser, "");
	// console_print(iUser, "*** GAM!NGA ***");
	// console_print(iUser, "* Te han baneado del servidor!");
	// console_print(iUser, "* Administrador: %s", g_playername[id]);
	// console_print(iUser, "* Razon: %s", (sArg3[0]) ? sArg3 : "-");
	// console_print(iUser, "* Tiempo: %s%s", (sArg2[0] != '*') ? sArg2 : "PERMANENTE", (sArg2[0] != '*') ? " minutos" : "");
	// console_print(iUser, "*** GAM!NGA ***");
	
	// if(!is_user_bot(iUser))
	// {
		// new sIp[21];
		// get_user_ip(iUser, sIp, 20, 1);
	
		// if(sArg3[0])
			// server_cmd("kick #%d ^"%s^"; wait; addip ^"%s^" ^"%s^"; wait; writeip", iUserId, sArg3, sArg2, sIp);
		// else
			// server_cmd("kick #%d; wait; addip ^"%s^" ^"%s^"; wait; writeip", iUserId, sArg2, sIp);
	// }
	// else
		// server_cmd("kick #%d", iUserId);
	
	// return PLUGIN_HANDLED;
// }

public concmd_Level(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	new iTarget;
	
	read_argv(1, sArg1, 31);
	
	if(equal(sArg1, "@ALIVE"))
	{
		new sArg2[21];
		new iLevel;
		
		read_argv(2, sArg2, 20);
		iLevel = str_to_num(sArg2);
		
		for(iTarget = 1; iTarget <= g_maxplayers; ++iTarget)
		{
			if(!is_user_alive(iTarget))
				continue;
			
			if(g_level[iTarget] < 1000) {
				new idif = g_level[iTarget];
				g_level[iTarget] = clamp(g_level[iTarget] + iLevel, 1, 1000);
				
				idif = g_level[iTarget] - idif;
				
				g_level_total[iTarget] += idif;
				g_exp[iTarget] = NEED_EXP_TOTAL[g_level_total[iTarget]-1];
			}
			
			g_human_model[iTarget] = clamp((g_level_total[iTarget] / 25), 0, charsmax(MODELOS_HUMANOS));
			
			switch(g_chat_mode[iTarget])
			{
				case CHAT_MODE_NONE: formatex(g_chat_text[iTarget], 15, "");
				case CHAT_MODE_NORMAL: formatex(g_chat_text[iTarget], 15, " [%s](%s%d)", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
				case CHAT_MODE_CORCHETES: formatex(g_chat_text[iTarget], 15, " [%s][%s%d]", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
				case CHAT_MODE_CORCHETES_PARENTESIS: formatex(g_chat_text[iTarget], 15, " [%s][(%s%d)]", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
				case CHAT_MODE_LLAVES: formatex(g_chat_text[iTarget], 15, " [%s]{%s%d}", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
				case CHAT_MODE_LLAVES_PARENTESIS: formatex(g_chat_text[iTarget], 15, " [%s]{(%s%d)}", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
				case CHAT_MODE_LLAVES_CORCHETES: formatex(g_chat_text[iTarget], 15, " [%s]{[%s%d]}", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
				case CHAT_MODE_LLAVES_CORCHETES_P: formatex(g_chat_text[iTarget], 15, " [%s]{[(%s%d)]}", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
			}
			
			g_level_percent[iTarget] = 0.0;
		}
		
		colorChat(0, _, "%s!t%s!y le ha dado a todos los usuarios vivos !g1 nivel!y", ZP_PREFIX, g_playername[id]);
	}
	else
	{
		iTarget = cmd_target(id, sArg1, CMDTARGET_ALLOW_SELF);
		
		if(!iTarget)
			return PLUGIN_HANDLED;
		
		new sArg2[21];
		new iLastLevel;
		new iLevel;
		new iDif;
		
		read_argv(2, sArg2, 20);
		
		if(read_argc() < 3)
		{
			client_print(id, print_console, "[ZP] Uso: zp_level <nombre> <factor (+ , -)> <cantidad>");
			return PLUGIN_HANDLED;
		}
		
		iLevel = str_to_num(sArg2);
		iLastLevel = g_level[iTarget];
		new iLastLevelG = g_level_total[iTarget];
		
		if(iLevel < 1 || iLevel > MAX_LEVELS)
			return PLUGIN_HANDLED;
		
		switch(sArg2[0])
		{
			//case '+', '-': g_level[iTarget] = clamp((g_level[iTarget] + iLevel), 1, MAX_LEVELS);
			default: g_level[iTarget] = iLevel;
		}
		
		if(g_level[iTarget] > iLastLevel)
		{
			iDif = g_level[iTarget] - iLastLevel;
			
			g_level_total[iTarget] += iDif;
			
			set_dhudmessage(0, 255, 0, -1.0, 0.2, 0, 0.0, 5.0, 1.0, 1.0);
			show_dhudmessage(iTarget, "Subiste %d nivel%s^n(TE HAN REGALADO NIVELES)", iDif, (iDif != 1) ? "es" : "");
		}
		else if(g_level[iTarget] < iLastLevel)
		{
			iDif = iLastLevel - g_level[iTarget];
			
			g_level_total[iTarget] -= iDif;
			
			set_dhudmessage(0, 255, 0, -1.0, 0.2, 0, 0.0, 5.0, 1.0, 1.0);
			show_dhudmessage(iTarget, "Bajaste %d nivel%s^n(TE HAN SACADO NIVELES)", iDif, (iDif != 1) ? "es" : "");
		}
		
		client_print(id, print_console, "[ZP] %s estaba en nivel %d (%d) y ahora esta en %d (%d)", g_playername[iTarget], iLastLevel, iLastLevelG, g_level[iTarget], g_level_total[iTarget]);
		
		if(iLevel != 1)
			g_exp[iTarget] = NEED_EXP_TOTAL[g_level_total[iTarget]-1];
		else
			g_exp[iTarget] = 0;
		
		g_human_model[iTarget] = clamp((g_level_total[iTarget] / 25), 0, charsmax(MODELOS_HUMANOS));
		
		switch(g_chat_mode[iTarget])
		{
			case CHAT_MODE_NONE: formatex(g_chat_text[iTarget], 15, "");
			case CHAT_MODE_NORMAL: formatex(g_chat_text[iTarget], 15, " [%s](%s%d)", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
			case CHAT_MODE_CORCHETES: formatex(g_chat_text[iTarget], 15, " [%s][%s%d]", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
			case CHAT_MODE_CORCHETES_PARENTESIS: formatex(g_chat_text[iTarget], 15, " [%s][(%s%d)]", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
			case CHAT_MODE_LLAVES: formatex(g_chat_text[iTarget], 15, " [%s]{%s%d}", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
			case CHAT_MODE_LLAVES_PARENTESIS: formatex(g_chat_text[iTarget], 15, " [%s]{(%s%d)}", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
			case CHAT_MODE_LLAVES_CORCHETES: formatex(g_chat_text[iTarget], 15, " [%s]{[%s%d]}", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
			case CHAT_MODE_LLAVES_CORCHETES_P: formatex(g_chat_text[iTarget], 15, " [%s]{[(%s%d)]}", LETRAS_RESET[g_rango[iTarget]], !g_chat_mode_prefix[iTarget] ? "" : "Niv. ", g_level[iTarget]);
		}
		
		g_level_percent[iTarget] = 0.0;
	}
	
	return PLUGIN_HANDLED;
}

public concmd_Exp(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	new iTarget;
	
	read_argv(1, sArg1, 31);
	
	iTarget = cmd_target(id, sArg1, CMDTARGET_ALLOW_SELF);
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	new sArg2[21];
	new iXP;
	
	read_argv(2, sArg2, 20);
	
	if(read_argc() < 2)
	{
		client_print(id, print_console, "[ZP] Uso: zp_exp <nombre> <cantidad>");
		return PLUGIN_HANDLED;
	}
	
	iXP = str_to_num(sArg2);
	
	addXp(iTarget, iXP, 0);
	
	return PLUGIN_HANDLED;
}

public concmd_Points(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	new iTarget;
	
	read_argv(1, sArg1, 31);
	iTarget = cmd_target(id, sArg1, CMDTARGET_ALLOW_SELF);
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	new sArg2[21];
	new sArg3[2];
	new iPoints;
	new iClass;
	new i;
	
	read_argv(2, sArg2, 20);
	read_argv(3, sArg3, 1);
	
	if(read_argc() < 3)
	{
		client_print(id, print_console, "[ZP] Uso: zp_points <nombre> <factor (+ , -)> <cantidad> <clase (H, Z, S, N, F, D)>");
		return PLUGIN_HANDLED;
	}
	
	iPoints = str_to_num(sArg2);
	iClass = -1;
	
	switch(sArg3[0])
	{
		case 'H': iClass = CLASS_HUMAN;
		case 'Z': iClass = CLASS_ZOMBIE;
		case 'S': iClass = CLASS_SURVIVOR;
		case 'N': iClass = CLASS_NEMESIS;
		case 'F': iClass = CLASS_FRAGMENTOS;
		case 'D': iClass = -5;
	}
	
	switch(sArg2[0])
	{
		case '+', '-':
		{
			if(iClass >= 0)
			{
				g_points[iTarget][iClass] += iPoints;
				
				colorChat(iTarget, _, "%s!t%s!y te ha %s !g%d p%c!y", ZP_PREFIX, g_playername[id], (sArg2[0] == '+') ? "dado" : "sacado", iPoints, sArg3[0]);
				return PLUGIN_HANDLED;
			}
			else if(iClass == -5)
			{
				g_diamonds[iTarget] += iPoints;
				
				colorChat(iTarget, _, "%s!t%s!y te ha %s !g%d DIAMANTES!y", ZP_PREFIX, g_playername[id], (sArg2[0] == '+') ? "dado" : "sacado", iPoints);
				return PLUGIN_HANDLED;
			}
			
			for(i = 0; i < MaxClassNormal; ++i)
			{
				if(i == CLASS_FRAGMENTOS)
					continue;
				
				g_points[iTarget][i] += iPoints;
			}
			
			colorChat(iTarget, _, "%s!t%s!y te ha %s !g%d pHZSN!y", ZP_PREFIX, g_playername[id], (sArg2[0] == '+') ? "dado" : "sacado", iPoints);
		}
		default:
		{
			if(iClass >= 0)
			{
				g_points[iTarget][iClass] = iPoints;
				
				colorChat(iTarget, _, "%s!t%s!y te ha editado tus !gp%c!y, ahora tenés !g%d p%c!y", ZP_PREFIX, g_playername[id], sArg3[0], iPoints, sArg3[0]);
				return PLUGIN_HANDLED;
			}
			else if(iClass == -5)
			{
				g_diamonds[iTarget] = iPoints;
				
				colorChat(iTarget, _, "%s!t%s!y te ha editado tus !gDIAMANTES!y, ahora tenés !g%d DIAMANTES!y", ZP_PREFIX, g_playername[id], iPoints);
				return PLUGIN_HANDLED;
			}
			
			for(i = 0; i < MaxClassNormal; ++i)
			{
				if(i == CLASS_FRAGMENTOS)
					continue;
				
				g_points[iTarget][i] = iPoints;
			}
			
			colorChat(iTarget, _, "%s!t%s!y te ha editado tus !gpHZSN!y, ahora tenés !g%d pHZSN!y", ZP_PREFIX, g_playername[id], iPoints);
		}
	}
	
	return PLUGIN_HANDLED;
}

public concmd_Ammos(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	new iTarget;
	
	read_argv(1, sArg1, 31);
	iTarget = cmd_target(id, sArg1, CMDTARGET_ALLOW_SELF);
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	new sArg2[21];
	new iAmmos;
	new iLastAmmos;
	
	read_argv(2, sArg2, 20);
	
	if(read_argc() < 3)
	{
		client_print(id, print_console, "[ZP] Uso: zp_ammos <nombre> <factor (+ , -)> <cantidad>");
		return PLUGIN_HANDLED;
	}
	
	iAmmos = str_to_num(sArg2);
	iLastAmmos = g_ammopacks[iTarget];
	
	switch(sArg2[0])
	{
		case '+', '-':
		{
			g_ammopacks[iTarget] += iAmmos;
			colorChat(iTarget, _, "%s!t%s!y te ha %s !g%d ammo packs!y", ZP_PREFIX, g_playername[id], (sArg2[0] == '+') ? "dado" : "sacado", iAmmos);
		}
		default:
		{
			g_ammopacks[iTarget] = iAmmos;
			colorChat(iTarget, _, "%s!t%s!y te ha editado tus !gammo packs!y, ahora tenés !g%d ammo packs!y", ZP_PREFIX, g_playername[id], iAmmos);
		}
	}
	
	client_print(id, print_console, "[ZP] %s tenia %d APs y ahora tiene %d", g_playername[iTarget], iLastAmmos, g_ammopacks[iTarget]);
	
	return PLUGIN_HANDLED;
}

public concmd_Health(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	read_argv(1, sArg1, 31);
	
	if(sArg1[0] != '@')
	{
		if(equal(sArg1, "-100"))
		{
			new iTarget, iBody;
			
			get_user_aiming(id, iTarget, iBody);
			
			if(!is_user_alive(iTarget))
				return PLUGIN_HANDLED;
			
			new sArg2[21];
			new iHealth;
			
			read_argv(2, sArg2, 20);
			
			iHealth = str_to_num(sArg2);
			
			set_user_health(iTarget, iHealth);
			g_health[iTarget] = iHealth;
		}
		else
		{
			new iTarget;
			iTarget = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
			
			if(!iTarget)
				return PLUGIN_HANDLED;
			
			new sArg2[21];
			new iHealth;
			
			read_argv(2, sArg2, 20);
			
			if(read_argc() < 3)
			{
				client_print(id, print_console, "[ZP] Uso: zp_health <nombre> <cantidad>");
				return PLUGIN_HANDLED;
			}
			
			iHealth = str_to_num(sArg2);
			
			set_user_health(iTarget, iHealth);
			g_health[iTarget] = iHealth;
		}
	}
	else
	{
		new sArg2[21];
		new iHealth;
		
		read_argv(2, sArg2, 20);
		
		if(read_argc() < 3)
		{
			client_print(id, print_console, "[ZP] Uso: zp_health <nombre> <cantidad>");
			return PLUGIN_HANDLED;
		}
		
		iHealth = str_to_num(sArg2);
		
		new i;
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isalive[i])
				continue;
			
			colorChat(i, _, "%s%s te editó la vida y ahora tenés !g%d!y de vida", ZP_PREFIX, g_playername[id], iHealth);
			
			set_user_health(i, iHealth);
			g_health[i] = iHealth;
		}
	}
	
	
	
	return PLUGIN_HANDLED;
}

public concmd_Logro(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	new iTarget;
	
	read_argv(1, sArg1, 31);
	iTarget = cmd_target(id, sArg1, CMDTARGET_ALLOW_SELF);
	
	new sArg2[21];
	read_argv(2, sArg2, 20);
	
	if(read_argc() < 3)
	{
		set_task(1.0, "sendInfo__Logros1", id);
		set_task(2.0, "sendInfo__Logros2", id);
		set_task(3.0, "sendInfo__Logros3", id);
		set_task(4.0, "sendInfo__Logros4", id);
		set_task(5.0, "sendInfo__Logros5", id);
		
		new i;
		for(i = 0; i < 50; ++i)
			console_print(id, "%s = %d", LOGROS[i][logroName], i);
		
		return PLUGIN_HANDLED;
	}
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	new iAchievement;
	iAchievement = str_to_num(sArg2);
	
	if(iAchievement != PRIMERO_BETA_TESTER_AVANZADO && iAchievement != PRIMERO_COLORIDO && iAchievement != PRIMERO_QUE_SUERTE && iAchievement != PRIMERO_BUEN_COMIENZO)
		setAchievement(iTarget, iAchievement, 0);
	
	return PLUGIN_HANDLED;
}

public sendInfo__Logros1(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	new i;
	for(i = 50; i < 100; ++i)
		console_print(id, "%s = %d", LOGROS[i][logroName], i);
	
	return PLUGIN_HANDLED;
}

public sendInfo__Logros2(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	new i;
	for(i = 100; i < 150; ++i)
		console_print(id, "%s = %d", LOGROS[i][logroName], i);
	
	return PLUGIN_HANDLED;
}

public sendInfo__Logros3(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	new i;
	for(i = 150; i < 200; ++i)
		console_print(id, "%s = %d", LOGROS[i][logroName], i);
	
	return PLUGIN_HANDLED;
}

public sendInfo__Logros4(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	new i;
	for(i = 200; i < 250; ++i)
		console_print(id, "%s = %d", LOGROS[i][logroName], i);
	
	client_print(id, print_console, "[ZP] Uso: zp_logro <nombre> <logro>");
	
	return PLUGIN_HANDLED;
}

public sendInfo__Logros5(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	new i;
	for(i = 250; i < LogrosInt; ++i)
		console_print(id, "%s = %d", LOGROS[i][logroName], i);
	
	client_print(id, print_console, "[ZP] Uso: zp_logro <nombre> <logro>");
	
	return PLUGIN_HANDLED;
}

public concmd_MetaLogro(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	new iTarget;
	
	read_argv(1, sArg1, 31);
	iTarget = cmd_target(id, sArg1, CMDTARGET_ALLOW_SELF);
	
	new sArg2[21];
	read_argv(2, sArg2, 20);
	
	if(read_argc() < 3)
	{
		new i;
		for(i = 0; i < MetaLogrosInt; ++i)
			console_print(id, "%s = %d", META_LOGROS[i][logroName], i);
		
		return PLUGIN_HANDLED;
	}
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	new iMetaAchievement;

	iMetaAchievement = str_to_num(sArg2);
	setMetaAchievement(iTarget, iMetaAchievement);
	
	return PLUGIN_HANDLED;
}

public concmd_SpeedHead(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new iArg1;
	new sArg1[32];
	read_argv(1, sArg1, 31);
	
	iArg1 = str_to_num(sArg1);
	g_speed_head = iArg1;
	
	return PLUGIN_HANDLED;
}

public concmd_Revive(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	if(task_exists(TASK_WELCOMEMSG))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	new iTarget;
	
	read_argv(1, sArg1, 31);
	iTarget = cmd_target(id, sArg1, CMDTARGET_ALLOW_SELF);
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	respawnUserManually(iTarget);
	
	return PLUGIN_HANDLED;
}

public concmd_Human(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	if(task_exists(TASK_WELCOMEMSG))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	new iTarget;
	
	read_argv(1, sArg1, 31);
	iTarget = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	humanMe(iTarget);
	
	return PLUGIN_HANDLED;
}

public concmd_Zombie(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	if(task_exists(TASK_WELCOMEMSG))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	new iTarget;
	
	read_argv(1, sArg1, 31);
	iTarget = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	if(g_newround)
	{
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_INFECTION, iTarget);
	}
	else zombieMe(iTarget);
	
	return PLUGIN_HANDLED;
}

public concmd_Nemesis(const id)
{
	if(!checkAccess(id))
	{
		//if(!checkAccess(id, .admin = 0) || getAlive() < 10 || g_modes_count_map[MODE_NEMESIS] == 2)
		return PLUGIN_HANDLED;
	}
	
	if(task_exists(TASK_WELCOMEMSG))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	read_argv(1, sArg1, 31);
	
	if(!checkAccess(id) && !equal(sArg1, "azar"))
		return PLUGIN_HANDLED;
	
	if(equal(sArg1, "azar"))
	{
		if(g_newround)
		{
			if(!checkStartMode(id))
				return PLUGIN_HANDLED;
			
			remove_task(TASK_MAKEZOMBIE);
			makeMode(MODE_NEMESIS, 0);
			
			colorChat(0, TERRORIST, "%s!t%s!y comenzó el modo !gNEMESIS!y al azar", ZP_PREFIX, g_playername[id]);
			
			if(!checkAccess(id))
				++g_modes_count_map[MODE_NEMESIS];
		}
		
		return PLUGIN_HANDLED;
	}
	
	new iTarget;
	iTarget = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	if(g_newround)
	{
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_NEMESIS, iTarget);
	}
	else zombieMe(iTarget, .nemesis = 1);
	
	return PLUGIN_HANDLED;
}

public concmd_Survivor(const id)
{
	if(!checkAccess(id))
	{
		//if(!checkAccess(id, .admin = 0) || getAlive() < 10 || g_modes_count_map[MODE_SURVIVOR] == 2)
		return PLUGIN_HANDLED;
	}
	
	if(task_exists(TASK_WELCOMEMSG))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	read_argv(1, sArg1, 31);
	
	if(!checkAccess(id) && !equal(sArg1, "azar"))
		return PLUGIN_HANDLED;
	
	if(equal(sArg1, "azar"))
	{
		if(g_newround)
		{
			if(!checkStartMode(id))
				return PLUGIN_HANDLED;
			
			remove_task(TASK_MAKEZOMBIE);
			makeMode(MODE_SURVIVOR, 0);
			
			colorChat(0, CT, "%s!t%s!y comenzó el modo !gSURVIVOR!y al azar", ZP_PREFIX, g_playername[id]);
			
			if(!checkAccess(id))
				++g_modes_count_map[MODE_SURVIVOR];
		}
		
		return PLUGIN_HANDLED;
	}
	
	new iTarget;
	iTarget = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	if(g_newround)
	{
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_SURVIVOR, iTarget);
	}
	else humanMe(iTarget, .survivor = 1);
	
	return PLUGIN_HANDLED;
}

public concmd_Wesker(const id)
{
	if(!checkAccess(id))
	{
		//if(!checkAccess(id, .admin = 0) || getAlive() < 10 || g_modes_count_map[MODE_WESKER] == 2)
		return PLUGIN_HANDLED;
	}
	
	if(task_exists(TASK_WELCOMEMSG))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	read_argv(1, sArg1, 31);
	
	if(!checkAccess(id) && !equal(sArg1, "azar"))
		return PLUGIN_HANDLED;
	
	if(equal(sArg1, "azar"))
	{
		if(g_newround)
		{
			if(!checkStartMode(id))
				return PLUGIN_HANDLED;
			
			remove_task(TASK_MAKEZOMBIE);
			makeMode(MODE_WESKER, 0);
			
			colorChat(0, CT, "%s!t%s!y comenzó el modo !gWESKER!y al azar", ZP_PREFIX, g_playername[id]);
			
			if(!checkAccess(id))
				++g_modes_count_map[MODE_WESKER];
		}
		
		return PLUGIN_HANDLED;
	}
	
	new iTarget;
	iTarget = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	if(g_newround)
	{
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_WESKER, iTarget);
	}
	else humanMe(iTarget, .wesker = 1);
	
	return PLUGIN_HANDLED;
}

public concmd_Cabezon(const id)
{
	if(!checkAccess(id))
	{
		//if(!checkAccess(id, .admin = 0) || getAlive() < 10 || g_modes_count_map[MODE_CABEZON] == 2)
		return PLUGIN_HANDLED;
	}
	
	if(task_exists(TASK_WELCOMEMSG))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	read_argv(1, sArg1, 31);
	
	if(!checkAccess(id) && !equal(sArg1, "azar"))
		return PLUGIN_HANDLED;
	
	if(equal(sArg1, "azar"))
	{
		if(g_newround)
		{
			if(!checkStartMode(id))
				return PLUGIN_HANDLED;
			
			remove_task(TASK_MAKEZOMBIE);
			makeMode(MODE_CABEZON, 0);
			
			colorChat(0, TERRORIST, "%s!t%s!y comenzó el modo !gCABEZÓN!y al azar", ZP_PREFIX, g_playername[id]);
			
			if(!checkAccess(id))
				++g_modes_count_map[MODE_CABEZON];
		}
		
		return PLUGIN_HANDLED;
	}
	
	new iTarget;
	iTarget = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	if(g_newround)
	{
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_CABEZON, iTarget);
	}
	else zombieMe(iTarget, .cabezon = 1);
	
	return PLUGIN_HANDLED;
}

public concmd_Jason(const id)
{
	if(!checkAccess(id))
	{
		//if(!checkAccess(id, .admin = 0) || getAlive() < 10 || g_modes_count_map[MODE_JASON] == 2)
		return PLUGIN_HANDLED;
	}
	
	if(task_exists(TASK_WELCOMEMSG))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	read_argv(1, sArg1, 31);
	
	if(!checkAccess(id) && !equal(sArg1, "azar"))
		return PLUGIN_HANDLED;
	
	if(equal(sArg1, "azar"))
	{
		if(g_newround)
		{
			if(!checkStartMode(id))
				return PLUGIN_HANDLED;
			
			remove_task(TASK_MAKEZOMBIE);
			makeMode(MODE_JASON, 0);
			
			colorChat(0, CT, "%s!t%s!y comenzó el modo !gJASON!y al azar", ZP_PREFIX, g_playername[id]);
			
			if(!checkAccess(id))
				++g_modes_count_map[MODE_JASON];
		}
		
		return PLUGIN_HANDLED;
	}
	
	new iTarget;
	iTarget = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	if(g_newround)
	{
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_JASON, iTarget);
	}
	else humanMe(iTarget, .jason = 1);
	
	return PLUGIN_HANDLED;
}

public concmd_Annihilator(const id)
{
	if(!checkAccess(id))
	{
		//if(!checkAccess(id, .admin = 0) || getAlive() < 10 || g_modes_count_map[MODE_ANNIHILATOR] == 2)
		return PLUGIN_HANDLED;
	}
	
	if(task_exists(TASK_WELCOMEMSG))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	read_argv(1, sArg1, 31);
	
	if(!checkAccess(id) && !equal(sArg1, "azar"))
		return PLUGIN_HANDLED;
	
	if(equal(sArg1, "azar"))
	{
		if(g_newround)
		{
			if(!checkStartMode(id))
				return PLUGIN_HANDLED;
			
			remove_task(TASK_MAKEZOMBIE);
			makeMode(MODE_ANNIHILATOR, 0);
			
			colorChat(0, TERRORIST, "%s!t%s!y comenzó el modo !gANIQUILADOR!y al azar", ZP_PREFIX, g_playername[id]);
			
			if(!checkAccess(id))
				++g_modes_count_map[MODE_ANNIHILATOR];
		}
		
		return PLUGIN_HANDLED;
	}
	
	new iTarget;
	iTarget = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	if(g_newround)
	{
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_ANNIHILATOR, iTarget);
	}
	else zombieMe(iTarget, .annihilator = 1);
	
	return PLUGIN_HANDLED;
}

public concmd_Grunt(const id)
{
	if(!checkAccess(id))
	{
		//if(!checkAccess(id, .admin = 0) || getAlive() < 10 || g_modes_count_map[MODE_GRUNT] == 2)
		return PLUGIN_HANDLED;
	}
	
	if(task_exists(TASK_WELCOMEMSG))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	read_argv(1, sArg1, 31);
	
	if(!checkAccess(id) && !equal(sArg1, "azar"))
		return PLUGIN_HANDLED;
	
	if(equal(sArg1, "azar"))
	{
		if(g_newround)
		{
			if(!checkStartMode(id))
				return PLUGIN_HANDLED;
			
			remove_task(TASK_MAKEZOMBIE);
			makeMode(MODE_GRUNT, 0);
			
			colorChat(0, CT, "%s!t%s!y comenzó el modo !gGRUNT!y al azar", ZP_PREFIX, g_playername[id]);
			
			if(!checkAccess(id))
				++g_modes_count_map[MODE_GRUNT];
		}
		
		return PLUGIN_HANDLED;
	}
	
	new iTarget;
	iTarget = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	if(g_newround)
	{
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_GRUNT, iTarget);
	}
	else zombieMe(iTarget, .grunt = 1);
	
	return PLUGIN_HANDLED;
}

public concmd_Swarm(const id)
{
	if(!checkAccess(id, .admin = 0))
		return PLUGIN_HANDLED;
	
	if(g_newround)
	{
		if(task_exists(TASK_WELCOMEMSG))
			return PLUGIN_HANDLED;
		
		if(!checkAccess(id) && g_user_id[id] != 31)
		{
			if(!checkStartMode(id))
				return PLUGIN_HANDLED;
			
			if(g_modes_count_map[MODE_SWARM] == 2)
				return PLUGIN_HANDLED;
		}
		
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_SWARM, 0);
		
		colorChat(0, CT, "%s!t%s!y comenzó el modo !gSWARM!y", ZP_PREFIX, g_playername[id]);
		
		if(!checkAccess(id))
			++g_modes_count_map[MODE_SWARM];
	}
	
	return PLUGIN_HANDLED;
}

public concmd_Multi(const id)
{
	if(!checkAccess(id, .admin = 0))
		return PLUGIN_HANDLED;
	
	if(g_newround && getAlive() >= 10)
	{
		if(task_exists(TASK_WELCOMEMSG))
			return PLUGIN_HANDLED;
		
		if(!checkAccess(id) && g_user_id[id] != 31) {
			if(!checkStartMode(id))
				return PLUGIN_HANDLED;
			
			if(g_modes_count_map[MODE_MULTI] == 2)
				return PLUGIN_HANDLED;
		}
		
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_MULTI, 0);
		
		colorChat(0, CT, "%s!t%s!y comenzó el modo !gINFECCIÓN MÚLTIPLE!y", ZP_PREFIX, g_playername[id]);
		
		if(!checkAccess(id))
			++g_modes_count_map[MODE_MULTI];
	}
	
	return PLUGIN_HANDLED;
}

public concmd_Plague(const id)
{
	if(!checkAccess(id) && g_user_id[id] != 31)
		return PLUGIN_HANDLED;
	
	if(g_newround && getAlive() >= 10)
	{
		if(task_exists(TASK_WELCOMEMSG))
			return PLUGIN_HANDLED;
		
		/*if(!checkAccess(id) && g_modes_count_map[MODE_PLAGUE] == 2)
			return PLUGIN_HANDLED;*/
		
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_PLAGUE, 0);
		
		colorChat(0, CT, "%s!t%s!y comenzó el modo !gPLAGUE!y", ZP_PREFIX, g_playername[id]);
		
		if(!checkAccess(id) && g_user_id[id] != 31)
			++g_modes_count_map[MODE_PLAGUE];
	}
	
	return PLUGIN_HANDLED;
}

public concmd_Armageddon(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	if(g_newround)
	{
		if(task_exists(TASK_WELCOMEMSG))
			return PLUGIN_HANDLED;
		
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_ARMAGEDDON, 0);
		
		colorChat(0, CT, "%s!t%s!y comenzó el modo !gARMAGEDDON!y", ZP_PREFIX, g_playername[id]);
	}
	
	return PLUGIN_HANDLED;
}

public concmd_Gaminga(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	if(g_newround)
	{
		if(task_exists(TASK_WELCOMEMSG))
			return PLUGIN_HANDLED;
		
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_GAMINGA, 0);
		
		colorChat(0, CT, "%s!t%s!y comenzó el modo !gGAM!NGA!y", ZP_PREFIX, g_playername[id]);
	}
	
	return PLUGIN_HANDLED;
}

public concmd_AlienVsPredator(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	if(g_newround && getAlive() >= 4)
	{
		if(task_exists(TASK_WELCOMEMSG) || !checkStartMode(id))
			return PLUGIN_HANDLED;
		
		if(!checkAccess(id) && g_modes_count_map[MODE_ALVSPRED] == 2)
			return PLUGIN_HANDLED;
		
		new sArg1[32];
		read_argv(1, sArg1, 31);
		
		if(sArg1[0])
		{
			new iAlien;
			iAlien = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
			
			if(!iAlien)
			{
				console_print(id, "[ZP] El nombre del Alien esta mal escrito!");
				return PLUGIN_HANDLED;
			}
			
			read_argv(2, sArg1, 31);
			
			new iPredator;
			iPredator = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
			
			if(!iPredator)
			{
				console_print(id, "[ZP] El nombre del Depredador esta mal escrito!");
				return PLUGIN_HANDLED;
			}
			
			if(iAlien == iPredator)
			{
				console_print(id, "[ZP] El Alien y el Depredador no puede ser el mismo usuario!");
				return PLUGIN_HANDLED;
			}
			
			remove_task(TASK_MAKEZOMBIE);
			g_newround = 0;
			setMode(MODE_ALVSPRED, iAlien, iPredator);
		}
		else
		{
			remove_task(TASK_MAKEZOMBIE);
			makeMode(MODE_ALVSPRED, 0);
		}
		
		colorChat(0, CT, "%s!t%s!y comenzó el modo !gALIEN vs DEPREDADOR!y", ZP_PREFIX, g_playername[id]);
		
		if(!checkAccess(id))
			++g_modes_count_map[MODE_ALVSPRED];
	}
	
	return PLUGIN_HANDLED;
}

public concmd_Synapsis(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	if(g_newround && getAlive() >= 5)
	{
		if(task_exists(TASK_WELCOMEMSG) || !checkStartMode(id))
			return PLUGIN_HANDLED;
		
		if(!checkAccess(id) && g_modes_count_map[MODE_SYNAPSIS] == 2)
			return PLUGIN_HANDLED;
		
		new sArg1[32];
		read_argv(1, sArg1, 31);
		
		if(sArg1[0])
		{
			new iNem1;
			iNem1 = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
			
			if(!iNem1)
			{
				console_print(id, "[ZP] El nombre del Nemesis(1) esta mal escrito!");
				return PLUGIN_HANDLED;
			}
			
			read_argv(2, sArg1, 31);
			
			new iNem2;
			iNem2 = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
			
			if(!iNem2)
			{
				console_print(id, "[ZP] El nombre del Nemesis(2) esta mal escrito!");
				return PLUGIN_HANDLED;
			}
			
			read_argv(3, sArg1, 31);
			
			new iNem3;
			iNem3 = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
			
			if(!iNem3)
			{
				console_print(id, "[ZP] El nombre del Nemesis(3) esta mal escrito!");
				return PLUGIN_HANDLED;
			}
			
			if(iNem1 == iNem2 || iNem1 == iNem3 || iNem2 == iNem3)
			{
				console_print(id, "[ZP] Uno o más Nemesis son el mismo usuario, no se puede!");
				return PLUGIN_HANDLED;
			}
			
			remove_task(TASK_MAKEZOMBIE);
			g_newround = 0;
			setMode(MODE_SYNAPSIS, iNem1, iNem2, iNem3);
		}
		else
		{
			remove_task(TASK_MAKEZOMBIE);
			makeMode(MODE_SYNAPSIS, 0);
		}
		
		colorChat(0, CT, "%s!t%s!y comenzó el modo !gSYNAPSIS!y", ZP_PREFIX, g_playername[id]);
		
		if(!checkAccess(id))
			++g_modes_count_map[MODE_SYNAPSIS];
	}
	
	return PLUGIN_HANDLED;
}

public concmd_Sniper(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	if(g_newround && getAlive() >= 5)
	{
		if(task_exists(TASK_WELCOMEMSG) || !checkStartMode(id))
			return PLUGIN_HANDLED;
		
		if(!checkAccess(id) && g_modes_count_map[MODE_SNIPER] == 2)
			return PLUGIN_HANDLED;
		
		new sArg1[32];
		read_argv(1, sArg1, 31);
		
		if(sArg1[0])
		{
			new iSniper1;
			iSniper1 = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
			
			if(!iSniper1)
			{
				console_print(id, "[ZP] El nombre del Sniper(1) esta mal escrito!");
				return PLUGIN_HANDLED;
			}
			
			read_argv(2, sArg1, 31);
			
			new iSniper2;
			iSniper2 = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
			
			if(!iSniper2)
			{
				console_print(id, "[ZP] El nombre del Sniper(2) esta mal escrito!");
				return PLUGIN_HANDLED;
			}
			
			read_argv(3, sArg1, 31);
			
			new iSniper3;
			iSniper3 = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
			
			if(!iSniper3)
			{
				console_print(id, "[ZP] El nombre del Sniper(3) esta mal escrito!");
				return PLUGIN_HANDLED;
			}
			
			read_argv(4, sArg1, 31);
			
			new iSniper4;
			iSniper4 = cmd_target(id, sArg1, (CMDTARGET_ONLY_ALIVE | CMDTARGET_ALLOW_SELF));
			
			if(!iSniper4)
			{
				console_print(id, "[ZP] El nombre del Sniper(4) esta mal escrito!");
				return PLUGIN_HANDLED;
			}
			
			if(iSniper1 == iSniper2 || iSniper1 == iSniper3 || iSniper1 == iSniper4 || iSniper2 == iSniper3 || iSniper2 == iSniper4 || iSniper3 == iSniper4)
			{
				console_print(id, "[ZP] Uno o más Sniper son el mismo usuario, no se puede!");
				return PLUGIN_HANDLED;
			}
			
			remove_task(TASK_MAKEZOMBIE);
			g_newround = 0;
			setMode(MODE_SNIPER, iSniper1, iSniper2, iSniper3, iSniper4);
		}
		else
		{
			remove_task(TASK_MAKEZOMBIE);
			makeMode(MODE_SNIPER, 0);
		}
		
		colorChat(0, CT, "%s!t%s!y comenzó el modo !gSNIPER!y", ZP_PREFIX, g_playername[id]);
		
		if(!checkAccess(id))
			++g_modes_count_map[MODE_SNIPER];
	}
	
	return PLUGIN_HANDLED;
}

public concmd_DuelFinal(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	if(g_newround && getAlive() >= 3)
	{
		if(task_exists(TASK_WELCOMEMSG) || !checkStartMode(id))
			return PLUGIN_HANDLED;
		
		if(!checkAccess(id) && g_modes_count_map[MODE_DUEL_FINAL] == 2)
			return PLUGIN_HANDLED;
		
		new sArg1[3];
		read_argv(1, sArg1, 2);
		
		g_duel_final_modeN = str_to_num(sArg1);
		
		if(g_duel_final_modeN < 1 || g_duel_final_modeN > 3)
			return PLUGIN_HANDLED;
		
		remove_task(TASK_MAKEZOMBIE);
		makeMode(MODE_DUEL_FINAL, 0);
		
		colorChat(0, CT, "%s!t%s!y comenzó el modo !gDUELO FINAL%s!y", ZP_PREFIX, g_playername[id], g_duel_final_mode);
		
		if(!checkAccess(id))
			++g_modes_count_map[MODE_DUEL_FINAL];
	}
	
	return PLUGIN_HANDLED;
}

public concmd_BanAccount(const id)
{
	if(!checkAccess(id) && g_user_id[id] != 31)
		return PLUGIN_HANDLED;
	
	new sName[32];
	new sDays[15];
	new iDays;
	new iHours;
	new iMinutes;
	new iSeconds;
	new sReason[128];
	
	read_argv(1, sName, charsmax(sName));
	read_argv(2, sDays, charsmax(sDays));
	read_argv(3, sReason, charsmax(sReason));
	
	remove_quotes(sDays);
	remove_quotes(sReason);
	
	replace_all(sName, charsmax(sName), "\0\", "~");
	replace_all(sName, charsmax(sName), "\", "");
	replace_all(sName, charsmax(sName), "/", "");
	replace_all(sName, charsmax(sName), "DROP TABLE", "");
	replace_all(sName, charsmax(sName), "TRUNCATE", "");
	replace_all(sName, charsmax(sName), "INSERT INTO", "");
	replace_all(sName, charsmax(sName), "INSERT UPDATE", "");
	replace_all(sName, charsmax(sName), "UPDATE", "");
	
	replace_all(sReason, charsmax(sReason), "'", "");
	replace_all(sReason, charsmax(sReason), "\", "");
	replace_all(sReason, charsmax(sReason), "DROP TABLE", "");
	replace_all(sReason, charsmax(sReason), "TRUNCATE", "");
	replace_all(sReason, charsmax(sReason), "INSERT INTO", "");
	replace_all(sReason, charsmax(sReason), "INSERT UPDATE", "");
	replace_all(sReason, charsmax(sReason), "UPDATE", "");
	
	if(read_argc() < 4)
	{
		console_print(id, "[ZP] El comando debe ser introducido de la siguiente manera: zp_ban <NOMBRE COMPLETO> <DIAS> <RAZON OBLIGATORIA>");
		console_print(id, "[ZP] Ingrese 0 dias para banearlo permanentemente");
		console_print(id, "[ZP] Si queres introducir el simbolo ~ escribe \0\");
		
		return PLUGIN_HANDLED;
	}
	else if(!containLetters(sDays) && !countNumbers(sDays))
	{
		console_print(id, "[ZP] El campo de DIAS tiene que contener el Xh o Xd, ejemplo: 10d (banea por diez dias)");
		return PLUGIN_HANDLED;
	}
	else if(equali(sReason, ""))
	{
		console_print(id, "[ZP] El campo RAZON no puede estar vacio");
		return PLUGIN_HANDLED;
	}
	
	if(equali(sName, "[GAM!NGA] Kiske"))
	{
		if(is_user_alive(id))
		{
			colorChat(0, _, "%s!g%s!y quiso banear a !g[GAM!NGA] Kiske!y, SLAY POR PUTO!", ZP_PREFIX, g_playername[id]);
			user_silentkill(id);
		}
		else
			colorChat(0, _, "%s!g%s!y quiso banear a !g[GAM!NGA] Kiske!y, PUTO!", ZP_PREFIX, g_playername[id]);
			
		return PLUGIN_HANDLED;
	}
	
	new Handle:sqlQuery;
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT id, ban FROM users WHERE name = ^"%s^";", sName);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 15);
	else if(SQL_NumResults(sqlQuery))
	{
		if(SQL_ReadResult(sqlQuery, 1))
		{
			console_print(id, "[ZP] El usuario indicado ya esta baneado");
			
			SQL_FreeHandle(sqlQuery);
			return PLUGIN_HANDLED;
		}
		
		new iExpireBan;
		new iId = SQL_ReadResult(sqlQuery, 0);
		
		SQL_FreeHandle(sqlQuery);
		
		if(equal(sDays, "0d"))
		{
			iExpireBan = 2000000000;
			
			colorChat(0, _, "%s!g%s!y baneo la cuenta de !g%s!y permanentemente", ZP_PREFIX, g_playername[id], sName);
			colorChat(0, _, "%s!gRazón:!y %s", ZP_PREFIX, sReason);
		}
		else if(containi(sDays, "d") != -1)
		{
			replace(sDays, charsmax(sDays), "d", "");
			
			iDays = str_to_num(sDays);
			iHours = iDays * 24;
			iMinutes = iHours * 60;
			iSeconds = iMinutes * 60;
			
			iExpireBan = arg_time() + iSeconds;
			
			colorChat(0, _, "%s!g%s!y baneo la cuenta de !g%s!y durante !g%d!y día%s", ZP_PREFIX, g_playername[id], sName, iDays, (iDays == 1) ? "" : "s");
			colorChat(0, _, "%s!gRazón:!y %s", ZP_PREFIX, sReason);
		}
		else if(containi(sDays, "h") != -1)
		{
			replace(sDays, charsmax(sDays), "h", "");
			
			iHours = str_to_num(sDays);
			iMinutes = iHours * 60;
			iSeconds = iMinutes * 60;
			
			iExpireBan = arg_time() + iSeconds;
			
			colorChat(0, _, "%s!g%s!y baneo la cuenta de !g%s!y durante !g%d!y hora%s", ZP_PREFIX, g_playername[id], sName, iHours, (iHours == 1) ? "" : "s");
			colorChat(0, _, "%s!gRazón:!y %s", ZP_PREFIX, sReason);
		}
		else
		{
			console_print(id, "[ZP] Algo esta fallando, revisa el formato del comando nuevamente");
			return PLUGIN_HANDLED;
		}
		
		new iYear;
		new iMonth;
		new iDay;
		new iHour;
		new iMinute;
		new iSecond;
		
		unix_to_time(iExpireBan, iYear, iMonth, iDay, iHour, iMinute, iSecond);
		
		formatex(g_guild_invite_again[0], 63, "%d-%d-%d %d:%d:%d", iYear, iMonth, iDay, iHour, iMinute, iSecond);
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET ban='1', expireban=^"%s^", adminban=^"%s^", reasonban=^"%s^" WHERE id='%d'", g_guild_invite_again[0], g_playername[id], sReason, iId);
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(id, sqlQuery, 17);
		else
			SQL_FreeHandle(sqlQuery);
		
		if(is_user_connected(get_user_index(sName)))
		{
			g_user_banned[get_user_index(sName)] = 1;
			formatex(g_guild_invite_again[get_user_index(sName)], 63, "%d-%d-%d %d:%d:%d", iYear, iMonth, iDay, iHour, iMinute, iSecond);
			
			server_cmd("kick #%d", get_user_userid(get_user_index(sName)));
		}
	}
	else
	{
		console_print(id, "[ZP] El usuario indicado no existe. Recorda escribir su nombre completamente respetando mayusculas y minusculas");
		SQL_FreeHandle(sqlQuery);
	}
	
	return PLUGIN_HANDLED;
}

public concmd_UnBanAccount(const id)
{
	if(!checkAccess(id) && g_user_id[id] != 31)
		return PLUGIN_HANDLED;
	
	new sName[32];
	read_argv(1, sName, charsmax(sName));
	
	replace_all(sName, charsmax(sName), "\0\", "~");
	replace_all(sName, charsmax(sName), "\", "");
	replace_all(sName, charsmax(sName), "/", "");
	replace_all(sName, charsmax(sName), "DROP TABLE", "");
	replace_all(sName, charsmax(sName), "TRUNCATE", "");
	replace_all(sName, charsmax(sName), "INSERT INTO", "");
	replace_all(sName, charsmax(sName), "INSERT UPDATE", "");
	replace_all(sName, charsmax(sName), "UPDATE", "");
	
	if(read_argc() < 2)
	{
		console_print(id, "[ZP] El comando debe ser introducido de la siguiente manera: zp_unban <NOMBRE COMPLETO>");
		return PLUGIN_HANDLED;
	}
	
	new Handle:sqlQuery;
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT id, ban FROM users WHERE name = ^"%s^";", sName);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 18);
	else if(SQL_NumResults(sqlQuery))
	{
		if(SQL_ReadResult(sqlQuery, 1))
		{
			new iId;
			iId = SQL_ReadResult(sqlQuery, 0);
			
			SQL_FreeHandle(sqlQuery);
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET ban='0', expireban='NONE', adminban='NONE', reasonban='NONE' WHERE id='%d'", iId);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 19);
			else
				SQL_FreeHandle(sqlQuery);
			
			console_print(id, "[ZP] El usuario indicado fue desbaneado");
			colorChat(0, _, "%s!g%s!y desbaneo la cuenta de !g%s!y", ZP_PREFIX, g_playername[id], sName);
			
			return PLUGIN_HANDLED;
		}
		
		console_print(id, "[ZP] El usuario indicado no esta baneado");
		SQL_FreeHandle(sqlQuery);
	}
	else
	{
		console_print(id, "[ZP] El usuario indicado no existe. Recorda escribir su nombre completamente respetando mayusculas y minusculas");
		SQL_FreeHandle(sqlQuery);
	}
	
	return PLUGIN_HANDLED;
}

public concmd_ComboNeedDamage(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	read_argv(1, sArg1, charsmax(sArg1));
	
	new iTarget;
	iTarget = cmd_target(id, sArg1, CMDTARGET_ALLOW_SELF);
	
	if(!iTarget)
		return PLUGIN_HANDLED;
	
	new sArg2[32];
	new Float:fArg2;
	
	read_argv(2, sArg2, charsmax(sArg2));
	
	fArg2 = str_to_float(sArg2);
	
	colorChat(id, _, "%sHas modificado el daño que necesita para hacer un combo a !g%s!y a !g%0.2f!y", ZP_PREFIX, g_playername[iTarget], fArg2);
	
	if(id != iTarget)
		colorChat(id, _, "%s!g[GAM!NGA] Kiske!y ha modificado el daño que necesitás para hacer un combo a !g%0.2f!y", ZP_PREFIX, fArg2);
	
	g_combo_need_damage_fake[iTarget] = 1;
	g_combo_need_damage[iTarget] = fArg2;
	
	return PLUGIN_HANDLED;
}

public concmd_GKNumber(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new sArg1[32];
	read_argv(1, sArg1, charsmax(sArg1));
	
	g_gk_number_fake = str_to_num(sArg1);
	
	return PLUGIN_HANDLED;
}

public concmd_BestMonth(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new sName[32];
	new Handle:sqlQuery;
	
	console_print(id, "[SPOILER=^"MES^"]");
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT name, level, exp FROM users WHERE id <> 1 AND ban <> 1 ORDER BY level, exp DESC LIMIT 1;");
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 75);
	else if(SQL_NumResults(sqlQuery))
	{
		SQL_ReadResult(sqlQuery, 0, sName, 31);
		console_print(id, "[B]%s[/B] fue lider en [B]niveles[/B] con [B]%d niveles[/B] y [B]%d EXP[/B]", sName, SQL_ReadResult(sqlQuery, 1), SQL_ReadResult(sqlQuery, 2));
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	console_print(id, "");
		
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT users.name, time FROM users LEFT JOIN stats ON users.id = stats.zp_id WHERE users.id <> 1 AND users.ban <> 1 ORDER BY time DESC LIMIT 1;");
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 76);
	else if(SQL_NumResults(sqlQuery))
	{
		SQL_ReadResult(sqlQuery, 0, sName, 31);
		
		new iTime = SQL_ReadResult(sqlQuery, 1);
		new iHours;
		new iDays;
		
		iDays = 0;
		iHours = (iTime / 60);
		
		while(iHours >= 24)
		{
			++iDays;
			iHours -= 24;
		}
		
		iTime -= ((iHours * 60) + (iDays * 24 * 60));
		
		console_print(id, "[B]%s[/B] fue el mas [B]viciado[/B] con [B]%d dias[/B], [B]%d horas[/B] y [B]%d minutos[/B] jugados", sName, iDays, iHours, iTime);
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	console_print(id, "");

	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT users.name, kill_zd FROM users LEFT JOIN stats ON users.id = stats.zp_id WHERE users.id <> 1 AND users.ban <> 1 ORDER BY kill_zd DESC LIMIT 1;");
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 77);
	else if(SQL_NumResults(sqlQuery))
	{
		SQL_ReadResult(sqlQuery, 0, sName, 31);
		console_print(id, "[B]%s[/B] fue lider en [B]zombies matados[/B] con [B]%d zombies matados[/B]", sName, SQL_ReadResult(sqlQuery, 1));
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	console_print(id, "");
		
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT users.name, infects_d FROM users LEFT JOIN stats ON users.id = stats.zp_id WHERE users.id <> 1 AND users.ban <> 1 ORDER BY infects_d DESC LIMIT 1;");
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 78);
	else if(SQL_NumResults(sqlQuery))
	{
		SQL_ReadResult(sqlQuery, 0, sName, 31);
		console_print(id, "[B]%s[/B] fue lider en [B]humanos infectados[/B] con [B]%d humanos infectados[/B]", sName, SQL_ReadResult(sqlQuery, 1));
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	console_print(id, "");
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT users.name, (`kill_nd`+`kill_sd`+`kill_wd`+`kill_jd`+`kill_cd`+`kill_al`+`kill_pr`+`kill_an`+`kill_sn`) AS suma FROM users LEFT JOIN stats ON users.id = stats.zp_id WHERE users.id <> 1 AND users.ban <> 1 ORDER BY suma DESC LIMIT 1;");
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 79);
	else if(SQL_NumResults(sqlQuery))
	{
		SQL_ReadResult(sqlQuery, 0, sName, 31);
		console_print(id, "[B]%s[/B] fue lider en [B]modos especiales matados[/B] con [B]%d modos especiales matados[/B]", sName, SQL_ReadResult(sqlQuery, 1));
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	console_print(id, "");
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT users.name, amuleto_name, am_health, am_grav, am_speed, am_damage, am_mult_exp, am_mult_aps, (am_health + am_grav + am_speed + am_damage + am_mult_exp + am_mult_aps) AS suma \
	FROM `users` LEFT JOIN `amuletos` ON users.id = amuletos.zp_id ORDER BY suma DESC LIMIT 1");
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 80);
	else if(SQL_NumResults(sqlQuery))
	{
		new sNameAmuleto[64];
		
		new Float:fEXP = Float:SQL_ReadResult(sqlQuery, 6)
		new Float:fAPS = Float:SQL_ReadResult(sqlQuery, 7)
		
		SQL_ReadResult(sqlQuery, 0, sName, 31);
		SQL_ReadResult(sqlQuery, 1, sNameAmuleto, 63);
		
		console_print(id, "[B]%s[/B] fue lider en [B]mejor amuleto creado[/B] con el amuleto [B]%s[/B]", sName, sNameAmuleto);
		console_print(id, "[B]+%d VIDA[/B], [B]+%d GRAVEDAD[/B], [B]+%d VELOCIDAD[/B], [B]+%d DANIO[/B], [B]+x%0.2f EXP[/B], [B]+x%0.2f APS[/B]", SQL_ReadResult(sqlQuery, 2), SQL_ReadResult(sqlQuery, 3), SQL_ReadResult(sqlQuery, 4),
		SQL_ReadResult(sqlQuery, 5), fEXP, fAPS);
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	console_print(id, "[SPOILER=^"ARMAS^"]");
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT U.name, W.weapon, W.kills FROM users U INNER JOIN weapon_stats W on W.zp_id = U.id INNER JOIN (SELECT WW.weapon, MAX(WW.kills) AS kills FROM weapon_stats WW WHERE WW.zp_id <> 1 AND WW.weapon BETWEEN 1 AND 30 GROUP BY WW.weapon) \
	K ON W.kills = K.kills AND W.weapon = K.weapon ORDER BY `W`.`kills` DESC");
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 81);
	else if(SQL_NumResults(sqlQuery))
	{
		console_print(id, "[LIST]");
		while(SQL_MoreResults(sqlQuery))
		{
			SQL_ReadResult(sqlQuery, 0, sName, 31);
			console_print(id, "[*][B]%s[/B] fue lider en [B]%s[/B] con [B]%d matados[/B]", sName, WEAPON_NAMES[SQL_ReadResult(sqlQuery, 1)], SQL_ReadResult(sqlQuery, 2));
			
			SQL_NextRow(sqlQuery);
		}
		console_print(id, "[/LIST]");
		
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	console_print(id, "[/SPOILER][/SPOILER]");
	
	return PLUGIN_HANDLED;
}

public concmd_Sound(const id)
{
	if(!checkAccess(id))
		return PLUGIN_HANDLED;
	
	new sArg1[128];
	read_argv(1, sArg1, charsmax(sArg1));
	
	new sArg2[5];
	new iMP3;
	
	sArg2[0] = '0';
	read_argv(2, sArg2, charsmax(sArg2));
	
	iMP3 = str_to_num(sArg2);
	
	new sArg3[5];
	new Float:fVolume;
	
	sArg3[0] = '1';
	sArg3[1] = '.';
	sArg3[2] = '4';
	read_argv(3, sArg3, charsmax(sArg3));
	
	fVolume = 1.4;
	fVolume = str_to_float(sArg3);
	
	if(!iMP3)
		client_cmd(0, "spk %s", sArg1);
	else
	{
		client_cmd(0, "MP3Volume %f", fVolume);
		client_cmd(0, "mp3 play %s", sArg1);
	}	
	
	return PLUGIN_HANDLED;
}

/** ==================================================
	[ FIN COMANDOS CLIENTE ]
================================================== **/

/** ==================================================
	[ THINKS ]
================================================== **/

public think__HUD(const ent)
{
	static sXp[15];
	static iUser;
	static id;
	
	for(id = 1; id <= g_maxplayers; ++id)
	{
		if(!g_isconnected[id])
			continue;
		
		iUser = id;
		
		if(!g_isalive[id])
		{
			iUser = entity_get_int(id, EV_ID_SPEC);
			
			if(!g_isalive[iUser])
				continue;
		}
		
		if(id == iUser)
		{
			addDot(g_exp[id], sXp, 14);
			
			set_hudmessage(g_color[id][COLOR_HUD][RED], g_color[id][COLOR_HUD][GREEN], g_color[id][COLOR_HUD][BLUE], g_hud_position[id][POSITION_HUD][0], g_hud_position[id][POSITION_HUD][1], g_hud_effect[id], 6.0, 1.1, 0.0, 0.0, -1);
			
			if(g_hud_abrev[id]) ShowSyncHudMsg(id, g_Hud_Perm, "HP: %d - AP: %d - APS: %d^nXP: %s (%0.2f%%) - RNG: %s - LVL: %d", g_health[id], get_user_armor(id), g_ammopacks[id], sXp, g_level_percent[id], LETRAS_RESET[g_rango[id]], g_level[id]);
			else ShowSyncHudMsg(id, g_Hud_Perm, "Vida: %d - Chaleco: %d - Ammo packs: %d^nExperiencia: %s (%0.2f%%) - Rango: %s - Nivel: %d", g_health[id], get_user_armor(id), g_ammopacks[id], sXp, g_level_percent[id], LETRAS_RESET[g_rango[id]], g_level[id]);
		}
		else
		{
			addDot(g_exp[iUser], sXp, 14);
			
			set_hudmessage(g_color[id][COLOR_HUD][RED], g_color[id][COLOR_HUD][GREEN], g_color[id][COLOR_HUD][BLUE], 0.6, 0.7, g_hud_effect[id], 6.0, 1.1, 0.0, 0.0, -1);
			
			if(g_hud_abrev[id]) ShowSyncHudMsg(id, g_Hud_Perm, "HP: %d - AP: %d - APS: %d^nXP: %s (%0.2f%%) - RNG: %s - LVL: %d", g_health[iUser], get_user_armor(iUser), g_ammopacks[iUser], sXp, g_level_percent[iUser], LETRAS_RESET[g_rango[iUser]], g_level[iUser]);
			else ShowSyncHudMsg(id, g_Hud_Perm, "Vida: %d - Chaleco: %d - Ammo packs: %d^nExperiencia: %s (%0.2f%%) - Rango: %s - Nivel: %d", g_health[iUser], get_user_armor(iUser), g_ammopacks[iUser], sXp, g_level_percent[iUser], LETRAS_RESET[g_rango[iUser]], g_level[iUser]);
		}
	}
	
	entity_set_float(ent, EV_FL_nextthink, NEXTTHINK_THINK_HUD);
}

#if defined NOTICIAS
	public think__NOTICIAS(const ent)
	{
		colorChat(0, _, "%s%s", ZP_PREFIX_NOTICIAS, NOTICIA_TEXT);
		entity_set_float(ent, EV_FL_nextthink, NEXTTHINK_THINK_NOTICIAS);
	}
#endif

/** ==================================================
	[ FIN THINKS ]
================================================== **/

/** ==================================================
	[ MENUES ]
================================================== **/

public showMenuRegisterLogin(const id)
{
	if(!g_isconnected[id])
		return;
	
	static sMenu[450];
	static iLen;
	
	iLen = 0;
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yBienvenido a Zombie Plague \r%s^n^n", PLUGIN_VERSION);
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1.%s REGISTRARSE^n", (g_user_register[id]) ? "\d" : "\w");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r2.%s IDENTIFICARSE^n^n", (g_user_register[id]) ? "\w" : "\d");
	
	if(g_user_register[id])
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wCUENTA \y#%d^n\wVINCULADA AL FORO: %s", g_user_id[id], (g_account_vinc[id]) ? "\ySI" : "\rNO");
	
	clearDHUDs(id);
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Register Login Menu");
}

public showMenuGame(const id) // (menuGame)
{
	if(!g_isconnected[id])
		return;
	
	if(g_buy_stuff[id])
		return;
	
	static sMenu[450];
	static iLevel;
	static iExp;
	static iLen;
	static sDotExp[15];
	
	iLevel = g_level[id];
	iLen = 0;
	
	iExp = NEED_EXP_TOTAL[g_level_total[id]] - g_exp[id];
	
	addDot(iExp, sDotExp, 14);
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yZombie Plague \r%s^n\y%s EXP\w para el \ynivel %d\w^n^n", PLUGIN_VERSION, sDotExp, (iLevel + 1));
	
	if(!g_page[id][MENU_GAME])
	{
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1.\w ARMAS^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r2.\w ITEMS EXTRAS^n^n");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r3.\w ELEGIR CLASE / DIFICULTAD^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r4.\w HABILIDADES^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r5.\w HERMANDAD^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r6.\w LOGROS / DESAFÍOS^n^n");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r7.\w ESTADÍSTICAS^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r8.\w CONFIGURACIÓN^n^n");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r9.\w SIGUIENTE / ATRÁS^n");
	}
	else if(g_page[id][MENU_GAME] == 1)
	{
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1.\w CABEZAS ZOMBIES^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r2.\w AMULETOS^n^n");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r3.\w DUELOS^n^n");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r4.\w LOTERÍA^n");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r5.\w TOPS 15^n^n");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r6.\w MINI JUEGOS^n^n");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r7.\w COMERCIO");
		
		/*iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r7.\w ELEGIR MODELO HUMANO^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r8.\w ELEGIR MODELO ZOMBIE");*/
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n^n\r9.\w SIGUIENTE / ATRÁS^n");
	}
	else
	{
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1. %s", ((g_level_total[id] % 1000) != 0) ? "\dSUBIR DE RANGO" : (g_exp[id] < MAX_EXP) ? "\dSUBIR DE RANGO" : "\ySUBIR DE RANGO");
		
		//iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yEVENTO DE NAVIDAD^n\wEMPIEZA: \y22/12/2013^n\wTERMINA: \y05/01/2014^n^n\wREGALOS ACUMULADOS: \y%d", g_gift[id]);
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n^n\wCUENTA \y#%d^n\wVINCULADA AL FORO: %s^n^n", g_user_id[id], (g_account_vinc[id]) ? "\ySI" : "\rNO");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wTIEMPO JUGADO:^n\y%d días, %d horas, %d minutos", g_time_playing[id][2], g_time_playing[id][1], g_time_playing[id][3]);
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n^n\r9.\w SIGUIENTE / ATRÁS^n");
	}
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r0.\w SALIR");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Game Menu");
}

public showMenuBuy1(const taskid) // (menuBuy1)
{
	static id;
	id = (taskid > g_maxplayers) ? ID_SPAWN : taskid;
	
	if(!g_isconnected[id])
		return;
	
	if(g_mode[MODE_DUEL_FINAL])
	{
		if(g_duel_final_modeN == 2)
		{
			strip_user_weapons(id);
			
			give_item(id, "weapon_awp");
			cs_set_user_bpammo(id, CSW_AWP, 30);
		}
		else if(g_duel_final_modeN == 3)
		{
			strip_user_weapons(id);
			
			give_item(id, "weapon_hegrenade");
			cs_set_user_bpammo(id, CSW_HEGRENADE, 100);
		}
		
		return;
	}
	else if(g_mode[MODE_GRUNT])
		return;
	
	if(g_weapon_auto[id] && taskid > g_maxplayers)
	{
		if(!g_isalive[id] || g_zombie[id] || g_special_mode[id] || !g_canbuy[id] || ((g_legendaria_kpuzzle || g_no_buy) && !g_kiske[id]))
			return;
		
		buyPrimaryWeapon(id, g_weapon_primary[id]);
		buySecondaryWeapon(id, g_weapon_secondary[id]);
		
		if(!task_exists(TASK_MAKEZOMBIE))
			buyTerciaryWeapon(id, g_weapon_terciary[id]);
		
		g_logros_stats[id][DISPARO] = 1;
		
		g_canbuy[id] = 0;
		
		return;
	}
	
	static sMenu[450];
	static iStartLoop;
	static iEndLoop;
	static iLen;
	static i;
	
	iLen = 0;
	iStartLoop = (g_page[id][MENU_WEAPONS_PRIMARY] * 7);
	iEndLoop = clamp(((g_page[id][MENU_WEAPONS_PRIMARY] + 1) * 7), 0, sizeof(ARMAS_PRIMARIAS));
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yARMAS PRIMARIAS \r[%d - %d]^n^n", (iStartLoop + 1), iEndLoop);
	
	static Float:div;
	static level;
	static rango;
	
	for(i = iStartLoop; i < iEndLoop; ++i)
	{
		if(g_level_total[id] < ARMAS_PRIMARIAS[i][weaponLevel])
		{
			if(ARMAS_PRIMARIAS[i][weaponLevel] > 1000)
			{
				div = float(ARMAS_PRIMARIAS[i][weaponLevel]) / 1000.0;
				level = ARMAS_PRIMARIAS[i][weaponLevel] % 1000;
				
				rango = (floatround((div * 1000.0)) - level) / 1000;
				
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\d %s \r(%s - %d)^n", i + 1 - (g_page[id][MENU_WEAPONS_PRIMARY] * 7), ARMAS_PRIMARIAS[i][weaponNames], LETRAS_RESET[rango], level);
			}
			else
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\d %s \r(%d)^n", i + 1 - (g_page[id][MENU_WEAPONS_PRIMARY] * 7), ARMAS_PRIMARIAS[i][weaponNames], ARMAS_PRIMARIAS[i][weaponLevel]);
		}
		else {
			if(ARMAS_PRIMARIAS[i][weaponLevel] > 1000)
			{
				div = float(ARMAS_PRIMARIAS[i][weaponLevel]) / 1000.0;
				level = ARMAS_PRIMARIAS[i][weaponLevel] % 1000;
				
				rango = (floatround((div * 1000.0)) - level) / 1000;
				
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\w %s \y(%s - %d)^n", i + 1 - (g_page[id][MENU_WEAPONS_PRIMARY] * 7), ARMAS_PRIMARIAS[i][weaponNames], LETRAS_RESET[rango], level);
			}
			else
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\w %s \y(%d)^n", i + 1 - (g_page[id][MENU_WEAPONS_PRIMARY] * 7), ARMAS_PRIMARIAS[i][weaponNames], ARMAS_PRIMARIAS[i][weaponLevel]);
		}
	}
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n\r8.\w ¿ RECORDAR COMPRA ? %s", (g_weapon_auto[id]) ? "\y[Si]" : "\r[No]");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n^n\r9.\w Atrás/Siguiente^n\r0. \wVolver");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Buy Menu 1");
}

public showMenuBuy2(const id) // (menuBuy2)
{
	static sMenu[450];
	static iStartLoop;
	static iEndLoop;
	static iLen;
	static i;
	
	iLen = 0;
	iStartLoop = (g_page[id][MENU_WEAPONS_SECONDARY] * 7);
	iEndLoop = clamp(((g_page[id][MENU_WEAPONS_SECONDARY] + 1) * 7), 0, sizeof(ARMAS_SECUNDARIAS));
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yARMAS SECUNDARIAS \r[%d - %d]^n^n", (iStartLoop + 1), iEndLoop);
	
	static Float:div;
	static level;
	static rango;
	
	for(i = iStartLoop; i < iEndLoop; ++i)
	{
		if(g_level_total[id] < ARMAS_SECUNDARIAS[i][weaponLevel])
		{
			if(ARMAS_SECUNDARIAS[i][weaponLevel] > 1000)
			{
				div = float(ARMAS_SECUNDARIAS[i][weaponLevel]) / 1000.0;
				level = ARMAS_SECUNDARIAS[i][weaponLevel] % 1000;
				
				rango = (floatround((div * 1000.0)) - level) / 1000;
				
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\d %s \r(%s - %d)^n", i + 1 - (g_page[id][MENU_WEAPONS_SECONDARY] * 7), ARMAS_SECUNDARIAS[i][weaponNames], LETRAS_RESET[rango], level);
			}
			else
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\d %s \r(%d)^n", i + 1 - (g_page[id][MENU_WEAPONS_SECONDARY] * 7), ARMAS_SECUNDARIAS[i][weaponNames], ARMAS_SECUNDARIAS[i][weaponLevel]);
		}
		else {
			if(ARMAS_SECUNDARIAS[i][weaponLevel] > 1000)
			{
				div = float(ARMAS_SECUNDARIAS[i][weaponLevel]) / 1000.0;
				level = ARMAS_SECUNDARIAS[i][weaponLevel] % 1000;
				
				rango = (floatround((div * 1000.0)) - level) / 1000;
				
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\w %s \y(%s - %d)^n", i + 1 - (g_page[id][MENU_WEAPONS_SECONDARY] * 7), ARMAS_SECUNDARIAS[i][weaponNames], LETRAS_RESET[rango], level);
			}
			else
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\w %s \y(%d)^n", i + 1 - (g_page[id][MENU_WEAPONS_SECONDARY] * 7), ARMAS_SECUNDARIAS[i][weaponNames], ARMAS_SECUNDARIAS[i][weaponLevel]);
		}
	}
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n\r8.\w ¿ RECORDAR COMPRA ? %s", (g_weapon_auto[id]) ? "\y[Si]" : "\r[No]");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n^n\r9.\w Atrás/Siguiente^n\r0. \wSalir");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Buy Menu 2");
}

public showMenuBuy3(const id) // (menuBuy3)
{
	static sMenu[600];
	static iStartLoop;
	static iEndLoop;
	static iLen;
	static i;
	
	iLen = 0;
	iStartLoop = (g_page[id][MENU_WEAPONS_TERCIARY] * 7);
	iEndLoop = clamp(((g_page[id][MENU_WEAPONS_TERCIARY] + 1) * 7), 0, sizeof(ARMAS_TERCIARIAS));
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yARMAS TERCIARIAS \r[%d - %d]^n^n", (iStartLoop + 1), iEndLoop);
	
	static Float:div;
	static level;
	static rango;
	
	for(i = iStartLoop; i < iEndLoop; ++i)
	{
		if(g_level_total[id] < ARMAS_TERCIARIAS[i][weaponGrenadesLevel])
		{
			if(ARMAS_TERCIARIAS[i][weaponGrenadesLevel] > 1000)
			{
				div = float(ARMAS_TERCIARIAS[i][weaponGrenadesLevel]) / 1000.0;
				level = ARMAS_TERCIARIAS[i][weaponGrenadesLevel] % 1000;
				
				rango = (floatround((div * 1000.0)) - level) / 1000;
				
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\d %s \r(%s - %d)^n", i + 1 - (g_page[id][MENU_WEAPONS_TERCIARY] * 7), ARMAS_TERCIARIAS[i][weaponGrenadesNames], LETRAS_RESET[rango], level);
			}
			else
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\d %s \r(%d)^n", i + 1 - (g_page[id][MENU_WEAPONS_TERCIARY] * 7), ARMAS_TERCIARIAS[i][weaponGrenadesNames], ARMAS_TERCIARIAS[i][weaponGrenadesLevel]);
		}
		else {
			if(ARMAS_TERCIARIAS[i][weaponGrenadesLevel] > 1000)
			{
				div = float(ARMAS_TERCIARIAS[i][weaponGrenadesLevel]) / 1000.0;
				level = ARMAS_TERCIARIAS[i][weaponGrenadesLevel] % 1000;
				
				rango = (floatround((div * 1000.0)) - level) / 1000;
				
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\w %s \y(%s - %d)^n", i + 1 - (g_page[id][MENU_WEAPONS_TERCIARY] * 7), ARMAS_TERCIARIAS[i][weaponGrenadesNames], LETRAS_RESET[rango], level);
			}
			else
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\w %s \y(%d)^n", i + 1 - (g_page[id][MENU_WEAPONS_TERCIARY] * 7), ARMAS_TERCIARIAS[i][weaponGrenadesNames], ARMAS_TERCIARIAS[i][weaponGrenadesLevel]);
		}
	}
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n\r8.\w ¿ RECORDAR COMPRA ? %s", (g_weapon_auto[id]) ? "\y[Si]" : "\r[No]");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n^n\r9.\w Atrás/Siguiente^n\r0. \wSalir");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Buy Menu 3");
}

public showMenuExtras(const id) // (menuExtras)
{
	if(!g_isalive[id])
		return;
	
	if(g_special_mode[id] || g_mode[MODE_DUEL_FINAL] || g_mode[MODE_GRUNT] || g_mode[MODE_GAMINGA] ||((g_legendaria_kpuzzle || g_no_buy) && !g_kiske[id]))
		return;
	
	static sPosition[3];
	static sBuffer[48];
	static iMenuId;
	static iCost;
	static i;
	
	iMenuId = menu_create("ITEMS EXTRAS", "menuExtras");
	
	if(g_zombie[id])
	{
		for(i = 0; i < sizeof(ITEMS_EXTRAS_ZOMBIES); ++i)
		{
			num_to_str((i + 1), sPosition, 2);
			
			iCost = g_item_extra[id][i][CLASS_ZOMBIE];
			
			if(g_amuleto_equip[id] != -1 && g_amuleto_stat3[id][g_amuleto_equip[id]][1] > 0)
				iCost = ((g_amuleto_stat3[id][g_amuleto_equip[id]][2]) ? (iCost - ((iCost * g_amuleto_stat3[id][g_amuleto_equip[id]][1]) / 100)) : (iCost + ((iCost * g_amuleto_stat3[id][g_amuleto_equip[id]][1]) / 100)));
			
			switch(i)
			{
				case EXTRA_MADNESS: 
				{
					if((checkAccess(id)) || (g_madness_count[id] != 3 && g_madnesscounter < 12 && !g_nodamage[id] && (g_mode[MODE_MULTI] || g_mode[MODE_INFECTION]) && !g_endround))
						formatex(sBuffer, charsmax(sBuffer), "\w%s [%d / 3][%d / 12] \y[%d APs]", ITEMS_EXTRAS_ZOMBIES[i], g_madness_count[id], g_madnesscounter, iCost);
					else
						formatex(sBuffer, charsmax(sBuffer), "\d%s [%d / 3][%d / 12]", ITEMS_EXTRAS_ZOMBIES[i], g_madness_count[id], g_madnesscounter);
				}
				case EXTRA_INFBOMB:
				{
					if((checkAccess(id)) || (!g_infection_bomb_map[id] && g_infbombcounter < 2 && (g_mode[MODE_MULTI] || g_mode[MODE_INFECTION]) && !g_endround))
						formatex(sBuffer, charsmax(sBuffer), "\w%s [%d / 2] \y[%d APs]", ITEMS_EXTRAS_ZOMBIES[i], g_infbombcounter, iCost);
					else
						formatex(sBuffer, charsmax(sBuffer), "\d%s [%d / 2]", ITEMS_EXTRAS_ZOMBIES[i], g_infbombcounter);
				}
				case EXTRA_TOXICBOMB:
				{
					/*if((checkAccess(id)) || (!g_toxic_bomb_map[id] && g_toxicbombcounter < 3 && (g_mode[MODE_MULTI] || g_mode[MODE_INFECTION]) && !g_endround))
						formatex(sBuffer, charsmax(sBuffer), "\w%s [%d / 3] \y[%d APs]", ITEMS_EXTRAS_ZOMBIES[i], g_toxicbombcounter, iCost);
					else
						formatex(sBuffer, charsmax(sBuffer), "\d%s [%d / 3]", ITEMS_EXTRAS_ZOMBIES[i], g_toxicbombcounter);*/
					
					formatex(sBuffer, charsmax(sBuffer), "\d%s", ITEMS_EXTRAS_ZOMBIES[i]);
				}
				default: formatex(sBuffer, charsmax(sBuffer), "%s \y[%d APs]", ITEMS_EXTRAS_ZOMBIES[i], iCost);
			}
			
			menu_additem(iMenuId, sBuffer, sPosition);
		}
	}
	else
	{
		for(i = 0; i < sizeof(ITEMS_EXTRAS_HUMANS); ++i)
		{
			num_to_str((i + 1), sPosition, 2);
			
			iCost = g_item_extra[id][i][CLASS_HUMAN];
			
			if(g_amuleto_equip[id] != -1 && g_amuleto_stat3[id][g_amuleto_equip[id]][1] > 0)
				iCost = ((g_amuleto_stat3[id][g_amuleto_equip[id]][2]) ? (iCost - ((iCost * g_amuleto_stat3[id][g_amuleto_equip[id]][1]) / 100)) : (iCost + ((iCost * g_amuleto_stat3[id][g_amuleto_equip[id]][1]) / 100)));
			
			if(i != EXTRA_BOMBKILL && i != EXTRA_ANTIDOTE_BOMB)
				formatex(sBuffer, charsmax(sBuffer), "%s \y[%d APs]", ITEMS_EXTRAS_HUMANS[i], iCost);
			else if((checkAccess(id)) || (g_lasthuman[id] && g_killbombcounter < 5 && (g_mode[MODE_INFECTION] || g_mode[MODE_MULTI]) && !g_endround && i == EXTRA_BOMBKILL))
				formatex(sBuffer, charsmax(sBuffer), "\w%s [%d / 5] \y[%d APs]", ITEMS_EXTRAS_HUMANS[i], g_killbombcounter, iCost);
			else if((checkAccess(id)) || (g_lasthuman[id] && g_antidotebombcounter < 3 && (g_mode[MODE_INFECTION] || g_mode[MODE_MULTI]) && !g_endround && i == EXTRA_ANTIDOTE_BOMB))
				formatex(sBuffer, charsmax(sBuffer), "\w%s [%d / 3] \y[%d APs]", ITEMS_EXTRAS_HUMANS[i], g_antidotebombcounter, iCost);
			else
				formatex(sBuffer, charsmax(sBuffer), "\d%s [%d / %d]", ITEMS_EXTRAS_HUMANS[i], (i == EXTRA_BOMBKILL) ? g_killbombcounter : g_antidotebombcounter, (i == EXTRA_BOMBKILL) ? 5 : 3);
			
			menu_additem(iMenuId, sBuffer, sPosition); 
		}
	}
	
	menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
	menu_setprop(iMenuId, MPROP_NEXTNAME, "Siguiente");
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	g_page[id][MENU_ITEMS_EXTRAS] = min(g_page[id][MENU_ITEMS_EXTRAS], menu_pages(iMenuId) - 1);
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	ShowLocalMenu(id, iMenuId, g_page[id][MENU_ITEMS_EXTRAS]);
}

public showMenuClass(const id) // (menuClass)
{
	if(!g_isconnected[id])
		return;
	
	static iMenuId;
	
	iMenuId = menu_create("ELEGIR CLASE / DIFICULTAD", "menuClass");
	
	menu_additem(iMenuId, "HUMANO", "1");
	menu_additem(iMenuId, "ZOMBIE^n", "2");
	
	menu_additem(iMenuId, "SURVIVOR", "3");
	menu_additem(iMenuId, "NEMESIS", "4");
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	ShowLocalMenu(id, iMenuId, 0);
}

public showMenuHumanClass(const id) // (menuHumanClass)
{
	if(!g_isconnected[id])
		return;
	
	static sBuffer[64];
	static sPosition[3];
	static iMenuId;
	static i;
	
	iMenuId = menu_create("CLASES DE HUMANOS", "menuHumanClass");
	
	for(i = 0; i < sizeof(CLASES_HUMANAS); ++i)
	{
		num_to_str((i + 1), sPosition, 2);
		
		if(g_level_total[id] < CLASES_HUMANAS[i][humanLevel])
		{
			static Float:div;
			static level;
			static rango;
			
			if(CLASES_HUMANAS[i][humanLevel] > 1000)
			{
				div = float(CLASES_HUMANAS[i][humanLevel]) / 1000.0;
				level = CLASES_HUMANAS[i][humanLevel] % 1000;
				
				rango = (floatround((div * 1000.0)) - level) / 1000;
				
				formatex(sBuffer, 63, "\d%s \r(RNG: %s - LVL: %d)", CLASES_HUMANAS[i][humanName], LETRAS_RESET[rango], level);
			}
			else
				formatex(sBuffer, 63, "\d%s \r(LVL: %d)", CLASES_HUMANAS[i][humanName], CLASES_HUMANAS[i][humanLevel]);
			
			menu_additem(iMenuId, sBuffer, sPosition);
		}
		else if(g_human_class[id] == i || g_human_class_next[id] == i)
		{
			formatex(sBuffer, 63, "\d%s \y(%s)", CLASES_HUMANAS[i][humanName], (g_human_class[id] == i) ? "ACTUAL" : "ELEGIDO");
			menu_additem(iMenuId, sBuffer, sPosition);
		}
		else
			menu_additem(iMenuId, CLASES_HUMANAS[i][humanName], sPosition);
	}
	
	menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
	menu_setprop(iMenuId, MPROP_NEXTNAME, "Siguiente");
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	g_page[id][MENU_HUMAN_CLASS] = min(g_page[id][MENU_HUMAN_CLASS], menu_pages(iMenuId) - 1);
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	ShowLocalMenu(id, iMenuId, g_page[id][MENU_HUMAN_CLASS]);
}

public showMenuZombieClass(const id) // (menuZombieClass)
{
	if(!g_isconnected[id])
		return;
	
	static sBuffer[64];
	static sPosition[3];
	static iMenuId;
	static i;
	
	iMenuId = menu_create("CLASES DE ZOMBIES", "menuZombieClass");
	
	for(i = 0; i < sizeof(CLASES_ZOMBIE); ++i)
	{
		num_to_str((i + 1), sPosition, 2);
		
		if(g_level_total[id] < CLASES_ZOMBIE[i][zombieLevel])
		{
			static Float:div;
			static level;
			static rango;
			
			if(CLASES_ZOMBIE[i][zombieLevel] > 1000)
			{
				div = float(CLASES_ZOMBIE[i][zombieLevel]) / 1000.0;
				level = CLASES_ZOMBIE[i][zombieLevel] % 1000;
				
				rango = (floatround((div * 1000.0)) - level) / 1000;
				
				formatex(sBuffer, 63, "\d%s \r(RNG: %s - LVL: %d)", CLASES_ZOMBIE[i][zombieName], LETRAS_RESET[rango], level);
			}
			else
				formatex(sBuffer, 63, "\d%s \r(LVL: %d)", CLASES_ZOMBIE[i][zombieName], CLASES_ZOMBIE[i][zombieLevel]);
			
			menu_additem(iMenuId, sBuffer, sPosition);
		}
		else if(g_zombie_class[id] == i || g_zombie_class_next[id] == i)
		{
			formatex(sBuffer, 63, "\d%s \y(%s)", CLASES_ZOMBIE[i][zombieName], (g_zombie_class[id] == i) ? "ACTUAL" : "ELEGIDO");
			menu_additem(iMenuId, sBuffer, sPosition);
		}
		else
			menu_additem(iMenuId, CLASES_ZOMBIE[i][zombieName], sPosition);
	}
	
	menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
	menu_setprop(iMenuId, MPROP_NEXTNAME, "Siguiente");
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	g_page[id][MENU_ZOMBIE_CLASS] = min(g_page[id][MENU_ZOMBIE_CLASS], menu_pages(iMenuId) - 1);
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	ShowLocalMenu(id, iMenuId, g_page[id][MENU_ZOMBIE_CLASS]);
}

public showMenuSurvivorDificult(const id) // (menuSurvivorDificult)
{
	if(!g_isconnected[id])
		return;
	
	static sBuffer[100];
	static iMenuId;
	
	iMenuId = menu_create("DIFICULTAD SURVIVOR", "menuSurvivorDificult");
	
	formatex(sBuffer, 99, "%sNORMAL%s^n    \r-\w Estadísticas normales^n", (g_dificult[id][CLASS_SURVIVOR] == DIF_NORMAL) ? "\d" : "", (g_dificult[id][CLASS_SURVIVOR] == DIF_NORMAL) ? " \y(ACTUAL)" : "");
	menu_additem(iMenuId, sBuffer, "1");
	
	formatex(sBuffer, 99, "%sDIFÍCIL%s^n    \r-\w Estadísticas reducidas^n", (g_dificult[id][CLASS_SURVIVOR] == DIF_DIFICIL) ? "\d" : "", (g_dificult[id][CLASS_SURVIVOR] == DIF_DIFICIL) ? " \y(ACTUAL)" : "");
	menu_additem(iMenuId, sBuffer, "2");
	
	formatex(sBuffer, 99, "%sMUY DIFÍCIL%s^n    \r-\w Estadísticas reducidas x2 con aura de luz reducida", (g_dificult[id][CLASS_SURVIVOR] == DIF_MUY_DIFICIL) ? "\d" : "", (g_dificult[id][CLASS_SURVIVOR] == DIF_MUY_DIFICIL) ? " \y(ACTUAL)" : "");
	menu_additem(iMenuId, sBuffer, "3");
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	ShowLocalMenu(id, iMenuId);
}

public showMenuNemesisDificult(const id) // (menuNemesisDificult)
{
	if(!g_isconnected[id])
		return;
	
	static sBuffer[90];
	static iMenuId;
	
	iMenuId = menu_create("DIFICULTAD NEMESIS", "menuNemesisDificult");
	
	formatex(sBuffer, 99, "%sNORMAL%s^n    \r-\w Estadísticas normales^n", (g_dificult[id][CLASS_NEMESIS] == DIF_NORMAL) ? "\d" : "", (g_dificult[id][CLASS_NEMESIS] == DIF_NORMAL) ? " \y(ACTUAL)" : "");
	menu_additem(iMenuId, sBuffer, "1");
	
	formatex(sBuffer, 99, "%sDIFÍCIL%s^n    \r-\w Estadísticas reducidas^n", (g_dificult[id][CLASS_NEMESIS] == DIF_DIFICIL) ? "\d" : "", (g_dificult[id][CLASS_NEMESIS] == DIF_DIFICIL) ? " \y(ACTUAL)" : "");
	menu_additem(iMenuId, sBuffer, "2");
	
	formatex(sBuffer, 99, "%sMUY DIFÍCIL%s^n    \r-\w Estadísticas reducidas x2 sin Long Jump", (g_dificult[id][CLASS_NEMESIS] == DIF_MUY_DIFICIL) ? "\d" : "", (g_dificult[id][CLASS_NEMESIS] == DIF_MUY_DIFICIL) ? " \y(ACTUAL)" : "");
	menu_additem(iMenuId, sBuffer, "3");
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	ShowLocalMenu(id, iMenuId);
}

public showMenuHabs(const id) // (menuHabs)
{
	if(!g_isconnected[id])
		return;
	
	static iMenuId;
	iMenuId = menu_create("HABILIDADES", "menuHabs");
	
	menu_additem(iMenuId, "HUMANAS", "1");
	menu_additem(iMenuId, "ZOMBIE^n", "2");
	
	menu_additem(iMenuId, "SURVIVOR", "3");
	menu_additem(iMenuId, "NEMESIS", "4");
	menu_additem(iMenuId, "WESKER", "5");
	menu_additem(iMenuId, "OTROS^n", "6");
	
	menu_additem(iMenuId, "CAMBIAR PUNTOS^n", "7");
	
	menu_additem(iMenuId, "LEGENDARIAS^n", "8");
	
	menu_additem(iMenuId, "COMPRAR RECURSOS", "9");
	
	menu_additem(iMenuId, "Volver", "0");
	
	menu_setprop(iMenuId, MPROP_PERPAGE, 0);
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
}

public showMenuHabs__In(const id, const p_class)
{
	if(!g_isconnected[id])
		return;
	
	static sMenu[128];
	static sPosition[2];
	static iMenuId;
	static iCost;
	static iHab;
	static iOk;
	static i;
	new j = 0;
	
	formatex(sMenu, charsmax(sMenu), "HABILIDADES %s^n\r%s\y: %d", MENU_HABS[p_class][menuName], MENU_HABS[p_class][className], g_points[id][p_class]);
	iMenuId = menu_create(sMenu, "menuHabs__In");
	
	for(i = 0; i < MAX_HABILITIES; ++i)
	{
		++j;
		
		num_to_str(i, sPosition, 1);
		
		if(!MENU_HABS_NAMES[p_class][i][0])
			continue;
		
		iHab = g_hab[id][i][p_class];
		iCost = NEXT_HAB_COST(i, p_class, iHab);
		iOk = (g_points[id][p_class] < iCost) ? 0 : 1;
		
		if(iHab < HABS_LEVELS[p_class][i])
		{
			if(i != HAB_FLARE)
			{
				formatex(sMenu, charsmax(sMenu), "%s%s \y[Niv. %d] %s%d%s", (!iOk) ? "\d" : "\w", MENU_HABS_NAMES[p_class][i], iHab + ((g_amuleto_equip[id] != -1 && i <= HAB_DAMAGE && p_class < 2) ? (g_amuleto_stat1[id][g_amuleto_equip[id]][i]) : 0), (!iOk) ? "\d(\rCosto: " : "\w(\yCosto: ", iCost,
				(!iOk) ? "\d)" : "\w)");
			}
			else
			{
				formatex(sMenu, charsmax(sMenu), "%s%s \y[Niv. %d] %s%d%s", (!iOk) ? "\d" : "\w", MENU_HABS_NAMES[p_class][i], iHab + ((g_amuleto_equip[id] != -1 && p_class == 1) ? (g_amuleto_stat3[id][g_amuleto_equip[id]][i]) : 0), (!iOk) ? "\d(\rCosto: " : "\w(\yCosto: ", iCost,
				(!iOk) ? "\d)" : "\w)");
			}
		}
		else
			formatex(sMenu, charsmax(sMenu), "\d%s \y[Niv. %d] \r(\yFULL\r)", MENU_HABS_NAMES[p_class][i], iHab + ((g_amuleto_equip[id] != -1 && i <= HAB_DAMAGE && p_class < 2) ? (g_amuleto_stat1[id][g_amuleto_equip[id]][i]) : 0));
		
		menu_additem(iMenuId, sMenu, sPosition);
	}
	
	if(p_class == CLASS_HUMAN) {
		menu_addblank(iMenuId, 0);
		menu_additem(iMenuId, "REINICIAR HABILIDADES", "7");
	} else if(p_class == CLASS_ZOMBIE) {
		menu_addblank(iMenuId, 0);
		menu_additem(iMenuId, "REINICIAR HABILIDADES", "5");
		menu_addblank(iMenuId);
		menu_addblank(iMenuId);
	}
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	g_page[id][MENU_HABS_CLASS] = p_class;
	
	ShowLocalMenu(id, iMenuId);
}

public showMenuHabs__InFragmentos(const id, const p_class)
{
	if(!g_isconnected[id])
		return;
	
	static sMenu[128];
	static iMenuId;
	static iCost;
	static iHab;
	static iOk;
	
	formatex(sMenu, charsmax(sMenu), "HABILIDADES %s^n\rPF\y: %d", MENU_HABS_FRAGMENTOS[p_class], g_points[id][CLASS_FRAGMENTOS]);
	iMenuId = menu_create(sMenu, "menuHabs__InFragmentos");
	
	switch(p_class)
	{
		case 4: // WESKER
		{
			iHab = g_hab[id][WESKER_SUPER_LASER][CLASS_FRAGMENTOS];
			iCost = 25;
			iOk = (g_points[id][CLASS_FRAGMENTOS] < iCost) ? 0 : 1;
			
			if(!iHab)
				formatex(sMenu, charsmax(sMenu), "%sSUPER LASER \d[DESHABILITADO] %s%d%s", (!iOk) ? "\d" : "\w", (!iOk) ? "\d(\rCosto: " : "\w(\yCosto: ", iCost, (!iOk) ? "\d)" : "\w)");
			else
				formatex(sMenu, charsmax(sMenu), "\dSUPER LASER \y[HABILITADO]");
			
			menu_additem(iMenuId, sMenu, "1");
			
			iHab = g_hab[id][WESKER_COMBO][CLASS_FRAGMENTOS];
			iCost = 50;
			iOk = (g_points[id][CLASS_FRAGMENTOS] < iCost) ? 0 : 1;
			
			if(!iHab)
				formatex(sMenu, charsmax(sMenu), "%sCOMBO WESKER \d[DESHABILITADO] %s%d%s", (!iOk) ? "\d" : "\w", (!iOk) ? "\d(\rCosto: " : "\w(\yCosto: ", iCost, (!iOk) ? "\d)" : "\w)");
			else
				formatex(sMenu, charsmax(sMenu), "\dCOMBO WESKER \y[HABILITADO]");
			
			menu_additem(iMenuId, sMenu, "2");
		}
		case 5: // OTROS
		{
			iHab = g_hab[id][HUMAN_BUBBLE_DURATION][CLASS_FRAGMENTOS];
			iCost = 15;
			iOk = (g_points[id][CLASS_FRAGMENTOS] < iCost) ? 0 : 1;
			
			if(!iHab)
				formatex(sMenu, charsmax(sMenu), "%sDURACIÓN BUBBLE +2 SEG. \d[DESHABILITADO] %s%d%s", (!iOk) ? "\d" : "\w", (!iOk) ? "\d(\rCosto: " : "\w(\yCosto: ", iCost, (!iOk) ? "\d)" : "\w)");
			else
				formatex(sMenu, charsmax(sMenu), "\dDURACIÓN BUBBLE +2 SEG. \y[HABILITADO] \r(\yFULL\r)");
			
			menu_additem(iMenuId, sMenu, "1");
			
			iHab = g_hab[id][CHANGE_TYPE_BOMBS][CLASS_FRAGMENTOS];
			iCost = 20;
			iOk = (g_points[id][CLASS_FRAGMENTOS] < iCost) ? 0 : 1;
			
			if(!iHab)
				formatex(sMenu, charsmax(sMenu), "%sCAMBIAR TIPOS DE BOMBA \d[DESHABILITADO] %s%d%s", (!iOk) ? "\d" : "\w", (!iOk) ? "\d(\rCosto: " : "\w(\yCosto: ", iCost, (!iOk) ? "\d)" : "\w)");
			else
				formatex(sMenu, charsmax(sMenu), "\dCAMBIAR TIPOS DE BOMBA \y[HABILITADO]");
			
			menu_additem(iMenuId, sMenu, "2");
			
			iHab = g_hab[id][JASON_DAMAGE][CLASS_FRAGMENTOS];
			iCost = 30;
			iOk = (g_points[id][CLASS_FRAGMENTOS] < iCost) ? 0 : 1;
			
			if(!iHab)
				formatex(sMenu, charsmax(sMenu), "%sDAÑO JASON \d[DESHABILITADO] %s%d%s", (!iOk) ? "\d" : "\w", (!iOk) ? "\d(\rCosto: " : "\w(\yCosto: ", iCost, (!iOk) ? "\d)" : "\w)");
			else
				formatex(sMenu, charsmax(sMenu), "\dDAÑO JASON \y[HABILITADO]");
			
			menu_additem(iMenuId, sMenu, "3");
			
			iHab = g_hab[id][JASON_COMBO][CLASS_FRAGMENTOS];
			iCost = 50;
			iOk = (g_points[id][CLASS_FRAGMENTOS] < iCost) ? 0 : 1;
			
			if(!iHab)
				formatex(sMenu, charsmax(sMenu), "%sCOMBO JASON \d[DESHABILITADO] %s%d%s", (!iOk) ? "\d" : "\w", (!iOk) ? "\d(\rCosto: " : "\w(\yCosto: ", iCost, (!iOk) ? "\d)" : "\w)");
			else
				formatex(sMenu, charsmax(sMenu), "\dCOMBO JASON \y[HABILITADO]");
			
			menu_additem(iMenuId, sMenu, "4");
		}
	}
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	g_page[id][MENU_HABS_CLASS] = p_class;
	
	ShowLocalMenu(id, iMenuId);
}

public showMenuChangePoints(const id) // (menuChangePoints)
{
	if(!g_isconnected[id])
		return;
	
	static sMenu[128];
	static iMenuId;
	
	formatex(sMenu, charsmax(sMenu), "CAMBIAR PUNTOS^n\rPF\y: %d", g_points[id][CLASS_FRAGMENTOS]);
	iMenuId = menu_create(sMenu, "menuChangePoints");
	
	menu_additem(iMenuId, "\y3pF\w POR \y1pS", "1", _, menu_makecallback("checkChangePoint_3PF_1PSN"));
	menu_additem(iMenuId, "\y3pF\w POR \y1pN^n", "2", _, menu_makecallback("checkChangePoint_3PF_1PSN"));
	
	menu_additem(iMenuId, "\y15pF\w POR \y6pS", "3", _, menu_makecallback("checkChangePoint_15PF_6PSN"));
	menu_additem(iMenuId, "\y15pF\w POR \y6pN", "4", _, menu_makecallback("checkChangePoint_15PF_6PSN"));
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
}

public checkChangePoint_3PF_1PSN(const id, const menuid, const item)
{
	if(g_points[id][CLASS_FRAGMENTOS] < 3)
		return ITEM_DISABLED;
	
	return ITEM_ENABLED;
}

public checkChangePoint_15PF_6PSN(const id, const menuid, const item)
{
	if(g_points[id][CLASS_FRAGMENTOS] < 15)
		return ITEM_DISABLED;
	
	return ITEM_ENABLED;
}

public showMenuDiamonds(const id) // (menuDiamonds)
{
	if(!g_isconnected[id])
		return;
	
	static sMenu[128];
	static iMenuId;
	
	formatex(sMenu, charsmax(sMenu), "HABILIDADES LEGENDARIAS^n\rDIAMANTES\y: %d", g_diamonds[id]);
	iMenuId = menu_create(sMenu, "menuDiamonds");
	
	menu_additem(iMenuId, "HABILITAR COMBO ZOMBIE \y(5 DIAMANTES)", "1", _, menu_makecallback("checkDiamonds_Hab01"));
	menu_additem(iMenuId, "SUBIR TODAS LAS ARMAS A NIVEL 10 \y(200 DIAMANTES)^n", "2", _, menu_makecallback("checkDiamonds_Hab02"));
	menu_additem(iMenuId, "CREAR AMULETO PERSONALIZADO^n", "3");
	menu_additem(iMenuId, "REINICIAR COSTO DE ITEMS EXTRAS \y(2 DIAMANTES)", "4", _, menu_makecallback("checkDiamonds_Hab04"));
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
}

public checkDiamonds_Hab01(const id, const menuid, const item)
{
	if(g_diamonds[id] < 5)
		return ITEM_DISABLED;
	
	return ITEM_ENABLED;
}

public checkDiamonds_Hab02(const id, const menuid, const item)
{
	if(g_diamonds[id] < 200)
		return ITEM_DISABLED;
	
	return ITEM_ENABLED;
}

public checkDiamonds_Hab04(const id, const menuid, const item)
{
	if(g_diamonds[id] < 2)
		return ITEM_DISABLED;
	
	return ITEM_ENABLED;
}

showMenuCreateAmuletos(const id, reiniciar = 0)
{
	new iSlot;
	iSlot = getSlotAmuleto(id);
	
	if(iSlot == -1)
	{
		colorChat(id, _, "%sNo podés tener más de !g5 amuletos al mismo tiempo!y", ZP_PREFIX);
		
		showMenuDiamonds(id);
		return PLUGIN_HANDLED;
	}
	
	if(reiniciar)
	{
		g_amuleto_name_FAKE[id][0] = EOS;
		
		g_amuleto_stat1[id][iSlot][0] = 1;
		g_amuleto_stat1[id][iSlot][1] = 1;
		g_amuleto_stat1[id][iSlot][2] = 1;
		g_amuleto_stat1[id][iSlot][3] = 1;
		
		g_amuleto_stat3[id][iSlot][1] = 0;
		g_amuleto_stat3[id][iSlot][2] = 0;
		g_amuleto_stat3[id][iSlot][3] = 0;
		
		g_amuleto_stat2[id][iSlot][0] = 0.0;
		g_amuleto_stat2[id][iSlot][1] = 0.0;
		
		g_cost_amuleto[id] = 10;
		
		colorChat(id, _, "%sCuando estés decidido para crear el amuleto personalizado, escribe en tu consola lo siguiente:", ZP_PREFIX);
		colorChat(id, _, "!gzp_crear_amuleto!y, pedirá confirmación, no te preocupes!");
	}
	
	static sMenu[600];
	static iLen;
	
	iLen = 0;
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yCREAR AMULETO PERSONALIZADO^n\wDIAMANTES: \y%d^n\yCOSTO: \r%d DIAMANTES^n^n", g_diamonds[id], g_cost_amuleto[id]);
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1. \wNOMBRE: \y%s^n^n", g_amuleto_name_FAKE[id]);
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r2. \wVIDA: \y+%d^n", g_amuleto_stat1[id][iSlot][0]);
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r3. \wVELOCIDAD: \y+%d^n", g_amuleto_stat1[id][iSlot][1]);
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r4. \wGRAVEDAD: \y+%d^n", g_amuleto_stat1[id][iSlot][2]);
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r5. \wDAÑO: \y+%d^n", g_amuleto_stat1[id][iSlot][3]);
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r6. \wAURA BOMBA LUZ/BUBBLE: \y+%d^n^n", g_amuleto_stat3[id][iSlot][3]);
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r7. \y+x%0.2f \wEXP^n", g_amuleto_stat2[id][iSlot][0]);
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r8. \y+x%0.2f \wAPS^n^n", g_amuleto_stat2[id][iSlot][1]);
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r9. \y+%d%% \wde \ydescuento \wen items extras", g_amuleto_stat3[id][iSlot][1]);
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n^n\r0. \wVolver");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Create__Amuletos__Menu");
	
	return PLUGIN_HANDLED;
}

public showMenuGuild(const id) // (menuGuild)
{
	if(!g_isconnected[id])
		return;
	
	static iMenuId;
	
	if(g_guild[id])
	{
		static sBuffer[100];
		formatex(sBuffer, charsmax(sBuffer), "HERMANDAD: \r%s^n\yNIVEL\r %d^n\yEXP: \r%d^nFaltan \y%d EXP\w", g_guild_name[g_guild_id[id]], g_guild_level[g_guild_id[id]], g_guild_exp[g_guild_id[id]], (GUILD_EXP_LEVEL[g_guild_level[g_guild_id[id]]] - g_guild_exp[g_guild_id[id]]));
		iMenuId = menu_create(sBuffer, "menuGuild");
		
		menu_additem(iMenuId, "VER MIEMBROS CONECTADOS", "1");
		menu_additem(iMenuId, "INVITAR JUGADORES A LA HERMANDAD^n", "2", _, menu_makecallback("checkInviteSend"));
		menu_additem(iMenuId, "ABANDONAR HERMANDAD^n", "3");
		
		menu_additem(iMenuId, "MOVER HUD DE HERMANDAD", "4");
		
		menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	}
	else
	{
		iMenuId = menu_create("HERMANDAD", "menuGuild");
		
		menu_additem(iMenuId, "CREAR HERMANDAD^n", "1", _, menu_makecallback("noAllow"));
		menu_additem(iMenuId, "VER INVITACIONES RECIBIDAS^n", "2");
		
		menu_additem(iMenuId, "EN EL ABISMO", "3");
		
		menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	}
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
}

public noAllow() {
	return ITEM_DISABLED;
}

public showMenuGuild__MoveHUD(const id) // (menuGuild__MoveHUD)
{
	if(!g_isconnected[id])
		return;
	
	static iMenuId;
	
	static sBuffer[100];
	formatex(sBuffer, charsmax(sBuffer), "HERMANDAD: \r%s^n\yNIVEL\r %d^n\yEXP: \r%d^nFaltan \y%d EXP\w", g_guild_name[g_guild_id[id]], g_guild_level[g_guild_id[id]], g_guild_exp[g_guild_id[id]], (GUILD_EXP_LEVEL[g_guild_level[g_guild_id[id]]] - g_guild_exp[g_guild_id[id]]));
	iMenuId = menu_create(sBuffer, "menuGuild__MoveHUD");
	
	menu_additem(iMenuId, "MOVER HUD HACIA ARRIBA", "1");
	menu_additem(iMenuId, "MOVER HUD HACIA ABAJO", "2");
	menu_additem(iMenuId, "MOVER HUD HACIA LA IZQUIERDA", "3", _, menu_makecallback("checkMoveHUD__Guild"));
	menu_additem(iMenuId, "MOVER HUD HACIA LA DERECHA^n", "4", _, menu_makecallback("checkMoveHUD__Guild"));
	
	formatex(sBuffer, 31, "%s", (g_hud_position[id][POSITION_HUDGUILD][2]) ? "DESCENTRAR HUD^n" : "CENTRAR HUD^n");
	menu_additem(iMenuId, sBuffer, "5");
	
	menu_additem(iMenuId, "REINICIAR POSICIÓN", "6");
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
}

public checkMoveHUD__Guild(const id, const menuid, const item)
{
	if(!g_hud_position[id][POSITION_HUDGUILD][2])
		return ITEM_ENABLED;
	
	return ITEM_DISABLED;
}

public checkInviteSend(const id, const menuid, const item)
{
	if(!g_guild_creator[id])
		return ITEM_DISABLED;
	
	return ITEM_ENABLED;
}

public showMenuGuild__MembersOn(const id) // (menuGuild__MembersOn)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	static i;
	static iMenuId;
	static iPosition;
	static sBuffer[100];
	static sPosition[3];
	
	formatex(sBuffer, charsmax(sBuffer), "HERMANDAD: \r%s^n\yMIEMBROS CONECTADOS:", g_guild_name[g_guild_id[id]]);
	iMenuId = menu_create(sBuffer, "menuGuild__MembersOn");
	
	iPosition = 0;
	
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isconnected[i])
			continue;
		
		if(!g_guild[i])
			continue;
		
		if(g_guild_id[i] != g_guild_id[id])
			continue;
		
		++iPosition;
		
		num_to_str(iPosition, sPosition, 2);
		menu_additem(iMenuId, g_playername[i], sPosition);
	}
	
	menu_addblank(iMenuId, 0);
	
	++iPosition;
	
	num_to_str(iPosition, sPosition, 2);
	menu_additem(iMenuId, "EXPULSAR JUGADORES DE LA HERMANDAD", sPosition, _, menu_makecallback("checkInviteSend"));
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
	return PLUGIN_HANDLED;
}

public showMenuGuild__MembersKick(const id) // (menuGuild__MembersKick)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	static i;
	static j;
	static iMenuId;
	static sBuffer[100];
	static sPosition[3];
	
	j = 9;
	
	formatex(sBuffer, charsmax(sBuffer), "HERMANDAD: \r%s^n\yMIEMBROS:", g_guild_name[g_guild_id[id]]);
	iMenuId = menu_create(sBuffer, "menuGuild__MembersKick");
	
	for(i = 0; i < 5; ++i)
	{
		if(g_guild_userid_concat[g_guild_id[id]][i] > 0)
		{
			num_to_str((i+1), sPosition, 2);
			menu_additem(iMenuId, g_guild_username[g_guild_id[id]][i], sPosition);
			
			--j;
		}
	}
	
	if(menu_items(iMenuId) < 1)
	{
		DestroyLocalMenu(id, iMenuId);
		colorChat(id, _, "%sNo hay usuarios disponibles para expulsar de tu hermandad", ZP_PREFIX_GUILD);
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	
	for(i = 0; i < j; ++i)
		menu_addblank(iMenuId);
	
	menu_additem(iMenuId, "Volver", "0");
	
	menu_setprop(iMenuId, MPROP_PERPAGE, 0);
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
	return PLUGIN_HANDLED;
}

public showMenuGuild__InviteSend(const id) // (menuGuild__InviteSend)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(g_guild_invite_again[id][0])
	{
		colorChat(id, _, "%sTenés que esperar hasta el !g%s!y para invitar nuevamente!", ZP_PREFIX, g_guild_invite_again[id]);
		return PLUGIN_HANDLED;
	}
	
	static i;
	static iMenuId;
	static iPosition;
	static sBuffer[64];
	static sPosition[3];
	
	formatex(sBuffer, charsmax(sBuffer), "HERMANDAD: \r%s", g_guild_name[g_guild_id[id]]);
	iMenuId = menu_create(sBuffer, "menuGuild__InviteSend");
	
	iPosition = 0;
	
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isconnected[i])
			continue;
		
		if(g_guild[i])
			continue;
		
		if(g_guild_invite[id][i])
			continue;
		
		++iPosition;
		
		num_to_str(iPosition, sPosition, 2);
		menu_additem(iMenuId, g_playername[i], sPosition);
	}
	
	if(menu_items(iMenuId) < 1)
	{
		DestroyLocalMenu(id, iMenuId);
		colorChat(id, _, "%sNo hay usuarios disponibles para invitar a tu hermandad", ZP_PREFIX_GUILD);
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
	return PLUGIN_HANDLED;
}

public showMenuGuild__InviteReceive(const id) // (menuGuild__InviteReceive)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	static i;
	static iMenuId;
	static iPosition;
	static sPosition[3];
	static sBuffer[70];
	
	iMenuId = menu_create("HERMANDAD^nINVITACIONES RECIBIDAS:", "menuGuild__InviteReceive");
	
	iPosition = 0;
	
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isconnected[i])
			continue;
		
		if(!g_guild[i])
			continue;
		
		if(!g_guild_invite[i][id])
			continue;
		
		++iPosition;
		
		num_to_str(iPosition, sPosition, 2);
		
		formatex(sBuffer, 69, "%s \r- \y%s", g_playername[i], g_guild_name[g_guild_id[i]]);
		menu_additem(iMenuId, sBuffer, sPosition);
	}
	
	if(menu_items(iMenuId) < 1)
	{
		DestroyLocalMenu(id, iMenuId);
		colorChat(id, _, "%sNo tenés invitaciones recibidas", ZP_PREFIX_GUILD);
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
	return PLUGIN_HANDLED;
}

public showMenuAchievementsChallenge(const id) // (menuAchievementsChallenge)
{
	if(!g_isconnected[id])
		return;
	
	static iMenuId;
	iMenuId = menu_create("LOGROS / DESAFÍOS", "menuAchievementsChallenge");
	
	menu_additem(iMenuId, "LOGROS", "1");
	menu_additem(iMenuId, "META-LOGROS^n", "2");
	menu_additem(iMenuId, "DESAFÍOS", "3");
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
}

public showMenuAchievementsClass(const id)
{
	static sPosition[3];
	static iMenuId;
	static i;
	
	iMenuId = menu_create("LOGROS", "menuAchievementsClass");
	
	for(i = 0; i < sizeof(LOGROS_CLASS); ++i)
	{
		num_to_str((i + 1), sPosition, 2);
		menu_additem(iMenuId, LOGROS_CLASS[i], sPosition);
	}
	
	menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
	menu_setprop(iMenuId, MPROP_NEXTNAME, "Siguiente");
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	g_page[id][MENU_LOGROS_PCLASS] = min(g_page[id][MENU_LOGROS_PCLASS], menu_pages(iMenuId) - 1);
	
	ShowLocalMenu(id, iMenuId, g_page[id][MENU_LOGROS_PCLASS]);
}

public showMenuAchievements(const id, const p_class) // (menuAchievements)
{
	static sBuffer[64];
	static sPosition[4];
	static iMenuId;
	static i;
	static j;
	static k;
	
	formatex(sBuffer, charsmax(sBuffer), "LOGROS %s", LOGROS_CLASS[p_class]);
	iMenuId = menu_create(sBuffer, "menuAchievements");
	
	j = 0;
	k = 0;
	
	for(i = 0; i < sizeof(LOGROS); ++i)
	{
		if(p_class != LOGROS[i][logroClass])
		{
			++k;
			continue;
		}
		
		++j;
		
		g_logros_int[id][i - k] = i;
		
		num_to_str(j, sPosition, 3);
		
		formatex(sBuffer, charsmax(sBuffer), "%s%s", (!g_logros[id][i]) ? "\d" : "\w", LOGROS[i][logroName]);
		menu_additem(iMenuId, sBuffer, sPosition);
	}
	
	menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
	menu_setprop(iMenuId, MPROP_NEXTNAME, "Siguiente");
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");

	g_page[id][MENU_LOGROS_CLASS_INT] = p_class;
	g_page_logros[id][p_class] = min(g_page_logros[id][p_class], menu_pages(iMenuId) - 1);
	
	ShowLocalMenu(id, iMenuId, g_page_logros[id][p_class]);
}

public showMenuAchievementDesc(const id, const logro) // (menuAchievementDesc)
{
	static sBuffer[320];
	static sBufferT[100];
	static sBufferUsersNeed[52];
	static iMenuId;
	
	if(g_logros_primeros[logro])
		formatex(sBufferT, 99, "^n^n\wLOGRO DESBLOQUEADO POR^n\y%s\w EL \y%s", g_logros_primeros_name[logro], g_logros_primeros_unlocked[logro]);
	else if(g_logros_unlocked[id][logro][0])
		formatex(sBufferT, 99, "^n^n\wLOGRO DESBLOQUEADO EL^n\y%s", g_logros_unlocked[id][logro]);
	
	if(LOGROS[logro][logroUsersNeed])
		formatex(sBufferUsersNeed, 51, "\rREQUISITOS EXTRAS:\w %d jugadores conectados^n", LOGROS[logro][logroUsersNeed]);
    
	if(logro != 329)
	{
		formatex(sBuffer, charsmax(sBuffer), "%s %s^n^n\yDESCRIPCIÓN:^n\w%s^n%s^n\yRECOMPENSA:^n\r    -\w %d \ypF", LOGROS[logro][logroName], (!g_logros[id][logro]) ? "\r(BLOQUEADO)" : "\y(DESBLOQUEADO)", LOGROS[logro][logroDesc],
		(!LOGROS[logro][logroUsersNeed]) ? "" : sBufferUsersNeed, LOGROS[logro][logroReward]);
	}
	else
	{
		formatex(sBuffer, charsmax(sBuffer), "%s %s^n^n\yDESCRIPCIÓN:^n\w%s^n%s^n\yRECOMPENSA:^n\r    -\w %d \ypF^n^n\wDAÑO HECHO: \y%d", LOGROS[logro][logroName], (!g_logros[id][logro]) ? "\r(BLOQUEADO)" : "\y(DESBLOQUEADO)", LOGROS[logro][logroDesc],
		(!LOGROS[logro][logroUsersNeed]) ? "" : sBufferUsersNeed, LOGROS[logro][logroReward], g_legendaria_knife_damage[id]);
	}
	
	iMenuId = menu_create(sBuffer, "menuAchievementDesc");
	
	if(!g_logros[id][logro])
		menu_additem(iMenuId, "\dLINKEAR AL CHAT", "1");
	else
		menu_additem(iMenuId, "\wLINKEAR AL CHAT", "1");
	
	if(g_logros_primeros[logro] || g_logros_unlocked[id][logro][0])
		menu_addtext(iMenuId, sBufferT, 1);
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	ShowLocalMenu(id, iMenuId);
}

public showMenuMetaAchievements(const id)
{
	static sBuffer[64];
	static sPosition[3];
	static iMenuId;
	static i;
	
	iMenuId = menu_create("META-LOGROS", "menuMetaAchievements");
	
	for(i = 0; i < sizeof(META_LOGROS); ++i)
	{
		num_to_str((i+1), sPosition, 2);
		
		formatex(sBuffer, charsmax(sBuffer), "%s%s", (!g_metalogros[id][i]) ? "\d" : "\w", META_LOGROS[i][logroName]);
		menu_additem(iMenuId, sBuffer, sPosition);
	}
	
	menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
	menu_setprop(iMenuId, MPROP_NEXTNAME, "Siguiente");
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");

	g_page[id][MENU_META_LOGROS] = min(g_page[id][MENU_META_LOGROS], menu_pages(iMenuId) - 1);
	
	ShowLocalMenu(id, iMenuId, g_page[id][MENU_META_LOGROS]);
}

public showMenuMetaAchievementDesc(const id, const meta_logro) // (menuMetaAchievementDesc)
{
	static sBuffer[320];
	static sBufferT[64];
	static sBufferUsersNeed[52];
	static iMenuId;
	
	if(g_metalogros_unlocked[id][meta_logro][0])
		formatex(sBufferT, 63, "^n^n\wMETA-LOGRO DESBLOQUEADO EL^n\y%s", g_metalogros_unlocked[id][meta_logro]);
	
	if(META_LOGROS[meta_logro][logroUsersNeed])
		formatex(sBufferUsersNeed, 51, "\rREQUISITOS EXTRAS:\w %d jugadores conectados^n", META_LOGROS[meta_logro][logroUsersNeed]);
    
	formatex(sBuffer, charsmax(sBuffer), "%s %s^n^n\yDESCRIPCIÓN:^n\w%s^n%s^n\yRECOMPENSA:^n\r    -\w %d \ypF%s", META_LOGROS[meta_logro][logroName], (!g_metalogros[id][meta_logro]) ? "\r(BLOQUEADO)" : "\y(DESBLOQUEADO)", META_LOGROS[meta_logro][logroDesc], (!META_LOGROS[meta_logro][logroUsersNeed]) ? "" :
	sBufferUsersNeed, META_LOGROS[meta_logro][logroReward], (!g_metalogros_unlocked[id][meta_logro][0]) ? "" : sBufferT);
	
	iMenuId = menu_create(sBuffer, "menuMetaAchievementDesc");
	
	if(!g_metalogros[id][meta_logro])
		menu_additem(iMenuId, "\dLINKEAR AL CHAT", "1");
	else
		menu_additem(iMenuId, "\wLINKEAR AL CHAT", "1");
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	ShowLocalMenu(id, iMenuId);
}

public showMenuChallenges(const id)
{
	static sBuffer[64];
	static sPosition[3];
	static iMenuId;
	static i;
	
	iMenuId = menu_create("DESAFÍOS", "menuChallenges");
	
	for(i = 0; i < sizeof(DESAFIOS); ++i)
	{
		num_to_str((i+1), sPosition, 2);
		
		formatex(sBuffer, charsmax(sBuffer), "%s \y[NIV. %d]", DESAFIOS[i][desafioName], g_desafios[id][i]);
		menu_additem(iMenuId, sBuffer, sPosition);
	}
	
	menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
	menu_setprop(iMenuId, MPROP_NEXTNAME, "Siguiente");
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");

	g_page[id][MENU_DESAFIOS] = min(g_page[id][MENU_DESAFIOS], menu_pages(iMenuId) - 1);
	
	ShowLocalMenu(id, iMenuId, g_page[id][MENU_DESAFIOS]);
}

public showMenuChallengesDesc(const id, const challenge) // (menuChallengesDesc)
{
	static sBuffer[320];
	static sBufferUsersNeed[52];
	static iMenuId;
	static iReward;
	
	if(DESAFIOS[challenge][desafioUsersNeed])
		formatex(sBufferUsersNeed, 51, "\rREQUISITOS EXTRAS:\w %d jugadores conectados^n", DESAFIOS[challenge][desafioUsersNeed]);
	
	switch(challenge)
	{
		case EL_TIEMPO_APREMIA: iReward = (DESAFIOS[challenge][desafioReward] + g_desafios[id][challenge] + (DESAFIOS[challenge][desafioLevelMult] * g_desafios[id][challenge]));
		case FULMINANTE: iReward = ((DESAFIOS[challenge][desafioReward] + g_desafios[id][challenge]) * DESAFIOS[challenge][desafioLevelMult]);
		default: iReward = (DESAFIOS[challenge][desafioReward] + g_desafios[id][challenge] + (DESAFIOS[challenge][desafioLevelMult] * g_desafios[id][challenge]));
	}
    
	formatex(sBuffer, charsmax(sBuffer), "%s [NIV. %d]^n^n\yDESCRIPCIÓN:^n\w%s^n\yNECESARIOS:\w %d^n%s^n\yRECOMPENSA:^n\r    -\w %d \ypF", DESAFIOS[challenge][desafioName], g_desafios[id][challenge], DESAFIOS[challenge][desafioDesc],
	(DESAFIOS[challenge][desafioLevel] + g_desafios[id][challenge] + (DESAFIOS[challenge][desafioLevelMult] * g_desafios[id][challenge])), (!DESAFIOS[challenge][desafioUsersNeed]) ? "" : sBufferUsersNeed,
	iReward);
	
	iMenuId = menu_create(sBuffer, "menuChallengesDesc");
	
	if(!g_desafios[id][challenge])
		menu_additem(iMenuId, "\dLINKEAR AL CHAT", "1");
	else
		menu_additem(iMenuId, "\wLINKEAR AL CHAT", "1");
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	ShowLocalMenu(id, iMenuId);
}

public showMenuStats(const id) // (menuStats)
{
	static sMenu[500];
	static sInfo[15];
	static iLen;
	
	iLen = 0;
	
	if(g_page[id][MENU_STATS] > 3)
		g_page[id][MENU_STATS] = 0;
	
	switch(g_page[id][MENU_STATS])
	{
		case 0:
		{
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yESTADÍSTICAS 1 / 4^n^n");
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1.\w Estadísticas de tus armas^n^n");
			
			addDot(g_stats[id][HEADSHOTS_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wDisparos en la cabeza: \y%s^n", sInfo);
			
			addDot(g_stats[id][HEADSHOTS_T], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wDisparos en la cabeza recibidos: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_ZOMBIES_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wZombies matados: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_ZOMBIES_T], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wVeces muerto siendo zombie: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_HUMANS_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wHumanos matados: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_HUMANS_T], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wVeces muerto siendo humano: \y%s^n", sInfo);
			
			addDot(g_stats[id][INFECTS_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wInfecciones hechas: \y%s^n", sInfo);
			
			addDot(g_stats[id][INFECTS_T], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wInfecciones recibidas: \y%s^n", sInfo);
		}
		case 1:
		{
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yESTADÍSTICAS 2 / 4^n^n");
			
			addDot(g_stats[id][COMBOS_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wCombos hechos: \yx%s^n", sInfo);
			
			addDot(g_stats[id][COMBO_MAX_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wMayor combo hecho: \yx%s^n", sInfo);
			
			addDot(g_stats[id][KILL_NEMESIS_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wNemesis matados: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_SURVIVOR_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wSurvivor matados: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_WESKER_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wWesker matados: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_JASON_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wJason matados: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_CABEZON_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wCabezones matados: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_ALIEN_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wAliens matados: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_PREDATOR_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wDepredadores matados: \y%s^n", sInfo);
		}
		case 2:
		{
			static sDamage[64];
			static sDmg[64];
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yESTADÍSTICAS 3 / 4^n\rHS \w= \yDisparos en la cabeza^n^n");
			
			addDot(g_stats[id][KILL_ANNIHILATOR_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wAniquiladores matados: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_SNIPER_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wSnipers matados: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_ZOMBIES_HS_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wZombies matados con \rHS\w: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_ZOMBIES_HS_T], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wVeces muerto por \rHS\w siendo zombie: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_ZOMBIES_KNIFE_D], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wZombies matados con cuchillo: \y%s^n", sInfo);
			
			addDot(g_stats[id][KILL_ZOMBIES_KNIFE_T], sInfo, 14);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wVeces muerto por cuchillo siendo zombie: \y%s^n", sInfo);
			
			formatex(sDmg, 63, "%0.0f", (g_damage[id][0] * DIV_DAMAGE));
			addDot__Special(sDmg, sDamage, 63);
	
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wDaño hecho: \y%s^n", sDamage);
			
			formatex(sDmg, 63, "%0.0f", (g_damage[id][1] * DIV_DAMAGE));
			addDot__Special(sDmg, sDamage, 63);
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wDaño recibido: \y%s^n", sDamage);
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wBalas infinitas compradas: \y%d^n", g_logros_stats[id][COUNT_UNLIMITED_CLIP]);
		}
		case 3:
		{
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yESTADÍSTICAS 4 / 4^n^n");
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wLogros hechos: \y%d^n", g_logros_count[id]);
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wDesafíos hechos: \y%d^n", g_desafios_count[id]);
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wDuelos ganados: \y%d^n", g_duelo_win[id]);
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wDuelos perdidos: \y%d^n", g_duelo_lost[id]);
		}
	}
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n\r9.\w Atrás/Siguiente^n\r0. \wVolver");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Stats Menu");
}

public showMenuWeaponStats(const id, const weapon) // (menuWeaponStats)
{
	if(!g_isconnected[id])
		return;
	
	if(!weapon)
	{
		static sMenu[64];
		static sPosition[3];
		static iMenuId;
		static i;
		
		iMenuId = menu_create("ESTADÍSTICAS DE TUS ARMAS", "menuWeaponStats");
		
		for(i = 1; i < sizeof(WEAPON_NAMES); ++i)
		{
			num_to_str(i, sPosition, 2);
			
			if(!WEAPON_NAMES[i][0])
				continue;
			
			if(i != CSW_AWP && i != CSW_SCOUT && i != CSW_G3SG1 && i != CSW_SG550)
				formatex(sMenu, charsmax(sMenu), "%s \y[Niv. %d]", WEAPON_NAMES[i], g_level_weapons[id][i]);
			else
				formatex(sMenu, charsmax(sMenu), "%s", WEAPON_NAMES[i]);
			
			menu_additem(iMenuId, sMenu, sPosition);
		}
		
		menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
		menu_setprop(iMenuId, MPROP_NEXTNAME, "Siguiente");
		menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
		
		if(pev_valid(id) == PDATA_SAFE)
			set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
		
		g_page[id][MENU_WEAPON_STATS] = min(g_page[id][MENU_WEAPON_STATS], menu_pages(iMenuId) - 1);
		
		ShowLocalMenu(id, iMenuId, g_page[id][MENU_WEAPON_STATS]);
	}
	else
	{
		static sMenu[400];
		static iLen;
		
		iLen = 0;
		
		if(weapon != CSW_AWP && weapon != CSW_SCOUT && weapon != CSW_G3SG1 && weapon != CSW_SG550)
		{
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\y%s^n\wPuntos disponibles: \y%d^n^n", WEAPON_NAMES[weapon], g_skill_weapons[id][weapon][4]);
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wNivel del arma: \y%d^n", g_level_weapons[id][weapon]);
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wMatados con esta arma: \y%d^n", g_kills_weapons[id][weapon]);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wMatados necesitados: \y%d^n^n", NEED_KILLS_WEAPONS[weapon][g_level_weapons[id][weapon]]);
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1.\w DAÑO: \y[Niv. %d]^n", g_skill_weapons[id][weapon][0]);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r2.\w VELOCIDAD: \y[Niv. %d]^n", g_skill_weapons[id][weapon][1]);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r3.\w PRECISIÓN: \y[Niv. %d]^n", g_skill_weapons[id][weapon][2]);
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r4.\w BALAS: \y[Niv. %d]^n^n", g_skill_weapons[id][weapon][3]);
		
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r5.%s SUBIR A NIVEL \y%d %s(%d DIAMANTES)^n^n", (g_diamonds[id] < NEED_DIAMONDS_WEAPONS[weapon][g_level_weapons[id][weapon]]) ? "\d" : "\w", (g_level_weapons[id][weapon]+1),
			(g_diamonds[id] < NEED_DIAMONDS_WEAPONS[weapon][g_level_weapons[id][weapon]]) ? "\r" : "\w", NEED_DIAMONDS_WEAPONS[weapon][g_level_weapons[id][weapon]]);
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r6.\w REINICIAR PUNTOS");
		}
		else
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\y%s^n^n\wEsta arma no tiene niveles!", WEAPON_NAMES[weapon]);
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n^n\r0.\w Volver");
		
		g_page[id][MENU_WEAPON_STATS_SUB] = weapon;
		
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
		show_menu(id, KEYSMENU, sMenu, -1, "Weapon__Stats__Menu");
	}
}

public showMenuConfig(const id) // (menuConfig)
{
	if(!g_isconnected[id])
		return;
	
	static sBuffer[50];
	static iMenuId;
	
	iMenuId = menu_create("CONFIGURACIÓN", "menuConfig");
	
	menu_additem(iMenuId, "CONFIGURAR HUD GENERAL", "1");
	menu_additem(iMenuId, "CONFIGURAR HUD DEL COMBO^n", "2");
	
	menu_additem(iMenuId, "ELEGIR COLORES^n", "3");
	
	formatex(sBuffer, 49, "DISTANCIA VISIÓN NOCTURNA (%d)", g_distance_nightvision[id]);
	menu_additem(iMenuId, sBuffer, "4");
	
	formatex(sBuffer, 49, "HUMANOS INVISIBLES \y(%s)^n", (g_human_invis[id]) ? "ACTIVADO" : "DESACTIVADO");
	menu_additem(iMenuId, sBuffer, "5");
	
	formatex(sBuffer, 49, "AGREGAR PREFIJO \yNiv.\w AL CHAT \y(%s)", (g_chat_mode_prefix[id]) ? "ACTIVADO" : "DESACTIVADO");
	menu_additem(iMenuId, sBuffer, "6");
	menu_additem(iMenuId, "ELEGIR DISEÑO DEL NIVEL EN EL CHAT^n", "7");
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
}

public showMenuConfig__HUD_General(const id) // (menuConfig__HUD_General)
{
	if(!g_isconnected[id])
		return;
	
	static sBuffer[32];
	static iMenuId;
	
	iMenuId = menu_create("CONFIGURAR HUD GENERAL", "menuConfig__HUD_General");
	
	menu_additem(iMenuId, "ELEGIR COLOR", "1");
	
	formatex(sBuffer, 31, "EFECTO DEL HUD \y(%s)^n", (g_hud_effect[id]) ? "ACTIVADO" : "DESACTIVADO");
	menu_additem(iMenuId, sBuffer, "2");
	
	formatex(sBuffer, 31, "ABREVIAR HUD \y(%s)^n", (g_hud_abrev[id]) ? "ACTIVADO" : "DESACTIVADO");
	menu_additem(iMenuId, sBuffer, "3");
	
	menu_additem(iMenuId, "MOVER HACIA ARRIBA", "4");
	menu_additem(iMenuId, "MOVER HACIA ABAJO", "5");
	menu_additem(iMenuId, "MOVER HACIA LA IZQUIERDA", "6", _, menu_makecallback("checkMoveHUD"));
	menu_additem(iMenuId, "MOVER HACIA LA DERECHA^n", "7", _, menu_makecallback("checkMoveHUD"));
	
	formatex(sBuffer, 31, "%s", (g_hud_position[id][POSITION_HUD][2]) ? "DESCENTRAR HUD^n" : "CENTRAR HUD^n");
	menu_additem(iMenuId, sBuffer, "8");
	
	menu_additem(iMenuId, "REINICIAR POSICIÓN^n", "9");
	
	menu_additem(iMenuId, "Volver", "0");
	
	menu_setprop(iMenuId, MPROP_PERPAGE, 0);
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
}

public checkMoveHUD(const id, const menuid, const item)
{
	/*static sBuffer[3];
	static iAccess;
	static iCallBack;
	
	menu_item_getinfo(menuid, item, iAccess, sBuffer, charsmax(sBuffer), _, _, iCallBack);*/
	
	if(!g_hud_position[id][POSITION_HUD][2])
		return ITEM_ENABLED;
	
	return ITEM_DISABLED;
}

public showMenuConfig__HUD_Combo(const id) // (menuConfig__HUD_Combo)
{
	if(!g_isconnected[id])
		return;
	
	static sBuffer[32];
	static iMenuId;
	
	iMenuId = menu_create("CONFIGURAR HUD DEL COMBO", "menuConfig__HUD_Combo");
	
	menu_additem(iMenuId, "ELEGIR COLOR", "1");
	
	formatex(sBuffer, 31, "EFECTO DEL HUD \y(%s)^n", (g_hudcombo_effect[id]) ? "ACTIVADO" : "DESACTIVADO");
	menu_additem(iMenuId, sBuffer, "2");
	
	formatex(sBuffer, 31, "ABREVIAR HUD \y(%s)^n", (g_hudcombo_abrev[id]) ? "ACTIVADO" : "DESACTIVADO");
	menu_additem(iMenuId, sBuffer, "3");
	
	menu_additem(iMenuId, "MOVER HACIA ARRIBA", "4");
	menu_additem(iMenuId, "MOVER HACIA ABAJO^n", "5");
	
	menu_additem(iMenuId, "TODO POR DEFECTO", "6");
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
}

public showMenuConfig__ChooseColor(const id) // (menuConfig__ChooseColor)
{
	if(!g_isconnected[id])
		return;
	
	static iMenuId;
	iMenuId = menu_create("ELEGIR COLORES", "menuConfig__ChooseColor");
	
	menu_additem(iMenuId, "COLOR DE TU VISIÓN NOCTURNA", "1");
	menu_additem(iMenuId, "COLOR DE TU GRANADA LUZ / BUBBLE", "2");
	menu_additem(iMenuId, "COLOR DE TU BAZOOKA", "3");
	menu_additem(iMenuId, "COLOR DE TU LASER", "4");
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
}

public showMenuConfig__Color(const id, const color) // (menuConfig__Color)
{
	if(!g_isconnected[id])
		return;
	
	new iMenu;
	
	static sMenu[200];
	static iCheck;
	static iLen;
	static i;
	new iOk = 1;
	
	iLen = 0;
	
	g_page[id][MENU_COLORS] = color;
	
	switch(color)
	{
		case COLOR_NIGHT: iMenu = menu_create("ELIGE EL COLOR DE TU VISIÓN NOCTURNA", "menu__ConfigColor");
		case COLOR_HUD: iMenu = menu_create("ELIGE EL COLOR DE TU HUD GENERAL", "menu__ConfigColor");
		case COLOR_FLARE: iMenu = menu_create("ELIGE EL COLOR DE TU BOMBA DE LUZ / BUBBLE", "menu__ConfigColor");
		case COLOR_BAZOOKA: {
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yELIGE EL COLOR DE TU BAZOOKA^n^n");
			iOk = 0;
		}
		case COLOR_LASER: {
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yELIGE EL COLOR DE TU LASER^n^n");
			iOk = 0;
		}
	}
	
	if(iOk) {
		new sItem[48];
		new sPosition[3];
		
		for(i = 0; i < sizeof(COLORS); ++i) {
			iCheck = (g_color[id][color][RED] == COLORS[i][colorRed] && g_color[id][color][GREEN] == COLORS[i][colorGreen] && g_color[id][color][BLUE] == COLORS[i][colorBlue]) ? 1 : 0;
			formatex(sItem, 47, "%s%s%s", !iCheck ? "\w" : "\d", COLORS[i][colorName], !iCheck ? "" : " \y(ACTUAL)")
			
			num_to_str((i + 1), sPosition, 2);
			menu_additem(iMenu, sItem, sPosition);
		}
		
		menu_setprop(iMenu, MPROP_NEXTNAME, "SIGUIENTE");
		menu_setprop(iMenu, MPROP_BACKNAME, "ATRÁS");
		menu_setprop(iMenu, MPROP_EXITNAME, "SALIR");
		
		g_MenuPage_ColorsFix[id] = min(g_MenuPage_ColorsFix[id], menu_pages(iMenu) - 1);
		
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
		ShowLocalMenu(id, iMenu, g_MenuPage_ColorsFix[id]);
	} else {
		for(i = 0; i < 8; ++i) {
			iCheck = (g_color[id][color][RED] == COLORS[i][colorRed] && g_color[id][color][GREEN] == COLORS[i][colorGreen] && g_color[id][color][BLUE] == COLORS[i][colorBlue]) ? 1 : 0;
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.%s %s%s^n", (i+1), !iCheck ? "\w" : "\d", COLORS[i][colorName], !iCheck ? "" : " \y(ACTUAL)");
		}
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n\r0.\w Volver");
		
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
		show_menu(id, KEYSMENU, sMenu, -1, "Colors Menu");
	}
}

public menu__ConfigColor(const id, const menuId, const item) {
	if(!is_user_connected(id)) {
		DestroyLocalMenu(id, menuId);
		return PLUGIN_HANDLED;
	}
	
	static iMenuDummy;
	player_menu_info(id, iMenuDummy, iMenuDummy, g_MenuPage_ColorsFix[id]);
	
	if(item == MENU_EXIT) {
		DestroyLocalMenu(id, menuId);
		
		if(g_page[id][MENU_COLORS] != COLOR_HUD) showMenuConfig__ChooseColor(id);
		else showMenuConfig__HUD_General(id);
		
		return PLUGIN_HANDLED;
	}
	
	new sBuffer[3];
	new iNothing;
	new iItem;
	
	menu_item_getinfo(menuId, item, iNothing, sBuffer, charsmax(sBuffer), _, _, iNothing);
	iItem = str_to_num(sBuffer) - 1;
	
	DestroyLocalMenu(id, menuId);
	
	g_color[id][g_page[id][MENU_COLORS]][RED] = COLORS[iItem][colorRed];
	g_color[id][g_page[id][MENU_COLORS]][GREEN] = COLORS[iItem][colorGreen];
	g_color[id][g_page[id][MENU_COLORS]][BLUE] = COLORS[iItem][colorBlue];
	
	if(g_page[id][MENU_COLORS] == COLOR_NIGHT && g_nvision[id] && task_exists(id + TASK_NVISION))
	{
		remove_task(id + TASK_NVISION);
		set_task(0.1, "setUserNightvision", id + TASK_NVISION);
		
		remove_task(id + TASK_NVISION);
		if(!g_mode[MODE_NEMESIS]) set_task(0.3, "setUserNightvision", id + TASK_NVISION, _, _, "b");
		else set_task(0.1, "setUserNightvision__Nemesis", id + TASK_NVISION, _, _, "b");
	}
	
	showMenuConfig__Color(id, g_page[id][MENU_COLORS]);
	return PLUGIN_HANDLED;
}

public menuConfig__Color(const id, const key) // (showMenuConfig__Color)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(key >= 8)
	{
		if(key == 9)
		{
			if(g_page[id][MENU_COLORS] != COLOR_HUD) showMenuConfig__ChooseColor(id);
			else showMenuConfig__HUD_General(id);
		}
		else
			showMenuConfig__Color(id, g_page[id][MENU_COLORS]);
		
		return PLUGIN_HANDLED;
	}
	
	if(g_page[id][MENU_COLORS] == COLOR_BAZOOKA)
	{
		if(!g_logros[id][NEMESIS_AVANZADO])
		{
			colorChat(id, _, "%sNo podés cambiar el color de tu bazooka hasta ganar el logro NEMESIS AVANZADO", ZP_PREFIX);
			
			showMenuConfig__Color(id, g_page[id][MENU_COLORS]);
			return PLUGIN_HANDLED;
		}
		else if(g_bazooka_fly)
		{
			colorChat(id, _, "%sNo podés cambiar el color de tu bazooka mientras está en el aire", ZP_PREFIX);
			
			showMenuConfig__Color(id, g_page[id][MENU_COLORS]);
			return PLUGIN_HANDLED;
		}
		else g_color[id][COLOR_BAZOOKA_SPECIAL][0] = key;
	}
	else if(g_page[id][MENU_COLORS] == COLOR_LASER)
	{
		if(!(get_user_flags(id) & ADMIN_RESERVATION))
		{
			colorChat(id, _, "%sSolo usuarios premium pueden cambiar el color del LASER", ZP_PREFIX);
			
			showMenuConfig__Color(id, g_page[id][MENU_COLORS]);
			return PLUGIN_HANDLED;
		}
		
		g_color[id][COLOR_LASER_SPECIAL][0] = key;
	}
	
	g_color[id][g_page[id][MENU_COLORS]][RED] = COLORS[key][colorRed];
	g_color[id][g_page[id][MENU_COLORS]][GREEN] = COLORS[key][colorGreen];
	g_color[id][g_page[id][MENU_COLORS]][BLUE] = COLORS[key][colorBlue];
	
	showMenuConfig__Color(id, g_page[id][MENU_COLORS]);
	return PLUGIN_HANDLED;
}

public showMenuConfig__ChatMode(const id)
{
	if(!g_isconnected[id])
		return;
	
	static sMenu[250];
	static iLen;
	
	iLen = 0;
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yELEGIR DISEÑO DEL NIVEL EN EL CHAT^n^n");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1.\w No mostrar nada%s^n", (g_chat_mode[id] != CHAT_MODE_NONE) ? "" : " \y(ACTUAL)");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r2.\w [%s](%d)%s^n", LETRAS_RESET[g_rango[id]], g_level[id], (g_chat_mode[id] != CHAT_MODE_NORMAL) ? "" : " \y(ACTUAL)");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r3.\w [%s][%d]%s^n", LETRAS_RESET[g_rango[id]], g_level[id], (g_chat_mode[id] != CHAT_MODE_CORCHETES) ? "" : " \y(ACTUAL)");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r4.\w [%s][(%d)]%s^n", LETRAS_RESET[g_rango[id]], g_level[id], (g_chat_mode[id] != CHAT_MODE_CORCHETES_PARENTESIS) ? "" : " \y(ACTUAL)");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r5.\w [%s]{%d}%s^n", LETRAS_RESET[g_rango[id]], g_level[id], (g_chat_mode[id] != CHAT_MODE_LLAVES) ? "" : " \y(ACTUAL)");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r6.\w [%s]{(%d)}%s^n", LETRAS_RESET[g_rango[id]], g_level[id], (g_chat_mode[id] != CHAT_MODE_LLAVES_PARENTESIS) ? "" : " \y(ACTUAL)");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r7.\w [%s]{[%d]}%s^n", LETRAS_RESET[g_rango[id]], g_level[id], (g_chat_mode[id] != CHAT_MODE_LLAVES_CORCHETES) ? "" : " \y(ACTUAL)");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r8.\w [%s]{[(%d)]}%s^n", LETRAS_RESET[g_rango[id]], g_level[id], (g_chat_mode[id] != CHAT_MODE_LLAVES_CORCHETES_P) ? "" : " \y(ACTUAL)");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n\r0.\w Volver");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Chat Mode Menu");
}

public showMenuHeadZombie(const id)
{
	if(!g_isconnected[id])
		return;
	
	static sMenu[450];
	static iLen;
	static i;
	
	iLen = 0;
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yCABEZAS ZOMBIE^n^n");
	
	for(i = 0; i < MaxHeadZombies; ++i)
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r%d.\w Abrir cabeza %s \y(%d)^n", (i + 1), HEAD_ZOMBIES_NAMES[i], g_head_zombie[id][i]);
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n\r0.\w Volver");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Head Zombie Menu");
}

showMenuAmuletos(const id, amuleto = -1, amuleto_name[] = "")
{
	if(!g_isconnected[id])
		return;
	
	static iMenuId;
	static sBuffer[300];
	static i;
	
	if(amuleto == -1 && !amuleto_name[0])
	{
		new j = 1;
		static sPosition[3];
		
		formatex(sBuffer, charsmax(sBuffer), "\yAMULETOS^n\rPF: \w%d", g_points[id][CLASS_FRAGMENTOS]);
		iMenuId = menu_create(sBuffer, "menuAmuletos");
		
		menu_setprop(iMenuId, MPROP_PERPAGE, 0);
		
		formatex(sBuffer, charsmax(sBuffer), "CREAR AMULETO \y(10 pF)");
		menu_additem(iMenuId, sBuffer, "1", _, menu_makecallback("checkAvaibleCreate"));
		
		formatex(sBuffer, charsmax(sBuffer), "CREAR AMULETO PRO \y(15 pF)");
		menu_additem(iMenuId, sBuffer, "2", _, menu_makecallback("checkAvaibleCreatePRO"));
		
		formatex(sBuffer, charsmax(sBuffer), "CREAR AMULETO EXPERT \y(30 pF)^n");
		menu_additem(iMenuId, sBuffer, "3", _, menu_makecallback("checkAvaibleCreateEXPERT"));
		
		for(i = 0; i < 5; ++i)
		{
			if(g_amuleto_name[id][i][0])
			{
				num_to_str((i + 4), sPosition, 2);
				
				formatex(sBuffer, charsmax(sBuffer), "%s%s", g_amuleto_name[id][i], (g_amuleto_equip[id] == i) ? "\y (EQUIPADO)" : (g_amuleto_next_equip[id] == i) ? "\y (ELEGIDO)" : "");
				menu_additem(iMenuId, sBuffer, sPosition);
			} else {
				++j;
			}
		}
		
		for(i = 0; i < j; ++i) {
			menu_addblank(iMenuId);
		}
		
		menu_additem(iMenuId, "Volver", "0");
	}
	else
	{
		static iLen;
		iLen = 0;
		
		iMenuId = menu_create(amuleto_name, "menuAmuletos__In");
		
		menu_additem(iMenuId, "VENDER AMULETO", "1");
		
		iLen += formatex(sBuffer[iLen], charsmax(sBuffer) - iLen, "%sEQUIPAR AMULETO^n^n", (g_amuleto_equip[id] != amuleto) ? "" : "DES");
		
		for(i = 0; i < 4; ++i)
		{
			if(g_amuleto_stat1[id][amuleto][i] != 0)
				iLen += formatex(sBuffer[iLen], charsmax(sBuffer) - iLen, "%s%d\w %s^n", (g_amuleto_stat1[id][amuleto][i] > 0) ? "\y+" : "\r-", abs(g_amuleto_stat1[id][amuleto][i]), AMULETOS_STAT_LIST[i]);
		}
		
		if(g_amuleto_stat3[id][amuleto][3] != 0)
			iLen += formatex(sBuffer[iLen], charsmax(sBuffer) - iLen, "%s%d\w AURA BOMBA LUZ/BUBBLE^n", (g_amuleto_stat3[id][amuleto][3] > 0) ? "\y+" : "\r-", g_amuleto_stat3[id][amuleto][3]);
		
		if(g_amuleto_stat2[id][amuleto][0] != 0.0)
			iLen += formatex(sBuffer[iLen], charsmax(sBuffer) - iLen, "^n%sx%0.2f \wEXP^n", (g_amuleto_stat2[id][amuleto][0] > 0.0) ? "\y+" : "\r-", absFloat(g_amuleto_stat2[id][amuleto][0]));
		
		if(g_amuleto_stat2[id][amuleto][1] != 0.0)
			iLen += formatex(sBuffer[iLen], charsmax(sBuffer) - iLen, "%sx%0.2f \wAPS^n^n", (g_amuleto_stat2[id][amuleto][1] > 0.0) ? "\y+" : "\r-", absFloat(g_amuleto_stat2[id][amuleto][1]));
		
		if(contain(g_amuleto_name[id][amuleto], "[PRO]") != -1 || contain(g_amuleto_name[id][amuleto], "[EXPERT]") != -1)
		{
			if(g_amuleto_stat3[id][amuleto][0] != 0)
				iLen += formatex(sBuffer[iLen], charsmax(sBuffer) - iLen, "%s%d%%\w de que seas modo^n", (g_amuleto_stat3[id][amuleto][0] > 0) ? "\y+" : "\r-", abs(g_amuleto_stat3[id][amuleto][0]));
			
			if(g_amuleto_stat3[id][amuleto][1] > 0)
				iLen += formatex(sBuffer[iLen], charsmax(sBuffer) - iLen, "%s%d%%\w de %s en items extras", (g_amuleto_stat3[id][amuleto][1] > 0) ? "\y" : "\r", g_amuleto_stat3[id][amuleto][1], (g_amuleto_stat3[id][amuleto][2]) ? "\ydescuento\w" : "\rrecargo\w");
		}
		
		menu_additem(iMenuId, sBuffer, "2");
		
		copy(g_amuleto_name_menu[id], 63, amuleto_name);
	}
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	ShowLocalMenu(id, iMenuId, 0);
}

public checkAvaibleCreate(const id, const menuid, const item)
{
	if(g_points[id][CLASS_FRAGMENTOS] >= 10)
		return ITEM_ENABLED;
	
	return ITEM_DISABLED;
}

public checkAvaibleCreatePRO(const id, const menuid, const item)
{
	if(g_points[id][CLASS_FRAGMENTOS] >= 15)
		return ITEM_ENABLED;
	
	return ITEM_DISABLED;
}

public checkAvaibleCreateEXPERT(const id, const menuid, const item)
{
	if(g_points[id][CLASS_FRAGMENTOS] >= 30)
		return ITEM_ENABLED;
	
	return ITEM_DISABLED;
}

showMenuDuelos(const id, duelo = -1, players = 0) // s_md
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(g_level_total[id] < 250)
	{
		colorChat(id, _, "%sNecesitás ser !gnivel 250+!y para poder participar en duelos", ZP_PREFIX);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static iMenuId;
	
	if(g_in_duelo[id])
		return PLUGIN_HANDLED;
	
	duelo = g_duelo[id];
	
	if(g_duelo_type[id] >= 0)
	{
		if(players > 3 && players < 10) players -= 4;
		else if(players < 10) players = 3;
	}
	
	if(duelo == -1 || players)
	{
		if(!players)
		{
			iMenuId = menu_create("DUELOS", "menuDuelos");
			
			menu_additem(iMenuId, "DUELO DE EXPERIENCIA", "1");
			menu_additem(iMenuId, "DUELO DE AMMO PACKS", "2");
			menu_additem(iMenuId, "DUELO DE PH", "3");
			menu_additem(iMenuId, "DUELO DE PZ", "4");
			menu_additem(iMenuId, "DUELO DE PF^n", "5");
			
			menu_additem(iMenuId, "VER RETADORES", "6");
		}
		else
		{
			static sBuffer[128];
			static sPosition[3];
			static i;
			static j;
			
			switch(players)
			{
				case 1:
				{
					static iLevel;
					
					formatex(sBuffer, 63, "DUELO DE %s^n\wRETA A UN JUGADOR", MENU_DUELOS[g_duelo[id]]);
					iMenuId = menu_create(sBuffer, "menuDuelos__InPlayers");
					
					j = 0;
					iLevel = g_level_total[id];
					
					for(i = 1; i <= g_maxplayers; ++i)
					{
						if(!g_isconnected[i])
							continue;
						
						if(g_in_duelo[i])
							continue;
						
						if(g_duelo_invite[id][i])
							continue;
						
						if(i == id)
							continue;
						
						if((g_level_total[i] - iLevel) > 30 || (iLevel - g_level_total[i]) > 30)
							continue;
						
						switch(g_duelo[id])
						{
							case MENU_DUELO_EXPERIENCIA: if(g_exp[i] < g_duelo_bet[id][MENU_DUELO_EXPERIENCIA]) continue;
							case MENU_DUELO_AMMOPACKS: if(g_ammopacks[i] < g_duelo_bet[id][MENU_DUELO_AMMOPACKS]) continue;
							case MENU_DUELO_PH: if(g_points[i][CLASS_HUMAN] < g_duelo_bet[id][MENU_DUELO_PH]) continue;
							case MENU_DUELO_PZ: if(g_points[i][CLASS_ZOMBIE] < g_duelo_bet[id][MENU_DUELO_PZ]) continue;
							case MENU_DUELO_PF: if(g_points[i][CLASS_FRAGMENTOS] < g_duelo_bet[id][MENU_DUELO_PF]) continue;
						}
						
						++j;
						
						num_to_str(j, sPosition, 2);
						menu_additem(iMenuId, g_playername[i], sPosition);
					}
					
					if(menu_items(iMenuId) < 1)
					{
						DestroyLocalMenu(id, iMenuId);
						colorChat(id, _, "%sNo hay usuarios disponibles para retar a duelo!", ZP_PREFIX);
						
						showMenuGame(id);
						return PLUGIN_HANDLED;
					}
				}
				case 2:
				{
					formatex(sBuffer, 127, "DUELOS^n\wESTOS SON LOS JUGADORES QUE TE RETARON A DUELO^n\wSELECCIONA A UNO PARA MÁS INFORMACIÓN");
					iMenuId = menu_create(sBuffer, "menuDuelos__InRetadores");
					
					j = 0;
					
					for(i = 1; i <= g_maxplayers; ++i)
					{
						if(!g_isconnected[i])
							continue;
						
						if(!g_duelo_invite[i][id])
							continue;
						
						++j;
						
						num_to_str(j, sPosition, 2);
						menu_additem(iMenuId, g_playername[i], sPosition);
					}
					
					if(menu_items(iMenuId) < 1)
					{
						DestroyLocalMenu(id, iMenuId);
						colorChat(id, _, "%sNo hay usuarios que te hayan retado a duelo!", ZP_PREFIX);
						
						showMenuDuelos(id);
						return PLUGIN_HANDLED;
					}
				}
				case 3:
				{
					iMenuId = menu_create("DUELOS", "menuDuelos__InRetar");
					
					menu_additem(iMenuId, "RETAR A DUELO", "1");
					menu_additem(iMenuId, "VER RETADORES", "2");
				}
				default:
				{
					i = players - 500;
					
					if(!g_isconnected[i])
					{
						colorChat(id, _, "%sEl usuario seleccionado se ha desconectado!", ZP_PREFIX);
						
						showMenuDuelos(id);
						return PLUGIN_HANDLED;
					}
					else if(g_duelo[i] < 0 || g_duelo[i] > 4)
					{
						colorChat(id, _, "%sEl usuario seleccionado no tiene un duelo en marcha o hay un error en el duelo, vuelva a intentarlo", ZP_PREFIX);
						
						showMenuDuelos(id);
						return PLUGIN_HANDLED;
					}
					
					iMenuId = menu_create("DUELOS", "menuDuelos__InInfo");
					
					menu_additem(iMenuId, "ACEPTAR DUELO^n", "1");
					
					formatex(sBuffer, 63, "\yDUELO DE \w%s^n", MENU_DUELOS[g_duelo[i]]);
					menu_addtext(iMenuId, sBuffer, 1);
					
					formatex(sBuffer, 63, "\yTIPO DE DUELO:^n\w%s^n", MENU_DUELOS_TYPE[g_duelo_type[i]]);
					menu_addtext(iMenuId, sBuffer, 1);
					
					formatex(sBuffer, 63, "\yRETADOR:^n\w%s^n", g_playername[i]);
					menu_addtext(iMenuId, sBuffer, 1);
					
					formatex(sBuffer, 63, "\yAPUESTA:^n\w%d \y%s", g_duelo_bet[i][g_duelo[i]], MENU_DUELOS_PREFIX[g_duelo[i]]);
					menu_addtext(iMenuId, sBuffer, 1);
					
					menu_addblank(iMenuId);
					
					g_page[id][MENU_DUELO] = i;
				}
			}
			
			menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
			menu_setprop(iMenuId, MPROP_NEXTNAME, "Siguiente");
		}
	}
	else
	{
		static sBuffer[64];
		formatex(sBuffer, 63, "DUELO DE %s^n\wELIGE EL TIPO DE DUELO", MENU_DUELOS[duelo]);
		
		iMenuId = menu_create(sBuffer, "menuDuelos__InType");
		
		menu_additem(iMenuId, "HUMANOS INFECTADOS EN UNA RONDA", "1");
		menu_additem(iMenuId, "HUMANOS INFECTADOS EN UN MAPA^n", "2");
		menu_additem(iMenuId, "ZOMBIES MATADOS EN UNA RONDA", "3");
		menu_additem(iMenuId, "ZOMBIES MATADOS EN UN MAPA^n", "4");
		menu_additem(iMenuId, "MAYOR DAÑO HECHO EN UNA RONDA", "5");
		menu_additem(iMenuId, "MAYOR DAÑO HECHO EN UN MAPA^n", "6");
		menu_additem(iMenuId, "VER RETADORES", "7");
	}
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
	
	return PLUGIN_HANDLED;
}

public showMenuLoteria(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return;
	
	static sMenu[256];
	static iLen;
	
	iLen = 0;
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yLOTERÍA^n\wTenés \y%d EXP^n^n", g_exp[id]);
	
	if(g_bet_done[id])
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wYa apostaste esta semana^nTu apuesta es de \y%d EXP\w al \y%d\w^n^n\r1.\w Ganadores", g_bet[id], g_bet_num[id]);
	else
	{
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1.\w Apostar \y%d EXP\w al \y%d^n^n", g_bet[id], g_bet_num[id]);
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r2.\w Cambiar apuesta^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r3.\w Cambiar el número apostado");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n^n\r4.\w Ganadores");
	}
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n^n\wApostadores: \y%d^n\yPozo acumulado: %d EXP", g_gamblers, clamp(g_pozo_acc, 0, 2100000000));
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n^n\r0.\w Atrás");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Loteria Menu");
}

public showMenuWinners(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	static sTopURL[300];
	formatex(sTopURL, charsmax(sTopURL), "<html><head><style>body {background:#000;color:#FFF;</style><meta http-equiv=^"Refresh^" content=^"0;url=http://www.gaminga.com/servidores/counter-strike/27025/top15_loteria.php^"></head><body><p>Cargando...</p></body></html>");
	
	show_motd(id, sTopURL, "GANADORES - LOTERÍA");
	
	return PLUGIN_HANDLED;
}

public showMenuTOPS(const id)
{
	static sPosition[3];
	static iMenuId;
	static i;
	
	iMenuId = menu_create("TOPS 15", "menuTOPS");
	
	for(i = 0; i < 31; ++i)
	{
		num_to_str((i + 1), sPosition, 2);
		
		if(!equal(TOPS15[i][top15Name], "DANYO") && !equal(TOPS15[i][top15Name], "DESAFYOS HECHOS")) menu_additem(iMenuId, TOPS15[i][top15Name], sPosition);
		else if(equal(TOPS15[i][top15Name], "DANYO")) menu_additem(iMenuId, "DAÑO", sPosition);
		else menu_additem(iMenuId, "DESAFÍOS HECHOS", sPosition);
	}
	
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	menu_setprop(iMenuId, MPROP_NEXTNAME, "Siguiente");
	menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
	
	g_page[id][MENU_TOPS15] = min(g_page[id][MENU_TOPS15], menu_pages(iMenuId) - 1);
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId, g_page[id][MENU_TOPS15]);
	
	return PLUGIN_HANDLED;
}

public menuTOPS(const id, const menuid, const item) // (showMenuTOPS)
{
	if(!g_isconnected[id] || !g_user_logged[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	static iMenuDummy;
	player_menu_info(id, iMenuDummy, iMenuDummy, g_page[id][MENU_TOPS15]);
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	if(g_systime_tops[id] > get_gametime())
	{
		colorChat(id, _, "%sTenés que esperar !g5 segundos!y para ver otro !gTOP!y", ZP_PREFIX);
		
		showMenuTOPS(id);
		return PLUGIN_HANDLED;
	}
	
	g_systime_tops[id] = get_gametime() + 5.0;
	
	show_motd(id, TOPS15[str_to_num(sBuffer) - 1][top15URL], "TOP 15");
	
	showMenuTOPS(id);
	return PLUGIN_HANDLED;
}

public showMenuMiniJuegos(const id)
{
	static iMenuId;
	iMenuId = menu_create("MINI JUEGOS", "menuMiniJuegos");
	
	menu_additem(iMenuId, "PIEDRA, PAPEL O TIJERA", "1");
	menu_additem(iMenuId, "SUMA DE DADO MÁS ALTO^n^n\wCon la letra \y.\w o \y,\w jugás al PPT", "2");
	
	menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
	
	return PLUGIN_HANDLED;
}

public menuMiniJuegos(const id, const menuid, const item) // (showMenuMiniJuegos)
{
	if(!g_isconnected[id] || !g_user_logged[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	switch(str_to_num(sBuffer))
	{
		case 1: playPPT__F(id, 1);
		case 2:
		{
			colorChat(id, _, "%sEn construcción!", ZP_PREFIX);
			
			showMenuMiniJuegos(id);
			return PLUGIN_HANDLED;
		}
	}
	
	return PLUGIN_HANDLED;
}


/*new const MODELOS_HUMANOS_MENU[][] = {"tcs_humano_1", "tcs_humano_2", "tcs_humano_3", "tcs_humano_4", "tcs_humano_5", "tcs_humano_6", "tcs_humano_7", "tcs_humano_8", "tcs_humano_11", "tcs_humano13", "tcs_humano14", "tcs_humano15", "tcs_humano16",
"tcs_humano20", "tcs_humano21", "tcs_humano22", "tcs_humano23", "tcs_humano24", "gk_humano_00", "gk_humano_01", "gk_humano_02", "gk_humano_03", "gk_humano_04", "gk_humano_05", "gk_humano_06", "gk_humano_07", "gk_humano_08",
"gk_humano_09", "gk_humano_10", "gk_humano_11", "gk_humano_12", "gk_humano_13", "gk_humano_14", "gk_humano_15", "gk_human_16"}

public showMenuChooseModelHuman(const id)
{
	new iMenuId;
	new i;
	new j = 2;
	new sPos[4];
	
	iMenuId = menu_create("ELEGIR MODELO HUMANO", "menuModelHuman");
	
	menu_additem(iMenuId, "VER MODELOS", "1");
	
	for(i = 0; i < sizeof(MODELOS_HUMANOS_MENU); ++i)
	{
		num_to_str(j, sPos, 3);
		menu_additem(iMenuId, MODELOS_HUMANOS_MENU[i], sPos);
		
		++j;
	}
	
	menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
	
	if(pev_valid(id) == PDATA_SAFE)
		set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	ShowLocalMenu(id, iMenuId);
	
	return PLUGIN_HANDLED;
}

public menuModelHuman(const id, const menuid, const item) // (showMenuChooseModelHuman)
{
	if(!g_isconnected[id] || !g_user_logged[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	new iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer);
	
	if(iItemId == 1)
	{
		if(g_systime_tops[id] > get_gametime())
		{
			colorChat(id, _, "%sTenés que esperar !g3 segundos!y para volver a usar esta opción", ZP_PREFIX);
			
			showMenuChooseModelHuman(id);
			return PLUGIN_HANDLED;
		}
		
		g_systime_tops[id] = get_gametime() + 3.0;
		
		show_motd(id, "<html><head><style>body {background:#000;color:#FFF;</style><meta http-equiv=^"Refresh^" content=^"0;url=http://www.gaminga.com/kiske/modelos.php^"></head><body><p>Cargando...</p></body></html>", "MODELOS HUMANOS");
	}
	else if(g_level_total[id] < 1750)
		colorChat(id, _, "%sNecesitás ser !grango C!y y !gnivel 750!y para elegir un modelo", ZP_PREFIX);
	
	return PLUGIN_HANDLED;
}*/

public playPPT__F(const id, const open_menu)
{
	if(g_ppt_play[id])
	{
		colorChat(id, _, "%sYa estás en cola para !gPPT!y, debes esperar a que otro también quiera jugar", ZP_PREFIX_PPT);
		
		if(open_menu)
			showMenuMiniJuegos(id);
			
		return PLUGIN_HANDLED;
	}
	/*else if(g_level[id] < 141)
	{
		colorChat(id, _, "%sTenés que ser nivel !g141+!y para poder jugar", ZP_PREFIX_PPT);
		
		if(open_menu)
			showMenuMiniJuegos(id);
			
		return PLUGIN_HANDLED;
	}*/
	else if(getPlaying() < 15)
	{
		colorChat(id, _, "%sDebe haber !g15+!y jugadores conectados para poder jugar", ZP_PREFIX_PPT);
		
		if(open_menu)
			showMenuMiniJuegos(id);
		
		return PLUGIN_HANDLED;
	}
	
	g_ppt_play[id] = 1;
	
	new i;
	new j = 0;
	new iVictims[33];
	
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isconnected[i])
			continue;
		
		if(i == id)
			continue;
		
		if(g_ppt_played[i] > 0)
			continue;
		
		if(!g_ppt_play[i])
			continue;
		
		iVictims[j] = i;
		++j;
	}
	
	if(iVictims[0])
	{
		new iVictim = random_num(0, (j-1));
		
		colorChat(id, _, "%sLas jugadas se lanzan cada !g5!y! Se juega al mejor de tres", ZP_PREFIX_PPT);
		colorChat(iVictims[iVictim], _, "%sLas jugadas se lanzan cada !g5s!y! Se juega al mejor de tres", ZP_PREFIX_PPT);
		colorChat(id, _, "%sEstás jugando !gPPT!y contra !g%s!y", ZP_PREFIX_PPT, g_playername[iVictims[iVictim]]);
		colorChat(iVictims[iVictim], _, "%sEstás jugando !gPPT!y contra !g%s!y", ZP_PREFIX_PPT, g_playername[id]);
		
		g_ppt_played[id] = 1;
		g_ppt_played[iVictims[iVictim]] = 1;
		
		g_ppt_enemy[id] = iVictims[iVictim];
		g_ppt_enemy[iVictims[iVictim]] = id;
		
		set_task(5.0, "playPPT", id + TASK_PPT);
	}
	else
	{
		colorChat(id, _, "%sSe te ha puesto en cola para !gPPT!y, en cuanto un contrincante esté disponible, comenzará el juego!", ZP_PREFIX_PPT);
		
		if(open_menu)
			showMenuMiniJuegos(id);
		
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_HANDLED;
}

new const WEAPONS_PPT[][] = {"PIEDRA", "PAPEL", "TIJERA"};
public playPPT(const taskid)
{
	++g_ppt_round[ID_PPT];
	++g_ppt_round[g_ppt_enemy[ID_PPT]];
	
	new iWA = random_num(0, 2);
	new iWV = random_num(0, 2);
	
	if(iWA == iWV)
	{
		colorChat(ID_PPT, _, "%sRONDA !g%d!y: !tEMPATE!y - Ambos jugadores sacaron !g%s!y", ZP_PREFIX_PPT, g_ppt_round[ID_PPT], WEAPONS_PPT[iWA]);
		colorChat(g_ppt_enemy[ID_PPT], _, "%sRONDA !g%d!y: !tEMPATE!y - Ambos jugadores sacaron !g%s!y", ZP_PREFIX_PPT, g_ppt_round[g_ppt_enemy[ID_PPT]], WEAPONS_PPT[iWA]);
		
		++g_ppt_drawround_global[ID_PPT];
		++g_ppt_drawround_global[g_ppt_enemy[ID_PPT]];
		
		++g_ppt_weapon_global[ID_PPT][iWA];
		++g_ppt_weapon_global[g_ppt_enemy[ID_PPT]][iWV];
		
		++g_logros_stats[ID_PPT][(iWA == 0) ? L_PPT_PIEDRA : (iWA == 1) ? L_PPT_PAPEL : L_PPT_TIJERA];
		++g_logros_stats[g_ppt_enemy[ID_PPT]][(iWA == 0) ? L_PPT_PIEDRA : (iWA == 1) ? L_PPT_PAPEL : L_PPT_TIJERA];
		
		/*if(g_ppt_round[ID_PPT] >= 3)
		{
			if(g_ppt_round[ID_PPT] >= 5)
			{
				if(g_ppt_round[ID_PPT] == 7)
				{
					setAchievement(ID_PPT, PPT_DRAW_7);
					setAchievement(g_ppt_enemy[ID_PPT], PPT_DRAW_7);
				}
				else
				{
					setAchievement(ID_PPT, PPT_DRAW_5);
					setAchievement(g_ppt_enemy[ID_PPT], PPT_DRAW_5);
				}
			}
			else
			{
				setAchievement(ID_PPT, PPT_DRAW_3);
				setAchievement(g_ppt_enemy[ID_PPT], PPT_DRAW_3);
			}
		}*/
	}
	else if((iWA == 0 && iWV == 2) || (iWA == 1 && iWV == 0) || (iWA == 2 && iWV == 1)) // PIEDRA y TIJERA || PAPEL y PIEDRA || TIJERA y PAPEL = GANA PPT
	{
		colorChat(ID_PPT, _, "%sRONDA !g%d!y: !tGANÓ %s!y - Sacó !g%s!y contra !g%s!y", ZP_PREFIX_PPT, g_ppt_round[ID_PPT], g_playername[ID_PPT], WEAPONS_PPT[iWA], WEAPONS_PPT[iWV]);
		colorChat(g_ppt_enemy[ID_PPT], _, "%sRONDA !g%d!y: !tGANÓ %s!y - Sacó !g%s!y contra !g%s!y", ZP_PREFIX_PPT, g_ppt_round[g_ppt_enemy[ID_PPT]], g_playername[ID_PPT], WEAPONS_PPT[iWA], WEAPONS_PPT[iWV]);
		
		++g_ppt_win[ID_PPT];
		++g_ppt_winround_global[ID_PPT];
		
		++g_ppt_loseround_global[g_ppt_enemy[ID_PPT]];
		
		++g_ppt_weapon_global[ID_PPT][iWA];
		++g_ppt_weapon_global[g_ppt_enemy[ID_PPT]][iWV];
		
		++g_logros_stats[ID_PPT][(iWA == 0) ? L_PPT_PIEDRA : (iWA == 1) ? L_PPT_PAPEL : L_PPT_TIJERA];
		++g_logros_stats[g_ppt_enemy[ID_PPT]][(iWV == 0) ? L_PPT_PIEDRA : (iWV == 1) ? L_PPT_PAPEL : L_PPT_TIJERA];
	}
	else if((iWV == 0 && iWA == 2) || (iWV == 1 && iWA == 0) || (iWV == 2 && iWA == 1)) // PIEDRA y TIJERA || PAPEL y PIEDRA || TIJERA y PAPEL = GANA g_ppt_enemy[ID_PPT]
	{
		colorChat(ID_PPT, _, "%sRONDA !g%d!y: !tGANÓ %s!y - Sacó !g%s!y contra !g%s!y", ZP_PREFIX_PPT, g_ppt_round[ID_PPT], g_playername[g_ppt_enemy[ID_PPT]], WEAPONS_PPT[iWV], WEAPONS_PPT[iWA]);
		colorChat(g_ppt_enemy[ID_PPT], _, "%sRONDA !g%d!y: !tGANÓ %s!y - Sacó !g%s!y contra !g%s!y", ZP_PREFIX_PPT, g_ppt_round[g_ppt_enemy[ID_PPT]], g_playername[g_ppt_enemy[ID_PPT]], WEAPONS_PPT[iWV], WEAPONS_PPT[iWA]);
		
		++g_ppt_win[g_ppt_enemy[ID_PPT]];
		++g_ppt_winround_global[g_ppt_enemy[ID_PPT]];
		
		++g_ppt_loseround_global[ID_PPT];
		
		++g_ppt_weapon_global[g_ppt_enemy[ID_PPT]][iWV];
		++g_ppt_weapon_global[ID_PPT][iWA];
		
		++g_logros_stats[g_ppt_enemy[ID_PPT]][(iWV == 0) ? L_PPT_PIEDRA : (iWV == 1) ? L_PPT_PAPEL : L_PPT_TIJERA];
		++g_logros_stats[ID_PPT][(iWA == 0) ? L_PPT_PIEDRA : (iWA == 1) ? L_PPT_PAPEL : L_PPT_TIJERA];
	}
	
	if(g_ppt_win[ID_PPT] == 2 || g_ppt_win[g_ppt_enemy[ID_PPT]] == 2)
	{
		if(g_ppt_win[ID_PPT] == 2)
		{
			colorChat(ID_PPT, _, "%sEl ganador es !g%s!y por !g%d!y a !g%d!y", ZP_PREFIX_PPT, g_playername[ID_PPT], g_ppt_win[ID_PPT], g_ppt_win[g_ppt_enemy[ID_PPT]]);
			colorChat(g_ppt_enemy[ID_PPT], _, "%sEl ganador es !g%s!y por !g%d!y a !g%d!y", ZP_PREFIX_PPT, g_playername[ID_PPT], g_ppt_win[ID_PPT], g_ppt_win[g_ppt_enemy[ID_PPT]]);
			
			++g_ppt_winppt_global[ID_PPT];
			++g_ppt_loseppt_global[g_ppt_enemy[ID_PPT]];
			
			++g_logros_stats[ID_PPT][L_PPT_ROUNDS_WINS];
			
			/*if(g_logros_stats[ID_PPT][L_PPT_ROUNDS_WINS] >= 3)
			{
				if(g_logros_stats[ID_PPT][L_PPT_ROUNDS_WINS] == 5)
					setAchievement(ID_PPT, PPT_WIN_CON_5);
				else
					setAchievement(ID_PPT, PPT_WIN_CON_3);
			}*/
		}
		else
		{
			colorChat(ID_PPT, _, "%sEl ganador es !g%s!y por !g%d!y a !g%d!y", ZP_PREFIX_PPT, g_playername[g_ppt_enemy[ID_PPT]], g_ppt_win[g_ppt_enemy[ID_PPT]], g_ppt_win[ID_PPT]);
			colorChat(g_ppt_enemy[ID_PPT], _, "%sEl ganador es !g%s!y por !g%d!y a !g%d!y", ZP_PREFIX_PPT, g_playername[g_ppt_enemy[ID_PPT]], g_ppt_win[g_ppt_enemy[ID_PPT]], g_ppt_win[ID_PPT]);
			
			++g_ppt_winppt_global[g_ppt_enemy[ID_PPT]];
			++g_ppt_loseppt_global[ID_PPT];
			
			g_logros_stats[ID_PPT][L_PPT_ROUNDS_WINS] = 0;
		}
		
		if(g_ppt_round[ID_PPT] > g_ppt_maxround_global)
		{
			new Handle:sqlQuery;
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE modes SET `ppt_max_round`=^"%s %s %d^";", g_playername[ID_PPT], g_playername[g_ppt_enemy[ID_PPT]], g_ppt_round[ID_PPT]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(ID_PPT, sqlQuery, 301);
			else
				SQL_FreeHandle(sqlQuery);
			
			g_ppt_maxround_global = g_ppt_round[ID_PPT];
		}
		
		/*if(g_logros_stats[ID_PPT][L_PPT_PIEDRA] == 3 || g_logros_stats[ID_PPT][L_PPT_PAPEL] == 3 || g_logros_stats[ID_PPT][L_PPT_TIJERA] == 3)
		{
			if(g_logros_stats[ID_PPT][L_PPT_PIEDRA] == 3)
				setAchievement(ID_PPT, PPT_PIEDRA);
			else if(g_logros_stats[ID_PPT][L_PPT_PAPEL] == 3)
				setAchievement(ID_PPT, PPT_PAPEL);
			else
				setAchievement(ID_PPT, PPT_TIJERA);
		}
		
		if(g_logros_stats[g_ppt_enemy[ID_PPT]][L_PPT_PIEDRA] == 3 || g_logros_stats[g_ppt_enemy[ID_PPT]][L_PPT_PAPEL] == 3 || g_logros_stats[g_ppt_enemy[ID_PPT]][L_PPT_TIJERA] == 3)
		{
			if(g_logros_stats[g_ppt_enemy[ID_PPT]][L_PPT_PIEDRA] == 3)
				setAchievement(g_ppt_enemy[ID_PPT], PPT_PIEDRA);
			else if(g_logros_stats[g_ppt_enemy[ID_PPT]][L_PPT_PAPEL] == 3)
				setAchievement(g_ppt_enemy[ID_PPT], PPT_PAPEL);
			else
				setAchievement(g_ppt_enemy[ID_PPT], PPT_TIJERA);
		}*/
		
		g_ppt_played[ID_PPT] = 0;
		g_ppt_played[g_ppt_enemy[ID_PPT]] = 0;
		
		g_ppt_play[ID_PPT] = 0;
		g_ppt_play[g_ppt_enemy[ID_PPT]] = 0;
		
		g_ppt_round[ID_PPT] = 0;
		g_ppt_play[g_ppt_enemy[ID_PPT]] = 0;
		
		g_ppt_win[ID_PPT] = 0;
		g_ppt_win[g_ppt_enemy[ID_PPT]] = 0;
		
		g_logros_stats[ID_PPT][L_PPT_PIEDRA] = 0;
		g_logros_stats[ID_PPT][L_PPT_PAPEL] = 0;
		g_logros_stats[ID_PPT][L_PPT_TIJERA] = 0;
		
		g_logros_stats[g_ppt_enemy[ID_PPT]][L_PPT_PIEDRA] = 0;
		g_logros_stats[g_ppt_enemy[ID_PPT]][L_PPT_PAPEL] = 0;
		g_logros_stats[g_ppt_enemy[ID_PPT]][L_PPT_TIJERA] = 0;
		
		g_ppt_enemy[ID_PPT] = 0;
		g_ppt_enemy[g_ppt_enemy[ID_PPT]] = 0;
		
		return;
	}
	
	set_task(5.0, "playPPT", ID_PPT + TASK_PPT);
}

/** ==================================================
	[ FIN MENUES ]
================================================== **/

/** ==================================================
	[ HANDLERS MENUES ]
================================================== **/

public menuGame(const id, const key) // (showMenuGame)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(g_buy_stuff[id])
		return PLUGIN_HANDLED;
	
	switch(g_page[id][MENU_GAME])
	{
		case 0:
		{
			switch(key)
			{
				case 0:
				{
					g_weapon_auto[id] = 0;
					showMenuBuy1(id);
				}
				case 1: showMenuExtras(id);
				case 2: showMenuClass(id);
				case 3: showMenuHabs(id);
				case 4: showMenuGuild(id);
				case 5: showMenuAchievementsChallenge(id);
				case 6: showMenuStats(id);
				case 7: showMenuConfig(id);
				case 8:
				{
					g_page[id][MENU_GAME] = 1;
					showMenuGame(id);
				}
			}
		}
		case 1:
		{
			switch(key)
			{
				case 0: showMenuHeadZombie(id);
				case 1: showMenuAmuletos(id);
				case 2: showMenuDuelos(id);
				case 3: showMenuLoteria(id);
				case 4: showMenuTOPS(id);
				case 5: showMenuMiniJuegos(id);
				case 6: showMenuComercio(id);
				case 8:
				{
					g_page[id][MENU_GAME] = 2;
					showMenuGame(id);
				}
			}
		}
		case 2:
		{
			switch(key)
			{
				case 0:
				{
					if((g_level_total[id] % 1000) == 0 && g_exp[id] >= MAX_EXP && g_rango[id] < 10)
					{
						g_level_total[id] += 2;
						g_level[id] = 2;
						g_exp[id] = 0;
						++g_reset[id];
						++g_rango[id];
						
						g_level_percent[id] = 0.0;
						
						switch(g_chat_mode[id])
						{
							case CHAT_MODE_NONE: formatex(g_chat_text[id], 15, "");
							case CHAT_MODE_NORMAL: formatex(g_chat_text[id], 15, " [%s](%s%d)", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
							case CHAT_MODE_CORCHETES: formatex(g_chat_text[id], 15, " [%s][%s%d]", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
							case CHAT_MODE_CORCHETES_PARENTESIS: formatex(g_chat_text[id], 15, " [%s][(%s%d)]", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
							case CHAT_MODE_LLAVES: formatex(g_chat_text[id], 15, " [%s]{%s%d}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
							case CHAT_MODE_LLAVES_PARENTESIS: formatex(g_chat_text[id], 15, " [%s]{(%s%d)}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
							case CHAT_MODE_LLAVES_CORCHETES: formatex(g_chat_text[id], 15, " [%s]{[%s%d]}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
							case CHAT_MODE_LLAVES_CORCHETES_P: formatex(g_chat_text[id], 15, " [%s]{[(%s%d)]}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
						}
						
						colorChat(0, CT, "%sFelicitaciones a !t%s!y, avanzó al !grango %s!y", ZP_PREFIX, g_playername[id], LETRAS_RESET[g_rango[id]]);
						
						saveInfo(id);
					}
					else
						showMenuGame(id);
				}
				case 8:
				{
					g_page[id][MENU_GAME] = 0;
					showMenuGame(id);
				}
			}
		}
	}
	
	return PLUGIN_HANDLED;
}

public menuBuy1(const id, const key) // (showMenuBuy1)
{
	static iPage;
	iPage = g_page[id][MENU_WEAPONS_PRIMARY];
	
	static iSelection;
	iSelection = (iPage * 7) + key;
	
	if(key >= 7 || iSelection >= sizeof(ARMAS_PRIMARIAS))
	{
		switch(key)
		{
			case 7: g_weapon_auto[id] = !g_weapon_auto[id];
			case 8:
			{
				if(((iPage + 1) * 7) < sizeof(ARMAS_PRIMARIAS))
					++g_page[id][MENU_WEAPONS_PRIMARY];
				else
					g_page[id][MENU_WEAPONS_PRIMARY] = 0;
			}
			case 9:
			{
				showMenuGame(id);
				return PLUGIN_HANDLED;
			}
		}
		
		showMenuBuy1(id);
		return PLUGIN_HANDLED;
	}
	
	if(g_level_total[id] < ARMAS_PRIMARIAS[iSelection][weaponLevel])
	{
		showMenuBuy1(id);
		return PLUGIN_HANDLED;
	}
	
	g_weapon_primary[id] = iSelection;
	
	showMenuBuy2(id);
	return PLUGIN_HANDLED;
}

public menuBuy2(const id, const key) // (showMenuBuy2)
{
	static iPage;
	iPage = g_page[id][MENU_WEAPONS_SECONDARY];
	
	static iSelection;
	iSelection = (iPage * 7) + key;
	
	if(key >= 7 || iSelection >= sizeof(ARMAS_SECUNDARIAS))
	{
		switch(key)
		{
			case 7: g_weapon_auto[id] = !g_weapon_auto[id];
			case 8:
			{
				if(((iPage + 1) * 7) < sizeof(ARMAS_SECUNDARIAS))
					++g_page[id][MENU_WEAPONS_SECONDARY];
				else
					g_page[id][MENU_WEAPONS_SECONDARY] = 0;
			}
			case 9:
			{
				showMenuGame(id);
				return PLUGIN_HANDLED;
			}
		}
		
		showMenuBuy2(id);
		return PLUGIN_HANDLED;
	}
	
	if(g_level_total[id] < ARMAS_SECUNDARIAS[iSelection][weaponLevel])
	{
		showMenuBuy2(id);
		return PLUGIN_HANDLED;
	}
	
	g_weapon_secondary[id] = iSelection;
	
	showMenuBuy3(id);
	return PLUGIN_HANDLED;
}

public menuBuy3(const id, const key)// (showMenuBuy3)
{
	static iPage;
	iPage = g_page[id][MENU_WEAPONS_TERCIARY];
	
	static iSelection;
	iSelection = (iPage * 7) + key;
	
	if(key >= 7 || iSelection >= sizeof(ARMAS_TERCIARIAS))
	{
		switch(key)
		{
			case 7: g_weapon_auto[id] = !g_weapon_auto[id];
			case 8:
			{
				if(((iPage + 1) * 7) < sizeof(ARMAS_TERCIARIAS))
					++g_page[id][MENU_WEAPONS_TERCIARY];
				else
					g_page[id][MENU_WEAPONS_TERCIARY] = 0;
			}
			case 9:
			{
				showMenuGame(id);
				return PLUGIN_HANDLED;
			}
		}
		
		showMenuBuy3(id);
		return PLUGIN_HANDLED;
	}
	
	if(g_level_total[id] < ARMAS_TERCIARIAS[iSelection][weaponGrenadesLevel])
	{
		showMenuBuy3(id);
		return PLUGIN_HANDLED;
	}
	
	g_weapon_terciary[id] = iSelection;
	
	if(!g_isalive[id] || g_zombie[id] || g_special_mode[id] || !g_canbuy[id] || g_mode[MODE_DUEL_FINAL] || g_mode[MODE_GRUNT] || ((g_legendaria_kpuzzle || g_no_buy) && !g_kiske[id]))
		return PLUGIN_HANDLED;
	
	buyPrimaryWeapon(id, g_weapon_primary[id]);
	buySecondaryWeapon(id, g_weapon_secondary[id]);
	
	if(!task_exists(TASK_MAKEZOMBIE))
		buyTerciaryWeapon(id, g_weapon_terciary[id]);
	
	g_logros_stats[id][DISPARO] = 1;
	
	g_canbuy[id] = 0;
	
	return PLUGIN_HANDLED;
}

buyPrimaryWeapon(const id, const selection)
{
	dropWeapons(id, 1);
	
	strip_user_weapons(id);
	give_item(id, "weapon_knife");
	
	static iWeaponId;
	iWeaponId = weaponNameId(ARMAS_PRIMARIAS[selection][weaponEnt]);
	
	g_weapon_primary_actual[id] = selection;
	
	give_item(id, ARMAS_PRIMARIAS[selection][weaponEnt]);
	ExecuteHamB(Ham_GiveAmmo, id, MAXBPAMMO[iWeaponId], AMMOTYPE[iWeaponId], MAXBPAMMO[iWeaponId]);
}

buySecondaryWeapon(const id, const selection)
{
	dropWeapons(id, 2);
	
	static iWeaponId;
	iWeaponId = weaponNameId(ARMAS_SECUNDARIAS[selection][weaponEnt]);
	
	g_weapon_secondary_actual[id] = selection;
	
	give_item(id, ARMAS_SECUNDARIAS[selection][weaponEnt]);
	ExecuteHamB(Ham_GiveAmmo, id, MAXBPAMMO[iWeaponId], AMMOTYPE[iWeaponId], MAXBPAMMO[iWeaponId]);
}

buyTerciaryWeapon(const id, const selection)
{
	if(g_mode[MODE_ANNIHILATOR])
		return;
	
	if(selection >= 4)
	{
		if(selection < 11)
			g_nitro_bomb[id] = ARMAS_TERCIARIAS[selection][weaponEnt_FB];
		
		if(selection >= 6)
		{
			g_madness_bomb[id] = ARMAS_TERCIARIAS[selection][weaponEnt_HE];
			if(selection >= 9)
			{
				g_bubble_bomb[id] = ARMAS_TERCIARIAS[selection][weaponEnt_SG];
				
				if(selection >= 11)
					g_supernova_bomb[id] = ARMAS_TERCIARIAS[selection][weaponEnt_FB];
				
				if(selection == 15)
				{					
					g_bubble_bomb_pro[id] = g_bubble_bomb[id];
					g_madness_bomb_pro[id] = g_madness_bomb[id];
					g_supernova_bomb_pro[id] = g_supernova_bomb[id];
				}
			}
		}
	}
	
	if(ARMAS_TERCIARIAS[selection][weaponEnt_HE])
	{
		give_item(id, "weapon_hegrenade");
		cs_set_user_bpammo(id, CSW_HEGRENADE, ARMAS_TERCIARIAS[selection][weaponEnt_HE]);
	}
	
	if(ARMAS_TERCIARIAS[selection][weaponEnt_FB])
	{
		give_item(id, "weapon_flashbang");
		cs_set_user_bpammo(id, CSW_FLASHBANG, ARMAS_TERCIARIAS[selection][weaponEnt_FB]);
	}
	
	if(ARMAS_TERCIARIAS[selection][weaponEnt_SG])
	{
		give_item(id, "weapon_smokegrenade");
		cs_set_user_bpammo(id, CSW_SMOKEGRENADE, ARMAS_TERCIARIAS[selection][weaponEnt_SG]);
	}
}

public menuExtras(const id, const menuid, const item) // (showMenuExtras)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	static iMenuDummy;
	player_menu_info(id, iMenuDummy, iMenuDummy, g_page[id][MENU_ITEMS_EXTRAS]);
	
	if(!g_isalive[id] || g_special_mode[id] || g_mode[MODE_DUEL_FINAL] || g_mode[MODE_GRUNT] || g_mode[MODE_GAMINGA] || ((g_legendaria_kpuzzle || g_no_buy) && !g_kiske[id]) || item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	static iCost;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	
	iItemId = str_to_num(sBuffer) - 1;
	
	if(!g_zombie[id])
	{
		iCost = g_item_extra[id][iItemId][CLASS_HUMAN];
		
		if(g_amuleto_equip[id] != -1 && g_amuleto_stat3[id][g_amuleto_equip[id]][1] > 0)
			iCost = ((g_amuleto_stat3[id][g_amuleto_equip[id]][2]) ? (iCost - ((iCost * g_amuleto_stat3[id][g_amuleto_equip[id]][1]) / 100)) : (iCost + ((iCost * g_amuleto_stat3[id][g_amuleto_equip[id]][1]) / 100)));
		
		if((g_ammopacks[id] - iCost) < 0)
		{
			colorChat(id, _, "%sNo tenés suficientes ammo packs", ZP_PREFIX);
			DestroyLocalMenu(id, menuid);
			
			showMenuExtras(id);
			return PLUGIN_HANDLED;
		}
		
		switch(iItemId)
		{
			case EXTRA_NVISION:
			{
				g_nvision[id] = 1;
				
				remove_task(id + TASK_NVISION);
				
				if(!g_mode[MODE_NEMESIS]) set_task(0.3, "setUserNightvision", id + TASK_NVISION, _, _, "b");
				else set_task(0.1, "setUserNightvision__Nemesis", id + TASK_NVISION, _, _, "b");
			}
			case EXTRA_LONGJUMP_H:
			{
				g_longjump[id] = 1;
				give_item(id, "item_longjump");
			}
			case EXTRA_BOMBKILL:
			{
				if(!checkAccess(id))
				{
					if(!g_lasthuman[id] || g_killbombcounter >= 5 || g_kill_bomb_count[id])
					{
						DestroyLocalMenu(id, menuid);
						
						showMenuExtras(id);
						return PLUGIN_HANDLED;
					}
					
					if((!g_mode[MODE_INFECTION] && !g_mode[MODE_MULTI]) || g_endround)
					{
						DestroyLocalMenu(id, menuid);
						
						showMenuExtras(id);
						return PLUGIN_HANDLED;
					}
					
					++g_killbombcounter;
				}
				
				++g_kill_bomb[id];
				g_kill_bomb_count[id] = 1;
				
				if(user_has_weapon(id, CSW_HEGRENADE))
				{
					cs_set_user_bpammo(id, CSW_HEGRENADE, cs_get_user_bpammo(id, CSW_HEGRENADE) + 1);
					emitSound(id, CHAN_ITEM, g_sound_buyammo);
				}
				else
					give_item(id, "weapon_hegrenade");
			}
			case EXTRA_GRAVITY: set_user_gravity(id, 0.3);
			case EXTRA_TRANSP:
			{
				entity_set_int(id, EV_INT_rendermode, kRenderTransAlpha);
				entity_set_float(id, EV_FL_renderamt, 30.0);
			}
			case EXTRA_UNLIMITED_CLIP:
			{
				g_unlimited_clip[id] = 1;
				g_eegg_fake[id][1] = 1;
				
				++g_logros_stats[id][COUNT_UNLIMITED_CLIP];
				
				if(g_logros_stats[id][COUNT_UNLIMITED_CLIP] == 100)
					setAchievement(id, COLECCION_DE_PLOMO);
				
				++g_eegg_unclip[id];
			}
			case EXTRA_ANTIDOTE_BOMB:
			{
				if(!checkAccess(id))
				{
					if(!g_lasthuman[id] || g_antidotebombcounter >= 3)
					{
						DestroyLocalMenu(id, menuid);
						
						showMenuExtras(id);
						return PLUGIN_HANDLED;
					}
					
					if((!g_mode[MODE_INFECTION] && !g_mode[MODE_MULTI]) || g_endround)
					{
						DestroyLocalMenu(id, menuid);
						
						showMenuExtras(id);
						return PLUGIN_HANDLED;
					}
					
					++g_antidotebombcounter;
				}
				
				++g_antidote_bomb[id];
				++g_antidote_bomb_count[id];
				
				if(g_antidote_bomb_count[id] >= 3)
					setAchievement(id, MEDICO);
				
				if(user_has_weapon(id, CSW_SMOKEGRENADE))
				{
					cs_set_user_bpammo(id, CSW_SMOKEGRENADE, cs_get_user_bpammo(id, CSW_SMOKEGRENADE) + 1);
					emitSound(id, CHAN_ITEM, g_sound_buyammo);
				}
				else
					give_item(id, "weapon_smokegrenade");
			}
			case EXTRA_PRECISION_SEMIPERFECTA: {
				g_Precission_SemiPerfecta[id] = 1;
			}
		}
		
		g_ammopacks[id] -= iCost;
		g_item_extra[id][iItemId][CLASS_HUMAN] += (g_level_total[id] * 5);
	}
	else
	{
		iCost = g_item_extra[id][iItemId][CLASS_ZOMBIE];
		
		if(g_amuleto_equip[id] != -1 && g_amuleto_stat3[id][g_amuleto_equip[id]][1] > 0)
			iCost = ((g_amuleto_stat3[id][g_amuleto_equip[id]][2]) ? (iCost - ((iCost * g_amuleto_stat3[id][g_amuleto_equip[id]][1]) / 100)) : (iCost + ((iCost * g_amuleto_stat3[id][g_amuleto_equip[id]][1]) / 100)));
		
		if((g_ammopacks[id] - iCost) < 0)
		{
			colorChat(id, _, "%sNo tenés suficientes ammo packs", ZP_PREFIX);
			DestroyLocalMenu(id, menuid);
			
			showMenuExtras(id);
			return PLUGIN_HANDLED;
		}
		
		switch(iItemId)
		{
			case EXTRA_ANTIDOTE:
			{
				if(g_endround || (!g_mode[MODE_INFECTION] && !g_mode[MODE_MULTI]) || g_frozen[id] || getZombies() <= 1)
				{
					DestroyLocalMenu(id, menuid);
					
					showMenuExtras(id);
					return PLUGIN_HANDLED;
				}
				
				humanMe(id);
				
				++g_logros_stats[id][ANTIDOTES_IN_MAP];
				
				g_logros_stats[id][DISPARO] = 1;
				
				if(g_logros_stats[id][ANTIDOTES_IN_MAP] == 3)
					setAchievement(id, ODIO_SER_ZOMBIE);
				
				g_eegg_antidote[id] = 1;
			}
			case EXTRA_MADNESS:
			{
				if(!checkAccess(id))
				{
					if(g_madness_count[id] == 3 || g_madnesscounter >= 12)
					{
						DestroyLocalMenu(id, menuid);
						
						showMenuExtras(id);
						return PLUGIN_HANDLED;
					}
					
					if(g_nodamage[id] || (!g_mode[MODE_INFECTION] && !g_mode[MODE_MULTI]) || g_endround)
					{	
						DestroyLocalMenu(id, menuid);
						
						showMenuExtras(id);
						return PLUGIN_HANDLED;
					}
					
					if(g_frozen[id])
					{
						DestroyLocalMenu(id, menuid);
						
						showMenuExtras(id);
						return PLUGIN_HANDLED;
					}
					
					++g_madnesscounter;
				}
				else if(g_frozen[id])
				{
					DestroyLocalMenu(id, menuid);
					
					showMenuExtras(id);
					return PLUGIN_HANDLED;
				}
				
				++g_madness_count[id];
				++g_eegg_madness[id];
				
				g_nodamage[id] = 1;
				
				remove_task(id + TASK_AURA);
				remove_task(id + TASK_BLOOD);
				remove_task(id + TASK_MADNESS_BOMB);
				
				g_madness_bomb_count[id] = 0;
				g_madness_bomb_move[id] = 0;
				
				give_item(id, "weapon_knife");
				
				/*message_begin(MSG_ONE, g_message_screenfade, _, id);
				write_short(UNIT_SECOND);
				write_short(0);
				write_short(FFADE_IN);
				write_byte(random_num(0, 255));
				write_byte(random_num(0, 255));
				write_byte(random_num(0, 255));
				write_byte(255);
				message_end();*/
				
				set_task(0.1, "zombieAura", id + TASK_AURA, _, _, "b");
				set_task(6.0, "madnessOver", id + TASK_BLOOD);
				
				emitSound(id, CHAN_VOICE, g_sound_zombie_madness, .pitch = (random_num(50, 200)));
			}
			case EXTRA_INFBOMB:
			{
				if(!checkAccess(id))
				{
					if(g_infection_bomb_map[id] || g_infbombcounter >= 2)
					{
						DestroyLocalMenu(id, menuid);
						
						showMenuExtras(id);
						return PLUGIN_HANDLED;
					}
					
					if((!g_mode[MODE_INFECTION] && !g_mode[MODE_MULTI]) || g_endround)
					{
						DestroyLocalMenu(id, menuid);
						
						showMenuExtras(id);
						return PLUGIN_HANDLED;
					}
					
					++g_infbombcounter;
					++g_infection_bomb_map[id];
				}
				
				++g_infection_bomb[id];
				
				if(user_has_weapon(id, CSW_HEGRENADE))
				{
					cs_set_user_bpammo(id, CSW_HEGRENADE, cs_get_user_bpammo(id, CSW_HEGRENADE) + 1);
					emitSound(id, CHAN_ITEM, g_sound_buyammo);
				}
				else
					give_item(id, "weapon_hegrenade");
			}
			case EXTRA_LONGJUMP_Z:
			{
				g_longjump[id] = 1;
				give_item(id, "item_longjump");
				
				++g_eegg_lj[id];
			}
			case EXTRA_TOXICBOMB:
			{
				colorChat(id, _, "%sEn construcción!", ZP_PREFIX);
				return PLUGIN_HANDLED;
				/*if(!checkAccess(id))
				{
					if(g_toxic_bomb_map[id] || g_toxicbombcounter >= 3)
					{
						DestroyLocalMenu(id, menuid);
						
						showMenuExtras(id);
						return PLUGIN_HANDLED;
					}
					
					if((!g_mode[MODE_INFECTION] && !g_mode[MODE_MULTI]) || g_endround)
					{
						DestroyLocalMenu(id, menuid);
						
						showMenuExtras(id);
						return PLUGIN_HANDLED;
					}
					
					++g_toxicbombcounter;
					++g_toxic_bomb_map[id];
				}
				
				++g_toxic_bomb[id];
				
				if(user_has_weapon(id, CSW_HEGRENADE))
				{
					cs_set_user_bpammo(id, CSW_HEGRENADE, cs_get_user_bpammo(id, CSW_HEGRENADE) + 1);
					emitSound(id, CHAN_ITEM, g_sound_buyammo);
				}
				
				give_item(id, "weapon_hegrenade");*/
			}
			case EXTRA_REDUCEDMG: g_reduce_dmg[id] = 1;
		}
		
		g_ammopacks[id] -= iCost;
		g_item_extra[id][iItemId][CLASS_ZOMBIE] += (g_level_total[id] * 5);
	}
	
	DestroyLocalMenu(id, menuid);
	return PLUGIN_HANDLED;
}

public menuClass(const id, const menuid, const item) // (showMenuClass)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	static iMenuDummy;
	player_menu_info(id, iMenuDummy, iMenuDummy, g_page[id][MENU_ITEMS_EXTRAS]);
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	
	DestroyLocalMenu(id, menuid);
	
	switch(str_to_num(sBuffer))
	{
		case 1: showMenuHumanClass(id);
		case 2: showMenuZombieClass(id);
		case 3: showMenuSurvivorDificult(id);
		case 4: showMenuNemesisDificult(id);
	}
	
	return PLUGIN_HANDLED;
}

public menuHumanClass(const id, const menuid, const item) // (showMenuHumanClass)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	static iMenuDummy;
	player_menu_info(id, iMenuDummy, iMenuDummy, g_page[id][MENU_HUMAN_CLASS]);
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuClass(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	iItemId = str_to_num(sBuffer) - 1;
	
	if(g_level_total[id] >= CLASES_HUMANAS[iItemId][humanLevel])
	{
		g_human_class_next[id] = iItemId;
	
		colorChat(id, _, "%sHas elegido al humano !g%s!y", ZP_PREFIX, CLASES_HUMANAS[iItemId][humanName]);
		colorChat(id, _, "%s!g%d!y VIDA BASE | !g%0.1f!y VELOCIDAD | !g%0.2f!y GRAVEDAD | !g%d%%!y DAÑO", ZP_PREFIX, CLASES_HUMANAS[iItemId][humanHealth], CLASES_HUMANAS[iItemId][humanSpeed], (CLASES_HUMANAS[iItemId][humanGravity] * 800.0), CLASES_HUMANAS[iItemId][humanDamage]);
	}
	
	DestroyLocalMenu(id, menuid);
	
	showMenuHumanClass(id);
	return PLUGIN_HANDLED;
}

public menuZombieClass(const id, const menuid, const item) // (showMenuZombieClass)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	static iMenuDummy;
	player_menu_info(id, iMenuDummy, iMenuDummy, g_page[id][MENU_ZOMBIE_CLASS]);
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuClass(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	iItemId = str_to_num(sBuffer) - 1;
	
	if(g_level_total[id] >= CLASES_ZOMBIE[iItemId][zombieLevel])
	{
		g_zombie_class_next[id] = iItemId;
	
		colorChat(id, _, "%sHas elegido al zombie !g%s!y", ZP_PREFIX, CLASES_ZOMBIE[iItemId][zombieName]);
		colorChat(id, _, "%s!g%d!y VIDA BASE | !g%0.1f!y VELOCIDAD | !g%0.2f!y GRAVEDAD", ZP_PREFIX, CLASES_ZOMBIE[iItemId][zombieHealth], CLASES_ZOMBIE[iItemId][zombieSpeed], (CLASES_ZOMBIE[iItemId][zombieGravity] * 800.0));
	}
	
	DestroyLocalMenu(id, menuid);
	
	showMenuZombieClass(id);
	return PLUGIN_HANDLED;
}

public menuSurvivorDificult(const id, const menuid, const item) // (showMenuSurvivorDificult)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuClass(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	iItemId = str_to_num(sBuffer) - 1;
	
	switch(iItemId)
	{
		case DIF_NORMAL:
		{
			if(g_dificult[id][CLASS_SURVIVOR] != DIF_NORMAL)
			{
				if(g_mode[MODE_SURVIVOR])
				{
					colorChat(id, _, "%sSolo podés cambiar tu dificultad cuando no se está jugando modo !gSURVIVOR!y", ZP_PREFIX);
					
					DestroyLocalMenu(id, menuid);
					
					showMenuSurvivorDificult(id);
					return PLUGIN_HANDLED;
				}
				
				g_dificult[id][CLASS_SURVIVOR] = DIF_NORMAL;
				colorChat(id, _, "%sTu dificultad ha cambiado, los cambios solo afectan al modo !gSURVIVOR!y", ZP_PREFIX);
			}
		}
		case DIF_DIFICIL:
		{
			if(!g_logros[id][SURVIVOR_NOOB] || g_mode[MODE_SURVIVOR])
			{
				if(g_mode[MODE_SURVIVOR])
					colorChat(id, _, "%sSolo podés cambiar tu dificultad cuando no se está jugando modo !gSURVIVOR!y", ZP_PREFIX);
				else
					colorChat(id, _, "%sTenés que ganar el logro !gSURVIVOR PRINCIPIANTE!y para elegir esta dificultad", ZP_PREFIX);
				
				DestroyLocalMenu(id, menuid);
				
				showMenuSurvivorDificult(id);
				return PLUGIN_HANDLED;
			}
			
			g_dificult[id][CLASS_SURVIVOR] = DIF_DIFICIL;
			colorChat(id, _, "%sTu dificultad ha cambiado, los cambios solo afectan al modo !gSURVIVOR!y", ZP_PREFIX);
		}
		case DIF_MUY_DIFICIL:
		{
			if(!g_logros[id][SURVIVOR_AVANZADO] || g_mode[MODE_SURVIVOR])
			{
				if(g_mode[MODE_SURVIVOR])
					colorChat(id, _, "%sSolo podés cambiar tu dificultad cuando no se está jugando modo !gSURVIVOR!y", ZP_PREFIX);
				else
					colorChat(id, _, "%sTenés que ganar el logro !gSURVIVOR AVANZADO!y para elegir esta dificultad", ZP_PREFIX);
				
				DestroyLocalMenu(id, menuid);
				
				showMenuSurvivorDificult(id);
				return PLUGIN_HANDLED;
			}
			
			g_dificult[id][CLASS_SURVIVOR] = DIF_MUY_DIFICIL;
			colorChat(id, _, "%sTu dificultad ha cambiado, los cambios solo afectan al modo !gSURVIVOR!y", ZP_PREFIX);
		}
	}
	
	DestroyLocalMenu(id, menuid);
	
	showMenuSurvivorDificult(id);
	return PLUGIN_HANDLED;
}

public menuNemesisDificult(const id, const menuid, const item) // (showMenuNemesisDificult)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuClass(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	iItemId = str_to_num(sBuffer) - 1;
	
	switch(iItemId)
	{
		case DIF_NORMAL:
		{
			if(g_dificult[id][CLASS_NEMESIS] != DIF_NORMAL)
			{
				if(g_mode[MODE_NEMESIS])
				{
					colorChat(id, _, "%sSolo podés cambiar tu dificultad cuando no se está jugando modo !gNEMESIS!y", ZP_PREFIX);
					
					DestroyLocalMenu(id, menuid);
					
					showMenuNemesisDificult(id);
					return PLUGIN_HANDLED;
				}
				
				g_dificult[id][CLASS_NEMESIS] = DIF_NORMAL;
				colorChat(id, _, "%sTu dificultad ha cambiado, los cambios solo afectan al modo !gNEMESIS!y", ZP_PREFIX);
			}
		}
		case DIF_DIFICIL:
		{
			if(!g_logros[id][NEMESIS_NOOB] || g_mode[MODE_NEMESIS])
			{
				if(g_mode[MODE_NEMESIS])
					colorChat(id, _, "%sSolo podés cambiar tu dificultad cuando no se está jugando modo !gNEMESIS!y", ZP_PREFIX);
				else
					colorChat(id, _, "%sTenés que ganar el logro !gNEMESIS PRINCIPIANTE!y para elegir esta dificultad", ZP_PREFIX);
				
				DestroyLocalMenu(id, menuid);
				
				showMenuNemesisDificult(id);
				return PLUGIN_HANDLED;
			}
			
			g_dificult[id][CLASS_NEMESIS] = DIF_DIFICIL;
			colorChat(id, _, "%sTu dificultad ha cambiado, solo afecta al modo !gNEMESIS!y", ZP_PREFIX);
		}
		case DIF_MUY_DIFICIL:
		{
			if(!g_logros[id][NEMESIS_AVANZADO] || g_mode[MODE_NEMESIS])
			{
				if(g_mode[MODE_NEMESIS])
					colorChat(id, _, "%sSolo podés cambiar tu dificultad cuando no se está jugando modo !gNEMESIS!y", ZP_PREFIX);
				else
					colorChat(id, _, "%sTenés que ganar el logro !gNEMESIS AVANZADO!y para elegir esta dificultad", ZP_PREFIX);
				
				DestroyLocalMenu(id, menuid);
				
				showMenuNemesisDificult(id);
				return PLUGIN_HANDLED;
			}
			
			g_dificult[id][CLASS_NEMESIS] = DIF_MUY_DIFICIL;
			colorChat(id, _, "%sTu dificultad ha cambiado, solo afecta al modo !gNEMESIS!y", ZP_PREFIX);
		}
	}
	
	DestroyLocalMenu(id, menuid);
	
	showMenuNemesisDificult(id);
	return PLUGIN_HANDLED;
}

public menuHabs(const id, const menuid, const item) // (showMenuHabs)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	iItemId = str_to_num(sBuffer) - 1;
	
	DestroyLocalMenu(id, menuid);
	
	switch(iItemId)
	{
		case -1: showMenuGame(id);
		case 0..3: showMenuHabs__In(id, iItemId);
		case 4..5: showMenuHabs__InFragmentos(id, iItemId);
		case 6: showMenuChangePoints(id);
		case 7: showMenuDiamonds(id);
		case 8:
		{
			colorChat(id, _, "%sPara comprar recursos entra en: !gwww.gaminga.com/servidores/counter-strike/27025/comprar!y", ZP_PREFIX);
			showMenuHabs(id);
		}
	}
	
	return PLUGIN_HANDLED;
}

public menuHabs__In(const id, const menuid, const item) // (showMenuHabs__In)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuHabs(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	static iPage;
	static iHab;
	static iCost;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	
	iPage = g_page[id][MENU_HABS_CLASS];
	iItemId = str_to_num(sBuffer);
	
	if((iPage == CLASS_HUMAN && iItemId == 7) || (iPage == CLASS_ZOMBIE && iItemId == 5)) {
		DestroyLocalMenu(id, menuid);
		
		showMenu__ResetHabs(id, iPage);
		return PLUGIN_HANDLED;
	}
	
	iHab = g_hab[id][iItemId][iPage];
	iCost = NEXT_HAB_COST(iItemId, iPage, iHab);
	
	if(g_points[id][iPage] >= iCost && iHab < HABS_LEVELS[iPage][iItemId])
	{
		g_points[id][iPage] -= iCost;
		
		if(iPage == CLASS_HUMAN || iPage == CLASS_ZOMBIE)
			g_points_lost[id][iPage] += iCost;
		
		++g_hab[id][iItemId][iPage];
		
		// iPage 	= CLASS_HUMAN , CLASS_ZOMBIE , ETC
		// iItemId 	= HABILIDAD SELECCIONADA
		// iHab 	= NIVEL DE HABILIDAD
		// iCost	= COSTO DE LA HABILIDAD
		
		if(iPage == CLASS_HUMAN && g_hab[id][iItemId][iPage] == HABS_LEVELS[iPage][iItemId])
			setAchievement(id, EL_HUMANO_MAS_FUERTE);
		else if(iPage == CLASS_ZOMBIE && iItemId == HAB_DAMAGE && g_hab[id][iItemId][iPage] == HABS_LEVELS[iPage][iItemId])
			setAchievement(id, DESGARRANDO_FUERTE);
		else if(iPage == CLASS_NEMESIS && iItemId == HAB_GRAVITY)
			setAchievement(id, BAZOOKA_PRO);
	}
	
	DestroyLocalMenu(id, menuid);
	
	showMenuHabs__In(id, iPage);
	return PLUGIN_HANDLED;
}

public menuHabs__InFragmentos(const id, const menuid, const item) // (showMenuHabs__InFragmentos)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuHabs(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	static iPage;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	
	iPage = g_page[id][MENU_HABS_CLASS];
	iItemId = str_to_num(sBuffer) - 1;
	
	switch(iItemId)
	{
		case 0:
		{
			switch(iPage)
			{
				case 4: // WESKER
				{
					if(g_points[id][CLASS_FRAGMENTOS] >= 25 && !g_hab[id][WESKER_SUPER_LASER][CLASS_FRAGMENTOS])
					{
						g_points[id][CLASS_FRAGMENTOS] -= 25;
						++g_hab[id][WESKER_SUPER_LASER][CLASS_FRAGMENTOS];
						
						setAchievement(id, SUPER_LASER);
					}
				}
				case 5: // OTROS
				{
					if(g_points[id][CLASS_FRAGMENTOS] >= 15 && !g_hab[id][HUMAN_BUBBLE_DURATION][CLASS_FRAGMENTOS])
					{
						g_points[id][CLASS_FRAGMENTOS] -= 15;
						g_hab[id][HUMAN_BUBBLE_DURATION][CLASS_FRAGMENTOS] = 2;
					}
				}
			}
		}
		case 1: // CAMBIAR TIPO DE BOMBA
		{
			switch(iPage)
			{
				case 4: // WESKER
				{
					if(g_points[id][CLASS_FRAGMENTOS] >= 50 && !g_hab[id][WESKER_COMBO][CLASS_FRAGMENTOS])
					{
						g_points[id][CLASS_FRAGMENTOS] -= 50;
						++g_hab[id][WESKER_COMBO][CLASS_FRAGMENTOS];
						
						setAchievement(id, COMBO_WESKER);
					}
				}
				case 5: // OTROS
				{
					if(g_points[id][CLASS_FRAGMENTOS] >= 20 && !g_hab[id][CHANGE_TYPE_BOMBS][CLASS_FRAGMENTOS])
					{
						g_points[id][CLASS_FRAGMENTOS] -= 20;
						g_hab[id][CHANGE_TYPE_BOMBS][CLASS_FRAGMENTOS] = 1;
					}
				}
			}
		}
		case 2: // DAÑO JASON
		{
			if(iPage == 5) // OTROS
			{
				if(g_points[id][CLASS_FRAGMENTOS] >= 30 && !g_hab[id][JASON_DAMAGE][CLASS_FRAGMENTOS])
				{
					g_points[id][CLASS_FRAGMENTOS] -= 30;
					g_hab[id][JASON_DAMAGE][CLASS_FRAGMENTOS] = 1;
				}
			}
		}
		case 3: { // COMBO JASON
			if(iPage == 5) { // OTROS
				if(g_points[id][CLASS_FRAGMENTOS] >= 50 && !g_hab[id][JASON_COMBO][CLASS_FRAGMENTOS]) {
					g_points[id][CLASS_FRAGMENTOS] -= 50;
					++g_hab[id][JASON_COMBO][CLASS_FRAGMENTOS];
					
					setAchievement(id, COMBO_JASON);
				}
			}
		}
	}
	
	DestroyLocalMenu(id, menuid);
	
	showMenuHabs__InFragmentos(id, iPage);
	return PLUGIN_HANDLED;
}

public menuChangePoints(const id, const menuid, const item) // (showMenuChangePoints)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuHabs(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	
	switch(str_to_num(sBuffer))
	{
		case 1:
		{
			if(g_points[id][CLASS_FRAGMENTOS] < 3)
			{
				showMenuChangePoints(id);
				return PLUGIN_HANDLED;
			}
			
			g_points[id][CLASS_FRAGMENTOS] -= 3;
			++g_points[id][CLASS_SURVIVOR];
		}
		case 2:
		{
			if(g_points[id][CLASS_FRAGMENTOS] < 3)
			{
				showMenuChangePoints(id);
				return PLUGIN_HANDLED;
			}
			
			g_points[id][CLASS_FRAGMENTOS] -= 3;
			++g_points[id][CLASS_NEMESIS];
		}
		case 3:
		{
			if(g_points[id][CLASS_FRAGMENTOS] < 15)
			{
				showMenuChangePoints(id);
				return PLUGIN_HANDLED;
			}
			
			g_points[id][CLASS_FRAGMENTOS] -= 15;
			g_points[id][CLASS_SURVIVOR] += 6;
		}
		case 4:
		{
			if(g_points[id][CLASS_FRAGMENTOS] < 15)
			{
				showMenuChangePoints(id);
				return PLUGIN_HANDLED;
			}
			
			g_points[id][CLASS_FRAGMENTOS] -= 15;
			g_points[id][CLASS_NEMESIS] += 6;
		}
	}
	
	DestroyLocalMenu(id, menuid);
	
	showMenuChangePoints(id);
	return PLUGIN_HANDLED;
}

public menuDiamonds(const id, const menuid, const item) // (showMenuDiamonds)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuHabs(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	
	DestroyLocalMenu(id, menuid);
	
	switch(str_to_num(sBuffer))
	{
		case 1:
		{
			if(g_diamonds[id] < 5)
			{
				showMenuDiamonds(id);
				return PLUGIN_HANDLED;
			}
			
			if(g_combo_zombie_ok[id])
			{
				colorChat(id, _, "%sYa tenés habilitado el combo zombie!", ZP_PREFIX);
				
				showMenuDiamonds(id);
				return PLUGIN_HANDLED;
			}
			
			g_diamonds[id] -= 5;
			g_combo_zombie_ok[id] = 1;
			
			setAchievement(id, HABILITAR_COMBO_ZOMBIE);
		}
		case 2:
		{
			if(g_diamonds[id] < 200)
			{
				showMenuDiamonds(id);
				return PLUGIN_HANDLED;
			}
			
			colorChat(id, _, "%sHubo un error al realizar la compra (!gD-03!y), reportá en el foro!", ZP_PREFIX);
			
			showMenuDiamonds(id);
			return PLUGIN_HANDLED;
			
			//g_diamonds[id] -= 200;
		}
		case 3:
		{
			showMenuCreateAmuletos(id, 1);
			return PLUGIN_HANDLED;
		}
		case 4:
		{
			if(g_diamonds[id] < 2)
			{
				showMenuDiamonds(id);
				return PLUGIN_HANDLED;
			}
			
			new i;
			for(i = 0; i < sizeof(ITEMS_EXTRAS_HUMANS); ++i) g_item_extra[id][i][CLASS_HUMAN] = COST_ITEMS_EXTRAS_HUMANS[i];
			for(i = 0; i < sizeof(ITEMS_EXTRAS_ZOMBIES); ++i) g_item_extra[id][i][CLASS_ZOMBIE] = COST_ITEMS_EXTRAS_ZOMBIES[i];
			
			colorChat(id, _, "%sEl costo de tus items extras han vuelto al valor por defecto!", ZP_PREFIX);
			
			g_diamonds[id] -= 2;
		}
	}
	
	showMenuDiamonds(id);
	return PLUGIN_HANDLED;
}

public menuCreateAmuletos(const id, const key) // (showMenuCreateAmuletos)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(key == 9)
	{
		colorChat(id, _, "%sCuando estés decidido para crear el amuleto personalizado, escribe en tu consola lo siguiente:", ZP_PREFIX);
		colorChat(id, _, "!gzp_crear_amuleto!y, pedirá confirmación, no te preocupes!");
		
		showMenuDiamonds(id);
		return PLUGIN_HANDLED;
	}
	
	new iSlot;
	iSlot = getSlotAmuleto(id);
	
	if(iSlot == -1)
	{
		colorChat(id, _, "%sNo podés tener más de !g5 amuletos al mismo tiempo!y", ZP_PREFIX);
		
		showMenuAmuletos(id);
		return PLUGIN_HANDLED;
	}
	
	switch(key)
	{
		case 0:
		{
			client_cmd(id, "messagemode INGRESAR_NOMBRE_AMULETO");
			return PLUGIN_HANDLED;
		}
		case 1:
		{
			if(g_amuleto_stat1[id][iSlot][0] < 5)
			{
				++g_amuleto_stat1[id][iSlot][0];
				g_cost_amuleto[id] += 2;
			}
			else
			{
				g_amuleto_stat1[id][iSlot][0] = 1;
				g_cost_amuleto[id] -= 8;
			}
		}
		case 2:
		{
			if(g_amuleto_stat1[id][iSlot][1] < 5)
			{
				++g_amuleto_stat1[id][iSlot][1];
				g_cost_amuleto[id] += 3;
			}
			else
			{
				g_amuleto_stat1[id][iSlot][1] = 1;
				g_cost_amuleto[id] -= 12;
			}
		}
		case 3:
		{
			if(g_amuleto_stat1[id][iSlot][2] < 5)
			{
				++g_amuleto_stat1[id][iSlot][2];
				g_cost_amuleto[id] += 3;
			}
			else
			{
				g_amuleto_stat1[id][iSlot][2] = 1;
				g_cost_amuleto[id] -= 12;
			}
		}
		case 4:
		{
			if(g_amuleto_stat1[id][iSlot][3] < 5)
			{
				++g_amuleto_stat1[id][iSlot][3];
				g_cost_amuleto[id] += 5;
			}
			else
			{
				g_amuleto_stat1[id][iSlot][3] = 1;
				g_cost_amuleto[id] -= 20;
			}
		}
		case 5:
		{
			if(g_amuleto_stat3[id][iSlot][3] < 6)
			{
				++g_amuleto_stat3[id][iSlot][3];
				++g_cost_amuleto[id];
			}
			else
			{
				g_amuleto_stat3[id][iSlot][3] = 1;
				g_cost_amuleto[id] -= 5;
			}
		}
		case 6:
		{
			if(g_amuleto_stat2[id][iSlot][0] < 1.4)
			{
				g_amuleto_stat2[id][iSlot][0] += 0.2;
				g_cost_amuleto[id] += 3;
			}
			else
			{
				g_amuleto_stat2[id][iSlot][0] = 0.0;
				g_cost_amuleto[id] -= 21;
			}
		}
		case 7:
		{
			if(g_amuleto_stat2[id][iSlot][1] < 1.4)
			{
				g_amuleto_stat2[id][iSlot][1] += 0.2;
				g_cost_amuleto[id] += 3;
			}
			else
			{
				g_amuleto_stat2[id][iSlot][1] = 0.0;
				g_cost_amuleto[id] -= 21;
			}
		}
		case 8:
		{
			if(g_amuleto_stat3[id][iSlot][1] < 20)
			{
				g_amuleto_stat3[id][iSlot][1] += 5;
				++g_cost_amuleto[id];
			}
			else
			{
				g_amuleto_stat3[id][iSlot][1] = 0;
				g_cost_amuleto[id] -= 4;
			}
		}
	}
	
	showMenuCreateAmuletos(id);
	return PLUGIN_HANDLED;
}

public menuConfig(const id, const menuid, const item) // (showMenuConfig)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	switch(str_to_num(sBuffer))
	{
		case 1: showMenuConfig__HUD_General(id);
		case 2: showMenuConfig__HUD_Combo(id);
		case 3: showMenuConfig__ChooseColor(id);
		case 4:
		{
			colorChat(id, _, "%s****** GAM!NGA ******", ZP_PREFIX);
			colorChat(id, _, "%sReducir la distancia de la visión nocturna !gmejora tus FPS!y!", ZP_PREFIX);
			colorChat(id, _, "%sIngresá un número del !g10 al 255!y", ZP_PREFIX);
			
			client_cmd(id, "messagemode DISTANCIA_VISION_NOCTURNA");
		}
		case 5:
		{
			clcmd_Invis(id);
			showMenuConfig(id);
		}
		case 6:
		{
			g_chat_mode_prefix[id] = !g_chat_mode_prefix[id];
			colorChat(id, _, "%sAhora tu nivel en el chat !g%stiene!y el !gprefijo Niv.!y", ZP_PREFIX, (g_chat_mode_prefix[id]) ? "" : "no ");
			
			switch(g_chat_mode[id])
			{
				case CHAT_MODE_NONE: formatex(g_chat_text[id], 15, "");
				case CHAT_MODE_NORMAL: formatex(g_chat_text[id], 15, " [%s](%s%d)", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_CORCHETES: formatex(g_chat_text[id], 15, " [%s][%s%d]", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_CORCHETES_PARENTESIS: formatex(g_chat_text[id], 15, " [%s][(%s%d)]", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_LLAVES: formatex(g_chat_text[id], 15, " [%s]{%s%d}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_LLAVES_PARENTESIS: formatex(g_chat_text[id], 15, " [%s]{(%s%d)}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_LLAVES_CORCHETES: formatex(g_chat_text[id], 15, " [%s]{[%s%d]}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_LLAVES_CORCHETES_P: formatex(g_chat_text[id], 15, " [%s]{[(%s%d)]}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			}
			
			showMenuConfig(id);
		}
		case 7: showMenuConfig__ChatMode(id);
	}
	
	return PLUGIN_HANDLED;
}

public menuConfig__HUD_General(const id, const menuid, const item) // (showMenuConfig__HUD_General)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer);
	
	switch(iItemId)
	{
		case 0:
		{
			showMenuConfig(id);
			return PLUGIN_HANDLED;
		}
		case 1: showMenuConfig__Color(id, COLOR_HUD);
		case 2: g_hud_effect[id] = !g_hud_effect[id];
		case 3: g_hud_abrev[id] = !g_hud_abrev[id];
		case 4: g_hud_position[id][POSITION_HUD][1] -= 0.01;
		case 5: g_hud_position[id][POSITION_HUD][1] += 0.01;
		case 6:
		{
			g_hud_position[id][POSITION_HUD][0] -= 0.01;
			g_hud_position[id][POSITION_HUD][2] = 0.0;
		}
		case 7:
		{
			g_hud_position[id][POSITION_HUD][0] += 0.01;
			g_hud_position[id][POSITION_HUD][2] = 0.0;
		}
		case 8:
		{
			if(g_hud_position[id][POSITION_HUD][2])
			{
				g_hud_position[id][POSITION_HUD][0] = 0.5;
				g_hud_position[id][POSITION_HUD][1] = 0.02;
				g_hud_position[id][POSITION_HUD][2] = 0.0;
			}
			else
			{
				g_hud_position[id][POSITION_HUD][0] = -1.0;
				g_hud_position[id][POSITION_HUD][1] = 0.5;
				g_hud_position[id][POSITION_HUD][2] = 1.0;
			}
		}
		case 9: g_hud_position[id][POSITION_HUD] = Float:{-1.0, 0.04, 1.0};
	}
	
	if(iItemId != 1)
		showMenuConfig__HUD_General(id);
	
	return PLUGIN_HANDLED;
}

public menuConfig__HUD_Combo(const id, const menuid, const item) // (showMenuConfig__HUD_Combo)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuConfig(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer);
	
	switch(iItemId)
	{
		case 1: colorChat(id, _, "%sLos colores de los combos son automáticos por el momento", ZP_PREFIX); //showMenuConfig__Color(id, COLOR_HUDCOMBO);
		case 2: g_hudcombo_effect[id] = !g_hudcombo_effect[id];
		case 3: g_hudcombo_abrev[id] = !g_hudcombo_abrev[id];	
		case 4: g_hud_position[id][POSITION_HUDCOMBO][1] -= 0.01;
		case 5: g_hud_position[id][POSITION_HUDCOMBO][1] += 0.01;
		case 6:
		{
			g_hudcombo_effect[id] = 0;
			g_hudcombo_abrev[id] = 0;
			
			g_hud_position[id][POSITION_HUDCOMBO] = Float:{-1.0, 0.57, 0.0};
		}
	}
	
	if(iItemId > 1 && iItemId < 7)
	{
		set_hudmessage(0, 255, 0, -1.0, g_hud_position[id][POSITION_HUDCOMBO][1], g_hudcombo_effect[id], 1.0, 5.49, 0.01, 0.01);
		
		if(!g_hudcombo_abrev[id]) ShowSyncHudMsg(id, g_Hud_Combo, "¡¡ Ultra Kill !!^nCombo x6000^nDaño total: 13975 | Daño: 1337");
		else ShowSyncHudMsg(id, g_Hud_Combo, "¡¡ Ultra Kill !!^nCombo x6000^n13975 | 1337");
	}
	
	showMenuConfig__HUD_Combo(id);
	return PLUGIN_HANDLED;
}

public menuConfig__ChooseColor(const id, const menuid, const item) // (showMenuConfig__ChooseColor)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuConfig(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer);
	
	switch(iItemId)
	{
		case 1: showMenuConfig__Color(id, COLOR_NIGHT);
		case 2: showMenuConfig__Color(id, COLOR_FLARE);
		case 3: showMenuConfig__Color(id, COLOR_BAZOOKA);
		case 4: showMenuConfig__Color(id, COLOR_LASER);
	}
	
	return PLUGIN_HANDLED;
}

public menuConfig__ChatMode(const id, const key) // (showMenuConfig__ChatMode)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(key == 9)
	{
		showMenuConfig(id);
		return PLUGIN_HANDLED;
	}
	
	if(key != 8)
	{
		g_chat_mode[id] = key;
		
		switch(key)
		{
			case CHAT_MODE_NONE: formatex(g_chat_text[id], 15, "");
			case CHAT_MODE_NORMAL: formatex(g_chat_text[id], 15, " [%s](%s%d)", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			case CHAT_MODE_CORCHETES: formatex(g_chat_text[id], 15, " [%s][%s%d]", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			case CHAT_MODE_CORCHETES_PARENTESIS: formatex(g_chat_text[id], 15, " [%s][(%s%d)]", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			case CHAT_MODE_LLAVES: formatex(g_chat_text[id], 15, " [%s]{%s%d}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			case CHAT_MODE_LLAVES_PARENTESIS: formatex(g_chat_text[id], 15, " [%s]{(%s%d)}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			case CHAT_MODE_LLAVES_CORCHETES: formatex(g_chat_text[id], 15, " [%s]{[%s%d]}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			case CHAT_MODE_LLAVES_CORCHETES_P: formatex(g_chat_text[id], 15, " [%s]{[(%s%d)]}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
		}
	}
	
	showMenuConfig__ChatMode(id);
	return PLUGIN_HANDLED;
}

public menuGuild(const id, const menuid, const item) // (showMenuGuild)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer);
	
	if(g_guild[id])
	{
		switch(iItemId)
		{
			case 1: showMenuGuild__MembersOn(id);
			case 2: showMenuGuild__InviteSend(id);
			case 3:
			{
				static sMenu[250];
				static iMenuId;
				static iLen;
				
				iLen = 0;
				
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "¿ESTÁ SEGURO QUE DESEA ABANDONAR ESTA HERMANDAD?^n^n");
				
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yHERMANDAD: \r%s^n", g_guild_name[g_guild_id[id]]);
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yNIVEL: \r%d^n", g_guild_level[g_guild_id[id]]);
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yEXP: \r%d^n", g_guild_exp[g_guild_id[id]]);
				
				iMenuId = menu_create(sMenu, "menuGuild__Delete");
				
				menu_additem(iMenuId, "SI, QUIERO IRME", "1");
				menu_additem(iMenuId, "NO, NO QUIERO IRME", "2");
				
				menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
				
				set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
				ShowLocalMenu(id, iMenuId, 0);
				
				return PLUGIN_HANDLED;
			}
			case 4: showMenuGuild__MoveHUD(id);
			case 0:
			{
				showMenuGame(id);
				return PLUGIN_HANDLED;
			}
		}
	}
	else
	{
		switch(iItemId)
		{
			case 1:
			{
				if(g_level_total[id] < 50)
				{
					colorChat(id, _, "%sNecesitás ser nivel !g50+!y para crear una hermandad", ZP_PREFIX_GUILD);
					
					showMenuGuild(id);
					return PLUGIN_HANDLED;
				}
				else if(g_points[id][CLASS_FRAGMENTOS] < 100)
				{
					colorChat(id, _, "%sNecesitás !g100 pF!y para crear una hermandad", ZP_PREFIX_GUILD);
					
					showMenuGuild(id);
					return PLUGIN_HANDLED;
				}
				
				client_cmd(id, "messagemode CREAR_HERMANDAD");
				
				colorChat(id, _, "%sEscribe el nombre de tu hermandad. Solo letras y algunos símbolos: !g( ) [ ] { } - = . , : !!y", ZP_PREFIX_GUILD);
				colorChat(id, _, "%sAl crear una hermandad estás aceptando las reglas específicas de las hermandades", ZP_PREFIX_GUILD);
				
				return PLUGIN_HANDLED;
			}
			case 2: showMenuGuild__InviteReceive(id);
			case 3: {
				showMenu__GuildAbyss(id);
			}
		}
	}
	
	return PLUGIN_HANDLED;
}

public menuGuild__MoveHUD(const id, const menuid, const item) // (showMenuGuild__MoveHUD)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer);
	
	switch(iItemId)
	{
		case 1: g_hud_position[id][POSITION_HUDGUILD][1] -= 0.01;
		case 2: g_hud_position[id][POSITION_HUDGUILD][1] += 0.01;
		case 3:
		{
			g_hud_position[id][POSITION_HUDGUILD][0] -= 0.01;
			g_hud_position[id][POSITION_HUDGUILD][2] = 0.0;
		}
		case 4:
		{
			g_hud_position[id][POSITION_HUDGUILD][0] += 0.01;
			g_hud_position[id][POSITION_HUDGUILD][2] = 0.0;
		}
		case 5:
		{
			if(g_hud_position[id][POSITION_HUDGUILD][2])
			{
				g_hud_position[id][POSITION_HUDGUILD][0] = 0.5;
				g_hud_position[id][POSITION_HUDGUILD][1] = 0.02;
				g_hud_position[id][POSITION_HUDGUILD][2] = 0.0;
			}
			else
			{
				g_hud_position[id][POSITION_HUDGUILD][0] = -1.0;
				g_hud_position[id][POSITION_HUDGUILD][1] = 0.5;
				g_hud_position[id][POSITION_HUDGUILD][2] = 1.0;
			}
		}
		case 6: g_hud_position[id][POSITION_HUDGUILD] = Float:{-1.0, 0.80, 1.0};
		case 0:
		{
			showMenuGuild(id);
			return PLUGIN_HANDLED;
		}
	}
	
	if(iItemId < 7)
	{
		set_hudmessage(0, 255, 0, g_hud_position[id][POSITION_HUDGUILD][0], g_hud_position[id][POSITION_HUDGUILD][1], g_hudcombo_effect[id], 0.0, 8.0, 0.0, 0.0, -1);
		ShowSyncHudMsg(id, g_Hud_ComboGuild, "%s | Ganaste 1.337 de EXP", g_guild_name[g_guild_id[id]]);
		
		showMenuGuild__MoveHUD(id);
	}
	
	return PLUGIN_HANDLED;
}

public menuGuild__Delete(const id, const menuid, const item) // (MenuGuild__Delete)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer);
	
	switch(iItemId)
	{
		case 1:
		{
			if(!g_guild_abandono[id])
			{
				if(g_guild_united[id])
				{
					colorChat(id, _, "%sPor favor, reconectate al servidor y luego abandona la hermandad!", ZP_PREFIX_GUILD);
					return PLUGIN_HANDLED;
				}
				
				new i;
				new sQuery[32];
				
				for(i = 0; i < 5; ++i)
				{
					if(g_user_id[id] == g_guild_userid[id][i])
						break;
				}
				
				formatex(sQuery, charsmax(sQuery), "id%d", i+1);
				
				new Handle:sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE guild SET %s='0' WHERE guild_id='%d';", sQuery, g_guild_id[id]);
				if(!SQL_Execute(sqlQuery))
					executeQuery(id, sqlQuery, 70);
				else
					SQL_FreeHandle(sqlQuery);
				
				sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET guildid='0' WHERE id='%d';", g_user_id[id]);
				if(!SQL_Execute(sqlQuery))
					executeQuery(id, sqlQuery, 71);
				else
					SQL_FreeHandle(sqlQuery);
				
				colorChat(0, CT, "%s!t%s!y ha abandonado la hermandad !g%s!y", ZP_PREFIX, g_playername[id], g_guild_name[g_guild_id[id]]);
				
				new j = 0;
				for(i = 1; i <= g_maxplayers; ++i)
				{
					if(!g_isconnected[i])
						continue;
					
					if(id == i)
						continue;
					
					if(g_guild_id[id] == g_guild_id[i])
					{
						j = i;
						
						g_guild_slot[i] = 0;
						
						g_guild_ids[i][0] = 0;
						g_guild_ids[i][1] = 0;
						g_guild_ids[i][2] = 0;
						g_guild_ids[i][3] = 0;
						g_guild_ids[i][4] = 0;
						
						break;
					}
				}
				
				if(j)
				{
					for(i = 1; i <= g_maxplayers; ++i)
					{
						if(!g_isconnected[i])
							continue;
						
						if(id == i)
							continue;
						
						if(g_guild_id[j] == g_guild_id[i])
						{
							if(g_guild_slot[j] > 4)
								g_guild_slot[j] = 0;
							
							g_guild_ids[j][g_guild_slot[j]] = i;
							
							++g_guild_slot[j];
						}
					}
					
					for(i = 1; i <= g_maxplayers; ++i)
					{
						if(!g_isconnected[i])
							continue;
						
						if(id == i)
							continue;
						
						if(j == i)
							continue;
						
						if(g_guild_id[j] == g_guild_id[i])
						{
							g_guild_slot[i] = g_guild_slot[j];
							
							g_guild_ids[i][0] = g_guild_ids[j][0];
							g_guild_ids[i][1] = g_guild_ids[j][1];
							g_guild_ids[i][2] = g_guild_ids[j][2];
							g_guild_ids[i][3] = g_guild_ids[j][3];
							g_guild_ids[i][4] = g_guild_ids[j][4];
						}
					}
				}
				
				g_guild[id] = 0;
				g_guild_id[id] = 0;
				
				g_guild_abandono[id] = 1;
			}
			else
				colorChat(id, _, "%sYa has abandonado la hermandad, cuando vuelvas a conectarte se actualizarán los cambios!", ZP_PREFIX_GUILD);
		}
	}
	
	showMenuGuild(id);
	return PLUGIN_HANDLED;
}

public menuGuild__MembersOn(const id, const menuid, const item) // (showMenuGuild__Memberson)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	
	static sName[36];
	static sBuffer[3];
	static iDummy;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), sName, charsmax(sName), iDummy);
	DestroyLocalMenu(id, menuid);
	
	if(equal(sName, "EXPULSAR JUGADORES DE LA HERMANDAD"))
	{
		showMenuGuild__MembersKick(id);
		return PLUGIN_HANDLED;
	}
	
	showMenuGuild__MembersOn(id);
	return PLUGIN_HANDLED;
}

public menuGuild__MembersKick(const id, const menuid, const item) // (showMenuGuild__MembersKick)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGuild__MembersOn(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer) - 1;
	
	if(iItemId == -1)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGuild__MembersOn(id);
		return PLUGIN_HANDLED;
	}
	
	if(g_guild_userid_concat[g_guild_id[id]][iItemId] > 0)
	{
		new i;
		new j = 0;
		
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
			
			if(equali(g_guild_username[g_guild_id[id]][iItemId], g_playername[i]))
			{
				colorChat(id, _, "%sEl usuario seleccionado está conectado, solo puedes expulsar a miembros desconectados!", ZP_PREFIX_GUILD);
				
				j = 1;
				break;
			}
		}
		
		if(!j)
		{
			new Handle:sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET `guildid`='0' WHERE id='%d';", g_guild_userid_concat[g_guild_id[id]][iItemId]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 125);
			else
				SQL_FreeHandle(sqlQuery);
			
			new id1, id2, id3, id4, id5;
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT id1, id2, id3, id4, id5 FROM guild WHERE guild_id='%d';", g_guild_id[id]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 121);
			else if(SQL_NumResults(sqlQuery))
			{
				id1 = SQL_ReadResult(sqlQuery, 0);
				id2 = SQL_ReadResult(sqlQuery, 1);
				id3 = SQL_ReadResult(sqlQuery, 2);
				id4 = SQL_ReadResult(sqlQuery, 3);
				id5 = SQL_ReadResult(sqlQuery, 4);
				 
				SQL_FreeHandle(sqlQuery);
			}
			else
				SQL_FreeHandle(sqlQuery);
			
			new sBuff[32];
			formatex(sBuff, 31, "id%d", (id1 == g_guild_userid_concat[g_guild_id[id]][iItemId]) ? 1 : (id2 == g_guild_userid_concat[g_guild_id[id]][iItemId]) ? 2 : (id3 == g_guild_userid_concat[g_guild_id[id]][iItemId]) ? 3 : (id4 == g_guild_userid_concat[g_guild_id[id]][iItemId]) ? 4 :
			(id5 == g_guild_userid_concat[g_guild_id[id]][iItemId]) ? 5 : 5);
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE guild SET %s='0' WHERE guild_id='%d';", sBuff, g_guild_id[id]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 121);
			else
				SQL_FreeHandle(sqlQuery);
			
			new iExpireTime = arg_time() + 21600;
			
			new sExpireTime[64];
			new iYear;
			new iMonth;
			new iDay;
			new iHour;
			new iMinute;
			new iSecond;
			
			unix_to_time(iExpireTime, iYear, iMonth, iDay, iHour, iMinute, iSecond);
			formatex(sExpireTime, 63, "%d-%d-%d %d:%d:%d", iYear, iMonth, iDay, iHour, iMinute, iSecond);
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET `expireban`=^"%s^" WHERE id='%d';", sExpireTime, g_user_id[id]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 121);
			else
				SQL_FreeHandle(sqlQuery);
			
			formatex(g_guild_invite_again[id], 63, sExpireTime);
			
			colorChat(id, CT, "%s!t%s!y expulsó a !g%s!y de la hermandad !g%s!y", ZP_PREFIX_GUILD, g_playername[id], g_guild_username[g_guild_id[id]][iItemId], g_guild_name[g_guild_id[id]]);
			
			g_guild_username[g_guild_id[id]][iItemId][0] = EOS;
			g_guild_userid_concat[g_guild_id[id]][iItemId] = 0;
		}
	}
	
	showMenuGuild__MembersOn(id);
	return PLUGIN_HANDLED;
}

public menuGuild__InviteSend(const id, const menuid, const item) // (showMenuGuild__InviteSend)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(g_guild_invite_again[id][0])
	{
		colorChat(id, _, "%sTenés que esperar hasta el !g%s!y para invitar nuevamente!", ZP_PREFIX, g_guild_invite_again[id]);
		
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	
	static sName[32];
	static sBuffer[3];
	static iDummy;
	static iId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), sName, charsmax(sName), iDummy);
	
	iId = get_user_index(sName);
	
	DestroyLocalMenu(id, menuid);
	
	if(!g_isconnected[iId])
	{
		colorChat(id, _, "%sEl usuario seleccionado se ha desconectado", ZP_PREFIX_GUILD);
		
		showMenuGuild__InviteSend(id);
		return PLUGIN_HANDLED;
	}
	else if(g_guild[iId])
	{
		colorChat(id, _, "%sEl usuario seleccionado ya se encuentra en una hermandad", ZP_PREFIX_GUILD);
		
		showMenuGuild__InviteSend(id);
		return PLUGIN_HANDLED;
	}
	
	g_guild_invite[id][iId] = 1;
	
	colorChat(id, CT, "%sInvitaste a !t%s!y a tu hermandad", ZP_PREFIX_GUILD, g_playername[iId]);
	colorChat(iId, CT, "%s!t%s!y te ha invitado a unirte a !g%s!y", ZP_PREFIX_GUILD, g_playername[id], g_guild_name[g_guild_id[id]]);
	
	showMenuGuild__InviteSend(id);
	return PLUGIN_HANDLED;
}

public menuGuild__InviteReceive(const id, const menuid, const item) // (showMenuGuild__InviteReceive)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	
	static sName[32];
	static sBuffer[3];
	static iDummy;
	static iId;
	static i;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), sName, charsmax(sName), iDummy);
	
	iId = -1;
	
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isconnected[i])
			continue;
		
		if(!g_guild_creator[i])
			continue;
		
		if(contain(sName, g_playername[i]) != -1)
		{
			iId = i;
			break;
		}
	}
	
	DestroyLocalMenu(id, menuid);
	
	if(iId == -1)
	{
		colorChat(id, _, "%sEl usuario seleccionado se ha desconectado", ZP_PREFIX_GUILD);
		
		showMenuGuild__InviteReceive(id);
		return PLUGIN_HANDLED;
	}
	
	g_guild_invite[iId][id] = 0;
	
	if(!equal(g_guild_invite_again[iId], "NONE") && g_guild_invite_again[iId][0])
	{
		colorChat(id, _, "%Esta hermandad ha expulsado a un miembro recientemente y no te podés unir", ZP_PREFIX_GUILD);
		return PLUGIN_HANDLED;
	}
	
	new Handle:sqlQuery;
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT id1, id2, id3, id4, id5 FROM guild WHERE guild_id='%d' AND (id1 <> 0 OR id2 <> 0 OR id3 <> 0 OR id4 <> 0 OR id5 <> 0);", g_guild_id[iId]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 46);
	else if(SQL_NumResults(sqlQuery))
	{
		new sQuery[32];
		new iSlotOccuped = 0;
		new iComplete = 1;
		
		g_guild_userid[id][0] = SQL_ReadResult(sqlQuery, 0);
		g_guild_userid[id][1] = SQL_ReadResult(sqlQuery, 1);
		g_guild_userid[id][2] = SQL_ReadResult(sqlQuery, 2);
		g_guild_userid[id][3] = SQL_ReadResult(sqlQuery, 3);
		g_guild_userid[id][4] = SQL_ReadResult(sqlQuery, 4);
		
		if(!g_guild_userid[id][0])
		{
			formatex(sQuery, charsmax(sQuery), "id1");
			iComplete = 0;
		}
		else if(!g_guild_userid[id][1])
		{
			formatex(sQuery, charsmax(sQuery), "id2");
			iComplete = 0;
		}
		else if(!g_guild_userid[id][2])
		{
			formatex(sQuery, charsmax(sQuery), "id3");
			iComplete = 0;
		}
		else if(!g_guild_userid[id][3])
		{
			formatex(sQuery, charsmax(sQuery), "id4");
			iComplete = 0;
		}
		else if(!g_guild_userid[id][4])
		{
			formatex(sQuery, charsmax(sQuery), "id5");
			iComplete = 0;
		}
		
		if(g_guild_userid[id][0]) ++iSlotOccuped;
		if(g_guild_userid[id][1]) ++iSlotOccuped;
		if(g_guild_userid[id][2]) ++iSlotOccuped;
		if(g_guild_userid[id][3]) ++iSlotOccuped;
		if(g_guild_userid[id][4]) ++iSlotOccuped;
		
		SQL_FreeHandle(sqlQuery);
		
		if(iComplete)
		{
			colorChat(id, _, "%sLa hermandad a la que intentás unirte está completa! (1 | %d)", ZP_PREFIX_GUILD, g_guild_id[iId]);
			
			showMenuGuild(id);
			return PLUGIN_HANDLED;
		}
		
		if((g_guild_level[g_guild_id[iId]] < 3 && iSlotOccuped > 1) ||
		(g_guild_level[g_guild_id[iId]] < 5 && iSlotOccuped > 2) ||
		(g_guild_level[g_guild_id[iId]] < 10 && iSlotOccuped > 3))
		{
			colorChat(id, _, "%sLa hermandad a la que intentas unirte no tiene slots suficientes!", ZP_PREFIX_GUILD);
			
			showMenuGuild(id);
			return PLUGIN_HANDLED;
		}
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE guild SET %s='%d' WHERE guild_id='%d'", sQuery, g_user_id[id], g_guild_id[iId]);
		if(!SQL_Execute(sqlQuery))
			executeQuery(id, sqlQuery, 47);
		else
			SQL_FreeHandle(sqlQuery);
		
		colorChat(0, CT, "%s!t%s!y se unió a la hermandad !g%s!y", ZP_PREFIX_GUILD, g_playername[id], g_guild_name[g_guild_id[iId]]);
		colorChat(id, _, "%sCiertas funciones pueden demorar hasta el cambio de mapa para que surtan efecto!", ZP_PREFIX_GUILD);
		
		g_guild[id] = 1;
		g_guild_id[id] = g_guild_id[iId];
		g_guild_exp[g_guild_id[id]] = g_guild_exp[g_guild_id[iId]];
		g_guild_level[g_guild_id[id]] = g_guild_level[g_guild_id[iId]];
		copy(g_guild_name[g_guild_id[id]], 31, g_guild_name[g_guild_id[iId]]);
		g_guild_united[id] = 1;
	}
	else
	{
		colorChat(id, _, "%sLa hermandad a la que intentás unirte está completa! (2 | %d)", ZP_PREFIX_GUILD, g_guild_id[iId]);
		SQL_FreeHandle(sqlQuery);
	}
	
	showMenuGuild(id);
	return PLUGIN_HANDLED;
}

public menuAchievementsChallenge(const id, const menuid, const item) // (showMenuAchievementsChallenge)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer);
	
	switch(iItemId)
	{
		case 1: showMenuAchievementsClass(id);
		case 2: showMenuMetaAchievements(id);
		case 3: showMenuChallenges(id);
	}
	
	return PLUGIN_HANDLED;
}

public menuAchievementsClass(const id, const menuid, const item) // (showMenuAchievementsClass)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	static iMenuDummy;
	player_menu_info(id, iMenuDummy, iMenuDummy, g_page[id][MENU_LOGROS_PCLASS]);
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuAchievementsChallenge(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	g_page[id][MENU_LOGROS_CLASS] = str_to_num(sBuffer) - 1;
	
	showMenuAchievements(id, g_page[id][MENU_LOGROS_CLASS]);
	
	return PLUGIN_HANDLED;
}

public menuAchievements(const id, const menuid, const item) // (showMenuAchievements)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	static iMenuDummy;
	player_menu_info(id, iMenuDummy, iMenuDummy, g_page_logros[id][g_page[id][MENU_LOGROS_CLASS_INT]]);
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuAchievementsClass(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[4];
	static iDummy;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	g_page[id][MENU_LOGRO] = str_to_num(sBuffer) - 1;
	
	showMenuAchievementDesc(id, g_logros_int[id][g_page[id][MENU_LOGRO]]);
	return PLUGIN_HANDLED;
}

public menuAchievementDesc(const id, const menuid, const item) // (showMenuAchievementDesc)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuAchievements(id, g_page[id][MENU_LOGROS_CLASS_INT]);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[4];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer);
	
	if(iItemId == 1 && g_logros[id][g_logros_int[id][g_page[id][MENU_LOGRO]]])
	{
		if(g_systime_link[id] > get_gametime() && !g_kiske[id])
		{
			showMenuAchievementDesc(id, g_logros_int[id][g_page[id][MENU_LOGRO]]);
			return PLUGIN_HANDLED;
		}
		
		g_systime_link[id] = get_gametime() + 30.0;
		colorChat(0, CT, "%s!t%s!y está mostrando que ganó el logro !g%s!y el !g%s!y", ZP_PREFIX, g_playername[id], LOGROS[g_logros_int[id][g_page[id][MENU_LOGRO]]][logroName], g_logros_unlocked[id][g_logros_int[id][g_page[id][MENU_LOGRO]]]);
	}
	
	showMenuAchievementDesc(id, g_logros_int[id][g_page[id][MENU_LOGRO]]);
	return PLUGIN_HANDLED;
}

public menuMetaAchievements(const id, const menuid, const item) // (showMenuMetaAchievements)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	static iMenuDummy;
	player_menu_info(id, iMenuDummy, iMenuDummy, g_page[id][MENU_META_LOGROS]);
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuAchievementsChallenge(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	g_page[id][MENU_META_LOGRO] = str_to_num(sBuffer) - 1;
	
	showMenuMetaAchievementDesc(id, g_page[id][MENU_META_LOGRO]);
	return PLUGIN_HANDLED;
}

public menuMetaAchievementDesc(const id, const menuid, const item) // (showMenuMetaAchievementDesc)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuMetaAchievements(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer);
	
	if(iItemId == 1 && g_metalogros[id][g_page[id][MENU_META_LOGRO]])
	{
		if(g_systime_link[id] > get_gametime() && !g_kiske[id])
		{
			showMenuMetaAchievementDesc(id, g_page[id][MENU_META_LOGRO]);
			return PLUGIN_HANDLED;
		}
		
		g_systime_link[id] = get_gametime() + 30.0;
		colorChat(0, CT, "%s!t%s!y está mostrando que ganó el meta-logro !g%s!y el !g%s!y", ZP_PREFIX, g_playername[id], META_LOGROS[g_page[id][MENU_META_LOGRO]][logroName], g_metalogros_unlocked[id][g_page[id][MENU_META_LOGRO]]);
	}
	
	showMenuMetaAchievementDesc(id, g_page[id][MENU_META_LOGRO]);
	return PLUGIN_HANDLED;
}

public menuChallenges(const id, const menuid, const item) // (showMenuChallenges)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	static iMenuDummy;
	player_menu_info(id, iMenuDummy, iMenuDummy, g_page[id][MENU_DESAFIOS]);
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuAchievementsChallenge(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	g_page[id][MENU_DESAFIO] = str_to_num(sBuffer) - 1;
	
	showMenuChallengesDesc(id, g_page[id][MENU_DESAFIO]);
	return PLUGIN_HANDLED;
}

public menuChallengesDesc(const id, const menuid, const item) // (showMenuChallengesDesc)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuChallenges(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer);
	
	if(iItemId == 1 && g_desafios[id][g_page[id][MENU_DESAFIO]])
	{
		if(g_systime_link[id] > get_gametime() && !g_kiske[id])
		{
			showMenuChallengesDesc(id, g_page[id][MENU_DESAFIO]);
			return PLUGIN_HANDLED;
		}
		
		g_systime_link[id] = get_gametime() + 30.0;
		colorChat(0, CT, "%s!t%s!y está mostrando que ganó el desafío !g%s!y!t [NIV. !g%d!t]!y", ZP_PREFIX, g_playername[id], DESAFIOS[g_page[id][MENU_DESAFIO]][desafioName], (g_desafios[id][g_page[id][MENU_DESAFIO]] - 1));
	}
	
	showMenuChallengesDesc(id, g_page[id][MENU_DESAFIO]);
	return PLUGIN_HANDLED;
}

public menuStats(const id, const key) // (showMenuStats)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(key == 9)
	{
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	switch(key)
	{
		case 0:
		{
			showMenuWeaponStats(id, 0);
			return PLUGIN_HANDLED;
		}
		case 8: ++g_page[id][MENU_STATS];
	}
	
	showMenuStats(id);
	return PLUGIN_HANDLED;
}

public menuWeaponStats(const id, const menuid, const item) // (showMenuWeaponStats)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	static iMenuDummy;
	player_menu_info(id, iMenuDummy, iMenuDummy, g_page[id][MENU_WEAPON_STATS]);
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuStats(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	DestroyLocalMenu(id, menuid);
	
	iItemId = str_to_num(sBuffer);
	
	showMenuWeaponStats(id, iItemId);
	return PLUGIN_HANDLED;
}

public menuWeaponStats__Sub(const id, const key) // (showMenuWeaponStats)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(key == 9)
	{
		showMenuWeaponStats(id, 0);
		return PLUGIN_HANDLED;
	}
	
	static iWeapon;
	static i;
	
	iWeapon = g_page[id][MENU_WEAPON_STATS_SUB];
	
	if(iWeapon == CSW_AWP || iWeapon == CSW_SCOUT || iWeapon == CSW_G3SG1 || iWeapon == CSW_SG550)
	{
		showMenuWeaponStats(id, iWeapon);
		return PLUGIN_HANDLED;
	}
	
	if(key >= 0 && key < 4)
	{
		if(!g_skill_weapons[id][iWeapon][4])
		{
			showMenuWeaponStats(id, iWeapon);
			return PLUGIN_HANDLED;
		}
		
		if(key == 1 && g_skill_weapons[id][iWeapon][1] == 5)
		{
			showMenuWeaponStats(id, iWeapon);
			return PLUGIN_HANDLED;
		}
		
		for(i = 0; i < 4; ++i)
		{
			if(key == i && g_skill_weapons[id][iWeapon][i] == 10)
			{
				showMenuWeaponStats(id, iWeapon);
				return PLUGIN_HANDLED;
			}
		}
		
		--g_skill_weapons[id][iWeapon][4];
		++g_skill_weapons[id][iWeapon][key];
		
		new Handle:sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE weapon_stats SET level='%d', kills='%d', points='%d', damage='%d', speed='%d', recoil='%d', bullets='%d' WHERE zp_id='%d' AND weapon='%d';", g_level_weapons[id][iWeapon], g_kills_weapons[id][iWeapon],
		g_skill_weapons[id][iWeapon][4], g_skill_weapons[id][iWeapon][0], g_skill_weapons[id][iWeapon][1], g_skill_weapons[id][iWeapon][2], g_skill_weapons[id][iWeapon][3], g_user_id[id], iWeapon);
		
		if(!SQL_Execute(sqlQuery))
			executeQuery(id, sqlQuery, 10);
		else
			SQL_FreeHandle(sqlQuery);
		
		g_save_weapons[id][iWeapon] = 0;
		
		if(g_skill_weapons[id][iWeapon][key] == 10)
		{
			switch(key)
			{
				case 0: setAchievement(id, DISPARO_DANINO);
				case 2: setAchievement(id, DISPARO_PRECISO);
				case 3: setAchievement(id, DISPARO_INFINITO);
			}
		}
		else if(g_skill_weapons[id][iWeapon][1] == 5)
			setAchievement(id, DISPARO_VELOZ);
		
		new iTotalWeapons = 0;
		new iWeaps1 = 0;
		new iWeaps7 = 0;
		new iWeaps10 = 0;
		new iWeaps15 = 0;
		new iWeaps20 = 0;
		
		for(i = 1; i < sizeof(WEAPON_NAMES); ++i)
		{
			if(!WEAPON_NAMES[i][0])
				continue;
				
			if(i == CSW_AWP || i == CSW_SCOUT || i == CSW_G3SG1 || i == CSW_SG550)
				continue;
			
			++iTotalWeapons;
			
			if(g_level_weapons[id][i] >= 1)
			{
				++iWeaps1;
				if(g_level_weapons[id][i] >= 7)
				{
					++iWeaps7;
					if(g_level_weapons[id][i] >= 10)
					{
						++iWeaps10;
						if(g_level_weapons[id][i] >= 15)
						{
							++iWeaps15;
							if(g_level_weapons[id][i] >= 20)
								++iWeaps20;
						}
					}
				}
			}
		}
		
		switch(g_level_weapons[id][iWeapon])
		{
			case 1:
			{
				if(iTotalWeapons == iWeaps1)
					setAchievement(id, ARMERO_NOOB);
			}
			case 7:
			{
				if(iTotalWeapons == iWeaps7)
					setAchievement(id, ARMERO_AVANZADO);
			}
			case 10:
			{
				if(iTotalWeapons == iWeaps10)
					setAchievement(id, ARMERO_EXPERTO);
			}
			case 15:
			{
				if(iTotalWeapons == iWeaps15)
					setAchievement(id, ARMERO_PRO);
			}
			case 20: {
				if(iTotalWeapons == iWeaps20)
					setAchievement(id, ARMANDO_PIZZERO);
			}
		}
	}
	else if(key == 4)
	{
		if(g_diamonds[id] < NEED_DIAMONDS_WEAPONS[iWeapon][g_level_weapons[id][iWeapon]])
		{
			showMenuWeaponStats(id, iWeapon);
			return PLUGIN_HANDLED;
		}
		
		if(g_kills_weapons[id][iWeapon] < 1)
		{
			colorChat(id, _, "%sNecesitás matar al menos a un zombie para poder subir de nivel el arma!", ZP_PREFIX);
			
			showMenuWeaponStats(id, iWeapon);
			return PLUGIN_HANDLED;
		}
		
		g_diamonds[id] -= NEED_DIAMONDS_WEAPONS[iWeapon][g_level_weapons[id][iWeapon]];
		
		g_kills_weapons[id][iWeapon] = NEED_KILLS_WEAPONS[iWeapon][g_level_weapons[id][iWeapon]];
		
		++g_level_weapons[id][iWeapon];
		++g_skill_weapons[id][iWeapon][4];
		
		g_save_weapons[id][iWeapon] = 1;
		
		colorChat(id, _, "%sTu !g%s!y ha subido al !gnivel %d!y", ZP_PREFIX, WEAPON_NAMES[iWeapon], g_level_weapons[id][iWeapon]);
		
		if(!(g_level_weapons[id][iWeapon] % 5))
		{
			switch(g_level_weapons[id][iWeapon])
			{
				case 5: setAchievement(id, LA_MEJOR_OPCION);
				case 10: setAchievement(id, UNA_DE_LAS_MEJORES);
				case 15: setAchievement(id, MI_PREFERIDA);
			}
		}
		
		saveInfo(id);
		
		new iTotalWeapons = 0;
		new iWeaps1 = 0;
		new iWeaps7 = 0;
		new iWeaps10 = 0;
		new iWeaps15 = 0;
		new iWeaps20 = 0;
		
		for(i = 1; i < sizeof(WEAPON_NAMES); ++i)
		{
			if(!WEAPON_NAMES[i][0])
				continue;
				
			if(i == CSW_AWP || i == CSW_SCOUT || i == CSW_G3SG1 || i == CSW_SG550)
				continue;
			
			++iTotalWeapons;
			
			if(g_level_weapons[id][i] >= 1)
			{
				++iWeaps1;
				if(g_level_weapons[id][i] >= 7)
				{
					++iWeaps7;
					if(g_level_weapons[id][i] >= 10)
					{
						++iWeaps10;
						if(g_level_weapons[id][i] >= 15)
						{
							++iWeaps15;
							if(g_level_weapons[id][i] >= 20)
								++iWeaps20;
						}
					}
				}
			}
		}
		
		switch(g_level_weapons[id][iWeapon])
		{
			case 1:
			{
				if(iTotalWeapons == iWeaps1)
					setAchievement(id, ARMERO_NOOB);
			}
			case 7:
			{
				if(iTotalWeapons == iWeaps7)
					setAchievement(id, ARMERO_AVANZADO);
			}
			case 10:
			{
				if(iTotalWeapons == iWeaps10)
					setAchievement(id, ARMERO_EXPERTO);
			}
			case 15:
			{
				if(iTotalWeapons == iWeaps15)
					setAchievement(id, ARMERO_PRO);
			}
			case 20: {
				if(iTotalWeapons == iWeaps20)
					setAchievement(id, ARMANDO_PIZZERO);
			}
		}
	} else if(key == 5) {
		new iReturn;
		iReturn = g_skill_weapons[id][iWeapon][0] + g_skill_weapons[id][iWeapon][1] + g_skill_weapons[id][iWeapon][2] + g_skill_weapons[id][iWeapon][3];
		
		if(iReturn) {
			g_skill_weapons[id][iWeapon][0] = 0;
			g_skill_weapons[id][iWeapon][1] = 0;
			g_skill_weapons[id][iWeapon][2] = 0;
			g_skill_weapons[id][iWeapon][3] = 0;
			
			g_skill_weapons[id][iWeapon][4] += iReturn;
		}
	}
	
	showMenuWeaponStats(id, iWeapon);
	return PLUGIN_HANDLED;
}

public menuRegisterLogin(const id, const key)
{
	if(!is_user_connected(id) || g_user_logged[id])
		return PLUGIN_HANDLED;
		
	switch(key)
	{
		case 0:
		{
			if(g_user_register[id])
			{
				client_print(id, print_center, "Este nombre de usuario ya está registrado");
				
				showMenuRegisterLogin(id);
				return PLUGIN_HANDLED;
			}
			
			client_cmd(id, "messagemode CREAR_CONTRASENIA");
			
			clearDHUDs(id);
			
			set_dhudmessage(0, 100, 200, -1.0, 0.2, 0, 0.0, 500.0, 1.0, 1.0);
			show_dhudmessage(id, "ESCRIBE LA CONTRASEÑA^nQUE PROTEGERÁ TU CUENTA");
			
			return PLUGIN_HANDLED;
		}
		case 1:
		{
			if(!g_user_register[id])
			{
				client_print(id, print_center, "Este nombre de usuario no está registrado");
				
				showMenuRegisterLogin(id);
				return PLUGIN_HANDLED;
			}
			
			client_cmd(id, "messagemode INGRESAR_CONTRASENIA");
			
			clearDHUDs(id);
			
			set_dhudmessage(0, 100, 200, -1.0, 0.2, 0, 0.0, 255.0, 1.0, 1.0);
			show_dhudmessage(id, "INGRESA LA CONTRASEÑA^nQUE PROTEGE A ESTA CUENTA");
			
			return PLUGIN_HANDLED;
		}
	}
	
	showMenuRegisterLogin(id);
	return PLUGIN_HANDLED;
}

public menuHeadZombie(const id, const key) // (showMenuHeadZombie)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	switch(key)
	{
		case HEAD_RED:
		{
			if(!g_head_zombie[id][HEAD_RED])
			{
				colorChat(id, _, "%sNo tenés cabezas zombie rojas para romper", ZP_PREFIX);
				
				showMenuHeadZombie(id);
				return PLUGIN_HANDLED;
			}
			
			--g_head_zombie[id][HEAD_RED];
			
			new iRand;
			iRand = random_num(1, 15) * g_level_total[id];
			
			g_ammopacks[id] += iRand;
			colorChat(id, _, "%sLa cabeza tenía !g%d APs!y", ZP_PREFIX, iRand);
			
			g_logros_stats[id][OPEN_HEADS] = 0;
		}
		case HEAD_GREEN:
		{
			if(!g_head_zombie[id][HEAD_GREEN])
			{
				colorChat(id, _, "%sNo tenés cabezas zombie verdes para romper", ZP_PREFIX);
				
				showMenuHeadZombie(id);
				return PLUGIN_HANDLED;
			}
			
			--g_head_zombie[id][HEAD_GREEN];
			
			new iRand;
			iRand = random_num(1, 100);
			
			if(iRand <= 75)
			{
				iRand = random_num(1, 150) * g_level[id];
				
				addXp(id, iRand, 0);
				colorChat(id, _, "%sLa cabeza tenía !g%d EXP!y", ZP_PREFIX, iRand);
				
				g_logros_stats[id][OPEN_HEADS] = 0;
			}
			else
			{
				colorChat(id, _, "%s%s", ZP_PREFIX, HEAD_ZOMBIES_MESSAGES[random_num(0, charsmax(HEAD_ZOMBIES_MESSAGES))]);
				++g_logros_stats[id][OPEN_HEADS];
			}
		}
		case HEAD_BLUE:
		{
			if(!g_head_zombie[id][HEAD_BLUE])
			{
				colorChat(id, _, "%sNo tenés cabezas zombie azules para romper", ZP_PREFIX);
				
				showMenuHeadZombie(id);
				return PLUGIN_HANDLED;
			}
			
			if(g_only_modes > 1) {
				colorChat(id, _, "%sNo podes abrir cabezas azules mientras está el mini evento de modos especiales!", ZP_PREFIX);
				return PLUGIN_HANDLED;
			}
			
			if(!g_newround || g_endround)
			{
				colorChat(id, _, "%sLas cabezas zombie azules solo se pueden romper antes de que comience un modo", ZP_PREFIX);
				
				showMenuHeadZombie(id);
				return PLUGIN_HANDLED;
			}
			
			--g_head_zombie[id][HEAD_BLUE];
			
			new iRand;
			iRand = random_num(1, 100);
			
			if(iRand <= 50)
			{
				iRand = random_num(0, charsmax(ITEMS_EXTRAS_HUMANS));
				
				if(iRand == EXTRA_BOMBKILL || iRand == EXTRA_ANTIDOTE_BOMB)
					++iRand;
				
				// if(iRand == EXTRA_ANTIDOTE_BOMB)
					// iRand = EXTRA_NVISION;
				
				switch(iRand)
				{
					case EXTRA_NVISION:
					{
						g_nvision[id] = 1;
						
						remove_task(id + TASK_NVISION);
						
						if(!g_mode[MODE_NEMESIS]) set_task(0.3, "setUserNightvision", id + TASK_NVISION, _, _, "b");
						else set_task(0.1, "setUserNightvision__Nemesis", id + TASK_NVISION, _, _, "b");
					}
					case EXTRA_LONGJUMP_H:
					{
						g_longjump[id] = 1;
						give_item(id, "item_longjump");
					}
					case EXTRA_GRAVITY: set_user_gravity(id, 0.3);
					case EXTRA_TRANSP:
					{
						entity_set_int(id, EV_INT_rendermode, kRenderTransAlpha);
						entity_set_float(id, EV_FL_renderamt, 30.0);
					}
					case EXTRA_UNLIMITED_CLIP: g_unlimited_clip[id] = 1;
					case EXTRA_PRECISION_SEMIPERFECTA: g_Precission_SemiPerfecta[id] = 1;
				}
				
				colorChat(id, _, "%sLa cabeza zombie tenía el item extra !g%s!y", ZP_PREFIX, ITEMS_EXTRAS_HUMANS[iRand]);
				
				g_logros_stats[id][OPEN_HEADS] = 0;
			}
			else
			{
				colorChat(id, _, "%s%s", ZP_PREFIX, HEAD_ZOMBIES_MESSAGES[random_num(0, charsmax(HEAD_ZOMBIES_MESSAGES))]);
				++g_logros_stats[id][OPEN_HEADS];
			}
		}
		case HEAD_YELLOW:
		{
			if(!g_head_zombie[id][HEAD_YELLOW])
			{
				colorChat(id, _, "%sNo tenés cabezas zombie amarillas para romper", ZP_PREFIX);
				
				showMenuHeadZombie(id);
				return PLUGIN_HANDLED;
			}
			
			--g_head_zombie[id][HEAD_YELLOW];
			
			new iRand;
			iRand = random_num(1, 100);
			
			if(iRand <= 20)
			{
				iRand = random_num(1, 5);
				
				switch(iRand)
				{
					case 1:
					{
						iRand = random_num(1, 3);
						
						g_points[id][CLASS_HUMAN] += iRand;
						colorChat(id, _, "%sLa cabeza tenía !g%d pH!y", ZP_PREFIX, iRand);
					}
					case 2:
					{
						iRand = random_num(1, 2);
						
						g_points[id][CLASS_FRAGMENTOS] += iRand;
						colorChat(id, _, "%sLa cabeza tenía !g%d pF!y", ZP_PREFIX, iRand);
					}
					case 3:
					{
						if(g_level_total[id] < 1 || g_exp[id] == MAX_EXP)
						{
							colorChat(id, _, "%sLa cabeza tenía !gEXP!y pero no la pudiste obtener", ZP_PREFIX);
							
							showMenuHeadZombie(id);
							return PLUGIN_HANDLED;
						}
						
						if(NEED_EXP_TOTAL[g_level_total[id] - 1] == MAX_EXP || g_exp[id] >= 1900000000) {
							iRand = random_num(2, 4);
							
							g_points[id][CLASS_FRAGMENTOS] += iRand;
							colorChat(id, _, "%sLa cabeza tenía !g%d pF!y", ZP_PREFIX, iRand);
							
							showMenuHeadZombie(id);
							return PLUGIN_HANDLED;
						}
						
						iRand = NEED_EXP_TOTAL[g_level_total[id]] - NEED_EXP_TOTAL[g_level_total[id] - 1];
						
						addXp(id, iRand, 0);
						
						colorChat(id, _, "%sLa cabeza tenía !g%d EXP!y", ZP_PREFIX, iRand);
					}
					case 4:
					{
						iRand = random_num(2, 4);
						
						g_points[id][CLASS_FRAGMENTOS] += iRand;
						colorChat(id, _, "%sLa cabeza tenía !g%d pF!y", ZP_PREFIX, iRand);
					}
					case 5:
					{
						iRand = random_num(1, 3);
						
						g_points[id][CLASS_ZOMBIE] += iRand;
						colorChat(id, _, "%sLa cabeza tenía !g%d pZ!y", ZP_PREFIX, iRand);
					}
				}
				
				g_logros_stats[id][OPEN_HEADS] = 0;
			}
			else
			{
				colorChat(id, _, "%s%s", ZP_PREFIX, HEAD_ZOMBIES_MESSAGES[random_num(0, charsmax(HEAD_ZOMBIES_MESSAGES))]);
				++g_logros_stats[id][OPEN_HEADS];
			}
		}
		case HEAD_WHITE:
		{
			if(!g_head_zombie[id][HEAD_WHITE])
			{
				colorChat(id, _, "%sNo tenés cabezas zombie blancas para romper", ZP_PREFIX);
				
				showMenuHeadZombie(id);
				return PLUGIN_HANDLED;
			}
			
			--g_head_zombie[id][HEAD_WHITE];
			
			new iRand;
			iRand = random_num(1, 100);
			
			if(iRand <= 10)
			{
				// -- ROJA
				iRand = random_num(1, 15) * g_level[id];
			
				g_ammopacks[id] += iRand;
				colorChat(id, _, "%sLa cabeza tenía !g%d APs!y", ZP_PREFIX, iRand);
				
				// -- VERDE
				iRand = random_num(1, 150) * g_level[id];
				
				addXp(id, iRand, 0);
				colorChat(id, _, "%sLa cabeza tenía !g%d EXP!y", ZP_PREFIX, iRand);
				
				// -- AMARILLA
				iRand = random_num(1, 5);
				
				switch(iRand)
				{
					case 1:
					{
						if(g_level_total[id] < 1 || g_exp[id] == MAX_EXP)
						{
							colorChat(id, _, "%sLa cabeza tenía !gEXP!y pero no la pudiste obtener", ZP_PREFIX);
							
							showMenuHeadZombie(id);
							return PLUGIN_HANDLED;
						}
						
						if(NEED_EXP_TOTAL[g_level_total[id] - 1] == MAX_EXP || g_exp[id] >= 1900000000) {
							iRand = random_num(2, 4);
							
							g_points[id][CLASS_FRAGMENTOS] += iRand;
							colorChat(id, _, "%sLa cabeza tenía !g%d pF!y", ZP_PREFIX, iRand);
							
							showMenuHeadZombie(id);
							return PLUGIN_HANDLED;
						}
						
						iRand = NEED_EXP_TOTAL[g_level_total[id]] - NEED_EXP_TOTAL[g_level_total[id] - 1];
						
						addXp(id, iRand, 0);
						
						colorChat(id, _, "%sLa cabeza tenía !g%d EXP!y", ZP_PREFIX, iRand);
					}
					case 2:
					{
						iRand = random_num(1, 2);
						
						g_points[id][CLASS_FRAGMENTOS] += iRand;
						colorChat(id, _, "%sLa cabeza tenía !g%d pF!y", ZP_PREFIX, iRand);
					}
					case 3:
					{
						iRand = random_num(1, 3);
						
						g_points[id][CLASS_HUMAN] += iRand;
						colorChat(id, _, "%sLa cabeza tenía !g%d pH!y", ZP_PREFIX, iRand);
					}
					case 4:
					{
						iRand = random_num(2, 4);
						
						g_points[id][CLASS_FRAGMENTOS] += iRand;
						colorChat(id, _, "%sLa cabeza tenía !g%d pF!y", ZP_PREFIX, iRand);
					}
					case 5:
					{
						iRand = random_num(1, 3);
						
						g_points[id][CLASS_ZOMBIE] += iRand;
						colorChat(id, _, "%sLa cabeza tenía !g%d pZ!y", ZP_PREFIX, iRand);
					}
				}
				
				g_logros_stats[id][OPEN_HEADS] = 0;
			}
			else
			{
				colorChat(id, _, "%s%s", ZP_PREFIX, HEAD_ZOMBIES_MESSAGES[random_num(0, charsmax(HEAD_ZOMBIES_MESSAGES))]);
				++g_logros_stats[id][OPEN_HEADS];
			}
		}
		case HEAD_VIOLET_SMALL:
		{
			if(g_head_zombie[id][HEAD_VIOLET_SMALL] < 10)
			{
				colorChat(id, _, "%sNecesitás diez cabezas zombie chicas violetas para crear una grande", ZP_PREFIX);
				
				showMenuHeadZombie(id);
				return PLUGIN_HANDLED;
			}
			
			g_head_zombie[id][HEAD_VIOLET_SMALL] -= 10;
			++g_head_zombie[id][HEAD_VIOLET_BIG];
			
			if(g_head_zombie[id][HEAD_VIOLET_BIG] >= 5)
				setAchievement(id, CINCO_DE_LAS_GRANDES);
			
			colorChat(id, _, "%sHas creado una cabeza zombie grande violeta!", ZP_PREFIX);
		}
		case HEAD_VIOLET_BIG:
		{
			if(!g_head_zombie[id][HEAD_VIOLET_BIG])
			{
				colorChat(id, _, "%sNo tenés cabezas zombie grandes violetas para romper", ZP_PREFIX);
				
				showMenuHeadZombie(id);
				return PLUGIN_HANDLED;
			}
			
			if(g_only_modes > 1) {
				colorChat(id, _, "%sNo podes abrir cabezas violetas mientras está el mini evento de modos especiales!", ZP_PREFIX);
				return PLUGIN_HANDLED;
			}
			
			if(g_newround)
			{
				new Float:iGameTime = get_gametime();
				
				if(g_systime_head > iGameTime)
				{
					colorChat(id, _, "%sTenés que esperar !g%d:%02d!y para volver a abrir una cabeza zombie grande violeta", ZP_PREFIX, floatround(iGameTime - g_systime_head) / 60, floatround(iGameTime - g_systime_head) % 60);
					
					showMenuHeadZombie(id);
					return PLUGIN_HANDLED;
				}
				
				if(getAlive() < 15)
				{
					colorChat(id, _, "%sTiene que haber !g15+!y usuarios para romper estas cabezas!", ZP_PREFIX);
					
					showMenuHeadZombie(id);
					return PLUGIN_HANDLED;
				}
				
				--g_head_zombie[id][HEAD_VIOLET_BIG];
				
				new iRand;
				iRand = random_num(1, 100);
				
				if(iRand < 80)
				{
					remove_task(TASK_MAKEZOMBIE);
					g_newround = 0;
					
					iRand = random_num(1, 6);
					switch(iRand)
					{
						case 1: {
							setMode(MODE_CABEZON, id);
							colorChat(0, CT, "%s!t%s!y abrió una cabeza grande violeta y ganó un !gCABEZÓN!y.", ZP_PREFIX, g_playername[id]);
						}
						case 2: {
							setMode(MODE_SURVIVOR, id);
							colorChat(0, CT, "%s!t%s!y abrió una cabeza grande violeta y ganó un !gSURVIVOR!y.", ZP_PREFIX, g_playername[id]);
						}
						case 3: {
							setMode(MODE_NEMESIS, id);
							colorChat(0, CT, "%s!t%s!y abrió una cabeza grande violeta y ganó un !gNEMESIS!y.", ZP_PREFIX, g_playername[id]);
						}
						case 4: {
							setMode(MODE_ANNIHILATOR, id);
							colorChat(0, CT, "%s!t%s!y abrió una cabeza grande violeta y ganó un !gANIQUILADOR!y.", ZP_PREFIX, g_playername[id]);
						}
						case 5: {
							setMode(MODE_JASON, id);
							colorChat(0, CT, "%s!t%s!y abrió una cabeza grande violeta y ganó un !gJASON!y.", ZP_PREFIX, g_playername[id]);
						}
						case 6: {
							setMode(MODE_WESKER, id);
							colorChat(0, CT, "%s!t%s!y abrió una cabeza grande violeta y ganó un !gWESKER!y.", ZP_PREFIX, g_playername[id]);
						}
					}
					
					g_systime_head = get_gametime() + 600.0;
				} else {
					colorChat(id, _, "%s%s", ZP_PREFIX, HEAD_ZOMBIES_MESSAGES[random_num(0, charsmax(HEAD_ZOMBIES_MESSAGES))]);
					++g_logros_stats[id][OPEN_HEADS];
				}
			}
			else
			{
				colorChat(id, _, "%sSolo podés abrir cabeza grande violeta antes de que un modo comience!", ZP_PREFIX);
				
				showMenuHeadZombie(id);
				return PLUGIN_HANDLED;
			}
		}
		case HEAD_DARK_BLUE:
		{
			if(!g_head_zombie[id][HEAD_DARK_BLUE])
			{
				colorChat(id, _, "%sNo tenés cabezas zombie celestes para romper", ZP_PREFIX);
				
				showMenuHeadZombie(id);
				return PLUGIN_HANDLED;
			}
			
			if(g_head_zombie[id][HEAD_DARK_BLUE] >= 5)
			{
				g_head_zombie[id][HEAD_DARK_BLUE] -= 5;
				
				switch(random_num(1, 3))
				{
					case 1:
					{
						g_points[id][CLASS_HUMAN] += 3;
						colorChat(id, _, "%sLa cabeza tenía !g3 pH!y", ZP_PREFIX);
					}
					case 2:
					{
						g_points[id][CLASS_ZOMBIE] += 3;
						colorChat(id, _, "%sLa cabeza tenía !g3 pZ!y", ZP_PREFIX);
					}
					case 3:
					{
						g_points[id][CLASS_HUMAN] += 3;
						g_points[id][CLASS_ZOMBIE] += 3;
						colorChat(id, _, "%sLa cabeza tenía !g3 pHZ!y", ZP_PREFIX);
					}
				}
			}
			else
			{
				colorChat(id, _, "%sSolo podés romper cabezas zombie celestes de a cinco", ZP_PREFIX);
				
				showMenuHeadZombie(id);
				return PLUGIN_HANDLED;
			}
		}
		case 9:
		{
			showMenuGame(id);
			return PLUGIN_HANDLED;
		}
	}
	
	if(g_logros_stats[id][OPEN_HEADS] == 10)
		setAchievement(id, BAD_LUCKY_BRIAN);
	
	showMenuHeadZombie(id);
	return PLUGIN_HANDLED;
}

public menuAmuletos(const id, const menuid, const item) // (showMenuAmuletos)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	static sNameAmuleto[64];
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), sNameAmuleto, charsmax(sNameAmuleto), iDummy);
	
	iItemId = str_to_num(sBuffer);
	
	DestroyLocalMenu(id, menuid);
	
	switch(iItemId)
	{
		case 1:
		{
			if(g_points[id][CLASS_FRAGMENTOS] < 10)
			{
				showMenuAmuletos(id);
				return PLUGIN_HANDLED;
			}
			
			new iSlot;
			iSlot = getSlotAmuleto(id);
			
			if(iSlot == -1)
			{
				colorChat(id, _, "%sNo podés tener más de !g5 amuletos al mismo tiempo!y", ZP_PREFIX);
				
				showMenuAmuletos(id);
				return PLUGIN_HANDLED;
			}
			
			g_points[id][CLASS_FRAGMENTOS] -= 10;
			
			new iRand;
			new i;
			new j;
			new k;
			
			for(i = 0; i < 10; ++i)
			{
				k = 0;
				
				iRand = random_num(0, charsmax(AMULETOS_NAME_LIST));
				formatex(g_amuleto_name[id][iSlot], 63, AMULETOS_NAME_LIST[iRand]);
				
				for(j = 0; j < 5; ++j)
				{
					if(j == iSlot)
						continue;
					
					if(equal(g_amuleto_name[id][j], g_amuleto_name[id][iSlot]))
					{			
						++k;
						break;
					}
				}
				
				if(!k)
					break;
			}
			
			new Float:fRand;
			for(i = 0; i < 4; ++i)
			{
				iRand = random_num(-2, 2);
				g_amuleto_stat1[id][iSlot][i] = iRand;
			}
			
			fRand = random_float(-1.00, 1.00);
			g_amuleto_stat2[id][iSlot][0] = fRand;
			
			fRand = random_float(-1.00, 1.00);
			g_amuleto_stat2[id][iSlot][1] = fRand;
			
			g_amuleto_stat3[id][iSlot][0] = 0;
			g_amuleto_stat3[id][iSlot][1] = 0;
			g_amuleto_stat3[id][iSlot][2] = 0;
			g_amuleto_stat3[id][iSlot][3] = 0;
			
			new Handle:sqlQuery;
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO amuletos (`zp_id`, `amuleto_id`, `amuleto_name`, `am_health`, `am_speed`, `am_grav`, `am_damage`, `am_mult_exp`, `am_mult_aps`) VALUES ('%d', '%d', ^"%s^", '%d', '%d', '%d', '%d', '%f', '%f');",
			g_user_id[id], iSlot, g_amuleto_name[id][iSlot], g_amuleto_stat1[id][iSlot][0], g_amuleto_stat1[id][iSlot][1], g_amuleto_stat1[id][iSlot][2], g_amuleto_stat1[id][iSlot][3], g_amuleto_stat2[id][iSlot][0], g_amuleto_stat2[id][iSlot][1]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 20);
			else
				SQL_FreeHandle(sqlQuery);
			
			++g_stats[id][AMULETOS_CREATE];
			
			colorChat(id, _, "%sHas creado el amuleto !g%s!y", ZP_PREFIX, g_amuleto_name[id][iSlot]);
			
			if(g_stats[id][AMULETOS_CREATE] == 3)
				setAchievement(id, LOS_PRIMEROS_3);
			else if(g_stats[id][AMULETOS_CREATE] == 10)
				setAchievement(id, EN_BUSCA_DEL_MEJOR);
			else if(g_stats[id][AMULETOS_CREATE] == 20)
				setAchievement(id, EL_SENIOR_DE_LOS_AMULETOS);
			
			if(g_amuleto_stat1[id][iSlot][0] > 0 && g_amuleto_stat1[id][iSlot][1] > 0 && g_amuleto_stat1[id][iSlot][2] > 0 && g_amuleto_stat1[id][iSlot][3] > 0 && g_amuleto_stat2[id][iSlot][0] > 0.0 && g_amuleto_stat2[id][iSlot][1] > 0.0)
				setAchievement(id, EQUIPANDOME);
			
			showMenuAmuletos(id);
		}
		case 2:
		{
			if(g_points[id][CLASS_FRAGMENTOS] < 15)
			{
				showMenuAmuletos(id);
				return PLUGIN_HANDLED;
			}
			
			new iSlot;
			iSlot = getSlotAmuleto(id);
			
			if(iSlot == -1)
			{
				colorChat(id, _, "%sNo podés tener más de !g5 amuletos al mismo tiempo!y", ZP_PREFIX);
				
				showMenuAmuletos(id);
				return PLUGIN_HANDLED;
			}
			
			g_points[id][CLASS_FRAGMENTOS] -= 15;
			
			new iRand;
			new i;
			new j;
			new k;
			
			for(i = 0; i < 10; ++i)
			{
				k = 0;
				
				iRand = random_num(0, charsmax(AMULETOS_NAME_LIST));
				formatex(g_amuleto_name[id][iSlot], 63, "%s [PRO]", AMULETOS_NAME_LIST[iRand]);
				
				for(j = 0; j < 5; ++j)
				{
					if(j == iSlot)
						continue;
					
					if(equal(g_amuleto_name[id][j], g_amuleto_name[id][iSlot]))
					{			
						++k;
						break;
					}
				}
				
				if(!k)
					break;
			}
			
			new Float:fRand;
			for(i = 0; i < 4; ++i)
			{
				iRand = random_num(-3, 3);
				g_amuleto_stat1[id][iSlot][i] = iRand;
			}
			
			fRand = random_float(-1.00, 1.00);
			g_amuleto_stat2[id][iSlot][0] = fRand;
			
			fRand = random_float(-1.00, 1.00);
			g_amuleto_stat2[id][iSlot][1] = fRand;
			
			iRand = random_num(-15, 15);
			g_amuleto_stat3[id][iSlot][0] = iRand;
			
			iRand = random_num(0, 20);
			g_amuleto_stat3[id][iSlot][1] = iRand;
			
			iRand = random_num(0, 1);
			g_amuleto_stat3[id][iSlot][2] = iRand;
			
			iRand = random_num(0, 6);
			g_amuleto_stat3[id][iSlot][3] = iRand;
			
			new Handle:sqlQuery;
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO amuletos (`zp_id`, `amuleto_id`, `amuleto_name`, `am_health`, `am_speed`, `am_grav`, `am_damage`, `am_mult_exp`, `am_mult_aps`, `am_modo`, `am_items`, `am_modo_dr`, `am_luz`) \
			VALUES ('%d', '%d', ^"%s^", '%d', '%d', '%d', '%d', '%f', '%f', '%d', '%d', '%d', '%d');", g_user_id[id], iSlot, g_amuleto_name[id][iSlot], g_amuleto_stat1[id][iSlot][0], g_amuleto_stat1[id][iSlot][1], g_amuleto_stat1[id][iSlot][2], g_amuleto_stat1[id][iSlot][3],
			g_amuleto_stat2[id][iSlot][0], g_amuleto_stat2[id][iSlot][1], g_amuleto_stat3[id][iSlot][0], g_amuleto_stat3[id][iSlot][1], g_amuleto_stat3[id][iSlot][2], g_amuleto_stat3[id][iSlot][3]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 90);
			else
				SQL_FreeHandle(sqlQuery);
			
			++g_stats[id][AMULETOS_CREATE];
			
			colorChat(id, _, "%sHas creado el amuleto !g%s!y", ZP_PREFIX, g_amuleto_name[id][iSlot]);
			
			if(g_stats[id][AMULETOS_CREATE] == 3)
				setAchievement(id, LOS_PRIMEROS_3);
			else if(g_stats[id][AMULETOS_CREATE] == 10)
				setAchievement(id, EN_BUSCA_DEL_MEJOR);
			else if(g_stats[id][AMULETOS_CREATE] == 20)
				setAchievement(id, EL_SENIOR_DE_LOS_AMULETOS);
			
			if(g_amuleto_stat1[id][iSlot][0] > 0 && g_amuleto_stat1[id][iSlot][1] > 0 && g_amuleto_stat1[id][iSlot][2] > 0 && g_amuleto_stat1[id][iSlot][3] > 0 && g_amuleto_stat2[id][iSlot][0] > 0.0 && g_amuleto_stat2[id][iSlot][1] > 0.0)
				setAchievement(id, EQUIPANDOME);
			
			showMenuAmuletos(id);
		}
		case 3:
		{
			if(g_points[id][CLASS_FRAGMENTOS] < 30)
			{
				showMenuAmuletos(id);
				return PLUGIN_HANDLED;
			}
			
			new iSlot;
			iSlot = getSlotAmuleto(id);
			
			if(iSlot == -1)
			{
				colorChat(id, _, "%sNo podés tener más de !g5 amuletos al mismo tiempo!y", ZP_PREFIX);
				
				showMenuAmuletos(id);
				return PLUGIN_HANDLED;
			}
			
			g_points[id][CLASS_FRAGMENTOS] -= 30;
			
			new iRand;
			new i;
			new j;
			new k;
			
			for(i = 0; i < 10; ++i)
			{
				k = 0;
				
				iRand = random_num(0, charsmax(AMULETOS_NAME_LIST));
				formatex(g_amuleto_name[id][iSlot], 63, "%s [EXPERT]", AMULETOS_NAME_LIST[iRand]);
				
				for(j = 0; j < 5; ++j)
				{
					if(j == iSlot)
						continue;
					
					if(equal(g_amuleto_name[id][j], g_amuleto_name[id][iSlot]))
					{			
						++k;
						break;
					}
				}
				
				if(!k)
					break;
			}
			
			new Float:fRand;
			for(i = 0; i < 4; ++i)
			{
				iRand = random_num(0, 3);
				g_amuleto_stat1[id][iSlot][i] = iRand;
			}
			
			fRand = random_float(0.00, 1.00);
			g_amuleto_stat2[id][iSlot][0] = fRand;
			
			fRand = random_float(0.00, 1.00);
			g_amuleto_stat2[id][iSlot][1] = fRand;
			
			iRand = random_num(0, 15);
			g_amuleto_stat3[id][iSlot][0] = iRand;
			
			iRand = random_num(0, 20);
			g_amuleto_stat3[id][iSlot][1] = iRand;
			
			g_amuleto_stat3[id][iSlot][2] = 1;
			
			iRand = random_num(0, 6);
			g_amuleto_stat3[id][iSlot][3] = iRand;
			
			new Handle:sqlQuery;
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO amuletos (`zp_id`, `amuleto_id`, `amuleto_name`, `am_health`, `am_speed`, `am_grav`, `am_damage`, `am_mult_exp`, `am_mult_aps`, `am_modo`, `am_items`, `am_modo_dr`, `am_luz`) \
			VALUES ('%d', '%d', ^"%s^", '%d', '%d', '%d', '%d', '%f', '%f', '%d', '%d', '%d', '%d');", g_user_id[id], iSlot, g_amuleto_name[id][iSlot], g_amuleto_stat1[id][iSlot][0], g_amuleto_stat1[id][iSlot][1], g_amuleto_stat1[id][iSlot][2], g_amuleto_stat1[id][iSlot][3],
			g_amuleto_stat2[id][iSlot][0], g_amuleto_stat2[id][iSlot][1], g_amuleto_stat3[id][iSlot][0], g_amuleto_stat3[id][iSlot][1], g_amuleto_stat3[id][iSlot][2], g_amuleto_stat3[id][iSlot][3]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 49851621);
			else
				SQL_FreeHandle(sqlQuery);
			
			++g_stats[id][AMULETOS_CREATE];
			
			colorChat(id, _, "%sHas creado el amuleto !g%s!y", ZP_PREFIX, g_amuleto_name[id][iSlot]);
			
			if(g_stats[id][AMULETOS_CREATE] == 3)
				setAchievement(id, LOS_PRIMEROS_3);
			else if(g_stats[id][AMULETOS_CREATE] == 10)
				setAchievement(id, EN_BUSCA_DEL_MEJOR);
			else if(g_stats[id][AMULETOS_CREATE] == 20)
				setAchievement(id, EL_SENIOR_DE_LOS_AMULETOS);
			
			if(g_amuleto_stat1[id][iSlot][0] > 0 && g_amuleto_stat1[id][iSlot][1] > 0 && g_amuleto_stat1[id][iSlot][2] > 0 && g_amuleto_stat1[id][iSlot][3] > 0 && g_amuleto_stat2[id][iSlot][0] > 0.0 && g_amuleto_stat2[id][iSlot][1] > 0.0)
				setAchievement(id, EQUIPANDOME);
			
			showMenuAmuletos(id);
		}
		case 4..8: showMenuAmuletos(id, (iItemId - 4), sNameAmuleto);
		case 0: {
			showMenuGame(id);
			return PLUGIN_HANDLED;
		}
	}
	
	return PLUGIN_HANDLED;
}

public menuAmuletos__In(const id, const menuid, const item) // (showMenuAmuletos)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuAmuletos(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	
	iItemId = str_to_num(sBuffer);
	
	DestroyLocalMenu(id, menuid);
	
	switch(iItemId)
	{
		case 1:
		{
			static sMenu[250];
			static iMenuId;
			static iLen;
			
			iLen = 0;
			
			new i;
			new j;
			
			replace_all(g_amuleto_name_menu[id], 63, "\y (EQUIPADO)", "");
			replace_all(g_amuleto_name_menu[id], 63, "\y (ELEGIDO)", "");
			
			for(i = 0; i < 5; ++i)
			{
				if(equal(g_amuleto_name[id][i], g_amuleto_name_menu[id]))
					break;
			}
			
			iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "¿ESTÁ SEGURO QUE DESEA VENDER ESTE AMULETO?^n^n");
			
			for(j = 0; j < 4; ++j)
			{
				if(g_amuleto_stat1[id][i][j] != 0)
					iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "%s%d\w %s^n", (g_amuleto_stat1[id][i][j] > 0) ? "\y+" : "\r-", abs(g_amuleto_stat1[id][i][j]), AMULETOS_STAT_LIST[j]);
			}
			
			if(g_amuleto_stat3[id][i][3] != 0)
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "%s%d\w AURA BOMBA LUZ/BUBBLE^n", (g_amuleto_stat3[id][i][3] > 0) ? "\y+" : "\r-", g_amuleto_stat3[id][i][3]);
			
			if(g_amuleto_stat2[id][i][0] != 0.0)
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n%sx%0.2f \wEXP^n", (g_amuleto_stat2[id][i][0] > 0.0) ? "\y+" : "\r-", absFloat(g_amuleto_stat2[id][i][0]));
			
			if(g_amuleto_stat2[id][i][1] != 0.0)
				iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "%sx%0.2f \wAPS^n^n", (g_amuleto_stat2[id][i][1] > 0.0) ? "\y+" : "\r-", absFloat(g_amuleto_stat2[id][i][1]));
			
			if(contain(g_amuleto_name[id][i], "[PRO]") != -1 || contain(g_amuleto_name[id][i], "[EXPERT]") != -1)
			{
				if(g_amuleto_stat3[id][i][0] != 0)
					iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "%s%d%%\w de que seas modo^n", (g_amuleto_stat3[id][i][0] > 0) ? "\y+" : "\r-", abs(g_amuleto_stat3[id][i][0]));
				
				if(g_amuleto_stat3[id][i][1] > 0)
					iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "%s%d%%\w de %s en items extras", (g_amuleto_stat3[id][i][1] > 0) ? "\y" : "\r", g_amuleto_stat3[id][i][1], (g_amuleto_stat3[id][i][2]) ? "\ydescuento\w" : "\rrecargo\w");
			}
			
			iMenuId = menu_create(sMenu, "menuAmuletos__DeleteConfirm");
			
			menu_additem(iMenuId, "SI, QUIERO VENDERLO", "1");
			menu_additem(iMenuId, "NO, NO QUIERO VENDERLO", "2");
			
			menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
			
			set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
			ShowLocalMenu(id, iMenuId, 0);
		}
		case 2:
		{
			replace_all(g_amuleto_name_menu[id], 63, "\y (EQUIPADO)", "");
			replace_all(g_amuleto_name_menu[id], 63, "\y (ELEGIDO)", "");
			
			new i;
			for(i = 0; i < 5; ++i)
			{
				if(equal(g_amuleto_name[id][i], g_amuleto_name_menu[id]))
					break;
			}
			
			if(g_amuleto_equip[id] == i)
			{
				g_amuleto_equip[id] = -1;
				colorChat(id, _, "%sHas desequipido el amuleto !g%s!y", ZP_PREFIX, g_amuleto_name[id][i]);
				
				showMenuAmuletos(id);
				
				return PLUGIN_HANDLED;
			}
			
			g_amuleto_next_equip[id] = i;
			
			colorChat(id, _, "%sCuando vuelvas a renacer, tendrás equipado el amuleto !g%s!y", ZP_PREFIX, g_amuleto_name[id][i]);
			
			showMenuAmuletos(id);
		}
	}
	
	return PLUGIN_HANDLED;
}

public menuAmuletos__DeleteConfirm(const id, const menuid, const item) // (showMenuAmuletos)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuAmuletos(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	
	iItemId = str_to_num(sBuffer);
	
	DestroyLocalMenu(id, menuid);
	
	switch(iItemId)
	{
		case 1:
		{
			replace_all(g_amuleto_name_menu[id], 63, "\y (EQUIPADO)", "");
			replace_all(g_amuleto_name_menu[id], 63, "\y (ELEGIDO)", "");
			
			new i;
			for(i = 0; i < 5; ++i)
			{
				if(equal(g_amuleto_name[id][i], g_amuleto_name_menu[id]))
					break;
			}
			
			new Handle:sqlQuery;
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "DELETE FROM amuletos WHERE zp_id='%d' AND amuleto_id='%d';", g_user_id[id], i);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 21);
			else
				SQL_FreeHandle(sqlQuery);
			
			if(contain(g_amuleto_name[id][i], "[EXPERT]") != -1)
			{
				colorChat(id, _, "%sHas vendido el amuleto !g%s!y y se te ha devuelto !g5 pF!y", ZP_PREFIX, g_amuleto_name[id][i]);
				g_points[id][CLASS_FRAGMENTOS] += 4;
			}
			else if(contain(g_amuleto_name[id][i], "[PRO]") != -1)
			{
				colorChat(id, _, "%sHas vendido el amuleto !g%s!y y se te ha devuelto !g4 pF!y", ZP_PREFIX, g_amuleto_name[id][i]);
				g_points[id][CLASS_FRAGMENTOS] += 4;
			}
			else
			{
				colorChat(id, _, "%sHas vendido el amuleto !g%s!y y se te ha devuelto !g3 pF!y", ZP_PREFIX, g_amuleto_name[id][i]);
				g_points[id][CLASS_FRAGMENTOS] += 3;
			}
			
			if(g_amuleto_equip[id] == i)
				g_amuleto_equip[id] = -1;
			
			formatex(g_amuleto_name[id][i], 63, "");
			formatex(g_amuleto_name_menu[id], 63, "");
			
			showMenuAmuletos(id);
		}
		case 2: showMenuAmuletos(id);
	}
	
	return PLUGIN_HANDLED;
}

public menuDuelos(const id, const menuid, const item) // (showMenuDuelos)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	
	iItemId = str_to_num(sBuffer);
	
	DestroyLocalMenu(id, menuid);
	
	switch(iItemId)
	{
		case 1:
		{
			colorChat(id, _, "%sEscribe la !gexperiencia!y que deseas apostar en este !gDUELO DE EXPERIENCIA!y", ZP_PREFIX);
			colorChat(id, _, "%sSi te desconectás en medio del duelo perderás lo apostado y tu contrincante será el ganador", ZP_PREFIX);
			
			client_cmd(id, "messagemode DUELO_APOSTAR_EXP");
		}
		case 2:
		{
			colorChat(id, _, "%sEscribe los !gammo packs!y que deseas apostar en este !gDUELO DE AMMO PACKS!y", ZP_PREFIX);
			colorChat(id, _, "%sSi te desconectás en medio del duelo perderás lo apostado y tu contrincante será el ganador", ZP_PREFIX);
			
			client_cmd(id, "messagemode DUELO_APOSTAR_APS");
		}
		case 3:
		{
			colorChat(id, _, "%sEscribe los !gpH!y que deseas apostar en este !gDUELO DE PH!y", ZP_PREFIX);
			colorChat(id, _, "%sSi te desconectás en medio del duelo perderás lo apostado y tu contrincante será el ganador", ZP_PREFIX);
			
			client_cmd(id, "messagemode DUELO_APOSTAR_PH");
		}
		case 4:
		{
			colorChat(id, _, "%sEscribe los !gpZ!y que deseas apostar en este !gDUELO DE PZ!y", ZP_PREFIX);
			colorChat(id, _, "%sSi te desconectás en medio del duelo perderás lo apostado y tu contrincante será el ganador", ZP_PREFIX);
			
			client_cmd(id, "messagemode DUELO_APOSTAR_PZ");
		}
		case 5:
		{
			colorChat(id, _, "%sEscribe los !gpF!y que deseas apostar en este !gDUELO DE PF!y", ZP_PREFIX);
			colorChat(id, _, "%sSi te desconectás en medio del duelo perderás lo apostado y tu contrincante será el ganador", ZP_PREFIX);
			
			client_cmd(id, "messagemode DUELO_APOSTAR_PF");
		}
		case 6: showMenuDuelos(id, _, 2);
	}
	
	return PLUGIN_HANDLED;
}

public menuDuelos__InType(const id, const menuid, const item) // (showMenuDuelos)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	
	iItemId = str_to_num(sBuffer);
	
	DestroyLocalMenu(id, menuid);
	
	if(iItemId == 7)
	{
		showMenuDuelos(id, _, 2);
		return PLUGIN_HANDLED;
	}
	
	g_duelo_type[id] = (iItemId - 1);
	
	showMenuDuelos(id, _, 1);
	return PLUGIN_HANDLED;
}

public menuDuelos__InPlayers(const id, const menuid, const item) // (showMenuDuelos)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	
	static sName[32];
	static sBuffer[3];
	static iDummy;
	static iId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), sName, charsmax(sName), iDummy);
	
	iId = get_user_index(sName);
	
	DestroyLocalMenu(id, menuid);
	
	if(!g_isconnected[iId])
	{
		colorChat(id, _, "%sEl usuario seleccionado se ha desconectado", ZP_PREFIX);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	else if(g_in_duelo[iId])
	{
		colorChat(id, _, "%sEl usuario seleccionado ya se encuentra en un duelo", ZP_PREFIX);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	
	switch(g_duelo[id])
	{
		case MENU_DUELO_EXPERIENCIA: if(g_exp[iId] < g_duelo_bet[id][MENU_DUELO_EXPERIENCIA]) iId = -1;
		case MENU_DUELO_AMMOPACKS: if(g_ammopacks[iId] < g_duelo_bet[id][MENU_DUELO_AMMOPACKS]) iId = -1;
		case MENU_DUELO_PH: if(g_points[iId][CLASS_HUMAN] < g_duelo_bet[id][MENU_DUELO_PH]) iId = -1;
		case MENU_DUELO_PZ: if(g_points[iId][CLASS_ZOMBIE] < g_duelo_bet[id][MENU_DUELO_PZ]) iId = -1;
		case MENU_DUELO_PF: if(g_points[iId][CLASS_FRAGMENTOS] < g_duelo_bet[id][MENU_DUELO_PF]) iId = -1;
	}
	
	if(iId == -1)
	{
		colorChat(id, _, "%sEl usuario seleccionado no tiene suficientes recursos como para aceptar el duelo", ZP_PREFIX);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	
	g_duelo_invite[id][iId] = 1;
	
	colorChat(id, _, "%sRetaste a duelo a !g%s!y", ZP_PREFIX, g_playername[iId]);
	colorChat(iId, _, "%s!g%s!y te ha retado a un duelo", ZP_PREFIX, g_playername[id]);
	
	showMenuDuelos(id, _, 1);
	return PLUGIN_HANDLED;
}

public menuDuelos__InRetadores(const id, const menuid, const item) // (showMenuDuelos)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	
	static sName[32];
	static sBuffer[3];
	static iDummy;
	static iId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), sName, charsmax(sName), iDummy);
	
	iId = get_user_index(sName);
	
	DestroyLocalMenu(id, menuid);
	
	if(!g_isconnected[iId])
	{
		colorChat(id, _, "%sEl usuario seleccionado se ha desconectado", ZP_PREFIX);
		
		showMenuDuelos(id, _, 2);
		return PLUGIN_HANDLED;
	}
	
	showMenuDuelos(id, _, (iId + 500));
	return PLUGIN_HANDLED;
}

public menuDuelos__InRetar(const id, const menuid, const item) // (showMenuDuelos)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuGame(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	
	iItemId = str_to_num(sBuffer);
	
	DestroyLocalMenu(id, menuid);
	
	switch(iItemId)
	{
		case 1: showMenuDuelos(id, _, 5);
		case 2: showMenuDuelos(id, _, 6);
	}
	
	return PLUGIN_HANDLED;
}

public menuDuelos__InInfo(const id, const menuid, const item) // (showMenuDuelos)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuDuelos(id, _, 2);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[3];
	static iDummy;
	static iItemId;
	static iId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	
	iItemId = str_to_num(sBuffer);
	
	DestroyLocalMenu(id, menuid);
	
	switch(iItemId)
	{
		case 1:
		{
			iId = g_page[id][MENU_DUELO];
			
			if(!g_isconnected[iId])
			{
				colorChat(id, _, "%sEl retador se ha desconectado", ZP_PREFIX);
				
				showMenuDuelos(id);
				return PLUGIN_HANDLED;
			}
			else if(g_in_duelo[iId])
			{
				colorChat(id, _, "%sEl retador ya se encuentra en un duelo", ZP_PREFIX);
				
				showMenuDuelos(id);
				return PLUGIN_HANDLED;
			}
			
			switch(g_duelo[iId])
			{
				case MENU_DUELO_EXPERIENCIA: if(g_exp[id] < g_duelo_bet[iId][MENU_DUELO_EXPERIENCIA]) iId = -1;
				case MENU_DUELO_AMMOPACKS: if(g_ammopacks[id] < g_duelo_bet[iId][MENU_DUELO_AMMOPACKS]) iId = -1;
				case MENU_DUELO_PH: if(g_points[id][CLASS_HUMAN] < g_duelo_bet[iId][MENU_DUELO_PH]) iId = -1;
				case MENU_DUELO_PZ: if(g_points[id][CLASS_ZOMBIE] < g_duelo_bet[iId][MENU_DUELO_PZ]) iId = -1;
				case MENU_DUELO_PF: if(g_points[id][CLASS_FRAGMENTOS] < g_duelo_bet[iId][MENU_DUELO_PF]) iId = -1;
				default: iId = -1;
			}
			
			if(iId == -1)
			{
				colorChat(id, _, "%sEl retador no tiene suficientes recursos como para jugar el duelo", ZP_PREFIX);
				
				showMenuDuelos(id);
				return PLUGIN_HANDLED;
			}
			
			g_in_duelo[id] = iId;
			g_in_duelo[iId] = id;
			
			g_duelo[id] = g_duelo[iId];
			g_duelo_type[id] = g_duelo_type[iId];
			
			g_duelo_bet[id][g_duelo[id]] = g_duelo_bet[iId][g_duelo[iId]];
			
			new i;
			for(i = 0; i <= g_maxplayers; ++i)
			{
				g_duelo_invite[id][i] = 0;
				g_duelo_invite[i][iId] = 0;
			}
			
			colorChat(id, _, "%sHas aceptado el duelo de !g%s!y", ZP_PREFIX, g_playername[iId]);
			colorChat(id, _, "%sEl duelo comenzará en la próxima ronda!", ZP_PREFIX);
			colorChat(id, _, "%sSi uno de los dos se desconecta durante el duelo, el contrincante será el ganador automáticamente", ZP_PREFIX);
			colorChat(id, _, "%sRecordá que el duelo solo toma los datos que se efectuan en rondas !gPRIMER ZOMBIE!y", ZP_PREFIX);
			
			colorChat(iId, _, "%s!g%s!y aceptó tu duelo", ZP_PREFIX, g_playername[id]);
			colorChat(iId, _, "%sEl duelo comenzará en la próxima ronda!", ZP_PREFIX);
			colorChat(iId, _, "%sSi uno de los dos se desconecta durante el duelo, el contrincante será el ganador automáticamente", ZP_PREFIX);
			colorChat(iId, _, "%sRecordá que el duelo solo toma los datos que se efectuan en rondas !gPRIMER ZOMBIE!y", ZP_PREFIX);
		}
	}
	
	return PLUGIN_HANDLED;
}

public menuLoteria(const id, const key)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	if(g_no_buy)
		return PLUGIN_HANDLED;
	
	switch(key)
	{
		case 0:
		{
			if(g_bet_done[id])
			{
				showMenuWinners(id);
				return PLUGIN_HANDLED;
			}
	
			if((g_exp[id] - g_bet[id]) < 0)
			{
				colorChat(id, _, "%sLa apuesta supera tu experiencia", ZP_PREFIX_LOTTERY);
				
				showMenuLoteria(id);
				return PLUGIN_HANDLED;
			}
			else if(g_bet[id] < 10000)
			{
				colorChat(id, _, "%sLa apuesta mínima es de !g10.000 EXP!y", ZP_PREFIX_LOTTERY);
				
				showMenuLoteria(id);
				return PLUGIN_HANDLED;
			}
			else if(g_bet_num[id] < 1 || g_bet_num[id] > 999)
			{
				colorChat(id, _, "%sEl número apostado debe estar entre !g0!y y !g1.000!y", ZP_PREFIX_LOTTERY);
				
				showMenuLoteria(id);
				return PLUGIN_HANDLED;
			}
			else if(g_level_total[id] < 1001)
			{
				colorChat(id, _, "%sNecesitás ser nivel !g1000+!y para jugar a la lotería", ZP_PREFIX_LOTTERY);
				
				showMenuLoteria(id);
				return PLUGIN_HANDLED;
			}
			
			g_bet_done[id] = 1;
			
			g_exp[id] -= g_bet[id];
			if(g_pozo_acc >= 0)
				g_pozo_acc += g_bet[id];
			
			++g_gamblers;
			
			colorChat(0, _, "%s!t%s!y apostó !g%d EXP!y al !g%d!y", ZP_PREFIX_LOTTERY, g_playername[id], g_bet[id], g_bet_num[id]);
			
			new Handle:sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET lot_bet='%d', lot_num='%d' WHERE `id`='%d';", g_bet[id], g_bet_num[id], g_user_id[id]);
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 25);
			else
				SQL_FreeHandle(sqlQuery);
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE modes SET lot_pozo_acc='%d', lot_gamblers='%d';", g_pozo_acc, g_gamblers);
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 26);
			else
				SQL_FreeHandle(sqlQuery);
			
			if(g_bet[id] >= 1000000)
				setAchievement(id, CASINO_O_ZP);
		}
		case 1:
		{
			if(g_bet_done[id])
			{
				showMenuLoteria(id);
				return PLUGIN_HANDLED;
			}
			
			colorChat(id, _, "%sEscribe la experiencia que deseas apostar", ZP_PREFIX_LOTTERY);
			client_cmd(id, "messagemode LOTERIA_APOSTAR_EXP");
		}
		case 2:
		{
			if(g_bet_done[id])
			{
				showMenuLoteria(id);
				return PLUGIN_HANDLED;
			}
			
			colorChat(id, _, "%sEscribe el número al que deseas apostarle", ZP_PREFIX_LOTTERY);
			client_cmd(id, "messagemode LOTERIA_APOSTAR_NUM");
		}
		case 3:
		{
			showMenuWinners(id);
			return PLUGIN_HANDLED;
		}
		case 9: showMenuGame(id);
	}
	
	return PLUGIN_HANDLED;
}

public menuCSBuy(const id, const key) // (no ShowMenu)
	return PLUGIN_HANDLED;

/** ==================================================
	[ FIN HANDLERS MENUES ]
================================================== **/

/** ==================================================
	[ MESSAGES ]
================================================== **/

public message_CurWeapon(const msg_id, const msg_dest, const msg_entity)
{
	if(!g_isalive[msg_entity] || g_zombie[msg_entity])
		return;
	
	if(get_msg_arg_int(1) != 1)
		return;
	
	if(!g_special_mode[msg_entity] && !g_unlimited_clip[msg_entity])
		return;
	
	static iWeapon;
	iWeapon = get_msg_arg_int(2);
	
	if(MAXBPAMMO[iWeapon] > 2)
	{
		static iWeaponEnt;
		iWeaponEnt = getCurrentWeaponEnt(msg_entity);
		
		if(pev_valid(iWeaponEnt))
			cs_set_weapon_ammo(iWeaponEnt, MAXCLIP[iWeapon]);
		
		set_msg_arg_int(3, get_msg_argtype(3), MAXCLIP[iWeapon]);
	}
}

public message_Money(const msg_id, const msg_dest, const msg_entity)
{
	if(is_user_connected(msg_entity))
		cs_set_user_money(msg_entity, 0);
	
	return PLUGIN_HANDLED;
}

public message_Health(const msg_id, const msg_dest, const msg_entity)
{
	static iHealth;
	iHealth = get_msg_arg_int(1);
	
	if(iHealth < 256)
		return;
	
	if(iHealth % 256 == 0 && g_isalive[msg_entity])
		set_user_health(msg_entity, g_health[msg_entity] + 1);
	
	set_msg_arg_int(1, get_msg_argtype(1), 255);
}

public message_FlashBat(const msg_id, const msg_dest, const msg_entity)
{
	if(get_msg_arg_int(1) < 100)
	{
		set_msg_arg_int(1, ARG_BYTE, 100);
		setUserBatteries(msg_entity, 100);
	}
}

public message_Flashlight()
	set_msg_arg_int(2, ARG_BYTE, 100);

public message_NVGToggle()
	return PLUGIN_HANDLED;

public message_WeapPickup(const msg_id, const msg_dest, const msg_entity)
{
	if(g_zombie[msg_entity])
		return PLUGIN_HANDLED;
	
	return PLUGIN_CONTINUE;
}

public message_AmmoPickup(const msg_id, const msg_dest, const msg_entity)
{
	if(g_zombie[msg_entity])
		return PLUGIN_HANDLED;
	
	return PLUGIN_CONTINUE;
}

public message_TextMsg()
{
	static sMsg[22];
	get_msg_arg_string(2, sMsg, charsmax(sMsg));
	
	if(get_msg_args() == 5 && (get_msg_argtype(5) == ARG_STRING))
	{
		get_msg_arg_string(5, sMsg, charsmax(sMsg));
		
		if(equal(sMsg, "#Fire_in_the_hole"))
			return PLUGIN_HANDLED;
	}
	else if(get_msg_args() == 6 && (get_msg_argtype(6) == ARG_STRING))
	{
		get_msg_arg_string(6, sMsg, charsmax(sMsg));
		
		if(equal(sMsg, "#Fire_in_the_hole"))
			return PLUGIN_HANDLED;
	}
	
	if(equal(sMsg, "#Game_teammate_attack"))
		return PLUGIN_HANDLED;
	
	if(equal(sMsg, "#Game_Commencing"))
        return PLUGIN_HANDLED;
	
	if(equal(sMsg, "#Game_will_restart_in"))
	{
		g_scorehumans = 0;
		g_scorezombies = 0;
		logevent_RoundEnd();
	}
	else if(equal(sMsg, "#Hostages_Not_Rescued") || equal(sMsg, "#Round_Draw") || equal(sMsg, "#Terrorists_Win") || equal(sMsg, "#CTs_Win"))
		return PLUGIN_HANDLED;
	
	return PLUGIN_CONTINUE;
}

public message_SendAudio()
{
	static sAudio[19];
	get_msg_arg_string(2, sAudio, charsmax(sAudio));
	
	if((sAudio[7] == 't' && sAudio[8] == 'e' && sAudio[9] == 'r' && sAudio[10] == 'w' && sAudio[11] == 'i' && sAudio[12] == 'n') ||
	(sAudio[7] == 'c' && sAudio[8] == 't' && sAudio[9] == 'w' && sAudio[10] == 'i' && sAudio[11] == 'n') ||
	(sAudio[7] == 'r' && sAudio[8] == 'o' && sAudio[9] == 'u' && sAudio[10] == 'n' && sAudio[11] == 'd' && sAudio[12] == 'd' && sAudio[13] == 'r' && sAudio[14] == 'a' && sAudio[15] == 'w') ||
	equal(sAudio, "%!MRAD_FIREINHOLE"))
		return PLUGIN_HANDLED;
	
	return PLUGIN_CONTINUE;
}

public message_TeamScore()
{
	static sTeam[2];
	get_msg_arg_string(1, sTeam, 1);
	
	switch(sTeam[0])
	{
		case 'C': set_msg_arg_int(2, get_msg_argtype(2), g_scorehumans);
		case 'T': set_msg_arg_int(2, get_msg_argtype(2), g_scorezombies);
	}
}

public message_TeamInfo(const msg_id, const msg_dest)
{
	if(msg_dest != MSG_ALL && msg_dest != MSG_BROADCAST)
		return;
	
	if(g_switchingteam)
		return;
	
	static iId;
	iId = get_msg_arg_int(1);
	
	if(!(1 <= iId <= g_maxplayers))
		return;
	
	set_task(0.2, "specNightvision", iId);
	
	if(g_newround || g_mode[MODE_DUEL_FINAL])
		return;
	
	static sTeam[2];
	get_msg_arg_string(2, sTeam, 1);
	
	switch(sTeam[0])
	{
		case 'C':
		{
			if((g_mode[MODE_SURVIVOR] || g_mode[MODE_WESKER]) && getHumans())
			{
				g_respawn_as_zombie[iId] = 1;
				
				remove_task(iId + TASK_TEAM);
				setUserTeam(iId, FM_CS_TEAM_T);
				
				set_msg_arg_string(2, "TERRORIST");
			}
			else if(!getZombies())
			{
				g_respawn_as_zombie[iId] = 1;
				remove_task(iId + TASK_TEAM);
				
				setUserTeam(iId, FM_CS_TEAM_T);
				
				set_msg_arg_string(2, "TERRORIST");
			}
		}
		case 'T':
		{
			if((g_mode[MODE_SWARM] || g_mode[MODE_SURVIVOR] || g_mode[MODE_GAMINGA] || g_mode[MODE_WESKER]) && getHumans())
			{
				g_respawn_as_zombie[iId] = 1;
				
				remove_task(iId + TASK_TEAM);
				setUserTeam(iId, FM_CS_TEAM_T);
				
				set_msg_arg_string(2, "TERRORIST");
			}
			else if(getZombies())
			{
				g_respawn_as_zombie[iId] = 0;
				
				remove_task(iId + TASK_TEAM);
				setUserTeam(iId, FM_CS_TEAM_CT);
				
				set_msg_arg_string(2, "CT");
			}
		}
	}
}

/*public message_SpecHealth(const msg_id, const msg_dest, const msg_entity)
	set_msg_arg_int(1, get_msg_argtype(1), 1);*/

/** ==================================================
	[ FIN MESSAGES ]
================================================== **/

/** ==================================================
	[ FUNCIONES ]
================================================== **/

public makeZombieTask()
	makeMode(MODE_NONE, 0);

makeMode(const mode, id) // mm_mm
{
	static iUsersNum;
	iUsersNum = getAlive();
	
	if(iUsersNum < 2 && !id)
	{
		set_task(10.0, "makeZombieTask", TASK_MAKEZOMBIE);
		return;
	}
	
	g_newround = 0;
	
	if(mode != 0)
	{
		setMode(mode, id);
		return;
	}
	
	if(!g_only_modes)
	{
		if(random_num(1, 10) == 1 && iUsersNum >= 10) setMode(MODE_MULTI, id);
		else if(random_num(1, 25) == 1) setMode(MODE_SWARM, id);
		else if(random_num(1, 15) == 1 && iUsersNum >= 15) setMode(MODE_PLAGUE, id);
		else if(random_num(1, 20) == 1 && iUsersNum >= 10) setMode(MODE_SURVIVOR, id);
		else if(random_num(1, 20) == 1 && iUsersNum >= 10) setMode(MODE_NEMESIS, id);
		else if(random_num(1, 25) == 1 && iUsersNum >= 15) setMode(MODE_WESKER, id);
		else if(random_num(1, 25) == 1 && iUsersNum >= 15) setMode(MODE_CABEZON, id);
		else if(random_num(1, 25) == 1 && iUsersNum >= 15) setMode(MODE_JASON, id);
		else if(random_num(1, 25) == 1 && iUsersNum >= 18) setMode(MODE_SYNAPSIS, id);
		else if(random_num(1, 30) == 1 && iUsersNum >= 18) setMode(MODE_ANNIHILATOR, id);
		else if(random_num(1, 30) == 1 && iUsersNum >= 18) setMode(MODE_ALVSPRED, id);
		else if(random_num(1, 30) == 1 && iUsersNum >= 18) setMode(MODE_SNIPER, id);
		else if(random_num(1, 35) == 1 && iUsersNum >= 18) setMode(MODE_GRUNT, id);
		else if(random_num(1, 35) == 1 && iUsersNum >= 18) setMode(MODE_DUEL_FINAL, id);
		else if(random_num(1, 35) == 1 && iUsersNum >= 18) setMode(MODE_GAMINGA, id);
		else if(random_num(1, 40) == 1 && iUsersNum >= 18) setMode(MODE_ARMAGEDDON, id);
		else setMode(MODE_INFECTION, id);
	}
	else if(g_only_modes == 1)
	{
		if(random_num(1, 4) == 1 && iUsersNum >= 10) setMode(MODE_SURVIVOR, id);
		else if(random_num(1, 4) == 1 && iUsersNum >= 10) setMode(MODE_NEMESIS, id);
		else if(random_num(1, 4) == 1 && iUsersNum >= 15) setMode(MODE_WESKER, id);
		else if(random_num(1, 4) == 1 && iUsersNum >= 15) setMode(MODE_CABEZON, id);
		else if(random_num(1, 4) == 1 && iUsersNum >= 15) setMode(MODE_JASON, id);
		else if(random_num(1, 4) == 1 && iUsersNum >= 18) setMode(MODE_SYNAPSIS, id);
		else if(random_num(1, 8) == 1 && iUsersNum >= 18) setMode(MODE_ANNIHILATOR, id);
		else if(random_num(1, 8) == 1 && iUsersNum >= 18) setMode(MODE_ALVSPRED, id);
		else if(random_num(1, 8) == 1 && iUsersNum >= 18) setMode(MODE_SNIPER, id);
		else if(random_num(1, 15) == 1 && iUsersNum >= 18) setMode(MODE_GRUNT, id);
		else if(random_num(1, 15) == 1 && iUsersNum >= 18) setMode(MODE_DUEL_FINAL, id);
		else if(random_num(1, 35) == 1 && iUsersNum >= 18) setMode(MODE_GAMINGA, id);
		else if(random_num(1, 40) == 1 && iUsersNum >= 18) setMode(MODE_ARMAGEDDON, id);
		else if(iUsersNum >= 15) setMode(MODE_PLAGUE, id);
		else setMode(MODE_INFECTION, id);
	} else {
		new iOk = 0;
		
		if((g_only_modes == MODE_SURVIVOR || g_only_modes == MODE_NEMESIS) && iUsersNum >= 10) {
			iOk = 1;
		} else if((g_only_modes == MODE_WESKER || g_only_modes == MODE_JASON || g_only_modes == MODE_PLAGUE) && iUsersNum >= 2) {
			iOk = 1;
		} else if((g_only_modes == MODE_SYNAPSIS || g_only_modes == MODE_ALVSPRED || g_only_modes == MODE_SNIPER) && iUsersNum >= 18) {
			iOk = 1;
		}
		
		if((g_only_modes == MODE_SURVIVOR || g_only_modes == MODE_NEMESIS || g_only_modes == MODE_WESKER || g_only_modes == MODE_JASON) && iOk) {
			new i = 1;
			while(i) {
				id = g_MiniEvent_UserId[g_MiniEvent_Number];
				if(id) {
					if(!g_isalive[id]) {
						++g_MiniEvent_Number;
					} else {
						break;
					}
				} else {
					g_MiniEvent_Number = 0;
					id = g_MiniEvent_UserId[g_MiniEvent_Number];
					
					break;
				}
			}
		}
		
		if(iOk) {
			setMode(g_only_modes, id);
		} else {
			setMode(MODE_INFECTION, id);
		}
	}
}

setMode(const mode, id = 0, id2 = 0, id3 = 0, id4 = 0)
{
	static i;
	static iZombies;
	static iPlayersnum;
	static iMaxZombies;
	
	iPlayersnum = getAlive();
	
	++g_MiniEvent_Number;
	
	if(mode != MODE_INFECTION) {
		g_FirstInfect = 1;
	}
	
	switch(mode)
	{
		case MODE_INFECTION:
		{
			g_lights[0] = 'b';
			
			if(id == 0)
				id = getRandomAlive(random_num(1, iPlayersnum));
			
			g_mode[MODE_INFECTION] = 1;
			
			zombieMe(id);
			
			if(iPlayersnum >= 20)
			{
				setAchievement(id, ARE_YOU_FUCKING_KIDDING_ME);
				
				++g_logros_stats[id][TWO_ZOMBIES];
				
				if(g_logros_stats[id][TWO_ZOMBIES] == 2)
					setAchievement(id, YA_DE_ZOMBIE);
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_in_duelo[i] && !g_in_duelo_official[i])
				{
					g_in_duelo_official[i] = 1;
					
					g_duelo_stats[i][DUELO_HUM_INF_ROUND] = 0;
					g_duelo_stats[i][DUELO_ZOM_MAT_ROUND] = 0;
					g_duelo_stats[i][DUELO_DMG_DON_ROUND] = 0;
					
					g_duelo_stats[i][DUELO_HUM_INF_MAP] = 0;
					g_duelo_stats[i][DUELO_ZOM_MAT_MAP] = 0;
					g_duelo_stats[i][DUELO_DMG_DON_MAP] = 0;
					
					colorChat(i, _, "%sEl duelo contra !g%s!y ha comenzado!", ZP_PREFIX, g_playername[g_in_duelo[i]]);
				}
				
				if(g_zombie[i])
					continue;
				
				if(g_weapon_auto[i])
					buyTerciaryWeapon(i, g_weapon_terciary[i]);
				
				g_logros_stats[i][TWO_ZOMBIES] = 0;
				
				if(getUserTeam(i) != FM_CS_TEAM_CT)
				{
					remove_task(i + TASK_TEAM);
					
					setUserTeam(i, FM_CS_TEAM_CT);
					userTeamUpdate(i);
				}
			}
			
			set_task(20.0, "removeImmunityBombs", id + TASK_20SEC_ZOMBIE);
			
			set_hudmessage(255, 0, 0, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ %s ES EL PRIMER ZOMBIE !", g_playername[id]);
		}
		case MODE_SURVIVOR:
		{
			g_lights[0] = 'a';
			
			g_mode[MODE_SURVIVOR] = 1;
			
			if(id == 0)
				id = getBetterRandomAlive();
			
			humanMe(id, .survivor = 1);
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_only_modes > 1) {
					randomSpawn(i)
				}
				
				if(id == i || g_zombie[i])
					continue;
				
				zombieMe(i, .silentmode = 1);
			}
			
			set_hudmessage(0, 0, 255, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ %s ES SURVIVOR !", g_playername[id]);
		}
		case MODE_NEMESIS:
		{
			g_lights[0] = 'a';
			
			if(id == 0)
				id = getBetterRandomAlive();
			
			g_mode[MODE_NEMESIS] = 1;
			
			zombieMe(id, .nemesis = 1);
			
			g_win_nemesis_one_minute = 1;
			set_task(60.0, "winNemesis__OneMinute", id + TASK_NEMESIS_OM);
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_only_modes > 1) {
					randomSpawn(i)
				}
				
				if(g_nemesis[i])
					continue;
				
				//buyTerciaryWeapon(i, g_weapon_terciary[i]);
				
				if(getUserTeam(i) != FM_CS_TEAM_CT)
				{
					remove_task(i + TASK_TEAM);
					
					setUserTeam(i, FM_CS_TEAM_CT);
					userTeamUpdate(i);
				}
			}
			
			set_hudmessage(255, 0, 0, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ %s ES NEMESIS !", g_playername[id]);
		}
		case MODE_SWARM:
		{
			g_lights[0] = 'b';
			
			g_mode[MODE_SWARM] = 1;
			
			if(!getAliveTs())
			{
				id = getRandomAlive(random_num(1, iPlayersnum));
				
				remove_task(id + TASK_TEAM);
				
				setUserTeam(id, FM_CS_TEAM_T);
				userTeamUpdate(id);
			}
			else if(!getAliveCTs())
			{
				id = getRandomAlive(random_num(1, iPlayersnum));
				
				remove_task(id + TASK_TEAM);
				
				setUserTeam(id, FM_CS_TEAM_CT);
				userTeamUpdate(id);
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(getUserTeam(i) != FM_CS_TEAM_T)
				{
					if(g_weapon_auto[i])
						buyTerciaryWeapon(i, g_weapon_terciary[i]);
					
					continue;
				}
				
				zombieMe(i, .silentmode = 1);
			}
			
			set_hudmessage(0, 255, 0, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ SWARM !");
		}
		case MODE_MULTI:
		{
			g_lights[0] = 'b';
			
			g_mode[MODE_MULTI] = 1;
			
			iMaxZombies = iPlayersnum / 3;
			iZombies = 0;
			
			id = 0;
			
			while(iZombies < iMaxZombies)
			{
				if(++id > g_maxplayers)
					id = 1;
				
				if(!g_isalive[id] || g_zombie[id])
					continue;
				
				if(random_num(0, 1))
				{
					zombieMe(id, .silentmode = 1);
					++iZombies;
				}
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i] || g_zombie[i])
					continue;
				
				if(g_weapon_auto[i])
					buyTerciaryWeapon(i, g_weapon_terciary[i]);
				
				if(getUserTeam(i) != FM_CS_TEAM_CT)
				{
					remove_task(i + TASK_TEAM);
					
					setUserTeam(i, FM_CS_TEAM_CT);
					userTeamUpdate(i);
				}
			}
			
			set_hudmessage(0, 255, 0, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ INFECCIÓN MÚLTIPLE !");
		}
		case MODE_PLAGUE:
		{
			g_lights[0] = 'b';
		
			g_mode[MODE_PLAGUE] = 1;
			
			static iSurvivors;
			static iMaxSurvivors;
			static iNemesis;
			static iMaxNemesis;
			
			iMaxSurvivors = 2;
			iSurvivors = 0;
			
			while(iSurvivors < iMaxSurvivors)
			{
				id = getBetterRandomAlive();
				
				if(g_survivor[id])
					continue;
				
				humanMe(id, .survivor = 1);
				++iSurvivors;
			}
			
			iMaxNemesis = 2;
			iNemesis = 0;
			
			while(iNemesis < iMaxNemesis)
			{
				id = getBetterRandomAlive();
				
				if(g_survivor[id] || g_nemesis[id])
					continue;
				
				zombieMe(id, .nemesis = 1);
				++iNemesis;
			}
			
			iMaxZombies = (iPlayersnum - 4) / 3;
			iZombies = 0;
			
			id = 0;
			
			while(iZombies < iMaxZombies)
			{
				if(++id > g_maxplayers)
					id = 1;
				
				if(!g_isalive[id] || g_zombie[id] || g_survivor[id])
					continue;
				
				if(random_num(0, 1))
				{
					zombieMe(id, .silentmode = 1);
					++iZombies;
				}
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i] || g_zombie[i] || g_survivor[i])
					continue;
				
				if(g_weapon_auto[i])
					buyTerciaryWeapon(i, g_weapon_terciary[i]);
				
				if(getUserTeam(i) != FM_CS_TEAM_CT)
				{
					remove_task(i + TASK_TEAM);
					
					setUserTeam(i, FM_CS_TEAM_CT);
					userTeamUpdate(i);
				}
			}
			
			set_hudmessage(255, 255, 255, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ PLAGUE !");
		}
		case MODE_WESKER:
		{
			g_lights[0] = 'a';
			
			g_mode[MODE_WESKER] = 1;
			
			if(id == 0)
				id = getBetterRandomAlive();
			
			humanMe(id, .wesker = 1);
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_only_modes > 1) {
					randomSpawn(i)
				}
				
				if(id == i || g_zombie[i])
					continue;
				
				zombieMe(i, .silentmode = 1);
			}
			
			set_hudmessage(255, 255, 0, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ %s ES WESKER !", g_playername[id]);
		}
		case MODE_CABEZON:
		{
			g_lights[0] = 'a';
			
			if(id == 0)
				id = getBetterRandomAlive();
			
			g_mode[MODE_CABEZON] = 1;
			
			g_cabezon_power_global = 0;
			
			zombieMe(id, .cabezon = 1);
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_cabezon[i])
					continue;
				
				//buyTerciaryWeapon(i, g_weapon_terciary[i]);
				
				if(getUserTeam(i) != FM_CS_TEAM_CT)
				{
					remove_task(i + TASK_TEAM);
					
					setUserTeam(i, FM_CS_TEAM_CT);
					userTeamUpdate(i);
				}
			}
			
			colorChat(0, _, "%sMuerte súbita en !g2 minutos!y", ZP_PREFIX);
			
			remove_task(TASK_MUERTE_SUBITA);
			set_task(120.0, "muerteSubita", TASK_MUERTE_SUBITA);
			
			set_hudmessage(255, 255, 255, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ %s ES UN CABEZÓN !", g_playername[id]);
		}
		case MODE_JASON:
		{
			g_lights[0] = 'a';
			
			g_mode[MODE_JASON] = 1;
			
			if(id == 0)
				id = getBetterRandomAlive();
			
			humanMe(id, .jason = 1);
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_only_modes > 1) {
					randomSpawn(i)
				}
				
				if(id == i || g_zombie[i])
					continue;
				
				zombieMe(i, .silentmode = 1);
			}
			
			set_hudmessage(255, 0, 255, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ %s ES JASON !", g_playername[id]);
			
			remove_task(id + TASK_JASON_SPEED);
			
			if(iPlayersnum >= 20)
				set_task(60.0, "jasonAchievement__End", id + TASK_JASON_SPEED);
		}
		case MODE_SYNAPSIS:
		{
			g_lights[0] = 'a';
			
			g_mode[MODE_SYNAPSIS] = 1;
			
			if(!id)
			{
				static iNemesis;
				iNemesis = 0;
				
				while(iNemesis < 3)
				{
					id = getBetterRandomAlive();
					
					if(g_nemesis[id])
						continue;
					
					zombieMe(id, .nemesis = 1);
					
					++iNemesis;
				}
			}
			else
			{
				if(g_isconnected[id]) zombieMe(id, .nemesis = 1);
				else
				{
					id = 0;
					while(!id)
					{
						id = getBetterRandomAlive();
						
						if(g_nemesis[id])
						{
							id = 0;
							continue;
						}
						
						zombieMe(id, .nemesis = 1);
					}
				}
				
				if(g_isconnected[id2]) zombieMe(id2, .nemesis = 1);
				else
				{
					id2 = 0;
					while(!id2)
					{
						id2 = getBetterRandomAlive();
						
						if(g_nemesis[id2])
						{
							id2 = 0;
							continue;
						}
						
						zombieMe(id2, .nemesis = 1);
					}
				}
				
				if(g_isconnected[id3]) zombieMe(id3, .nemesis = 1);
				else
				{
					id3 = 0;
					while(!id3)
					{
						id3 = getBetterRandomAlive();
						
						if(g_nemesis[id3])
						{
							id3 = 0;
							continue;
						}
						
						zombieMe(id3, .nemesis = 1);
					}
				}
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_nemesis[i])
					continue;
				
				//buyTerciaryWeapon(i, g_weapon_terciary[i]);
				
				set_user_health(i, random_num(500, 1000));
				g_health[i] = get_user_health(i);
				
				if(getUserTeam(i) != FM_CS_TEAM_CT)
				{
					remove_task(i + TASK_TEAM);
					
					setUserTeam(i, FM_CS_TEAM_CT);
					userTeamUpdate(i);
				}
			}
			
			set_hudmessage(255, 0, 255, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ SYNAPSIS !");
		}
		case MODE_GRUNT:
		{
			g_lights[0] = 'a';
			set_lights(g_lights[0]);
			
			set_cvar_num("pbk_afk_time", 9999);
			set_cvar_num("sv_alltalk", 0);
			
			if(id == 0)
				id = getBetterRandomAlive();
			
			g_mode[MODE_GRUNT] = 1;
			
			if(random_num(0, 1))
			{
				static iGruntsName[2][32];
				static iGrunts;
				
				iGrunts = 0;
				
				while(iGrunts < 2)
				{
					id = getBetterRandomAlive();
					
					if(g_grunt[id])
						continue;
					
					zombieMe(id, .grunt = 1);
					
					set_task(10.0, "removeScreenFade__Grunt", id);
					
					copy(iGruntsName[iGrunts], 31, g_playername[id]);
					
					++iGrunts;
				}
				
				g_grunt_reward_global = 11111;
				
				for(i = 1; i <= g_maxplayers; ++i)
				{
					if(!g_isalive[i])
						continue;
					
					strip_user_weapons(i);
					
					set_task(0.1, "gruntAiming__Elite", i);
					
					if(g_grunt[i])
					{
						g_grunt_reward[i] = 20000000;
						continue;
					}
					
					if(getUserTeam(i) != FM_CS_TEAM_CT)
					{
						remove_task(i + TASK_TEAM);
						
						setUserTeam(i, FM_CS_TEAM_CT);
						userTeamUpdate(i);
					}
					
					if(isUserStuck(i))
						randomSpawn(i);
				}
				
				g_grunt_nodamage = 1;
				
				set_hudmessage(255, 0, 0, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
				ShowSyncHudMsg(0, g_Hud, "¡ %s y %s SON GRUNTS !^n^n¡NO HAGAS CONTACTO VISUAL!^n¡CON LINTERNA PRENDIDA GANÁS MÁS!^n¡ESCONDETE!^n^n", iGruntsName[0], iGruntsName[1]);
			}
			else
			{
				if(id == 0)
					id = getBetterRandomAlive();
				
				zombieMe(id, .grunt = 1);
				
				g_grunt_reward_global = 11111;
				
				for(i = 1; i <= g_maxplayers; ++i)
				{
					if(!g_isalive[i])
						continue;
					
					strip_user_weapons(i);
					
					set_task(0.1, "gruntAiming", i);
					
					if(g_grunt[i])
					{
						g_grunt_reward[i] = 20000000;
						continue;
					}
					
					if(getUserTeam(i) != FM_CS_TEAM_CT)
					{
						remove_task(i + TASK_TEAM);
						
						setUserTeam(i, FM_CS_TEAM_CT);
						userTeamUpdate(i);
					}
					
					if(isUserStuck(i))
						randomSpawn(i);
				}
				
				g_grunt_nodamage = 1;
				set_task(10.0, "removeScreenFade__Grunt", id);
				
				set_hudmessage(255, 0, 0, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
				ShowSyncHudMsg(0, g_Hud, "¡ %s ES UN GRUNT !^n^n¡NO HAGAS CONTACTO VISUAL!^n¡CON LINTERNA PRENDIDA GANÁS MÁS!^n¡ESCONDETE!^n^n", g_playername[id]);
			}
			
			playSound(0, g_sound_grunt_mode);
			
			showMessageMode(mode);
			
			return;
		}
		case MODE_GAMINGA: {
			g_lights[0] = 'a';
			
			g_mode[MODE_GAMINGA] = 1;
			
			if(!getAliveTs()) {
				id = getRandomAlive(random_num(1, iPlayersnum));
				
				remove_task(id + TASK_TEAM);
				
				setUserTeam(id, FM_CS_TEAM_T);
				userTeamUpdate(id);
			}
			else if(!getAliveCTs()) {
				id = getRandomAlive(random_num(1, iPlayersnum));
				
				remove_task(id + TASK_TEAM);
				
				setUserTeam(id, FM_CS_TEAM_CT);
				userTeamUpdate(id);
			}
			
			new iNemesis;
			iNemesis = 0;
			
			while(iNemesis < 4) {
				id = getBetterRandomAlive();
				
				if(g_nemesis[id]) {
					continue;
				}
				
				zombieMe(id, .nemesis = 1);
				
				++iNemesis;
			}
			
			new iSurv;
			iSurv = 0;
			
			while(iSurv < 4) {
				id = getBetterRandomAlive();
				
				if(g_nemesis[id]) {
					continue;
				}
				
				if(g_survivor[id]) {
					continue;
				}
				
				if(g_sniper[id]) {
					continue;
				}
				
				if(g_jason[id]) {
					continue;
				}
				
				if(iSurv == 0) {
					humanMe(id, .survivor = 1);
				} else if(iSurv == 1) {
					humanMe(id, .sniper = 1);
				} else if(iSurv == 2) {
					humanMe(id, .sniper = 2);
				} else if(iSurv == 3) {
					humanMe(id, .jason = 1);
				}
				
				++iSurv;
			}
			
			for(id = 1; id <= g_maxplayers; ++id)
			{
				if(!g_isalive[id])
					continue;
				
				if(getUserTeam(id) != FM_CS_TEAM_T)
				{
					set_user_health(id, 6500);
					g_health[id] = 6500;
					
					g_unlimited_clip[id] = 1;
					
					continue;
				}
				
				if(g_nemesis[id])
					continue;
				
				zombieMe(id, .silentmode = 1);
				
				set_user_health(id, 5000000);
				g_health[id] = 5000000;
			}
			
			set_dhudmessage(random_num(50, 255), random_num(50, 255), random_num(50, 255), -1.0, 0.2, 1, 0.0, 5.0, 1.0, 1.0);
			show_dhudmessage(0, "¡MODO GAM!NGA!");
		}
		case MODE_ANNIHILATOR:
		{
			g_lights[0] = 'a';
			
			if(id == 0)
				id = getBetterRandomAlive();
			
			g_mode[MODE_ANNIHILATOR] = 1;
			
			zombieMe(id, .annihilator = 1);
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_only_modes > 1) {
					randomSpawn(i)
				}
				
				if(g_annihilator[i])
					continue;
				
				/*hamStripWeapons(i, "weapon_hegrenade");
				hamStripWeapons(i, "weapon_flashbang");
				hamStripWeapons(i, "weapon_smokegrenade");*/
				
				if(getUserTeam(i) != FM_CS_TEAM_CT)
				{
					remove_task(i + TASK_TEAM);
					
					setUserTeam(i, FM_CS_TEAM_CT);
					userTeamUpdate(i);
				}
			}
			
			set_hudmessage(255, 165, 0, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ %s ES UN ANIQUILADOR !", g_playername[id]);
		}
		case MODE_ALVSPRED:
		{
			g_lights[0] = 'a';
			
			g_mode[MODE_ALVSPRED] = 1;
			
			if(!getAliveTs())
			{
				id = getRandomAlive(random_num(1, iPlayersnum));
				
				remove_task(id + TASK_TEAM);
				
				setUserTeam(id, FM_CS_TEAM_T);
				userTeamUpdate(id);
			}
			else if(!getAliveCTs())
			{
				id = getRandomAlive(random_num(1, iPlayersnum));
				
				remove_task(id + TASK_TEAM);
				
				setUserTeam(id, FM_CS_TEAM_CT);
				userTeamUpdate(id);
			}
			
			static iUsersName[2][32];
			
			if(!id)
			{
				static iMonsters;
				iMonsters = 0;
				
				while(iMonsters < 2)
				{
					id = getBetterRandomAlive();
					
					if(g_alien[id])
						continue;
					
					if(!iMonsters)
					{
						zombieMe(id, .alien = 1);
						copy(iUsersName[0], 31, g_playername[id]);
					}
					else
					{
						humanMe(id, .predator = 1);
						copy(iUsersName[1], 31, g_playername[id]);
					}
					
					++iMonsters;
				}
			}
			else
			{
				if(g_isconnected[id])
				{
					zombieMe(id, .alien = 1);
					copy(iUsersName[0], 31, g_playername[id]);
				}
				else
				{
					id = 0;
					while(!id)
					{
						id = getBetterRandomAlive();
						
						if(g_alien[id])
						{
							id = 0;
							continue;
						}
						
						zombieMe(id, .alien = 1);
					}
				}
				
				if(g_isconnected[id2])
				{
					humanMe(id2, .predator = 1);
					copy(iUsersName[1], 31, g_playername[id2]);
				}
				else
				{
					id2 = 0;
					while(!id2)
					{
						id2 = getBetterRandomAlive();
						
						if(g_alien[id2])
						{
							id2 = 0;
							continue;
						}
						
						humanMe(id2, .predator = 1);
					}
				}
			}
			
			for(id = 1; id <= g_maxplayers; ++id)
			{
				if(!g_isalive[id])
					continue;
				
				if(getUserTeam(id) != FM_CS_TEAM_T)
				{
					if(!g_predator[id])
					{
						set_user_health(id, random_num(350, 1000));
						g_health[id] = get_user_health(id);
						
						if(g_weapon_auto[id])
							buyTerciaryWeapon(id, g_weapon_terciary[id]);
					}
					
					continue;
				}
				
				if(g_alien[id])
					continue;
				
				zombieMe(id, .silentmode = 1);
			}
			
			set_hudmessage(255, 255, 0, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ ALIEN vs DEPREDADOR !^nALIEN: %s^nDEPREDADOR: %s", iUsersName[0], iUsersName[1]);
		}
		case MODE_SNIPER:
		{
			g_lights[0] = 'a';
			
			g_mode[MODE_SNIPER] = 1;
			
			if(!id)
			{
				static iSnipers;
				iSnipers = 0;
				
				while(iSnipers < 4)
				{
					id = getBetterRandomAlive();
					
					if(g_sniper[id])
						continue;
					
					++iSnipers;
					
					humanMe(id, .sniper = iSnipers);
				}
				
			}
			else
			{
				if(g_isconnected[id]) humanMe(id, .sniper = 1);
				else
				{
					id = 0;
					while(!id)
					{
						id = getBetterRandomAlive();
						
						if(g_sniper[id])
						{
							id = 0;
							continue;
						}
						
						humanMe(id, .sniper = 1);
					}
				}
				
				if(g_isconnected[id2]) humanMe(id2, .sniper = 2);
				else
				{
					id2 = 0;
					while(!id2)
					{
						id2 = getBetterRandomAlive();
						
						if(g_sniper[id2])
						{
							id2 = 0;
							continue;
						}
						
						humanMe(id2, .sniper = 2);
					}
				}
				
				if(g_isconnected[id3]) humanMe(id3, .sniper = 3);
				else
				{
					id3 = 0;
					while(!id3)
					{
						id3 = getBetterRandomAlive();
						
						if(g_sniper[id3])
						{
							id3 = 0;
							continue;
						}
						
						humanMe(id3, .sniper = 3);
					}
				}
				
				if(g_isconnected[id4]) humanMe(id4, .sniper = 4);
				else
				{
					id4 = 0;
					while(!id4)
					{
						id4 = getBetterRandomAlive();
						
						if(g_sniper[id4])
						{
							id4 = 0;
							continue;
						}
						
						humanMe(id4, .sniper = 4);
					}
				}
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_sniper[i] || g_zombie[i])
					continue;
				
				zombieMe(i, .silentmode = 1);
			}
			
			set_hudmessage(0, 255, 155, -1.0, 0.25, 1, 3.0, 7.0, 7.0, 3.0, -1);
			ShowSyncHudMsg(0, g_Hud, "¡ SNIPER !");
		}
		case MODE_DUEL_FINAL:
		{
			g_lights[0] = 'i';
			set_lights(g_lights[0]);
			
			g_mode[MODE_DUEL_FINAL] = 1;
			
			g_duel_final_first = 0;
			
			g_duel_final = TODOS;
			
			#if defined USE_ORPHEU
				state disabled;
				game_enableForwards();
			#endif
			
			new iRand = random_num(1, 3);
			if(!g_duel_final_modeN)
			{
				switch(iRand)
				{
					case 1: formatex(g_duel_final_mode, 14, "");
					case 2: formatex(g_duel_final_mode, 14, " de AWP");
					case 3: formatex(g_duel_final_mode, 14, " de HE");
				}
				
				g_duel_final_modeN = iRand;
			}
			else
			{
				switch(g_duel_final_modeN)
				{
					case 1: formatex(g_duel_final_mode, 14, "");
					case 2: formatex(g_duel_final_mode, 14, " de AWP");
					case 3: formatex(g_duel_final_mode, 14, " de HE");
				}
			}
			
			if(!getAliveTs())
			{
				id = getRandomAlive(random_num(1, iPlayersnum));
				
				remove_task(id + TASK_TEAM);
				
				setUserTeam(id, FM_CS_TEAM_T);
				userTeamUpdate(id);
			}
			else if(!getAliveCTs())
			{
				id = getRandomAlive(random_num(1, iPlayersnum));
				
				remove_task(id + TASK_TEAM);
				
				setUserTeam(id, FM_CS_TEAM_CT);
				userTeamUpdate(id);
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				g_duel_final_kills_total[i] = 0;
				
				if(!g_isalive[i])
					continue;
				
				set_user_health(i, 100);
				set_user_armor(i, 0);
				set_user_gravity(i, 1.0);
				g_human_speed[i] = 240.0;
				
				strip_user_weapons(i);
				
				g_weapon_primary_actual[i] = 0;
				g_weapon_secondary_actual[i] = 0;
				
				switch(g_duel_final_modeN)
				{
					case 1: give_item(i, "weapon_knife");
					case 2:
					{
						give_item(i, "weapon_awp");
						cs_set_user_bpammo(i, CSW_AWP, 30);
					}
					case 3:
					{
						give_item(i, "weapon_hegrenade");
						cs_set_user_bpammo(i, CSW_HEGRENADE, 100);
					}
				}
				
				if(isUserStuck(i))
					randomSpawn(i);
			}
			
			playSound(0, g_sound_warning);
			
			showMessageMode(mode);
			
			set_dhudmessage(random_num(50, 255), random_num(50, 255), random_num(50, 255), -1.0, 0.2, 0, 0.0, 5.0, 1.0, 1.0);
			show_dhudmessage(0, "¡DUELO FINAL%s!", g_duel_final_mode);
			
			return;
		}
		case MODE_ARMAGEDDON:
		{
			g_lights[0] = 'a';
			set_lights(g_lights[0]);
			
			g_mode[MODE_ARMAGEDDON] = 1;
			
			set_cvar_num("pbk_afk_time", 9999);
			
			if(!getAliveTs())
			{
				id = getRandomAlive(random_num(1, iPlayersnum));
				
				remove_task(id + TASK_TEAM);
				
				setUserTeam(id, FM_CS_TEAM_T);
				userTeamUpdate(id);
			}
			else if(!getAliveCTs())
			{
				id = getRandomAlive(random_num(1, iPlayersnum));
				
				remove_task(id + TASK_TEAM);
				
				setUserTeam(id, FM_CS_TEAM_CT);
				userTeamUpdate(id);
			}
			
			set_task(0.1, "introArmageddonStart");
			set_task(1.0, "introArmageddonTeams");
			set_task(9.45, "introArmageddonEnd");
			
			return;
		}
	}
	
	playSound(0, g_sound_modes[random_num(0, charsmax(g_sound_modes))]);
	
	set_lights(g_lights[0]);
	
	showMessageMode(mode);
}

zombieMe(const id, attacker = 0, nemesis = 0, cabezon = 0, silentmode = 0, alien = 0, annihilator = 0, grunt = 0, cortarcombo = 0) // zm_f
{
	if(!g_isalive[id])
		return;
	
	remove_task(id + TASK_MODEL);
	remove_task(id + TASK_BLOOD);
	remove_task(id + TASK_AURA);
	remove_task(id + TASK_BURN);
	
	if(g_nodamage[attacker]) {
		randomSpawn(id);
		colorChat(id, _, "%sHas sido teletransportado porque te infectó un zombie bajo los efectos de la furia!", ZP_PREFIX);
	} else if(isUserStuck(id)) {
		randomSpawn(id);
		colorChat(id, _, "%sHas sido teletransportado debido a que te habías trabado con un humano", ZP_PREFIX);
	}
	
	if(cortarcombo && g_guild[id] && g_combo_guild[g_guild_id[id]])
	{
		new i;
		new j = 0;
		new iReward;
		
		for(i = 0; i < 5; ++i)
		{
			if(!g_isalive[g_guild_ids[id][i]])
				continue;
			
			if(g_zombie[g_guild_ids[id][i]])
				continue;
			
			if(task_exists(g_guild_ids[id][i] + TASK_FINISHCOMBO_GUILD) && g_combo_ok[g_guild_ids[id][i]])
			{
				++j;
				remove_task(g_guild_ids[id][i] + TASK_FINISHCOMBO_GUILD);
			}
			
			colorChat(g_guild_ids[id][i], TERRORIST, "%sEl combo ha finalizado porque infectaron a !t%s!y", ZP_PREFIX_GUILD, g_playername[id]);
		}
		
		if(j != 0)
		{
			iReward = g_combo_guild[g_guild_id[id]] / j;
			
			if(iReward > 0)
			{
				if(j != 1)
				{
					new k = 0;
					new l = 0;
					
					if(g_combo_guild[g_guild_id[id]] > g_combo_max_guild[g_guild_id[id]][j])
					{
						l = g_combo_max_guild[g_guild_id[id]][j];
						g_combo_max_guild[g_guild_id[id]][j] = g_combo_guild[g_guild_id[id]];
						k = 1;
					}
					
					for(i = 0; i < 5; ++i)
					{
						if(k && g_isconnected[g_guild_ids[id][i]])
							colorChat(g_guild_ids[id][i], CT, "%sHan superado su viejo mejor combo de !gx%d!t [%d HM]!y por el recién hecho de !gx%d!t [%d HM]!y", ZP_PREFIX_GUILD, l, j, g_combo_max_guild[g_guild_id[id]][j], j);
						
						if(!g_isalive[g_guild_ids[id][i]])
							continue;
						
						if(g_zombie[g_guild_ids[id][i]])
							continue;
						
						if(j == 4)
							g_combo_guild[g_guild_id[id]] = 0;
							
						addXp(g_guild_ids[id][i], iReward, 0);
						
						if(g_level_total[g_guild_ids[id][i]] >= 100)
						{
							g_guild_exp[g_guild_id[g_guild_ids[id][i]]] += iReward;
							
							if(g_guild_exp[g_guild_id[g_guild_ids[id][i]]] >= GUILD_EXP_LEVEL[g_guild_level[g_guild_id[g_guild_ids[id][i]]]] && g_guild_level[g_guild_id[g_guild_ids[id][i]]] != MAX_LEVEL_GUILD)
							{
								++g_guild_level[g_guild_id[g_guild_ids[id][i]]];
								colorChat(0, CT, "%sLa hermandad !t%s!y subió al nivel !g%d!y", ZP_PREFIX, g_guild_name[g_guild_id[g_guild_ids[id][i]]], g_guild_level[g_guild_id[g_guild_ids[id][i]]]);
							}
						}
						
						static sReward[11];
						addDot(iReward, sReward, 10);
						
						set_hudmessage(0, 255, 0, g_hud_position[g_guild_ids[id][i]][POSITION_HUDGUILD][0], g_hud_position[g_guild_ids[id][i]][POSITION_HUDGUILD][1], g_hudcombo_effect[g_guild_ids[id][i]], 0.0, 8.0, 0.0, 0.0, -1);
						ShowSyncHudMsg(g_guild_ids[id][i], g_Hud_ComboGuild, "%s | Ganaste %s de EXP", g_guild_name[g_guild_id[g_guild_ids[id][i]]], sReward);
					}
				}
				else
				{
					for(i = 0; i < 5; ++i)
					{
						if(!g_isalive[g_guild_ids[id][i]])
							continue;
						
						if(g_zombie[g_guild_ids[id][i]])
							continue;
						
						set_hudmessage(0, 255, 0, -1.0, 0.8, g_hudcombo_effect[g_guild_ids[id][i]], 0.0, 8.0, 0.0, 0.0, -1);
						ShowSyncHudMsg(g_guild_ids[id][i], g_Hud_ComboGuild, "COMBO %s DESACTIVADO^nSE NECESITA 2+ HUMANOS VIVOS", g_guild_name[g_guild_id[g_guild_ids[id][i]]]);
					}
				}
			}
		}
	}
	
	g_zombie_class[id] = g_zombie_class_next[id];
	g_special_mode[id] = MODE_NONE;
	g_burning_nitro_duration[id] = 0;
	g_burning_duration[id] = 0;
	g_firstzombie[id] = 0;
	g_annihilator[id] = 0;
	g_survivor[id] = 0;
	g_nodamage[id] = 0;
	g_predator[id] = 0;
	g_cabezon[id] = 0;
	g_nemesis[id] = 0;
	g_wesker[id] = 0;
	g_zombie[id] = 1;
	g_sniper[id] = 0;
	g_jason[id] = 0;
	g_alien[id] = 0;
	
	set_user_rendering(id);
	
	if(attacker)
	{
		g_kill_sound_id = -1;
		g_kill_sound = 0;
		remove_task(TASK_SOUND_LOL);
		
		++g_stats[attacker][INFECTS_D];
		++g_stats[id][INFECTS_T];
		
		++g_eegg_infects_map[attacker];
		++g_eegg_infects_round[attacker];
		
		g_FirstInfect = 1;
		
		/*if(g_level[attacker] >= 1000)
			++g_level_hardcore[attacker][1];*/
		
		if(!silentmode)
		{
			if(!task_exists(attacker + TASK_INFECT_1_MINUTE))
			{
				g_logros_stats[attacker][INFECT_ONE_MINUTE] = 0;
				set_task(60.0, "infectOneMinute", attacker + TASK_INFECT_1_MINUTE);
			}
			
			if(g_combo_zombie_ok[attacker])
			{
				++g_combo_zombie_infects[attacker];
				
				showCurrentCombo__Zombie(attacker);
				
				remove_task(attacker + TASK_FINISHCOMBO_ZOMBIE);
				set_task(15.0, "finishCombo__Zombie", attacker + TASK_FINISHCOMBO_ZOMBIE);
			}
			
			++g_logros_stats[attacker][ZOMBIE_KILLS_IN_ROUND];
			++g_logros_stats[attacker][INFECT_ONE_MINUTE];
			
			if(g_logros_stats[attacker][ZOMBIE_KILLS_IN_ROUND] == 10)
				setAchievement(attacker, ME_ESTA_GUSTANDO_ESTO);
			if(g_logros_stats[attacker][ZOMBIE_KILLS_IN_ROUND] == 20)
				setAchievement(attacker, PRO_ZOMBIE);
			
			if(!g_logros[attacker][INFECCION_QUEMADA] && (g_burning_duration[attacker] || g_burning_nitro_duration[attacker]))
			{
				++g_logros_stats[attacker][COUNT_INFECT_BURNING];
				
				if(g_logros_stats[attacker][COUNT_INFECT_BURNING] == 25)
					setAchievement(attacker, INFECCION_QUEMADA);
			}
			
			if(g_nodamage[attacker])
			{
				++g_logros_stats[attacker][COUNT_INFECT_FURIA];
				
				if(!g_logros[attacker][YO_FUI])
				{
					++g_logros_stats[attacker][ZOMBIE_KILLS_WITH_FURY];
					
					if(g_logros_stats[attacker][ZOMBIE_KILLS_WITH_FURY] == 15 && g_madness_count[attacker] <= 2)
						setAchievement(attacker, YO_FUI);
				}
			}
			/*else if(g_madness_bomb_count[attacker])
			{
				++g_logros_stats[attacker][INFECT_WITH_MADNESS];
				
				if(g_logros_stats[attacker][INFECT_WITH_MADNESS] >= 10)
				{
					setAchievement(attacker, Y_ESO_HACE_ALGO);
					if(g_logros_stats[attacker][INFECT_WITH_MADNESS] >= 15)
					{
						setAchievement(attacker, ESA_LOCURA_NO_HACE_NADA);
						if(g_logros_stats[attacker][INFECT_WITH_MADNESS] >= 20)
							setAchievement(attacker, YO_QUE_VOS_USO_HIELO);
					}
				}
			}*/
			else if(g_health[attacker] == g_logros_stats[attacker][ZOMBIE_HEALTH])
			{
				++g_logros_stats[attacker][ZOMBIE_KILLS_WITHOUT_FURY];
				
				if(g_logros_stats[attacker][ZOMBIE_KILLS_WITHOUT_FURY] == 5)
					setAchievement(attacker, YO_NO_FUI);
			}
		}
		
		if(getPlaying() >= 15)
		{
			++g_logros_stats[attacker][INFECT_HUMANS_IN_ROUND];
			
			if(g_logros_stats[attacker][KILL_ZOMBIES_IN_ROUND] == 10 && g_logros_stats[attacker][INFECT_HUMANS_IN_ROUND] == 10)
				setAchievement(attacker, MERCENARIO);
		}
		
		g_logros_stats[id][SIN_INFECTAR] = 1;
		g_logros_stats[id][RONDAS_SIN_INFECTAR] = 0;
		
		if(g_stats[attacker][INFECTS_D] == 1000)
			setAchievement(attacker, HUMANOS_1000);
		else if(g_stats[attacker][INFECTS_D] == 2500)
			setAchievement(attacker, HUMANOS_2500);
		else if(!(g_stats[attacker][INFECTS_D] % 5000))
		{
			switch(g_stats[attacker][INFECTS_D])
			{
				case 5000: setAchievement(attacker, HUMANOS_5000);
				case 10000: setAchievement(attacker, HUMANOS_10000);
				case 20000: setAchievement(attacker, HUMANOS_20000);
				case 50000: setAchievement(attacker, HUMANOS_50000);
				case 100000: setAchievement(attacker, HUMANOS_100000);
				case 500000: setAchievement(attacker, HUMANOS_500000);
				case 1000000: setAchievement(attacker, HUMANOS_1000000);
			}
		}
		
		if(g_in_duelo_official[attacker] && g_mode[MODE_INFECTION])
		{
			++g_duelo_stats[attacker][DUELO_HUM_INF_ROUND];
			++g_duelo_stats[attacker][DUELO_HUM_INF_MAP];
		}
		
		addXp(attacker, clamp((random_num(1, 10) * g_level[attacker]), 1, MAX_EXP_PER_INFECT), 0);
		
		sendDeathMsg(attacker, id);
		fixDeadAttrib(id);
	}
	
	if(task_exists(id + TASK_FINISHCOMBO))
		change_task(id + TASK_FINISHCOMBO, 0.1);
	
	copy(g_classname[id], charsmax(g_classname[]), CLASES_ZOMBIE[g_zombie_class[id]][zombieName]);
	g_zombie_speed[id] = AMOUNT_SPEED_ZOMBIE(id);
	
	cs_set_user_zoom(id, CS_RESET_ZOOM, 1);
	set_user_armor(id, 0);
	
	dropWeapons(id, 1);
	dropWeapons(id, 2);
	
	strip_user_weapons(id);
	
	g_weapon_primary_actual[id] = 0;
	g_weapon_secondary_actual[id] = 0;
	
	if(!g_no_buy || g_kiske[id])
		give_item(id, "weapon_knife");
	
	if(!silentmode)
	{
		if(nemesis)
		{
			g_nemesis[id] = 1;
			g_special_mode[id] = MODE_NEMESIS;
			
			g_longjump[id] = 1;
			give_item(id, "item_longjump");
			
			if(!g_mode[MODE_ARMAGEDDON] && !g_mode[MODE_PLAGUE] && !g_mode[MODE_SYNAPSIS] && !g_mode[MODE_GAMINGA])
			{
				g_bazooka[id] = 15;
				give_item(id, "weapon_ak47");
				
				cs_set_user_bpammo(id, CSW_AK47, 0);
				cs_set_weapon_ammo(fm_find_ent_by_owner(-1, "weapon_ak47", id), 0);
			}
			
			g_currentweapon[id] = CSW_KNIFE;
			engclient_cmd(id, "weapon_knife");
			
			static iHealth;
			static Float:fGravity;
			
			iHealth = (15000 * getAlive()) + (g_hab[id][HAB_HEALTH][CLASS_NEMESIS] * 150000); // HAB_HEALTH = ESTADÍSTICAS BASE en Nemesis!
			fGravity = 0.5 - ((float(g_hab[id][HAB_HEALTH][CLASS_NEMESIS]) * 10.0) / 800.0); // HAB_HEALTH = ESTADÍSTICAS BASE en Nemesis!
			g_zombie_speed[id] = 260.0 + (float(g_hab[id][HAB_HEALTH][CLASS_NEMESIS]) * 2.0); // HAB_HEALTH = ESTADÍSTICAS BASE en Nemesis!
			
			if(!g_mode[MODE_ARMAGEDDON] && !g_mode[MODE_PLAGUE] && !g_mode[MODE_SYNAPSIS] && !g_mode[MODE_GAMINGA])
			{
				colorChat(id, _, "%sRecordá que !gtenés una bazooka!y, para seleccionarla !gpresioná el 1!y", ZP_PREFIX);
				
				if(g_dificult[id][CLASS_NEMESIS] > DIF_NORMAL)
				{
					switch(g_dificult[id][CLASS_NEMESIS])
					{
						case DIF_DIFICIL:
						{
							iHealth /= 2;
							fGravity += (fGravity * 10.0) / 100.0;
							g_zombie_speed[id] -= (g_zombie_speed[id] * 10.0) / 100.0;
						}
						case DIF_MUY_DIFICIL:
						{
							iHealth /= 3;
							fGravity += (fGravity * 25.0) / 100.0;
							g_zombie_speed[id] -= (g_zombie_speed[id] * 25.0) / 100.0;
							
							g_longjump[id] = 0;
						}
					}
				}
			}
			
			if(g_mode[MODE_GAMINGA]) {
				iHealth *= 2;
			}
			
			set_user_health(id, iHealth);
			set_user_gravity(id, fGravity);
			
			g_health[id] = iHealth;
			g_HealthTotal[id] = iHealth;
			
			ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
			
			set_user_rendering(id, kRenderFxGlowShell, 255, 0, 0, kRenderNormal, 25);
			
			copy(g_classname[id], charsmax(g_classname[]), "NEMESIS");
			
			set_task(0.1, "zombieAura", id + TASK_AURA, _, _, "b");
			
			replaceWeaponModels(id, CSW_KNIFE);
		}
		else if(cabezon)
		{
			g_cabezon[id] = 1;
			g_cabezon_power[id] = 0;
			g_special_mode[id] = MODE_CABEZON;
			
			strip_user_weapons(id);
			
			colorChat(id, _, "%sRecordá que !gapretando la G!y mientras estas sobre el suelo lanzás tu poder", ZP_PREFIX);
			
			static iHealth;
			iHealth = 13370000;
			
			g_zombie_speed[id] = 250.0;
			
			set_user_health(id, iHealth);
			set_user_gravity(id, 0.8);
			
			g_health[id] = iHealth;
			g_HealthTotal[id] = iHealth;
			
			ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
			
			set_user_rendering(id, kRenderFxGlowShell, 255, 255, 255, kRenderNormal, 25);
			
			set_task(0.1, "hideHUDs__Full", id + TASK_SPAWN);
			
			set_task(0.1, "cabezonAura", id + TASK_AURA, _, _, "b");
			
			copy(g_classname[id], charsmax(g_classname[]), "CABEZÓN");
		}
		else if(alien)
		{
			g_alien[id] = 1;
			g_alien_power[id] = 0;
			g_special_mode[id] = MODE_ALVSPRED;
			
			colorChat(id, _, "%sRecordá que !gapretando la G!y lanzás tu poder", ZP_PREFIX);
			colorChat(id, _, "%sRecordá que !gpresionando la E!y podés escalar las paredes", ZP_PREFIX);
			
			static iHealth;
			iHealth = 50000 + (750 * (getPlaying() + g_level_total[id]));
			
			g_zombie_speed[id] = 400.0;
			
			set_user_health(id, iHealth);
			set_user_gravity(id, 0.75);
			
			g_health[id] = iHealth;
			g_HealthTotal[id] = iHealth;
			
			g_logros_stats[id][ALIEN_HEALTH] = (iHealth * 70) / 100;
			
			g_currentweapon[id] = CSW_KNIFE;
			engclient_cmd(id, "weapon_knife");
			
			ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
			
			copy(g_classname[id], charsmax(g_classname[]), "ALIEN");
			
			replaceWeaponModels(id, CSW_KNIFE);
		}
		else if(annihilator)
		{
			g_annihilator[id] = 1;
			g_annihilator_kills[id] = 0;
			g_special_mode[id] = MODE_ANNIHILATOR;
			
			g_longjump[id] = 1;
			give_item(id, "item_longjump");
			
			colorChat(id, _, "%sRecordá que tenés una !gMAC-10!y y !g5 BAZOOKAS!y", ZP_PREFIX);
			
			static iHealth;
			iHealth = 3000000;
			
			g_zombie_speed[id] = 320.0;
			
			set_user_health(id, iHealth);
			set_user_gravity(id, 0.6);
			
			g_health[id] = iHealth;
			g_HealthTotal[id] = iHealth;
			
			g_bazooka[id] = 75;
			give_item(id, "weapon_ak47");
			
			cs_set_user_bpammo(id, CSW_AK47, 0);
			cs_set_weapon_ammo(fm_find_ent_by_owner(-1, "weapon_ak47", id), 0);
			
			give_item(id, "weapon_mac10");
			ExecuteHamB(Ham_GiveAmmo, id, MAXBPAMMO[CSW_MAC10], AMMOTYPE[CSW_MAC10], MAXBPAMMO[CSW_MAC10]);
			
			g_currentweapon[id] = CSW_KNIFE;
			engclient_cmd(id, "weapon_knife");
			
			ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
			
			set_user_rendering(id, kRenderFxGlowShell, 255, 165, 0, kRenderNormal, 25);
			
			set_task(0.1, "annihilatorAura", id + TASK_AURA, _, _, "b");
			
			copy(g_classname[id], charsmax(g_classname[]), "ANIQUILADOR");
			
			replaceWeaponModels(id, CSW_KNIFE);
		}
		else if(grunt)
		{
			g_grunt[id] = 1;
			g_special_mode[id] = MODE_GRUNT;
			
			g_grunt_power = 0;
			
			g_zombie_speed[id] = 280.0;
			
			set_user_health(id, 100000);
			set_user_gravity(id, 0.5);
			
			g_health[id] = 100000;
			g_HealthTotal[id] = 100000;
			
			strip_user_weapons(id);
			
			ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
			
			copy(g_classname[id], charsmax(g_classname[]), "GRUNT");
			
			//set_user_rendering(id, kRenderFxGlowShell, 255, 0, 0, kRenderNormal, 25);
			
			message_begin(MSG_ONE, g_message_screenfade, _, id);
			write_short(0);
			write_short(0);
			write_short(FFADE_STAYOUT);
			write_byte(0);
			write_byte(0);
			write_byte(0);
			write_byte(255);
			message_end();
			
			set_task(0.1, "gruntAura", id + TASK_AURA, _, _, "b");
		}
		else if(getZombies() == 1)
		{
			static iHealth;
			iHealth = AMOUNT_HEALTH_ZOMBIE(id) * 2;
			
			g_firstzombie[id] = 1;
			
			g_longjump[id] = 1;
			give_item(id, "item_longjump");
			
			if(g_mode[MODE_INFECTION] || g_mode[MODE_MULTI]) {
				if(iHealth > 350000) set_user_health(id, iHealth);
				else set_user_health(id, 350000);
			} else {
				if(iHealth > 175000) set_user_health(id, iHealth);
				else set_user_health(id, 175000);
			}
			
			set_user_gravity(id, AMOUNT_GRAVITY_ZOMBIE(id));
			
			g_health[id] = get_user_health(id);
			g_HealthTotal[id] = g_health[id];
			
			g_logros_stats[id][ZOMBIE_KILLS_WITHOUT_FURY] = 0;
			g_logros_stats[id][ZOMBIE_HEALTH] = g_health[id];
			
			g_nodamage[id] = 1;
			
			remove_task(id + TASK_AURA);
			remove_task(id + TASK_BLOOD);
			
			set_task(0.1, "zombieAura", id + TASK_AURA, _, _, "b");
			set_task(6.0, "madnessOver", id + TASK_BLOOD);
			
			emitSound(id, CHAN_VOICE, g_sound_zombie_madness, .pitch = (random_num(50, 200)));
			
			ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
		}
		else
		{
			static iHealth;
			iHealth = AMOUNT_HEALTH_ZOMBIE(id);
			
			iHealth += (iHealth * (g_dead_health[id] * 5)) / 100;
			
			if(g_mode[MODE_INFECTION] || g_mode[MODE_MULTI]) {
				if(iHealth > 175000) set_user_health(id, iHealth);
				else set_user_health(id, 175000);
			} else {
				if(iHealth > 125000) set_user_health(id, iHealth);
				else set_user_health(id, 125000);
			}
			
			if(g_dead_health[id] > 0)
				colorChat(id, _, "%sAhora tenés !g%d%%!y más de vida hasta que finalice la ronda", ZP_PREFIX, g_dead_health[id] * 5);
			
			if(g_no_buy && !g_kiske[id])
				set_user_gravity(id, 1.0);
			else
				set_user_gravity(id, AMOUNT_GRAVITY_ZOMBIE(id));
			
			g_health[id] = get_user_health(id);
			g_HealthTotal[id] = g_health[id];
			
			g_logros_stats[id][ZOMBIE_KILLS_WITHOUT_FURY] = 0;
			g_logros_stats[id][ZOMBIE_HEALTH] = g_health[id];
			
			ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
			
			emitSound(id, CHAN_VOICE, g_sound_zombie_infect[random_num(0, charsmax(g_sound_zombie_infect))]);
		}
	}
	else
	{
		static iHealth;
		iHealth = AMOUNT_HEALTH_ZOMBIE(id);
		
		if(g_mode[MODE_INFECTION] || g_mode[MODE_MULTI]) {
			if(iHealth > 175000) set_user_health(id, iHealth);
			else set_user_health(id, 175000);
		} else {
			if(iHealth > 125000) set_user_health(id, iHealth);
			else set_user_health(id, 125000);
		}
		
		iHealth += (iHealth * (g_dead_health[id] * 5)) / 100;
		
		if(g_dead_health[id] > 0)
			colorChat(id, _, "%sAhora tenés !g%d%%!y más de vida hasta que finalice la ronda", ZP_PREFIX, g_dead_health[id] * 5);
		
		if(g_no_buy && !g_kiske[id])
			set_user_gravity(id, 1.0);
		else
			set_user_gravity(id, AMOUNT_GRAVITY_ZOMBIE(id));
		
		g_health[id] = get_user_health(id);
		g_HealthTotal[id] = g_health[id];
		
		g_logros_stats[id][ZOMBIE_KILLS_WITHOUT_FURY] = 0;
		g_logros_stats[id][ZOMBIE_HEALTH] = g_health[id];
		
		ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
	}
	
	if(getUserTeam(id) != FM_CS_TEAM_T)
	{
		remove_task(id + TASK_TEAM);
		
		setUserTeam(id, FM_CS_TEAM_T);
		userTeamUpdate(id);
	}
	
	static sCurrentModel[32];
	static iAlreadyHasModel;
	
	iAlreadyHasModel = 0;
	
	getUserModel(id, sCurrentModel, charsmax(sCurrentModel));
	
	if(g_nemesis[id])
	{
		if(equal(sCurrentModel, MODEL_NEMESIS[g_dificult[id][CLASS_NEMESIS]]))
			iAlreadyHasModel = 1;
		
		if(!iAlreadyHasModel)
			copy(g_playermodel[id], charsmax(g_playermodel[]), MODEL_NEMESIS[g_dificult[id][CLASS_NEMESIS]]);
	}
	else if(g_cabezon[id])
	{
		if(equal(sCurrentModel, MODEL_CABEZON))
			iAlreadyHasModel = 1;
		
		if(!iAlreadyHasModel)
			copy(g_playermodel[id], charsmax(g_playermodel[]), MODEL_CABEZON);
	}
	else if(g_alien[id])
	{
		if(equal(sCurrentModel, MODEL_ALIEN))
			iAlreadyHasModel = 1;
		
		if(!iAlreadyHasModel)
			copy(g_playermodel[id], charsmax(g_playermodel[]), MODEL_ALIEN);
	}
	else if(g_annihilator[id])
	{
		if(equal(sCurrentModel, MODEL_ANNIHILATOR))
			iAlreadyHasModel = 1;
		
		if(!iAlreadyHasModel)
			copy(g_playermodel[id], charsmax(g_playermodel[]), MODEL_ANNIHILATOR);
	}
	else if(g_grunt[id])
	{
		if(equal(sCurrentModel, MODEL_GRUNT))
			iAlreadyHasModel = 1;
		
		if(!iAlreadyHasModel)
			copy(g_playermodel[id], charsmax(g_playermodel[]), MODEL_GRUNT);
	}
	else
	{
		if(equal(sCurrentModel, CLASES_ZOMBIE[g_zombie_class[id]][zombieModel]))
			iAlreadyHasModel = 1;
		
		if(!iAlreadyHasModel)
			copy(g_playermodel[id], charsmax(g_playermodel[]), CLASES_ZOMBIE[g_zombie_class[id]][zombieModel]);
	}
	
	if(!iAlreadyHasModel)
	{
		if(g_newround) set_task(5.0 * MODELS_CHANGE_DELAY, "userModelUpdate", id + TASK_MODEL);
		else userModelUpdate(id + TASK_MODEL);
	}
	
	remove_task(id + TASK_NVISION);
	
	if(!g_mode[MODE_GRUNT])
	{
		set_task(0.1, "infectionEffects", id);
		
		g_nvision[id] = 1;
		
		if(!g_mode[MODE_NEMESIS]) set_task(0.3, "setUserNightvision", id + TASK_NVISION, _, _, "b");
		else set_task(0.1, "setUserNightvision__Nemesis", id + TASK_NVISION, _, _, "b");
	}
	
	message_begin(MSG_ONE, g_message_fov, _, id);
	write_byte(110);
	message_end();
	
	turnOffFlashlight(id);
	
	checkLastZombie();
}

humanMe(const id, survivor = 0, wesker = 0, jason = 0, predator = 0, sniper = 0) // hm_f
{
	remove_task(id + TASK_MODEL);
	remove_task(id + TASK_BLOOD);
	remove_task(id + TASK_AURA);
	remove_task(id + TASK_BURN);
	remove_task(id + TASK_NVISION);
	
	if(task_exists(id + TASK_INFECT_1_MINUTE))
	{
		if(g_logros_stats[id][INFECT_ONE_MINUTE] >= (DESAFIOS[EL_TIEMPO_APREMIA][desafioLevel] + g_desafios[id][EL_TIEMPO_APREMIA] + (DESAFIOS[EL_TIEMPO_APREMIA][desafioLevelMult] * g_desafios[id][EL_TIEMPO_APREMIA])))
			setChallenge(id, EL_TIEMPO_APREMIA);
		
		g_logros_stats[id][INFECT_ONE_MINUTE] = 0;
		remove_task(id + TASK_INFECT_1_MINUTE);
	}
	
	/*if(isUserStuck(id))
	{
		randomSpawn(id);
		colorChat(id, _, "%sHas sido teletransportado debido a que te habías trabado con un zombie", ZP_PREFIX);
	}*/
	
	g_special_mode[id] = MODE_NONE;
	g_burning_nitro_duration[id] = 0;
	g_burning_duration[id] = 0;
	g_firstzombie[id] = 0;
	g_annihilator[id] = 0;
	g_survivor[id] = 0;
	g_nodamage[id] = 0;
	g_predator[id] = 0;
	g_cabezon[id] = 0;
	g_nemesis[id] = 0;
	g_zombie[id] = 0;
	g_wesker[id] = 0;
	g_canbuy[id] = 1;
	g_sniper[id] = 0;
	g_jason[id] = 0;
	g_alien[id] = 0;
	
	if(g_frozen[id])
	{
		remove_task(id + TASK_FROZEN);
		removeFreeze(id + TASK_FROZEN);
	}
	
	dropWeapons(id, 1);
	dropWeapons(id, 2);
	
	strip_user_weapons(id);
	
	g_weapon_primary_actual[id] = 0;
	g_weapon_secondary_actual[id] = 0;
	
	if(!g_no_buy || g_kiske[id])
		give_item(id, "weapon_knife");
	
	set_user_rendering(id);
	
	g_human_class[id] = g_human_class_next[id];
	
	static sCurrentModel[32];
	static iAlreadyHasModel;
	
	iAlreadyHasModel = 0;
	
	getUserModel(id, sCurrentModel, charsmax(sCurrentModel));
	
	if(survivor)
	{
		g_survivor[id] = 1;
		g_special_mode[id] = MODE_SURVIVOR;
		
		static iHealth;
		static Float:fGravity;
		
		iHealth = (100 * getAlive()) + (g_hab[id][HAB_HEALTH][CLASS_SURVIVOR] * 500); // HAB_HEALTH = ESTADÍSTICAS BASE en Survivor!
		fGravity = 1.0 - ((float(g_hab[id][HAB_HEALTH][CLASS_SURVIVOR]) * 10.0) / 800.0); // HAB_HEALTH = ESTADÍSTICAS BASE en Survivor!
		g_human_speed[id] = (280.0 + (float(g_hab[id][HAB_HEALTH][CLASS_SURVIVOR]) * 5.0)); // HAB_HEALTH = ESTADÍSTICAS BASE en Survivor!
		
		if(!g_mode[MODE_ARMAGEDDON] && !g_mode[MODE_GAMINGA])
		{
			if(g_dificult[id][CLASS_SURVIVOR] > DIF_NORMAL && !g_mode[MODE_PLAGUE])
			{
				switch(g_dificult[id][CLASS_SURVIVOR])
				{
					case DIF_DIFICIL:
					{
						iHealth /= 2;
						fGravity += (fGravity * 10.0) / 100.0;
						g_human_speed[id] -= (g_human_speed[id] * 10.0) / 100.0;
						
						set_task(0.1, "survivorAura", id + TASK_AURA, _, _, "b");
					}
					case DIF_MUY_DIFICIL:
					{
						iHealth /= 3;
						fGravity += (fGravity * 25.0) / 100.0;
						g_human_speed[id] -= (g_human_speed[id] * 25.0) / 100.0;
						
						set_task(0.1, "survivorAura__Mini", id + TASK_AURA, _, _, "b");
					}
				}
			}
			else
				set_task(0.1, "survivorAura", id + TASK_AURA, _, _, "b");
		}
		
		set_user_health(id, iHealth);
		set_user_gravity(id, fGravity);
		
		g_health[id] = iHealth;
		
		g_logros_stats[id][HEALTH_SURVIVOR] = iHealth;
		
		ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
		
		switch(g_hab[id][HAB_GRAVITY][CLASS_SURVIVOR]) // HAB_GRAVITY = ARMA en Survivor!
		{
			case 0:
			{
				give_item(id, "weapon_mp5navy");
				ExecuteHamB(Ham_GiveAmmo, id, MAXBPAMMO[CSW_MP5NAVY], AMMOTYPE[CSW_MP5NAVY], MAXBPAMMO[CSW_MP5NAVY]);
			}
			case 1:
			{
				give_item(id, "weapon_m249");
				ExecuteHamB(Ham_GiveAmmo, id, MAXBPAMMO[CSW_M249], AMMOTYPE[CSW_M249], MAXBPAMMO[CSW_M249]);
			}
			case 2:
			{
				give_item(id, "weapon_m4a1");
				ExecuteHamB(Ham_GiveAmmo, id, MAXBPAMMO[CSW_M4A1], AMMOTYPE[CSW_M4A1], MAXBPAMMO[CSW_M4A1]);
			}
		}
		
		if(!g_mode[MODE_ARMAGEDDON] && !g_mode[MODE_PLAGUE] && !g_mode[MODE_GAMINGA])
		{
			++g_kill_bomb[id];
			give_item(id, "weapon_hegrenade");
		}
		
		turnOffFlashlight(id);
		
		set_user_rendering(id, kRenderFxGlowShell, 0, 0, 255, kRenderNormal, 25);
		
		if(equal(sCurrentModel, MODEL_SURVIVOR[g_dificult[id][CLASS_SURVIVOR]]))
			iAlreadyHasModel = 1;
		
		if(!iAlreadyHasModel)
			copy(g_playermodel[id], charsmax(g_playermodel[]), MODEL_SURVIVOR[g_dificult[id][CLASS_SURVIVOR]]);
		
		copy(g_classname[id], charsmax(g_classname[]), "SURVIVOR");
	}
	else if(wesker)
	{
		g_wesker[id] = 1;
		g_laser[id] = 3;
		
		g_special_mode[id] = MODE_WESKER;
		
		g_logros_stats[id][WESKER_LASER_NO_KILLS] = 0;
		
		static iHealth;
		iHealth = 67 * getAlive();
		
		set_user_health(id, iHealth);
		set_user_gravity(id, 0.7);
		g_human_speed[id] = 250.0;
		
		g_health[id] = iHealth;
		
		g_logros_stats[id][WESKER_HEALTH] = iHealth;
		
		set_task(0.1, "weskerAura", id + TASK_AURA, _, _, "b");
		
		ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
		
		strip_user_weapons(id);
		give_item(id, "weapon_deagle");
		
		++g_bubble_bomb[id];
		give_item(id, "weapon_smokegrenade");
		
		turnOffFlashlight(id);
		
		set_user_rendering(id, kRenderFxGlowShell, 255, 255, 0, kRenderNormal, 25);
		
		if(equal(sCurrentModel, MODEL_WESKER))
			iAlreadyHasModel = 1;
		
		if(!iAlreadyHasModel)
			copy(g_playermodel[id], charsmax(g_playermodel[]), MODEL_WESKER);
		
		copy(g_classname[id], charsmax(g_classname[]), "WESKER");
	}
	else if(jason)
	{
		g_jason[id] = 1;
		g_special_mode[id] = MODE_JASON;
		
		static iHealth;
		iHealth = 200 * getAlive();
		
		set_user_health(id, iHealth);
		set_user_gravity(id, 1.0);
		g_human_speed[id] = 300.0;
		
		g_health[id] = iHealth;
		
		set_task(0.1, "jasonAura", id + TASK_AURA, _, _, "b");
		
		ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
		
		replaceWeaponModels(id, CSW_KNIFE);
		
		turnOffFlashlight(id);
		
		set_user_rendering(id, kRenderFxGlowShell, 255, 0, 255, kRenderNormal, 25);
		
		if(equal(sCurrentModel, MODEL_JASON))
			iAlreadyHasModel = 1;
		
		if(!iAlreadyHasModel)
			copy(g_playermodel[id], charsmax(g_playermodel[]), MODEL_JASON);
		
		copy(g_classname[id], charsmax(g_classname[]), "JASON");
	}
	else if(predator)
	{
		g_predator[id] = 1;
		g_predator_power[id] = 0;
		g_special_mode[id] = MODE_ALVSPRED;
		
		colorChat(id, _, "%sRecordá que !gapretando la G!y lanzás tu poder", ZP_PREFIX);
		
		static iHealth;
		iHealth = 200 * getAlive();
		
		set_user_health(id, iHealth);
		set_user_gravity(id, 0.6);
		
		g_human_speed[id] = 300.0;
		
		g_health[id] = iHealth;
		
		set_task(0.1, "predatorAura", id + TASK_AURA, _, _, "b");
		
		ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
		
		turnOffFlashlight(id);
		
		set_user_rendering(id, kRenderFxGlowShell, 255, 255, 0, kRenderNormal, 25);
		
		give_item(id, "weapon_m4a1");
		ExecuteHamB(Ham_GiveAmmo, id, MAXBPAMMO[CSW_M4A1], AMMOTYPE[CSW_M4A1], MAXBPAMMO[CSW_M4A1]);
		
		if(equal(sCurrentModel, MODEL_PREDATOR))
			iAlreadyHasModel = 1;
		
		if(!iAlreadyHasModel)
			copy(g_playermodel[id], charsmax(g_playermodel[]), MODEL_PREDATOR);
		
		copy(g_classname[id], charsmax(g_classname[]), "DEPREDADOR");
	}
	else if(sniper)
	{
		g_sniper[id] = 1;
		g_sniper_power[id] = 0;
		g_special_mode[id] = MODE_SNIPER;
		
		colorChat(id, _, "%sRecordá que !gapretando la G!y lanzás tu poder", ZP_PREFIX);
		
		static iHealth;
		iHealth = 50 * getAlive() * 10;
		
		set_user_health(id, iHealth);
		set_user_gravity(id, 0.6);
		
		g_human_speed[id] = 300.0;
		
		g_health[id] = iHealth;
		
		set_task(0.1, "sniperAura", id + TASK_AURA, _, _, "b");
		
		ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
		
		turnOffFlashlight(id);
		
		set_user_rendering(id, kRenderFxGlowShell, 0, 255, 0, kRenderNormal, 25);
		
		strip_user_weapons(id);
		
		if(sniper % 2)
		{
			give_item(id, "weapon_awp");
			ExecuteHamB(Ham_GiveAmmo, id, MAXBPAMMO[CSW_AWP], AMMOTYPE[CSW_AWP], MAXBPAMMO[CSW_AWP]);
		}
		else
		{
			give_item(id, "weapon_scout");
			ExecuteHamB(Ham_GiveAmmo, id, MAXBPAMMO[CSW_SCOUT], AMMOTYPE[CSW_SCOUT], MAXBPAMMO[CSW_SCOUT]);
		}
		
		if(equal(sCurrentModel, MODEL_SURVIVOR[g_dificult[id][CLASS_SURVIVOR]]))
			iAlreadyHasModel = 1;
		
		if(!iAlreadyHasModel)
			copy(g_playermodel[id], charsmax(g_playermodel[]), MODEL_SURVIVOR[g_dificult[id][CLASS_SURVIVOR]]);
		
		copy(g_classname[id], charsmax(g_classname[]), "SNIPER");
	}
	else
	{
		set_user_health(id, AMOUNT_HEALTH_HUMAN(id));
		set_user_armor(id, AMOUNT_ARMOR_EXTRA(id));
		set_user_gravity(id, AMOUNT_GRAVITY_HUMAN(id));
		g_human_speed[id] = AMOUNT_SPEED_HUMAN(id);
		
		g_health[id] = get_user_health(id);
		
		ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
		
		set_task(0.2, "showMenuBuy1", id + TASK_SPAWN);
		
		emitSound(id, CHAN_ITEM, g_sound_antidote);
		
		if(equal(sCurrentModel, MODELOS_HUMANOS[g_human_model[id]]))
			iAlreadyHasModel = 1;
		
		if(!iAlreadyHasModel)
			copy(g_playermodel[id], charsmax(g_playermodel[]), MODELOS_HUMANOS[g_human_model[id]]);
		
		copy(g_classname[id], charsmax(g_classname[]), CLASES_HUMANAS[g_human_class[id]][humanName]);
	}
	
	if(g_mode[MODE_DUEL_FINAL] || g_legendaria_kpuzzle || (g_no_buy && !g_kiske[id]))
	{
		set_user_health(id, 100);
		set_user_armor(id, 0);
		set_user_gravity(id, 1.0);
		g_human_speed[id] = 240.0;
		
		strip_user_weapons(id);
		
		if(!g_no_buy || g_kiske[id])
			give_item(id, "weapon_knife");
	}
	
	if(getUserTeam(id) != FM_CS_TEAM_CT)
	{
		remove_task(id + TASK_TEAM);
		
		setUserTeam(id, FM_CS_TEAM_CT);
		userTeamUpdate(id);
	}
	
	if(!iAlreadyHasModel)
	{
		if(g_newround) set_task(5.0 * MODELS_CHANGE_DELAY, "userModelUpdate", id + TASK_MODEL);
		else userModelUpdate(id + TASK_MODEL);
	}
	
	message_begin(MSG_ONE, g_message_fov, _, id);
	write_byte(90);
	message_end();
	
	if(g_nvision[id])
	{
		g_nvision[id] = 0;
		remove_task(id + TASK_NVISION);
	}
	
	checkLastZombie();
}

/** ==================================================
	[ FIN FUNCIONES ]
================================================== **/

/** ==================================================
	[ OTRAS FUNCIONES ]
================================================== **/

public modifCommands(const id)
{
	if(!g_isconnected[id])
		return;
	
	client_cmd(id, "cl_minmodels 0");
	client_cmd(id, "cl_solid_players 1");
	
	client_cmd(id, "-moveleft; -moveright; -back");
	
	set_lights(g_lights[0]);
	
	#if defined USE_ORPHEU
		new OrpheuHook:handlePrintF;
		handlePrintF = OrpheuRegisterHook(OrpheuGetFunction("Con_Printf"), "Con_Printf");
		
		server_cmd("sxe_userhid #%d", get_user_userid(id));
		server_exec();
		
		OrpheuUnregisterHook(handlePrintF);
		
		copy(g_user_hid[id], 63, g_message_hid);
		
		replace_all(g_user_hid[id], 63, "sxei_userhid: ", "");
		replace_all(g_user_hid[id], 63, "[", "");
		replace_all(g_user_hid[id], 63, "]", "");
		replace_all(g_user_hid[id], 63, "^n", "");
	#endif
}

public refillBPAmmo(const args[], const id)
{
	if(!g_isalive[id] || g_zombie[id])
		return;
	
	set_msg_block(g_message_ammopickup, BLOCK_ONCE);
	ExecuteHamB(Ham_GiveAmmo, id, MAXBPAMMO[args[0]], AMMOTYPE[args[0]], MAXBPAMMO[args[0]]);
}

public welcomeMsg()
{
	set_hudmessage(255, 0, 0, -1.0, 0.25, 1, 3.0, 4.0, 4.0, 3.0, -1);
	ShowSyncHudMsg(0, g_Hud, "¡ EL VIRUS-T SE HA LIBERADO !");
	
	set_lights(g_lights[0]);
}

public respawnUser(const taskid)
{
	if(g_isalive[ID_SPAWN] || g_endround)
		return;
	
	static iTeam;
	iTeam = getUserTeam(ID_SPAWN);
	
	if(iTeam == FM_CS_TEAM_SPECTATOR || iTeam == FM_CS_TEAM_UNASSIGNED)
		return;
	
	if(g_no_buy)
		return;
	
	if(g_newround || g_mode[MODE_INFECTION] || g_mode[MODE_MULTI] || g_mode[MODE_CABEZON] || g_mode[MODE_ANNIHILATOR])
	{
		g_respawn_as_zombie[ID_SPAWN] = (!g_mode[MODE_CABEZON] && !g_mode[MODE_ANNIHILATOR]) ? 1 : 0;
		respawnUserManually(ID_SPAWN);
	}
}

public respawnUserCheck(const taskid)
{
	if(g_isalive[ID_SPAWN] || g_endround)
		return;
	
	static iTeam;
	iTeam = getUserTeam(ID_SPAWN);
	
	if(iTeam == FM_CS_TEAM_SPECTATOR || iTeam == FM_CS_TEAM_UNASSIGNED)
		return;
	
	// if(g_no_buy)
		// return;
	
	if(g_zombie[ID_SPAWN]) g_respawn_as_zombie[ID_SPAWN] = 1;
	else g_respawn_as_zombie[ID_SPAWN] = 0;
	
	respawnUserManually(ID_SPAWN);
}

respawnUserManually(const id)
{
	setUserTeam(id, (g_respawn_as_zombie[id]) ? FM_CS_TEAM_T : FM_CS_TEAM_CT);
	ExecuteHamB(Ham_CS_RoundRespawn, id);
}

checkRound(const leaving_id)
{
	if(g_endround || task_exists(TASK_MAKEZOMBIE))
		return;
	
	static iUsersNum;
	static iId;
	
	iUsersNum = getAlive();
	
	if(g_mode[MODE_ALVSPRED])
	{
		if(g_alien[leaving_id])
		{
			if(getZombies() > 1)
			{
				while((iId = getBetterRandomAlive()) == leaving_id || !g_zombie[iId]) { }
				
				colorChat(0, _, "%sEl alien se ha ido, !g%s!y es el nuevo alien", ZP_PREFIX, g_playername[iId]);
				zombieMe(iId, .alien = 1);
				
				g_alien_power[iId] = g_alien_power[leaving_id];
				
				set_user_health(iId, g_health[leaving_id]);
				g_health[iId] = g_health[leaving_id];
				
				return;
			}
			
			new i;
			new iRandEXP = random_num(100000, (g_level_total[leaving_id] * 1000));
			new iRandAPS = random_num(10000, (g_level_total[leaving_id] * 35));
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_zombie[i])
				{
					ExecuteHamB(Ham_Killed, i, i, 2);
					continue;
				}
				
				addXp(i, iRandEXP, 0);
				g_ammopacks[i] += iRandAPS;
			}
			
			colorChat(0, _, "%sTodos los humanos vivos ganaron !g%d EXP!y y !g%d APS!y por ganar el modo", ZP_PREFIX, iRandEXP, iRandAPS);
			
			return;
		}
		else if(g_predator[leaving_id])
		{
			if(getHumans() > 1)
			{
				while((iId = getBetterRandomAlive()) == leaving_id || g_zombie[iId]) { }
				
				colorChat(0, _, "%sEl depredador se ha ido, !g%s!y es el nuevo depredador", ZP_PREFIX, g_playername[iId]);
				humanMe(iId, .predator = 1);
				
				g_predator_power[iId] = g_predator_power[leaving_id];
				
				set_user_health(iId, g_health[leaving_id]);
				g_health[iId] = g_health[leaving_id];
				
				return;
			}
			
			new i;
			new iRandEXP = random_num(100000, (g_level_total[leaving_id] * 1000));
			new iRandAPS = random_num(10000, (g_level_total[leaving_id] * 35));
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				if(g_predator[i])
					continue;
				
				if(!g_zombie[i])
				{
					ExecuteHamB(Ham_Killed, i, i, 2);
					continue;
				}
				
				addXp(i, iRandEXP, 0);
				g_ammopacks[i] += iRandAPS;
			}
			
			colorChat(0, _, "%sTodos los zombies vivos ganaron !g%d EXP!y y !g%d APS!y por ganar el modo", ZP_PREFIX, iRandEXP, iRandAPS);
			
			return;
		}
	}
	else if(g_mode[MODE_SNIPER])
	{
		if(g_sniper[leaving_id] && getHumans() == 1)
		{
			/*new i;
			new j = 0;
			new iSnipers[4] = {0, 0, 0, 0};
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				if(!g_sniper[i])
					continue;
				
				if(i == leaving_id)
					continue;
				
				iSnipers[j] = i;
				
				colorChat(i, CT, "%sGanaste !g%d pH!y", ZP_PREFIX, g_mult_points[i]);
				g_points[i][CLASS_HUMAN] += g_mult_points[i];
				
				++j;
			}
			
			g_mult_points[0] = 0;
			
			colorChat(0, CT, "%sLos !tSNIPER!y ganaron !g%d !y/!g %d !y/!g %d !y/!g %d pH!y", ZP_PREFIX, g_mult_points[iSnipers[0]], g_mult_points[iSnipers[1]], g_mult_points[iSnipers[2]], g_mult_points[iSnipers[3]]);*/
			
			return;
		}
		else if(g_zombie[leaving_id] && getZombies() == 1)
		{
			new i;
			new j = 0;
			new k = 0;
			new iSnipers[4] = {0, 0, 0, 0};
			new iReward = 0;
			new iRewardPoints = 0;
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				if(!g_sniper[i])
					continue;
				
				iSnipers[j] = i;
				
				colorChat(i, CT, "%sGanaste !g%d pH!y por ganar el modo !gSNIPER!y", ZP_PREFIX, g_mult_points[i]);
				g_points[i][CLASS_HUMAN] += g_mult_points[i];
				
				iReward += g_combo[i];
				
				++j;
			}
			
			g_mult_points[0] = 0;
			
			colorChat(0, CT, "%sLos !tSNIPER!y ganaron !g%d !y/!g %d !y/!g %d !y/!g %d pH!y y !g%d EXP!y por ganar el modo !gSNIPER!y", ZP_PREFIX, g_mult_points[iSnipers[0]], g_mult_points[iSnipers[1]], g_mult_points[iSnipers[2]], g_mult_points[iSnipers[3]], iReward);
			
			if(g_sniper_damage >= 500000)
			{
				if(g_sniper_damage >= 1000000)
				{
					if(g_sniper_damage >= 2000000)
					{
						if(g_sniper_damage >= 5000000)
							iRewardPoints = 4;
						else
							iRewardPoints = 3;
					}
					else
						iRewardPoints = 2;
				}
				else
					iRewardPoints = 1;
				
				colorChat(0, CT, "%s!tBONUS:!y !g%d pH!y por realizar mucho daño", ZP_PREFIX, iRewardPoints);
			}
			
			k = 0;
			for(i = 0; i < j; ++i)
			{
				addXp(iSnipers[i], iReward, 0);
				g_points[iSnipers[i]][CLASS_HUMAN] += iRewardPoints;
				
				if(g_isalive[iSnipers[i]])
				{
					setAchievement(iSnipers[i], L_FRANCOTIRADOR);
					++k;
					
					if(!g_logros_stats[iSnipers[i]][SNIPER_NO_DMG])
						setAchievement(iSnipers[i], NO_TENGO_BALAS);
				}
				
				g_logros_stats[iSnipers[i]][SNIPER_NO_DMG] = 0;
			}
			
			switch(k)
			{
				case 1: 
				{
					for(i = 0; i < j; ++i)
					{
						if(g_isalive[iSnipers[i]])
						{
							setAchievement(iSnipers[i], EN_MEMORIA_A_ELLOS);
							break;
						}
					}
				}
				case 2:
				{
					new iAwp = 0;
					new iScout = 0;
					
					for(i = 0; i < j; ++i)
					{
						if(user_has_weapon(iSnipers[i], CSW_AWP))
							++iAwp;
						
						if(user_has_weapon(iSnipers[i], CSW_SCOUT))
							++iScout;
					}
					
					if(iAwp == 2)
					{
						setAchievement(iSnipers[0], SOBREVIVEN_LOS_DUROS);
						setAchievement(iSnipers[1], SOBREVIVEN_LOS_DUROS);
					}
					else if(iScout == 2)
					{
						setAchievement(iSnipers[0], NO_SOLO_LA_GANAN_LOS_DUROS);
						setAchievement(iSnipers[1], NO_SOLO_LA_GANAN_LOS_DUROS);
					}
				}
				case 4:
				{
					setAchievement(iSnipers[0], EL_MEJOR_EQUIPO);
					setAchievement(iSnipers[1], EL_MEJOR_EQUIPO);
					setAchievement(iSnipers[2], EL_MEJOR_EQUIPO);
					setAchievement(iSnipers[3], EL_MEJOR_EQUIPO);
				}
			}
			
			return;
		}
	}
	else if(g_mode[MODE_SYNAPSIS])
	{
		if(g_nemesis[leaving_id] && getHumans() > 1)
		{
			while((iId = getBetterRandomAlive()) == leaving_id || g_zombie[iId]) { }
			
			colorChat(0, _, "%sEl nemesis se ha ido, !g%s!y es el nuevo nemesis", ZP_PREFIX, g_playername[iId]);
			zombieMe(iId, .nemesis = 1);
			
			if(!g_bazooka[leaving_id])
			{
				g_bazooka[iId] = 0;
				
				strip_user_weapons(iId);
				give_item(iId, "weapon_knife");
			}
			
			set_user_health(iId, g_health[leaving_id]);
			g_health[iId] = g_health[leaving_id];
		}
		else if(!g_zombie[leaving_id] && getHumans() == 1)
			return;
	}
	else if(g_mode[MODE_DUEL_FINAL] && getHumans() == 2)
	{
		if(g_duel_final == CUARTOS || g_duel_final == SEMIFINAL || g_duel_final == FINAL)
		{
			new i;
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				user_kill(i, 1);
				
				break;
			}
		}
		
		set_task(1.0, "finishDuelFinal");
	}
	
	if(iUsersNum < 3)
	{
		g_endround_forced = 1;
		return;
	}
	
	if(g_zombie[leaving_id] && getZombies() == 1)
	{
		if(getHumans() == 1 && getCTs() == 1)
			return;
		
		while((iId = getBetterRandomAlive()) == leaving_id) { }
		
		if(g_nemesis[leaving_id])
		{
			colorChat(0, _, "%sEl nemesis se ha ido, !g%s!y es el nuevo nemesis", ZP_PREFIX, g_playername[iId]);
			zombieMe(iId, .nemesis = 1);
			
			if(!g_bazooka[leaving_id])
			{
				g_bazooka[iId] = 0;
				
				strip_user_weapons(iId);
				give_item(iId, "weapon_knife");
			}
			
			set_user_health(iId, g_health[leaving_id]);
			g_health[iId] = g_health[leaving_id];
		}
		else if(g_cabezon[leaving_id])
		{
			colorChat(0, _, "%sEl cabezón se ha ido, !g%s!y es el nuevo cabezón", ZP_PREFIX, g_playername[iId]);
			zombieMe(iId, .cabezon = 1);
			
			if(g_cabezon_power[leaving_id])
			{
				g_cabezon_power[iId] = 1;
				set_task(60.0, "resetPowerCabezon", iId);
			}
			
			set_user_health(iId, g_health[leaving_id]);
			g_health[iId] = g_health[leaving_id];
		}
		else if(g_annihilator[leaving_id])
		{
			colorChat(0, _, "%sEl aniquilador se ha ido, !g%s!y es el nuevo aniquilador", ZP_PREFIX, g_playername[iId]);
			zombieMe(iId, .annihilator = 1);
			
			strip_user_weapons(iId);
			
			give_item(iId, "weapon_knife");
			
			if(g_bazooka[leaving_id])
			{
				g_bazooka[iId] = g_bazooka[leaving_id];
				give_item(iId, "weapon_ak47");
				
				cs_set_user_bpammo(iId, CSW_AK47, 0);
				cs_set_weapon_ammo(fm_find_ent_by_owner(-1, "weapon_ak47", iId), 0);
			}
			
			new iWeaponEntLeavingId;
			new iAmmo;
			new iClip;
			
			iWeaponEntLeavingId = fm_find_ent_by_owner(-1, "weapon_mac10", leaving_id);
			iAmmo = get_pdata_int(leaving_id, AMMOOFFSET[CSW_MAC10], OFFSET_LINUX);
			iClip = get_pdata_int(iWeaponEntLeavingId, OFFSET_CLIPAMMO, OFFSET_LINUX_WEAPONS);
			
			if(iAmmo || iClip)
			{
				give_item(iId, "weapon_mac10");
				
				new iWeaponEntId;
				iWeaponEntId = fm_find_ent_by_owner(-1, "weapon_mac10", iId);
				
				set_pdata_int(iId, AMMOOFFSET[CSW_MAC10], iAmmo, OFFSET_LINUX);
				set_pdata_int(iWeaponEntId, OFFSET_CLIPAMMO, iClip, OFFSET_LINUX_WEAPONS);
			}
			
			g_currentweapon[iId] = CSW_KNIFE;
			engclient_cmd(iId, "weapon_knife");
			
			set_user_health(iId, g_health[leaving_id]);
			g_health[iId] = g_health[leaving_id];
		}
		else if(g_grunt[leaving_id])
		{
			colorChat(0, _, "%sEl grunt se ha ido, !g%s!y es el nuevo grunt", ZP_PREFIX, g_playername[iId]);
			zombieMe(iId, .grunt = 1);
			
			set_user_health(iId, g_health[leaving_id]);
			g_health[iId] = g_health[leaving_id];
		}
		else
		{
			colorChat(0, _, "%sEl último zombie se ha ido, !g%s!y es el nuevo zombie", ZP_PREFIX, g_playername[iId]);
			zombieMe(iId);
		}
	}
	else if(!g_zombie[leaving_id] && getHumans() == 1)
	{
		if(getZombies() == 1 && getTs() == 1)
			return;
		
		while ((iId = getBetterRandomAlive()) == leaving_id) { }
		
		if(g_survivor[leaving_id])
		{
			colorChat(0, _, "%sEl survivor se ha ido, !g%s!y es el nuevo survivor", ZP_PREFIX, g_playername[iId]);
			humanMe(iId, .survivor = 1);
			
			if(!g_kill_bomb[leaving_id])
				hamStripWeapons(iId, "weapon_hegrenade");
			
			set_user_health(iId, g_health[leaving_id]);
			g_health[iId] = g_health[leaving_id];
		}
		else if(g_wesker[leaving_id])
		{
			colorChat(0, _, "%sEl wesker se ha ido, !g%s!y es el nuevo wesker", ZP_PREFIX, g_playername[iId]);
			humanMe(iId, .wesker = 1);
			
			g_laser[iId] = g_laser[leaving_id];
			
			set_user_health(iId, g_health[leaving_id]);
			g_health[iId] = g_health[leaving_id];
		}
		else if(g_jason[leaving_id])
		{
			colorChat(0, _, "%sEl jason se ha ido, !g%s!y es el nuevo jason", ZP_PREFIX, g_playername[iId]);
			humanMe(iId, .jason = 1);
			
			set_user_health(iId, g_health[leaving_id]);
			g_health[iId] = g_health[leaving_id];
		}
		else
		{
			colorChat(0, _, "%sEl último humano se ha ido, !g%s!y es el nuevo humano", ZP_PREFIX, g_playername[iId]);
			humanMe(iId);
		}
	}
}

public hideHUDs(const taskid)
{
	if(!g_isalive[ID_SPAWN])
		return;
	
	message_begin(MSG_ONE, g_message_hideweapon, _, ID_SPAWN);
	write_byte(HIDE_HUDS);
	message_end();
	
	message_begin(MSG_ONE, g_message_crosshair, _, ID_SPAWN);
	write_byte(0);
	message_end();
}

public hideHUDs__Full(const taskid)
{
	if(!g_isalive[ID_SPAWN])
		return;
	
	message_begin(MSG_ONE, g_message_hideweapon, _, ID_SPAWN);
	write_byte(HIDE_HUDS_FULL);
	message_end();
	
	message_begin(MSG_ONE, g_message_crosshair, _, ID_SPAWN);
	write_byte(0);
	message_end();
}

turnOffFlashlight(const id)
{
	entity_set_int(id, EV_INT_effects, entity_get_int(id, EV_INT_effects) & ~EF_DIMLIGHT);
	
	message_begin(MSG_ONE_UNRELIABLE, g_message_flashlight, _, id);
	write_byte(0);
	write_byte(100);
	message_end();
	
	entity_set_int(id, EV_INT_impulse, 0);
}

infectionExplode(const ent)
{
	if(g_endround)
		return;
	
	static iAttacker;
	iAttacker = entity_get_edict(ent, EV_ENT_owner);
	
	if(!is_user_valid_connected(iAttacker))
	{
		remove_entity(ent);
		return;
	}
	
	static Float:vecOrigin[3];
	entity_get_vector(ent, EV_VEC_origin, vecOrigin);
	
	createExplosion(vecOrigin, 0, 255, 0);
	
	emitSound(ent, CHAN_WEAPON, g_sound_grenade_infect);
	
	static iVictim;
	static iCountVictims;
	
	iVictim = -1;
	iCountVictims = 0;
	
	g_logros_stats[iAttacker][ZOMBIE_BOMBS] = 1;
	
	while((iVictim = engfunc(EngFunc_FindEntityInSphere, iVictim, vecOrigin, NADE_EXPLOSION_RADIUS)) != 0)
	{
		if(!is_user_valid_alive(iVictim) || g_zombie[iVictim] || g_special_mode[iVictim] || g_nodamage[iVictim])
			continue;
		
		if(getHumans() == 1)
		{
			ExecuteHamB(Ham_Killed, iVictim, iAttacker, 0);
			continue;
		}
		
		zombieMe(iVictim, iAttacker, .silentmode = 1, .cortarcombo = 1);
		
		++iCountVictims;
	}
	
	if(!iCountVictims)
		setAchievement(iAttacker, BOMBA_FALLIDA);
	else if(g_madness_bomb_count[iAttacker])
	{
		if(iCountVictims >= 5)
		{
			setAchievement(iAttacker, Y_SIN_VER);
			if(iCountVictims >= 10)
			{
				setAchievement(iAttacker, INFECCION_DROGADA);
				if(iCountVictims >= 15)
					setAchievement(iAttacker, LA_BOMBA_LOCA);
			}
		}
	}
	
	remove_entity(ent);
}

fireExplode(const ent)
{
	if(g_endround)
		return;
	
	static iAttacker;
	iAttacker = entity_get_edict(ent, EV_ENT_owner);
	
	if(!is_user_valid_connected(iAttacker))
	{
		remove_entity(ent);
		return;
	}
	
	static Float:vecOrigin[3];
	entity_get_vector(ent, EV_VEC_origin, vecOrigin);
	
	createExplosion(vecOrigin, 255, 0, 0);
	
	emitSound(ent, CHAN_WEAPON, g_sound_grenade_explode);
	
	static iVictim;
	static iCountVictims;
	
	iVictim = -1;
	iCountVictims = 0;
	
	while((iVictim = engfunc(EngFunc_FindEntityInSphere, iVictim, vecOrigin, NADE_EXPLOSION_RADIUS)) != 0)
	{
		if(!is_user_valid_alive(iVictim) || !g_zombie[iVictim] || g_cabezon[iVictim] || g_burning_nitro_duration[iVictim] || g_nodamage[iVictim] || (g_firstzombie[iVictim] && !g_FirstInfect))
			continue;
		
		if(g_nemesis[iVictim] || g_alien[iVictim])
			g_burning_duration[iVictim] += 10;
		else
			g_burning_duration[iVictim] += 50;
		
		if(!task_exists(iVictim + TASK_BURN))
			set_task(0.2, "burningFlame", iVictim + TASK_BURN, _, _, "b");
		
		++iCountVictims;
	}
	
	if(iCountVictims >= (DESAFIOS[PIROMANO][desafioLevel] + g_desafios[iAttacker][PIROMANO] + (DESAFIOS[PIROMANO][desafioLevelMult] * g_desafios[iAttacker][PIROMANO])))
		setChallenge(iAttacker, PIROMANO);
	
	remove_entity(ent);
}

frostExplode(const ent)
{
	if(g_endround)
		return;
	
	static iAttacker;
	iAttacker = entity_get_edict(ent, EV_ENT_owner);
	
	if(!is_user_valid_connected(iAttacker))
	{
		remove_entity(ent);
		return;
	}
	
	static Float:vecOrigin[3];
	entity_get_vector(ent, EV_VEC_origin, vecOrigin);
	
	createExplosion(vecOrigin, 0, 100, 200);
	
	emitSound(ent, CHAN_WEAPON, g_sound_grenade_frost);
	
	static iVictim;
	static iCountVictims;
	
	iVictim = -1;
	iCountVictims = 0;
	
	if(!g_gk_bomb)
	{
		while((iVictim = engfunc(EngFunc_FindEntityInSphere, iVictim, vecOrigin, NADE_EXPLOSION_RADIUS)) != 0)
		{
			if(!is_user_valid_alive(iVictim) || !g_zombie[iVictim] || g_special_mode[iVictim] || g_frozen[iVictim] || g_nodamage[iVictim] || (g_firstzombie[iVictim] && !g_FirstInfect))
				continue;
			
			set_user_rendering(iVictim, kRenderFxGlowShell, 0, 100, 200, kRenderNormal, 25);
			
			if(!g_madness_bomb_move[iVictim])
			{
				message_begin(MSG_ONE, g_message_screenfade, _, iVictim);
				write_short(0);
				write_short(0);
				write_short(FFADE_STAYOUT);
				write_byte(0);
				write_byte(100);
				write_byte(200);
				write_byte(100);
				message_end();
			}
			
			g_frozen[iVictim] = 1;
			
			//entity_set_int(iVictim, EV_INT_flags, entity_get_int(iVictim, EV_INT_flags) | FL_FROZEN);
			
			//entity_get_vector(iVictim, EV_VEC_v_angle, g_frozen_angles[iVictim]);
			
			g_frozen_gravity[iVictim] = get_user_gravity(iVictim);
			
			if(get_entity_flags(iVictim) & FL_ONGROUND)
				set_user_gravity(iVictim, 999999.9);
			else
				set_user_gravity(iVictim, 0.000001);
			
			ExecuteHamB(Ham_Player_ResetMaxSpeed, iVictim);
			
			remove_task(iVictim + TASK_FROZEN);
			set_task(4.0, "removeFreeze", iVictim + TASK_FROZEN);
			
			emitSound(iVictim, CHAN_BODY, g_sound_grenade_frost_player);
			
			++iCountVictims;
		}
		
		if(iCountVictims >= (DESAFIOS[FRIGOMANO][desafioLevel] + g_desafios[iAttacker][FRIGOMANO] + (DESAFIOS[FRIGOMANO][desafioLevelMult] * g_desafios[iAttacker][FRIGOMANO])))
			setChallenge(iAttacker, FRIGOMANO);
	}
	else
	{
		while((iVictim = engfunc(EngFunc_FindEntityInSphere, iVictim, vecOrigin, (NADE_EXPLOSION_RADIUS - (float(g_gk_bomb_drop) * 20.0)))) != 0)
		{
			if(!is_user_valid_alive(iVictim) || !g_zombie[iVictim] || g_special_mode[iVictim] || g_frozen[iVictim] || g_nodamage[iVictim])
				continue;
			
			set_user_rendering(iVictim, kRenderFxGlowShell, 0, 100, 200, kRenderNormal, 25);
			
			if(!g_madness_bomb_move[iVictim])
			{
				message_begin(MSG_ONE, g_message_screenfade, _, iVictim);
				write_short(0);
				write_short(0);
				write_short(FFADE_STAYOUT);
				write_byte(0);
				write_byte(100);
				write_byte(200);
				write_byte(100);
				message_end();
			}
			
			g_frozen[iVictim] = 1;
			g_frozen_gravity[iVictim] = get_user_gravity(iVictim);
			
			if(get_entity_flags(iVictim) & FL_ONGROUND)
				set_user_gravity(iVictim, 999999.9);
			else
				set_user_gravity(iVictim, 0.000001);
			
			ExecuteHamB(Ham_Player_ResetMaxSpeed, iVictim);
			
			remove_task(iVictim + TASK_FROZEN);
			set_task(4.0, "removeFreeze", iVictim + TASK_FROZEN);
			
			emitSound(iVictim, CHAN_BODY, g_sound_grenade_frost_player);
			
			if(g_level[iVictim] < 1000) {
				new idif = g_level[iVictim];
				g_level[iVictim] = clamp(g_level[iVictim] + g_gk_bomb_level, 1, 1000);
				
				idif = g_level[iVictim] - idif;
				
				g_level_total[iVictim] += idif;
				g_exp[iVictim] = NEED_EXP_TOTAL[g_level_total[iVictim]-1];
			}
			
			g_human_model[iVictim] = clamp((g_level_total[iVictim] / 25), 0, charsmax(MODELOS_HUMANOS));
			
			switch(g_chat_mode[iVictim])
			{
				case CHAT_MODE_NONE: formatex(g_chat_text[iVictim], 15, "");
				case CHAT_MODE_NORMAL: formatex(g_chat_text[iVictim], 15, " [%s](%s%d)", LETRAS_RESET[g_rango[iVictim]], !g_chat_mode_prefix[iVictim] ? "" : "Niv. ", g_level[iVictim]);
				case CHAT_MODE_CORCHETES: formatex(g_chat_text[iVictim], 15, " [%s][%s%d]", LETRAS_RESET[g_rango[iVictim]], !g_chat_mode_prefix[iVictim] ? "" : "Niv. ", g_level[iVictim]);
				case CHAT_MODE_CORCHETES_PARENTESIS: formatex(g_chat_text[iVictim], 15, " [%s][(%s%d)]", LETRAS_RESET[g_rango[iVictim]], !g_chat_mode_prefix[iVictim] ? "" : "Niv. ", g_level[iVictim]);
				case CHAT_MODE_LLAVES: formatex(g_chat_text[iVictim], 15, " [%s]{%s%d}", LETRAS_RESET[g_rango[iVictim]], !g_chat_mode_prefix[iVictim] ? "" : "Niv. ", g_level[iVictim]);
				case CHAT_MODE_LLAVES_PARENTESIS: formatex(g_chat_text[iVictim], 15, " [%s]{(%s%d)}", LETRAS_RESET[g_rango[iVictim]], !g_chat_mode_prefix[iVictim] ? "" : "Niv. ", g_level[iVictim]);
				case CHAT_MODE_LLAVES_CORCHETES: formatex(g_chat_text[iVictim], 15, " [%s]{[%s%d]}", LETRAS_RESET[g_rango[iVictim]], !g_chat_mode_prefix[iVictim] ? "" : "Niv. ", g_level[iVictim]);
				case CHAT_MODE_LLAVES_CORCHETES_P: formatex(g_chat_text[iVictim], 15, " [%s]{[(%s%d)]}", LETRAS_RESET[g_rango[iVictim]], !g_chat_mode_prefix[iVictim] ? "" : "Niv. ", g_level[iVictim]);
			}
			
			g_level_percent[iVictim] = 0.0;
			
			colorChat(iVictim, _, "%sGanaste !g%d nivel%s!y", ZP_PREFIX, g_gk_bomb_level, (g_gk_bomb_level == 1) ? "" : "es");
		}
		
		new i;
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isalive[i])
				continue;
			
			if(g_frozen[i])
				continue;
			
			if(i == iAttacker)
				continue;
			
			ExecuteHamB(Ham_Killed, i, iAttacker, 1);
		}
		
		++g_gk_bomb_drop;
		
		if(g_gk_bomb_drop == 5)
			++g_gk_bomb_level;
		
		if(getAlive() > 1)
		{
			colorChat(0, _, "%sLa próxima bomba otorgará !g%d nivel%s!y a quienes permanezcan vivos!", ZP_PREFIX, g_gk_bomb_level, (g_gk_bomb_level == 1) ? "" : "es");
			colorChat(0, _, "%sRadio de la próxima bomba: !g%0.2f!y", ZP_PREFIX, (NADE_EXPLOSION_RADIUS - (float(g_gk_bomb_drop) * 20.0)));
		}
		else
			g_gk_bomb = 0;
	}
	
	remove_entity(ent);
}

killExplode(const ent)
{
	if(g_endround)
		return;
	
	static iAttacker;
	iAttacker = entity_get_edict(ent, EV_ENT_owner);
	
	if(!is_user_valid_connected(iAttacker))
	{
		remove_entity(ent);
		return;
	}
	
	static Float:vecOrigin[3];
	entity_get_vector(ent, EV_VEC_origin, vecOrigin);
	
	createExplosion(vecOrigin, 200, 100, 50);
	
	emitSound(ent, CHAN_WEAPON, g_sound_modes[0]);
	
	static iVictim;
	static iCountVictims;
	
	iVictim = -1;
	iCountVictims = 0;
	
	while((iVictim = engfunc(EngFunc_FindEntityInSphere, iVictim, vecOrigin, NADE_EXPLOSION_RADIUS)) != 0)
	{
		if(!is_user_valid_alive(iVictim) || !g_zombie[iVictim] || g_special_mode[iVictim] || g_nodamage[iVictim] || (g_firstzombie[iVictim] && !g_FirstInfect))
			continue;
		
		g_kill_by_bomb[iVictim] = 1;
		
		ExecuteHamB(Ham_Killed, iVictim, iAttacker, 2);
		
		addXp(iAttacker, (random_num(1, 5) * g_level_total[iAttacker]), 0);
		
		++iCountVictims;
	}
	
	if(!iCountVictims && getAlive() >= 20)
	{
		if(!g_survivor[iAttacker])
			setAchievement(iAttacker, NO_LA_NECESITO);
		else
			setAchievement(iAttacker, ANIQUILA_ANIQUILADOR);
	}
	else if(iCountVictims >= 15)
		setAchievement(iAttacker, HASTA_ACA_LLEGARON);
	
	if(!g_survivor[iAttacker])
	{
		if(iCountVictims >= (DESAFIOS[L_ANIQUILACION][desafioLevel] + g_desafios[iAttacker][L_ANIQUILACION] + (DESAFIOS[L_ANIQUILACION][desafioLevelMult] * g_desafios[iAttacker][L_ANIQUILACION])))
			setChallenge(iAttacker, L_ANIQUILACION);
	}
	
	remove_entity(ent);
}

madnessExplode(const ent)
{
	if(g_endround)
		return;
	
	static iAttacker;
	iAttacker = entity_get_edict(ent, EV_ENT_owner);
	
	if(!is_user_valid_connected(iAttacker))
	{
		remove_entity(ent);
		return;
	}
	
	static Float:vecOrigin[3];
	entity_get_vector(ent, EV_VEC_origin, vecOrigin);
	
	createExplosion(vecOrigin, random_num(0, 255), random_num(0, 255), random_num(0, 255));
	
	emitSound(ent, CHAN_WEAPON, g_sound_grenade_explode);
	
	static iVictim;
	static iCountVictims;
	
	iVictim = -1;
	iCountVictims = 0;
	
	while((iVictim = engfunc(EngFunc_FindEntityInSphere, iVictim, vecOrigin, NADE_EXPLOSION_RADIUS)) != 0)
	{
		if(!is_user_valid_alive(iVictim) || !g_zombie[iVictim] || g_madness_bomb_move[iVictim] || g_special_mode[iVictim] || g_nodamage[iVictim] || (g_firstzombie[iVictim] && !g_FirstInfect))
			continue;
		
		g_madness_bomb_count[iVictim] = 0;
		
		hamStripWeapons(iVictim, "weapon_knife");
		
		/*message_begin(MSG_ONE, g_message_screenfade, _, iVictim);
		write_short(0);
		write_short(0);
		write_short(FFADE_STAYOUT);
		write_byte(random_num(0, 255));
		write_byte(random_num(0, 255));
		write_byte(random_num(0, 255));
		write_byte(255);
		message_end();*/
		
		remove_task(iVictim + TASK_MADNESS_BOMB);
		set_task(0.5, "confuseVictim", iVictim + TASK_MADNESS_BOMB, _, _, "a", 20);
		
		++iCountVictims;
	}
	
	if(iCountVictims >= (DESAFIOS[PIROMANO][desafioLevel] + g_desafios[iAttacker][PIROMANO] + (DESAFIOS[PIROMANO][desafioLevelMult] * g_desafios[iAttacker][PIROMANO])))
		setChallenge(iAttacker, PIROMANO);
	
	remove_entity(ent);
}

nitroExplode(const ent)
{
	if(g_endround)
		return;
	
	static iAttacker;
	iAttacker = entity_get_edict(ent, EV_ENT_owner);
	
	if(!is_user_valid_connected(iAttacker))
	{
		remove_entity(ent);
		return;
	}
	
	static Float:vecOrigin[3];
	entity_get_vector(ent, EV_VEC_origin, vecOrigin);
	
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, vecOrigin, 0);
	write_byte(TE_DLIGHT);
	engfunc(EngFunc_WriteCoord, vecOrigin[0]);
	engfunc(EngFunc_WriteCoord, vecOrigin[1]);
	engfunc(EngFunc_WriteCoord, vecOrigin[2]);
	write_byte(85);
	write_byte(0);
	write_byte(150);
	write_byte(250);
	write_byte(150);
	write_byte(150);
	message_end();
	
	emitSound(ent, CHAN_WEAPON, g_sound_grenade_explode);
	
	static iVictim;
	static iCountVictims;
	
	iVictim = -1;
	iCountVictims = 0;
	
	while((iVictim = engfunc(EngFunc_FindEntityInSphere, iVictim, vecOrigin, NADE_EXPLOSION_RADIUS)) != 0)
	{
		if(!is_user_valid_alive(iVictim) || !g_zombie[iVictim] || g_special_mode[iVictim] || g_nodamage[iVictim] || (g_firstzombie[iVictim] && !g_FirstInfect))
			continue;
		
		if(g_burning_duration[iVictim])
		{
			remove_task(iVictim + TASK_BURN);
			g_burning_duration[iVictim] = 0;
		}
		
		g_burning_nitro_duration[iVictim] += 25;
		
		if(!task_exists(iVictim + TASK_BURN))
			set_task(0.2, "burningFlame__Nitro", iVictim + TASK_BURN, _, _, "b");
		
		++iCountVictims;
	}
	
	if(iCountVictims >= (DESAFIOS[FRIGOMANO][desafioLevel] + g_desafios[iAttacker][FRIGOMANO] + (DESAFIOS[FRIGOMANO][desafioLevelMult] * g_desafios[iAttacker][FRIGOMANO])))
		setChallenge(iAttacker, FRIGOMANO);
	
	remove_entity(ent);
}

superNovaExplode(const ent, const mode)
{
	if(g_endround)
		return;
	
	static iAttacker;
	iAttacker = entity_get_edict(ent, EV_ENT_owner);
	
	if(!is_user_valid_connected(iAttacker))
	{
		remove_entity(ent);
		return;
	}
	
	static Float:vecOrigin[3];
	entity_get_vector(ent, EV_VEC_origin, vecOrigin);
	
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, vecOrigin, 0);
	write_byte(TE_DLIGHT);
	engfunc(EngFunc_WriteCoord, vecOrigin[0]);
	engfunc(EngFunc_WriteCoord, vecOrigin[1]);
	engfunc(EngFunc_WriteCoord, vecOrigin[2]);
	write_byte(85);
	write_byte(0);
	write_byte(255);
	write_byte(255);
	write_byte(150);
	write_byte(150);
	message_end();
	
	emitSound(ent, CHAN_WEAPON, g_sound_grenade_frost);
	
	static iVictim;
	static iCountVictims;
	
	iVictim = -1;
	iCountVictims = 0;
	
	while((iVictim = engfunc(EngFunc_FindEntityInSphere, iVictim, vecOrigin, NADE_EXPLOSION_RADIUS)) != 0)
	{
		if(!is_user_valid_alive(iVictim) || !g_zombie[iVictim] || g_special_mode[iVictim] || g_frozen[iVictim] || g_nodamage[iVictim] || (g_firstzombie[iVictim] && !g_FirstInfect))
			continue;
		
		set_user_rendering(iVictim, kRenderFxGlowShell, 0, 255, 255, kRenderNormal, 25);
		
		if(!g_madness_bomb_move[iVictim])
		{
			message_begin(MSG_ONE, g_message_screenfade, _, iVictim);
			write_short(0);
			write_short(0);
			write_short(FFADE_STAYOUT);
			write_byte(0);
			write_byte(100);
			write_byte(200);
			write_byte(100);
			message_end();
		}
		
		g_frozen[iVictim] = 2;
		
		//entity_set_int(iVictim, EV_INT_flags, entity_get_int(iVictim, EV_INT_flags) | FL_FROZEN);
		
		//entity_get_vector(iVictim, EV_VEC_v_angle, g_frozen_angles[iVictim]);
		
		g_frozen_gravity[iVictim] = get_user_gravity(iVictim);
		
		if(get_entity_flags(iVictim) & FL_ONGROUND)
			set_user_gravity(iVictim, 999999.9);
		else
			set_user_gravity(iVictim, 0.000001);
		
		ExecuteHamB(Ham_Player_ResetMaxSpeed, iVictim);
		
		remove_task(iVictim + TASK_FROZEN);
		set_task(4.0 + float(mode), "removeFreeze", iVictim + TASK_FROZEN);
		
		emitSound(iVictim, CHAN_BODY, g_sound_grenade_frost_player);
		
		++iCountVictims;
	}
	
	if(iCountVictims >= (DESAFIOS[FRIGOMANO][desafioLevel] + g_desafios[iAttacker][FRIGOMANO] + (DESAFIOS[FRIGOMANO][desafioLevelMult] * g_desafios[iAttacker][FRIGOMANO])))
		setChallenge(iAttacker, FRIGOMANO);
	
	remove_entity(ent);
}

antidoteExplode(const ent)
{
	if(g_endround)
		return;
	
	static iAttacker;
	iAttacker = entity_get_edict(ent, EV_ENT_owner);
	
	if(!is_user_valid_connected(iAttacker))
	{
		remove_entity(ent);
		return;
	}
	
	static Float:vecOrigin[3];
	entity_get_vector(ent, EV_VEC_origin, vecOrigin);
	
	createExplosion(vecOrigin, 0, 255, 255);
	
	emitSound(ent, CHAN_WEAPON, g_sound_modes[0]);
	
	static iVictim;
	static iCountVictims;
	
	iVictim = -1;
	iCountVictims = 0;
	
	while((iVictim = engfunc(EngFunc_FindEntityInSphere, iVictim, vecOrigin, NADE_EXPLOSION_RADIUS)) != 0)
	{
		if(!is_user_valid_alive(iVictim) || !g_zombie[iVictim] || g_special_mode[iVictim] || g_nodamage[iVictim] || g_lastzombie[iVictim])
			continue;
		
		humanMe(iVictim);
		
		addXp(iAttacker, (random_num(1, 5) * g_level_total[iAttacker]), 0);
		
		++iCountVictims;
	}
	
	if(!iCountVictims)
		setAchievement(iAttacker, Y_LA_LIMPIEZA);
	else if(iCountVictims >= 15)
	{
		setAchievement(iAttacker, YO_USO_CLEAR_ZOMBIE);
		
		if(iCountVictims >= 25)
			setAchievement(iAttacker, ANTIDOTO_PARA_TODOS);
	}
	
	remove_entity(ent);
}

public removeFreeze(const taskid)
{
	new id = ID_FROZEN;
	
	if(!g_isalive[id] || !g_frozen[id])
		return;
	
	g_frozen[id] = 0;
	
	//entity_set_int(id, EV_INT_flags, entity_get_int(id, EV_INT_flags) & ~FL_FROZEN);
	
	set_user_gravity(id, g_frozen_gravity[id]);
	ExecuteHamB(Ham_Player_ResetMaxSpeed, id);
	
	if(g_nemesis[id]) set_user_rendering(id, kRenderFxGlowShell, 255, 0, 0, kRenderNormal, 25);
	else if(g_survivor[id])	set_user_rendering(id, kRenderFxGlowShell, 0, 0, 255, kRenderNormal, 25);
	else set_user_rendering(id);
	
	if(!g_madness_bomb_move[id])
	{
		message_begin(MSG_ONE, g_message_screenfade, _, id);
		write_short(UNIT_SECOND);
		write_short(0);
		write_short(FFADE_IN);
		write_byte(0);
		write_byte(100);
		write_byte(200);
		write_byte(100);
		message_end();
	}
	
	playSound(id, g_sound_grenade_frost_break);
	
	static vecOrigin[3];
	get_user_origin(id, vecOrigin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_BREAKMODEL);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2] + 24);
	write_coord(16);
	write_coord(16);
	write_coord(16);
	write_coord(random_num(-50, 50));
	write_coord(random_num(-50, 50));
	write_coord(25);
	write_byte(10);
	write_short(g_glass_sprite);
	write_byte(10);
	write_byte(25);
	write_byte(BREAK_GLASS);
	message_end();
}

public removeStuff()
{
	static iEnt;
	iEnt = -1;
	
	while((iEnt = engfunc(EngFunc_FindEntityByString, iEnt, "classname", "func_door_rotating")) != 0)
		entity_set_origin(iEnt, Float:{8192.0, 8192.0, 8192.0});
	
	if(g_eegg_global)
	{
		iEnt = -1;
		
		while((iEnt = engfunc(EngFunc_FindEntityByString, iEnt, "classname", "func_door")) != 0)
			entity_set_origin(iEnt, Float:{8192.0, 8192.0, 8192.0});
	}
	
	if(is_valid_ent(g_bazooka_ent))
		remove_entity(g_bazooka_ent);
	
	g_bazooka_ent = 0;
	
	/*iEnt = find_ent_by_class(-1, "grenade_bubble");
	while(iEnt > 0)
	{
		remove_entity(iEnt);
		iEnt = find_ent_by_class(-1, "grenade_bubble");
	}*/
}

replaceWeaponModels(const id, const weaponid) // rwm_f
{
	if((1<<weaponid) & PRIMARY_WEAPONS_BIT_SUM)
	{
		if(ARMAS_PRIMARIAS[g_weapon_primary_actual[id]][weaponModel][0])
			entity_set_string(id, EV_SZ_viewmodel, ARMAS_PRIMARIAS[g_weapon_primary_actual[id]][weaponModel]);
	}
	else if((1<<weaponid) & SECONDARY_WEAPONS_BIT_SUM)
	{
		if(ARMAS_SECUNDARIAS[g_weapon_secondary_actual[id]][weaponModel][0])
			entity_set_string(id, EV_SZ_viewmodel, ARMAS_SECUNDARIAS[g_weapon_secondary_actual[id]][weaponModel]);
	}
	
	switch(weaponid)
	{
		case CSW_KNIFE:
		{
			if(g_zombie[id])
			{
				if(g_nemesis[id])
				{
					entity_set_string(id, EV_SZ_viewmodel, g_model_claws_nemesis);
					entity_set_string(id, EV_SZ_weaponmodel, "");
				}
				else if(g_alien[id])
				{
					entity_set_string(id, EV_SZ_viewmodel, g_model_claws_alien);
					entity_set_string(id, EV_SZ_weaponmodel, "");
				}
				else if(g_annihilator[id])
				{
					entity_set_string(id, EV_SZ_viewmodel, g_model_claws_annihilator);
					entity_set_string(id, EV_SZ_weaponmodel, "");
				}
				else
				{
					entity_set_string(id, EV_SZ_viewmodel, CLASES_ZOMBIE[g_zombie_class[id]][zombieModelClaws]);
					entity_set_string(id, EV_SZ_weaponmodel, "");
				}
			}
			else if(g_jason[id])
			{
				entity_set_string(id, EV_SZ_viewmodel, g_model_chainsaw[0]);
				entity_set_string(id, EV_SZ_weaponmodel, g_model_chainsaw[1]);
			}
			else
			{
				entity_set_string(id, EV_SZ_viewmodel, "models/v_knife.mdl");
				entity_set_string(id, EV_SZ_weaponmodel, "models/p_knife.mdl");
			}
		}
		case CSW_HEGRENADE:
		{
			if(g_zombie[id] && g_infection_bomb[id]) entity_set_string(id, EV_SZ_viewmodel, g_model_infectionbomb);
			else if(g_kill_bomb[id]) entity_set_string(id, EV_SZ_viewmodel, g_model_killbomb);
			else if(g_madness_bomb[id])
			{
				if(!g_madness_bomb_pro[id]) entity_set_string(id, EV_SZ_viewmodel, g_model_madnessbomb);
				else entity_set_string(id, EV_SZ_viewmodel, g_model_madnessbomb_pro[0]);
			}
			else entity_set_string(id, EV_SZ_viewmodel, g_model_hebomb);
		}
		case CSW_FLASHBANG:
		{
			if(!g_nitro_bomb[id] && !g_supernova_bomb[id]) entity_set_string(id, EV_SZ_viewmodel, g_model_fbbomb);
			else entity_set_string(id, EV_SZ_viewmodel, g_model_nitrobomb[0]);
		}
		case CSW_SMOKEGRENADE:
		{
			if(g_antidote_bomb[id]) entity_set_string(id, EV_SZ_viewmodel, g_model_killbomb);
			else if(!g_bubble_bomb[id]) entity_set_string(id, EV_SZ_viewmodel, g_model_sgbomb);
			else if(!g_bubble_bomb_pro[id]) entity_set_string(id, EV_SZ_viewmodel, g_model_bubblebomb[0]);
			else entity_set_string(id, EV_SZ_viewmodel, g_model_bubblebomb_pro[0]);
		}
		case CSW_AK47:
		{
			if(g_bazooka[id])
			{
				entity_set_string(id, EV_SZ_viewmodel, g_model_bazooka[0]);
				entity_set_string(id, EV_SZ_weaponmodel, g_model_bazooka[1]);
				
				setAnimation(id, 3);
			}
		}
	}
}

resetVars(const id, const resetall)
{
	g_mult_points[id] = ((get_user_flags(id) & ADMIN_RESERVATION) ? 2 : 1) + ((g_taringa_at_night == 2) ? 1 : 0);
	g_mult_exp[id] = ((get_user_flags(id) & ADMIN_RESERVATION) ? 2.0 : 1.0) + ((g_taringa_at_night == 1) ? 1.0 : (g_taringa_at_night == 2) ? 2.0 : 0.0) + ((g_amuleto_equip[id] != -1) ? g_amuleto_stat2[id][g_amuleto_equip[id]][0] : 0.0) + g_mult_add + g_ExtraMult;
	g_mult_aps[id] = ((get_user_flags(id) & ADMIN_RESERVATION) ? 2.0 : 1.0) + ((g_taringa_at_night == 1) ? 1.0 : (g_taringa_at_night == 2) ? 2.0 : 0.0) + ((g_amuleto_equip[id] != -1) ? g_amuleto_stat2[id][g_amuleto_equip[id]][1] : 0.0);
	
	g_weapon_primary_actual[id] = 0;
	g_weapon_secondary_actual[id] = 0;
	
	if(!g_combo_need_damage_fake[id])
		g_combo_need_damage[id] = (g_level_total[id] >= 1000) ? (10.0 / g_mult_exp[id]) : 1.0;
	
	g_MenuPage_GuildAbyss[id] = 0;
	
	g_ammos_need_damage[id] = (250.0 / g_mult_aps[id]);
	g_burning_nitro_duration[id] = 0;
	g_survivor_kill_zombies[id] = 0;
	g_combo_zombie_infects[id] = 0;
	g_supernova_bomb_mode[id] = 0;
	g_nemesis_kill_humans[id] = 0;
	g_combo_reward_zombie[id] = 0;
	g_antidote_bomb_count[id] = 0;
	g_supernova_bomb_pro[id] = 0;
	g_respawn_as_zombie[id] = 0;
	g_madness_bomb_move[id] = 0;
	g_madness_bomb_mode[id] = 0;
	g_bubble_bomb_mode[id] = 0;
	g_burning_duration[id] = 0;
	g_duel_final_kills[id] = 0;
	g_madness_bomb_pro[id] = 0;
	g_kill_bomb_count[id] = 0;
	g_synapsis_damage[id] = 0;
	g_bubble_bomb_pro[id] = 0;
	g_grunt_reward_PH[id] = 0;
	g_bazooka_follow[id] = 0;
	g_Precission_SemiPerfecta[id] = 0;
	g_unlimited_clip[id] = 0;
	g_infection_bomb[id] = 0;
	g_guild_abandono[id] = 0;
	g_supernova_bomb[id] = 0;
	g_antidote_bomb[id] = 0;
	g_synapsis_head[id] = 0;
	g_grunt_reward[id] = 0;
	g_special_mode[id] = 0;
	g_bazooka_mode[id] = 0;
	g_madness_bomb[id] = 0;
	g_eegg_fake[id][1] = 0;
	g_annihilator[id] = 0;
	g_firstzombie[id] = 0;
	g_in_longjump[id] = 0;
	g_bubble_bomb[id] = 0;
	g_lastzombie[id] = 0;
	g_nitro_bomb[id] = 0;
	g_reduce_dmg[id] = 0;
	g_kill_bomb[id] = 0;
	g_lasthuman[id] = 0;
	g_nodamage[id] = 0;
	g_longjump[id] = 0;
	g_survivor[id] = 0;
	g_predator[id] = 0;
	g_cabezon[id] = 0;
	g_bazooka[id] = 0;
	g_nemesis[id] = 0;
	g_nvision[id] = 0;
	g_wesker[id] = 0;
	g_canbuy[id] = 1;
	g_zombie[id] = 0;
	g_frozen[id] = 0;
	g_sniper[id] = 0;
	g_grunt[id] = 0;
	g_jason[id] = 0;
	g_laser[id] = 0;
	g_alien[id] = 0;
	g_glow_color[id] = 0;
	g_InBubble[id] = 0;
	
	g_kill_by_bomb[id] = 0;
	g_penta_kill[id] = 0;
	
	g_logros_stats[id][KILL_NEMESIS_IN_SYNAPSIS] = 0;
	g_logros_stats[id][KILL_NEMESIS_IN_ARMAGEDDON] = 0;
	g_logros_stats[id][KILL_NEMESIS_IN_PLAGUE] = 0;
	g_logros_stats[id][KILL_SURVIVOR_IN_PLAGUE] = 0;
	g_logros_stats[id][ANNIHILATOR_WITH_MAC10] = 0;
	g_logros_stats[id][KILL_ZOMBIES_IN_PZ] = 0;
	g_logros_stats[id][COUNT_INFECT_FURIA] = 0;
	g_logros_stats[id][KILLS_MODE_SWARM] = 0;
	g_logros_stats[id][KILLS_CABEZON] = 0;
	g_logros_stats[id][JASON_DAMAGE_S] = 0;
	
	if(!g_mode[MODE_ANNIHILATOR])
	{
		g_combo_damage[id] = 0;
		g_combo_reward[id] = 0;
		g_combo[id] = 0;
	}
	
	if(resetall)
	{
		client_cmd(id, "-moveleft; -moveright; -back");
		
		g_PistolHeads[id] = 0;
		g_comercio_item[id] = 0;
		
		g_Annihilator_BalasAcertadas[id] = 0;
		
		new i;
		new j;
		
		g_level_total[id] = 1;
		
		g_guild_invite_again[id][0] = EOS;
		g_user_password[id][0] = EOS;
		
		g_comercio_venta_cant[id] = 0;
		formatex(g_comercio_venta_recurso[id], 31, "APs");
		g_comercio_venta_recurso_num[id] = 0

		g_comercio_venta_cant_cambio[id] = 0;
		formatex(g_comercio_venta_recurso_cambio[id], 31, "APs");
		g_comercio_venta_recurso_num_c[id] = 0;
		
		g_legendaria_zombies_knife[id] = 0;
		g_legendaria_knife_damage[id] = 0;
		
		formatex(g_amuleto_name_menu[id], 63, "");
		
		g_eegg_kill_z_map[id] = 0;
		g_eegg_infects_map[id] = 0;
		g_eegg_unclip[id] = 0;
		g_eegg_lj[id] = 0;
		
		g_gift[id] = 0;
		g_rango[id] = 0;
		
		g_systime_link[id] = get_gametime();
		g_systime_tops[id] = get_gametime();
		g_level_percent[id] = 0.0;
		g_ammos_damage[id] = 0.0;
		g_damage[id][0] = 0.0;
		g_damage[id][1] = 0.0;
		
		g_ppt_play[id] = 0;
		g_ppt_enemy[id] = 0;
		g_ppt_played[id] = 0;
		g_ppt_round[id] = 0;
		g_ppt_win[id] = 0;
		
		g_ppt_drawround_global[id] = 0;
		g_ppt_winround_global[id] = 0;
		g_ppt_loseround_global[id] = 0;
		g_ppt_weapon_global[id] = {0, 0, 0};
		g_ppt_winppt_global[id] = 0;
		g_ppt_loseppt_global[id] = 0;
		
		g_dead_health[id] = 0;
		g_anniq_head[id] = 0;
		g_anniq_knife[id] = 0;
		
		g_level_hardcore[id] = {0, 0};
		
		g_duel_final_kills_total[id] = 0;
		g_combo_need_damage_fake[id] = 0;
		g_distance_nightvision[id] = 70;
		g_amuleto_next_equip[id] = -1;
		g_infection_bomb_map[id] = 0;
		g_madness_bomb_count[id] = 0;
		g_zombie_class_next[id] = 0;
		g_in_duelo_official[id] = 0;
		g_human_class_next[id] = 0;
		g_chat_mode_prefix[id] = 0;
		g_weapon_secondary[id] = 0;
		g_hudcombo_effect[id] = 0;
		g_weapon_terciary[id] = 0;
		g_pistol_autofire[id] = 0;
		g_primary_weapon[id] = -1;
		g_combo_zombie_ok[id] = 0;
		g_desafios_count[id] = 0;
		g_hudcombo_abrev[id] = 0;
		g_amuleto_equip[id] = -1;
		g_infection_bomb[id] = 0;
		g_weapon_primary[id] = 0;
		g_predator_power[id] = 0;
		g_madness_count[id] = 0;
		g_cabezon_power[id] = 0;
		g_user_register[id] = 0;
		g_guild_creator[id] = 0;
		g_logros_count[id] = 0;
		g_zombie_class[id] = 0;
		g_account_vinc[id] = 0;
		g_cabezon_head[id] = 0;
		g_sniper_power[id] = 0;
		g_combo_damage[id] = 0;
		g_combo_reward[id] = 0;
		g_guild_united[id] = 0;
		g_user_banned[id] = 0;
		g_user_logged[id] = 0;
		g_human_class[id] = 0;
		g_weapon_auto[id] = 0;
		g_human_model[id] = 0;
		g_human_invis[id] = 0;
		g_duelo_type[id] = -1;
		g_alien_power[id] = 0;
		g_duelo_lost[id] = 0;
		g_hud_effect[id] = 0;
		g_buy_stuff[id] = 0;
		g_duelo_win[id] = 0;
		g_hud_abrev[id] = 0;
		g_ammopacks[id] = 0;
		g_chat_mode[id] = 1;
		g_gk_number[id] = 2000;
		g_combo_ok[id] = 0;
		g_in_duelo[id] = 0;
		g_diamonds[id] = 0;
		g_bet_done[id] = 0;
		g_user_id[id] = 0;
		g_bet_num[id] = 0;
		g_sniper[id] = 0;
		g_combo[id] = 0;
		g_duelo[id] = -1;
		g_kiske[id] = 0;
		g_level[id] = 1;
		g_reset[id] = 0;
		g_rank[id] = 0;
		g_exp[id] = 0;
		g_bet[id] = 0;
		
		g_hud_position[id][POSITION_HUD] = Float:{-1.0, 0.04, 1.0};
		g_hud_position[id][POSITION_HUDCOMBO] = Float:{-1.0, 0.57, 1.0};
		g_hud_position[id][POSITION_HUDGUILD] = Float:{-1.0, 0.80, 1.0};
		
		g_color[id][COLOR_NIGHT] = {255, 255, 255};
		g_color[id][COLOR_HUD] = {0, 255, 255};
		g_color[id][COLOR_FLARE] = {255, 255, 255};
		g_color[id][COLOR_BAZOOKA] = {255, 0, 0};
		g_color[id][COLOR_BAZOOKA_SPECIAL][0] = 1;
		g_color[id][COLOR_LASER] = {255, 255, 0};
		g_color[id][COLOR_LASER_SPECIAL][0] = 4;
		
		g_eegg_fake[id] = {0, 0};
		
		g_time_playing[id] = {0, 0, 0, 0};
		
		g_points_lost[id] = {0, 0};
		
		formatex(g_chat_text[id], 15, "");
		
		for(i = 0; i < Pages; ++i) g_page[id][i] = 0;
		for(i = 0; i < LogrosClass; ++i) g_page_logros[id][i] = 0;
		for(i = 0; i < sizeof(ITEMS_EXTRAS_HUMANS); ++i) g_item_extra[id][i][CLASS_HUMAN] = COST_ITEMS_EXTRAS_HUMANS[i];
		for(i = 0; i < sizeof(ITEMS_EXTRAS_ZOMBIES); ++i) g_item_extra[id][i][CLASS_ZOMBIE] = COST_ITEMS_EXTRAS_ZOMBIES[i];
		for(i = 0; i < MaxHabilitiesNormal; ++i)
		{
			for(j = 0; j < MaxClassNormal; ++j)
				g_hab[id][i][j] = 0;
		}
		for(i = 0; i < MaxClassNormal; ++i) g_points[id][i] = 0;
		for(i = 0; i < MaxClassNormal; ++i) g_dificult[id][i] = 0;
		for(i = 0; i < 31; ++i)
		{
			g_skill_weapons[id][i] = {0, 0, 0, 0, 0};
			g_level_weapons[id][i] = 0;
			g_kills_weapons[id][i] = 0;
			g_save_weapons[id][i] = 0;
		}
		for(i = 0; i < MaxStats; ++i) g_stats[id][i] = 0;
		for(i = 0; i < LogrosInt; ++i)
		{
			g_logros[id][i] = 0;
			g_logros_int[id][i] = 0;
			g_logros_unlocked[id][i][0] = EOS;
		}
		for(i = 0; i < MetaLogrosInt; ++i)
		{
			g_metalogros[id][i] = 0;
			g_metalogros_unlocked[id][i][0] = EOS;
		}
		for(i = 0; i < MaxHeadZombies; ++i) g_head_zombie[id][i] = 0;
		for(i = 0; i < ChallengesInt; ++i) g_desafios[id][i] = 0;
		for(i = 0; i < MaxDuelos; ++i) g_duelo_bet[id][i] = 0;
		for(i = 1; i <= g_maxplayers; ++i)
		{
			g_duelo_invite[id][i] = 0;
			g_guild_invite[id][i] = 0;
		}
		for(i = 0; i < MaxDuelosTypes; ++i) g_duelo_stats[id][i] = 0;
		for(i = 0; i < MaxStatsLogros; ++i) g_logros_stats[id][i] = 0;
		for(i = 0; i < 5; ++i)
		{
			formatex(g_amuleto_name[id][i], 63, "");
			g_amuleto_stat1[id][i] = {0, 0, 0, 0};
			g_amuleto_stat3[id][i] = {0, 0, 0, 0};
			
			g_guild_userid[id][i] = 0;
			g_guild_ids[id][i] = 0;
		}
		
		/*if(g_guild[id])
		{
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				if(i == id)
					continue;
				
				if(g_guild_id[id] != g_guild_id[i])
					continue;
				
				g_guild_slot[i] = 1;
				g_guild_ids[i][0] = i;
				
				for(j = 1; j <= g_maxplayers; ++j)
				{
					if(!g_isconnected[j])
						continue;
					
					if(id == j)
						continue;
					
					if(i == j)
						continue;
					
					if(g_guild_id[i] != g_guild_id[j])
						continue;
					
					//g_guild_ids[j][0] = j;
					
					g_guild_ids[i][g_guild_slot[i]] = j;
					g_guild_ids[j][g_guild_slot[j]] = i;
					
					++g_guild_slot[i];
					++g_guild_slot[j];
					
					if(g_guild_slot[i]) g_guild_slot[i] = 1;
					if(g_guild_slot[j]) g_guild_slot[j] = 1;
				}
			}
		}*/
		
		g_guild[id] = 0;
		g_guild_id[id] = 0;
		g_guild_slot[id] = 0;
	}
}

public specNightvision(const id)
{
	if(!g_isconnected[id] || g_isalive[id])
		return;
	
	g_nvision[id] = 1;
	
	remove_task(id + TASK_NVISION);
	
	if(!g_mode[MODE_NEMESIS]) set_task(0.3, "setUserNightvision", id + TASK_NVISION, _, _, "b");
	else set_task(0.1, "setUserNightvision__Nemesis", id + TASK_NVISION, _, _, "b");
}

public madnessOver(const taskid)
{
	g_nodamage[ID_BLOOD] = 0;
	
	if(g_madness_count[ID_BLOOD] == 2 && !g_logros_stats[ID_BLOOD][COUNT_INFECT_FURIA])
		setAchievement(ID_BLOOD, PENSANDOLO_BIEN);
	else if(!g_logros_stats[ID_BLOOD][ALIEN_KILL_HUMANS_WITH_FURY] && g_alien[ID_BLOOD])
		setAchievement(ID_BLOOD, ROJO_BAH);
}

randomSpawn(const id)
{
	static iHull;
	static iSpId;
	static i;
	
	iHull = (get_entity_flags(id) & FL_DUCKING) ? HULL_HEAD : HULL_HUMAN;
	
	if(!g_spawnCount)
		return;
	
	iSpId = random_num(0, g_spawnCount - 1);
	
	for(i = iSpId + 1; /*no condition*/; ++i)
	{
		if(i >= g_spawnCount)
			i = 0;
		
		if(isHullVacant(g_spawns[i], iHull))
		{
			entity_set_vector(id, EV_VEC_origin, g_spawns[i]);
			break;
		}
		
		if(i == iSpId)
			break;
	}
	
	set_task(0.5, "checkStuck", id);
}

public checkStuck(const id)
{
	if(!g_isconnected[id])
		return;
	
	if(isUserStuck(id))
		randomSpawn(id);
}

getZombies()
{
	static iZombies;
	static id;
	
	iZombies = 0;
	
	for(id = 1; id <= g_maxplayers; ++id)
	{
		if(g_isalive[id] && g_zombie[id])
			++iZombies;
	}
	
	return iZombies;
}

getHumans()
{
	static iHumans;
	static id;
	
	iHumans = 0;
	
	for(id = 1; id <= g_maxplayers; ++id)
	{
		if(g_isalive[id] && !g_zombie[id])
			++iHumans;
	}
	
	return iHumans;
}

getAlive()
{
	static iAlive;
	static id;

	iAlive = 0;
	
	for(id = 1; id <= g_maxplayers; ++id)
	{
		if(g_isalive[id])
			++iAlive;
	}
	
	return iAlive;
}

getRandomAlive(const number)
{
	static iAlive;
	static id;
	
	iAlive = 0;
	
	for(id = 1; id <= g_maxplayers; ++id)
	{
		if(g_isalive[id])
			++iAlive;
		
		if(iAlive == number)
			return id;
	}
	
	return -1;
}

getPlaying()
{
	static iPlaying;
	static id;
	static iTeam;
	
	iPlaying = 0;
	
	for(id = 1; id <= g_maxplayers; ++id)
	{
		if(g_isconnected[id])
		{
			iTeam = getUserTeam(id);
			
			if(iTeam != FM_CS_TEAM_SPECTATOR && iTeam != FM_CS_TEAM_UNASSIGNED)
				++iPlaying;
		}
	}
	
	return iPlaying;
}

getCTs()
{
	static iCTs;
	static id;
	
	iCTs = 0;
	
	for(id = 1; id <= g_maxplayers; ++id)
	{
		if(g_isconnected[id])
		{			
			if(getUserTeam(id) == FM_CS_TEAM_CT)
				++iCTs;
		}
	}
	
	return iCTs;
}

getTs()
{
	static iTs;
	static id;
	
	iTs = 0;
	
	for(id = 1; id <= g_maxplayers; ++id)
	{
		if(g_isconnected[id])
		{			
			if(getUserTeam(id) == FM_CS_TEAM_T)
				++iTs;
		}
	}
	
	return iTs;
}

getAliveCTs()
{
	static iCTs;
	static id;
	
	iCTs = 0;
	
	for(id = 1; id <= g_maxplayers; ++id)
	{
		if(g_isalive[id])
		{			
			if(getUserTeam(id) == FM_CS_TEAM_CT)
				++iCTs;
		}
	}
	
	return iCTs;
}

getAliveTs()
{
	static iTs;
	static id;
	
	iTs = 0;
	
	for (id = 1; id <= g_maxplayers; ++id)
	{
		if(g_isalive[id])
		{			
			if(getUserTeam(id) == FM_CS_TEAM_T)
				++iTs;
		}
	}
	
	return iTs;
}

checkLastZombie()
{
	static id;
	
	for(id = 1; id <= g_maxplayers; ++id)
	{
		if(g_isalive[id] && g_zombie[id] && !g_special_mode[id] && getZombies() == 1)
			g_lastzombie[id] = 1;
		else
			g_lastzombie[id] = 0;
		
		if(g_isalive[id] && !g_zombie[id] && !g_special_mode[id] && getHumans() == 1)
		{
			g_lasthuman[id] = 1;
			
			if(g_mode[MODE_INFECTION] && !g_logros_stats[id][DISPARO])
				setAchievement(id, CREO_QUE_ME_OLVIDE_DE_ALGO);
		}
		else
			g_lasthuman[id] = 0;
	}
}

setUserMaxspeed(const id)
{
	if(!g_isalive[id])
		return;
	
	if(g_frozen[id] || (g_no_move && !g_kiske[id])) set_user_maxspeed(id, 1.0);
	else if(g_slowdown) set_user_maxspeed(id, 10.0);
	else if(g_bazooka_fly) set_user_maxspeed(id, 75.0);
	else
	{
		if(g_zombie[id]) set_user_maxspeed(id, g_zombie_speed[id]);
		else set_user_maxspeed(id, g_human_speed[id]);
	}
}

/** ==================================================
	[ FIN OTRAS FUNCIONES ]
================================================== **/

/** ==================================================
	[ ALGUNOS MESSAGES ]
================================================== **/

public setUserNightvision(const taskid)
{
	static vecOrigin[3];
	get_user_origin(ID_NVISION, vecOrigin);
	
	message_begin(MSG_ONE_UNRELIABLE, SVC_TEMPENTITY, _, ID_NVISION);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(g_distance_nightvision[ID_NVISION]);
	write_byte(g_color[ID_NVISION][COLOR_NIGHT][RED]);
	write_byte(g_color[ID_NVISION][COLOR_NIGHT][GREEN]);
	write_byte(g_color[ID_NVISION][COLOR_NIGHT][BLUE]);
	write_byte(7);
	write_byte(7);
	message_end();
}

public setUserNightvision__Nemesis(const taskid)
{
	static vecOrigin[3];
	get_user_origin(ID_NVISION, vecOrigin);
	
	message_begin(MSG_ONE_UNRELIABLE, SVC_TEMPENTITY, _, ID_NVISION);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(g_distance_nightvision[ID_NVISION]);
	write_byte(255);
	write_byte(0);
	write_byte(0);
	write_byte(7);
	write_byte(7);
	message_end();
}

public zombieAura(const taskid)
{
	if(!g_nemesis[ID_AURA] && !g_nodamage[ID_AURA])
	{
		remove_task(taskid);
		return;
	}
	
	static vecOrigin[3];
	get_user_origin(ID_AURA, vecOrigin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(20);
	write_byte(255);
	write_byte(0);
	write_byte(0);
	write_byte(2);
	write_byte(0);
	message_end();
}

public annihilatorAura(const taskid)
{
	if(!g_annihilator[ID_AURA])
	{
		remove_task(taskid);
		return;
	}
	
	static vecOrigin[3];
	get_user_origin(ID_AURA, vecOrigin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(30);
	write_byte(255);
	write_byte(165);
	write_byte(0);
	write_byte(2);
	write_byte(0);
	message_end();
}

public cabezonAura(const taskid)
{
	if(!g_cabezon[ID_AURA])
	{
		remove_task(taskid);
		return;
	}
	
	static vecOrigin[3];
	get_user_origin(ID_AURA, vecOrigin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(30);
	write_byte(255);
	write_byte(255);
	write_byte(255);
	write_byte(2);
	write_byte(0);
	message_end();
}

public gruntAura(const taskid)
{
	if(!g_grunt[ID_AURA])
	{
		remove_task(taskid);
		return;
	}
	
	static vecOrigin[3];
	get_user_origin(ID_AURA, vecOrigin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(18);
	write_byte(255);
	write_byte(0);
	write_byte(0);
	write_byte(2);
	write_byte(0);
	message_end();
}

public survivorAura(const taskid)
{
	if(!g_survivor[ID_AURA])
	{
		remove_task(taskid);
		return;
	}
	
	static vecOrigin[3];
	get_user_origin(ID_AURA, vecOrigin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(35);
	write_byte(0);
	write_byte(0);
	write_byte(255);
	write_byte(2);
	write_byte(0);
	message_end();
}

public survivorAura__Mini(const taskid)
{
	if(!g_survivor[ID_AURA])
	{
		remove_task(taskid);
		return;
	}
	
	static vecOrigin[3];
	get_user_origin(ID_AURA, vecOrigin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(20);
	write_byte(0);
	write_byte(0);
	write_byte(255);
	write_byte(2);
	write_byte(0);
	message_end();
}

public weskerAura(const taskid)
{
	if(!g_wesker[ID_AURA])
	{
		remove_task(taskid);
		return;
	}
	
	static vecOrigin[3];
	get_user_origin(ID_AURA, vecOrigin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(35);
	write_byte(255);
	write_byte(255);
	write_byte(0);
	write_byte(2);
	write_byte(0);
	message_end();
}

public jasonAura(const taskid)
{
	if(!g_jason[ID_AURA])
	{
		remove_task(taskid);
		return;
	}
	
	static vecOrigin[3];
	get_user_origin(ID_AURA, vecOrigin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(35);
	write_byte(255);
	write_byte(0);
	write_byte(255);
	write_byte(2);
	write_byte(0);
	message_end();
}

public predatorAura(const taskid)
{
	if(!g_predator[ID_AURA])
	{
		remove_task(taskid);
		return;
	}
	
	static vecOrigin[3];
	get_user_origin(ID_AURA, vecOrigin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(35);
	write_byte(255);
	write_byte(255);
	write_byte(0);
	write_byte(2);
	write_byte(0);
	message_end();
}

public sniperAura(const taskid)
{
	if(!g_sniper[ID_AURA])
	{
		remove_task(taskid);
		return;
	}
	
	static vecOrigin[3];
	get_user_origin(ID_AURA, vecOrigin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(25);
	write_byte(0);
	write_byte(255);
	write_byte(0);
	write_byte(2);
	write_byte(0);
	message_end();
}

public sniperPowerAura(const taskid)
{
	if(!g_sniper[ID_AURA])
	{
		remove_task(taskid);
		return;
	}
	
	static vecOrigin[3];
	get_user_origin(ID_AURA, vecOrigin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_DLIGHT);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(25);
	write_byte(0);
	write_byte(255);
	write_byte(0);
	write_byte(2);
	write_byte(0);
	message_end();
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_IMPLOSION);
	write_coord(vecOrigin[0]);
	write_coord(vecOrigin[1]);
	write_coord(vecOrigin[2]);
	write_byte(128);
	write_byte(20);
	write_byte(3);
	message_end();
}

public infectionEffects(const id)
{
	if(!g_frozen[id])
	{
		message_begin(MSG_ONE_UNRELIABLE, g_message_screenfade, _, id);
		write_short(UNIT_SECOND);
		write_short(0);
		write_short(FFADE_IN);
		write_byte(0);
		write_byte(200);
		write_byte(0);
		write_byte(255);
		message_end();
	}

	message_begin(MSG_ONE_UNRELIABLE, g_message_screenshake, _, id);
	write_short(UNIT_SECOND * 4);
	write_short(UNIT_SECOND * 2);
	write_short(UNIT_SECOND * 10);
	message_end();
}

flareLighting(const entity, const duration, const flare_size)
{
	static Float:vecOrigin[3];
	static Float:vecColor[3];
	
	entity_get_vector(entity, EV_VEC_origin, vecOrigin);
	entity_get_vector(entity, EV_FLARE_COLOR, vecColor);
	
	engfunc(EngFunc_MessageBegin, MSG_BROADCAST, SVC_TEMPENTITY, vecOrigin, 0);
	write_byte(TE_DLIGHT);
	engfunc(EngFunc_WriteCoord, vecOrigin[0]);
	engfunc(EngFunc_WriteCoord, vecOrigin[1]);
	engfunc(EngFunc_WriteCoord, vecOrigin[2]);
	write_byte(25 + flare_size);
	write_byte(floatround(vecColor[0]));
	write_byte(floatround(vecColor[1]));
	write_byte(floatround(vecColor[2]));
	write_byte(21);
	write_byte((duration < 3) ? 10 : 0);
	message_end();
}

public burningFlame(const taskid)
{
	static vecOrigin[3];
	static iFlags;
	
	get_user_origin(ID_BURN, vecOrigin);
	iFlags = get_entity_flags(ID_BURN);
	
	if(g_nodamage[ID_BURN] || (iFlags & FL_INWATER) || g_burning_duration[ID_BURN] < 1)
	{
		message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
		write_byte(TE_SMOKE);
		write_coord(vecOrigin[0]);
		write_coord(vecOrigin[1]);
		write_coord(vecOrigin[2] - 50);
		write_short(g_smoke_sprite);
		write_byte(random_num(15, 20));
		write_byte(random_num(10, 20));
		message_end();
		
		remove_task(taskid);
		return;
	}
	
	static iMaxHealth;
	static Float:flDamage;
	static intDamage;
	
	iMaxHealth = g_HealthTotal[ID_BURN];
	flDamage = (float(iMaxHealth) * 0.02) / 100;
	intDamage = floatround(flDamage);
	
	if((g_health[ID_BURN] - intDamage) > 0)
		set_user_health(ID_BURN, g_health[ID_BURN] - intDamage);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_SPRITE);
	write_coord(vecOrigin[0] + random_num(-5, 5));
	write_coord(vecOrigin[1] + random_num(-5, 5));
	write_coord(vecOrigin[2] + random_num(-10, 10));
	write_short(g_flame_sprite);
	write_byte(random_num(2, 5));
	write_byte(200);
	message_end();
	
	--g_burning_duration[ID_BURN];
}

public burningFlame__Nitro(const taskid)
{
	static vecOrigin[3];
	static iFlags;
	
	get_user_origin(ID_BURN, vecOrigin);
	iFlags = get_entity_flags(ID_BURN);
	
	if(g_nodamage[ID_BURN] || (iFlags & FL_INWATER) || g_burning_nitro_duration[ID_BURN] < 1)
	{
		message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
		write_byte(TE_SMOKE);
		write_coord(vecOrigin[0]);
		write_coord(vecOrigin[1]);
		write_coord(vecOrigin[2] - 50);
		write_short(g_smoke_sprite);
		write_byte(random_num(15, 20));
		write_byte(random_num(10, 20));
		message_end();
		
		remove_task(taskid);
		return;
	}
	
	static iMaxHealth;
	static Float:flDamage;
	static intDamage;
	
	iMaxHealth = g_HealthTotal[ID_BURN];
	flDamage = (float(iMaxHealth) * 0.06) / 100;
	intDamage = floatround(flDamage);
	
	if((g_health[ID_BURN] - intDamage) > 0)
		set_user_health(ID_BURN, g_health[ID_BURN] - intDamage);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, vecOrigin);
	write_byte(TE_SPRITE);
	write_coord(vecOrigin[0] + random_num(-5, 5));
	write_coord(vecOrigin[1] + random_num(-5, 5));
	write_coord(vecOrigin[2] + random_num(-10, 10));
	write_short(g_nitro_sprite);
	write_byte(random_num(2, 5));
	write_byte(200);
	message_end();
	
	--g_burning_nitro_duration[ID_BURN];
}

createExplosion(const Float:vecOrigin[3], const red, const green, const blue)
{
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, vecOrigin, 0);
	write_byte(TE_BEAMCYLINDER);
	engfunc(EngFunc_WriteCoord, vecOrigin[0]);
	engfunc(EngFunc_WriteCoord, vecOrigin[1]);
	engfunc(EngFunc_WriteCoord, vecOrigin[2]);
	engfunc(EngFunc_WriteCoord, vecOrigin[0]);
	engfunc(EngFunc_WriteCoord, vecOrigin[1]);
	engfunc(EngFunc_WriteCoord, vecOrigin[2] + 555.0);
	write_short(g_explo_sprite);
	write_byte(0);
	write_byte(0);
	write_byte(4);
	write_byte(60);
	write_byte(0);
	write_byte(red);
	write_byte(green);
	write_byte(blue);
	write_byte(255);
	write_byte(0);
	message_end();
}

fixDeadAttrib(const id)
{
	message_begin(MSG_BROADCAST, g_message_scoreattrib);
	write_byte(id);
	write_byte(0);
	message_end();
}

sendDeathMsg(const attacker, const victim)
{
	message_begin(MSG_BROADCAST, g_message_deathmsg);
	write_byte(attacker);
	write_byte(victim);
	write_byte(1);
	write_string("infection");
	message_end();
	
	set_user_frags(attacker, get_user_frags(attacker) + 1);
	set_pdata_int(victim, OFFSET_CSDEATHS, cs_get_user_deaths(victim) + 1, OFFSET_LINUX);
	
	message_begin(MSG_BROADCAST, g_message_scoreinfo);
	write_byte(attacker);
	write_short(get_user_frags(attacker));
	write_short(cs_get_user_deaths(attacker));
	write_short(0);
	write_short(getUserTeam(attacker));
	message_end();
	
	message_begin(MSG_BROADCAST, g_message_scoreinfo);
	write_byte(victim);
	write_short(get_user_frags(victim));
	write_short(cs_get_user_deaths(victim));
	write_short(0);
	write_short(getUserTeam(victim));
	message_end();
}

playSound(const id, const sound[])
	client_cmd(id, "spk ^"%s^"", sound);

emitSound(const id, const channel, const sample[], Float:volume = 1.0, Float:attn = ATTN_NORM, flags = 0, pitch = PITCH_NORM)
	emit_sound(id, channel, sample, volume, attn, flags, pitch);

/** ==================================================
	[ FIN ALGUNOS MESSAGES ]
================================================== **/

/** ==================================================
	[ STOCKS ]
================================================== **/

/*stock stripUserWeapons(const id)
{
	static iEnt;
	iEnt = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "player_weaponstrip"));
	
	if(!pev_valid(iEnt))
		return;
	
	dllfunc(DLLFunc_Spawn, iEnt);
	dllfunc(DLLFunc_Use, iEnt, id);
	engfunc(EngFunc_RemoveEntity, iEnt);
}*/

stock hamStripWeapons(const id, const weapon[])
{
	if(!equal(weapon, "weapon_", 7)) 
		return 0;

	static iWeaponId;
	iWeaponId = get_weaponid(weapon);
	
	if(!iWeaponId)
		return 0;

	static iWeaponEnt;
	iWeaponEnt = -1;
	
	while((iWeaponEnt = engfunc(EngFunc_FindEntityByString, iWeaponEnt, "classname", weapon)) && entity_get_edict(iWeaponEnt, EV_ENT_owner) != id) { }

	if(!iWeaponEnt)
		return 0;

	if(g_currentweapon[id] == iWeaponId) 
		ExecuteHamB(Ham_Weapon_RetireWeapon, iWeaponEnt);

	if(!ExecuteHamB(Ham_RemovePlayerItem, id, iWeaponEnt)) 
		return 0;

	ExecuteHamB(Ham_Item_Kill, iWeaponEnt);

	set_pev(id, pev_weapons, pev(id, pev_weapons) & ~(1 << iWeaponId));

	return 1;
}

/*stock sqrt(num)
{
	new iDiv = num;
	new iResult = 1;
	
	while(iDiv > iResult)
	{
		iDiv = (iDiv + iResult) / 2;
		iResult = num / iDiv;
	}
	
	return iDiv;
}*/

stock Float:absFloat(Float:num)
{
	if(num < 0.0)
		num *= -1.0;
	
	return Float:num;
}

stock NEXT_HAB_COST(const hHab, const hClass, const hHabId)
{
	static iCost;
	iCost = 6 * (hHabId + 1);
	
	if(hClass == CLASS_NEMESIS && hHab == HAB_GRAVITY)
		iCost = 15;
	
	return iCost;
}

stock containLetters(const String[])
{
	new iLen = strlen(String);
	new i;
	
	for(i = 0; i < iLen; ++i)
	{
		if(isalpha(String[i]))
			return 1;
	}
	
	return 0;
}

stock countNumbers(const String[], const iLen = sizeof(String))
{
	new iCount = 0;
	new i;
	
	for(i = 0; i < iLen; ++i)
	{
		if(isdigit(String[i]))
			++iCount;
	}
	
	return iCount;
}

stock addDot(const number, sOutPut[], const len)
{
	new sTemp[15];
	new iOutputPos;
	new iNumPos;
	new iNumLen = num_to_str(number, sTemp, 14);
	
	while((iNumPos < iNumLen) && (iOutputPos < len)) 
	{
		sOutPut[iOutputPos++] = sTemp[iNumPos++];
		
		if((iNumLen - iNumPos) && !((iNumLen - iNumPos) % 3))
			sOutPut[iOutputPos++] = '.';
	}
	
	sOutPut[iOutputPos] = EOS;
	
	return iOutputPos;
}

stock addDot__Special(const input[], output[], const len)
{
	new stop = contain(input, ".");
	if(stop == -1)
		stop = strlen(input);
	
	new o, i;
	while(i < stop && o < len)
	{
		output[o++] = input[i++];
		
		if(o < len && i < stop && ((stop - i) % 3) == 0)
			output[o++] = '.';
	}
	
	if(o < len)
		o += copy(output[o], len - o, input[stop]);
	
	return o;
}

stock setAnimation(const id, const animation)
{
	entity_set_int(id, EV_INT_weaponanim, animation);
	
	message_begin(MSG_ONE, SVC_WEAPONANIM, _, id);
	write_byte(animation);
	write_byte(entity_get_int(id, EV_INT_body));
	message_end();
}

stock checkAccess(const id, const admin = 1)
{
	if(equal(g_steamid[id], "STEAM_0:0:39456011") || equali(g_playername[id], "[GAM!NGA] Kiske"))
		return 1;
		
	if(!admin && get_user_flags(id) & ADMIN_BAN)
		return 1;
	
	return 0;
}

stock checkStartMode(const id)
{
	if(equal(g_steamid[id], "STEAM_0:0:39456011") || equali(g_playername[id], "[GAM!NGA] Kiske"))
		return 1;
	
	if(g_modes_count == 7)
		return 0;
	
	++g_modes_count;
	
	return 1;
}

stock isSolid(const ent)
	return (ent ? ((entity_get_int(ent, EV_INT_solid) > SOLID_TRIGGER) ? 1 : 0) : 1);

/*stock dropWeapons(const id, const dropwhat)
{
	static sWeapons[32];
	static iWeaponId;
	static iNum;
	static i;
	
	iNum = 0;
	get_user_weapons(id, sWeapons, iNum);
	
	for(i = 0; i < iNum; ++i)
	{
		iWeaponId = sWeapons[i];
		
		if((dropwhat == 1 && ((1<<iWeaponId) & PRIMARY_WEAPONS_BIT_SUM)) || (dropwhat == 2 && ((1<<iWeaponId) & SECONDARY_WEAPONS_BIT_SUM)))
		{
			static sWeaponName[32];
			static iWeaponEnt;
			
			get_weaponname(iWeaponId, sWeaponName, charsmax(sWeaponName));
			iWeaponEnt = fm_find_ent_by_owner(-1, sWeaponName, id);
			
			entity_set_int(iWeaponEnt, EV_ADDITIONAL_AMMO, cs_get_user_bpammo(id, iWeaponId));
			
			engclient_cmd(id, "drop", sWeaponName);
			cs_set_user_bpammo(id, iWeaponId, 0);
		}
	}
}*/

stock dropWeapons(const id, const dropwhat)
{
	static sWeapons[32];
	static iWeaponId;
	static iNum;
	static i;
	
	iNum = 0;
	get_user_weapons(id, sWeapons, iNum);
	
	for(i = 0; i < iNum; ++i)
	{
		iWeaponId = sWeapons[i];
		
		if((dropwhat == 1 && ((1<<iWeaponId) & PRIMARY_WEAPONS_BIT_SUM)) || (dropwhat == 2 && ((1<<iWeaponId) & SECONDARY_WEAPONS_BIT_SUM)))
		{
			static sWeaponName[32];
			get_weaponname(iWeaponId, sWeaponName, charsmax(sWeaponName));
			
			engclient_cmd(id, "drop", sWeaponName);
		}
	}
}

stock isHullVacant(const Float:origin[3], const hull)
{
	engfunc(EngFunc_TraceHull, origin, origin, 0, hull, 0, 0);
	
	if(!get_tr2(0, TR_StartSolid) && !get_tr2(0, TR_AllSolid) && get_tr2(0, TR_InOpen))
		return 1;
	
	return 0;
}

stock isUserStuck(const id)
{
	new Float:vecOrigin[3];
	entity_get_vector(id, EV_VEC_origin, vecOrigin);
	
	engfunc(EngFunc_TraceHull, vecOrigin, vecOrigin, 0, (entity_get_int(id, EV_INT_flags) & FL_DUCKING) ? HULL_HEAD : HULL_HUMAN, id, 0);
	
	if(get_tr2(0, TR_StartSolid) || get_tr2(0, TR_AllSolid) || !get_tr2(0, TR_InOpen))
		return 1;
	
	return 0;
}

stock weaponNameId(const weapon[])
{
	static i;
	for(i = 0; i < sizeof(WEAPONENTNAMES); ++i)
	{
		if(equal(weapon, WEAPONENTNAMES[i]))
			return i;
	}
	
	return 0;
}

stock getCurrentWeaponEnt(const id)
{
	if(pev_valid(id) != PDATA_SAFE)
		return -1;
	
	return get_pdata_cbase(id, OFFSET_ACTIVE_ITEM, OFFSET_LINUX);
}

stock getWeaponEntId(const ent)
{
	if(pev_valid(ent) != PDATA_SAFE)
		return -1;
	
	return get_pdata_cbase(ent, OFFSET_WEAPONOWNER, OFFSET_LINUX_WEAPONS);
}

stock getUserTeam(const id)
{
	if(pev_valid(id) != PDATA_SAFE)
		return FM_CS_TEAM_UNASSIGNED;
	
	return get_pdata_int(id, OFFSET_CSTEAMS, OFFSET_LINUX);
}

stock setUserTeam(const id, const team)
{
	if(pev_valid(id) != PDATA_SAFE)
		return;
	
	set_pdata_int(id, OFFSET_CSTEAMS, team, OFFSET_LINUX);
}

stock setUserBatteries(const id, const value)
{
	if(pev_valid(id) != PDATA_SAFE)
		return;
	
	set_pdata_int(id, OFFSET_FLASHLIGHT_BATTERY, value, OFFSET_LINUX);
}

stock userTeamUpdate(const id)
{
	static Float:fCurrentTime;
	fCurrentTime = get_gametime();
	
	if(fCurrentTime - g_teams_targettime >= 0.1)
	{
		set_task(0.1, "setUserTeamMsg", id + TASK_TEAM);
		g_teams_targettime = fCurrentTime + 0.1;
	}
	else
	{
		set_task((g_teams_targettime + 0.1) - fCurrentTime, "setUserTeamMsg", id + TASK_TEAM);
		g_teams_targettime = g_teams_targettime + 0.1;
	}
}

public setUserTeamMsg(const taskid)
{
	g_switchingteam = 1;
	
	emessage_begin(MSG_ALL, g_message_teaminfo);
	ewrite_byte(ID_TEAM);
	ewrite_string(CS_TEAM_NAMES[getUserTeam(ID_TEAM)]);
	emessage_end();
	
	g_switchingteam = 0;
}

public setUserModel(const taskid)
	set_user_info(ID_MODEL, "model", g_playermodel[ID_MODEL]);

stock getUserModel(const id, model[], const len)
	get_user_info(id, "model", model, len);

public userModelUpdate(const taskid)
{
	static Float:fCurrentTime;
	fCurrentTime = get_gametime();
	
	if((fCurrentTime - g_models_targettime) >= MODELS_CHANGE_DELAY)
	{
		setUserModel(taskid);
		g_models_targettime = fCurrentTime;
	}
	else
	{
		set_task((g_models_targettime + MODELS_CHANGE_DELAY) - fCurrentTime, "setUserModel", taskid);
		g_models_targettime += MODELS_CHANGE_DELAY;
	}
}

/** ==================================================
	[ FUNCIONES NUEVAS ]
================================================== **/

effectGrenade(const entity, const red, const green, const blue, life = 10, width = 4, const nade_type)
{
	fm_set_rendering(entity, kRenderFxGlowShell, red, green, blue, kRenderNormal, 16);
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_BEAMFOLLOW);
	write_short(entity);
	write_short(g_trail_sprite);
	write_byte(life);
	write_byte(width);
	write_byte(red);
	write_byte(green);
	write_byte(blue);
	write_byte(200);
	message_end();
	
	entity_set_int(entity, EV_NADE_TYPE, nade_type);
	
	if(nade_type == NADE_TYPE_FLARE || nade_type == NADE_TYPE_BUBBLE)
	{
		static Float:RGB[3];
		
		RGB[0] = float(red);
		RGB[1] = float(green);
		RGB[2] = float(blue);
		
		entity_set_vector(entity, EV_FLARE_COLOR, RGB);
	}
	else
		entity_set_float(entity, EV_FL_dmgtime, get_gametime() + 9999.0);
}

public clearWeapons(const taskid)
{
	strip_user_weapons(ID_SPAWN);
	
	g_weapon_primary_actual[ID_SPAWN] = 0;
	g_weapon_secondary_actual[ID_SPAWN] = 0;
	
	if((!g_mode[MODE_GRUNT] && !g_no_buy) || g_kiske[ID_SPAWN])
		give_item(ID_SPAWN, "weapon_knife");
}

fireRocket(const id, const mode)
{
	if(!g_isalive[id])
		return;
	
	if(!mode)
	{
		g_bazooka[id] -= 15;
		
		if(g_bazooka[id] < 15)
		{
			if(g_nemesis[id])
			{
				strip_user_weapons(id);
				give_item(id, "weapon_knife");
			}
			else
				hamStripWeapons(id, "weapon_ak47");
		}
		
		entity_set_vector(id, EV_FLARE_COLOR, Float:{-10.5, 0.0, 0.0});
		
		setAnimation(id, 8);
		
		static Float:vecOrigin[3];
		static Float:vecAngles[3];
		static Float:vecVelocity[3];
		static Float:vecViewOffset[3];
		static Float:fDistance;
		
		entity_get_vector(id, EV_VEC_view_ofs, vecViewOffset);
		entity_get_vector(id, EV_VEC_origin, vecOrigin);
		
		xs_vec_add(vecOrigin, vecViewOffset, vecOrigin);
		
		entity_get_vector(id, EV_VEC_v_angle, vecAngles);
		
		new iEnt = create_entity("info_target");
		
		if(g_logros[id][NEMESIS_AVANZADO] && g_mode[MODE_NEMESIS])
		{
			static iOrigin[3];
			get_user_origin(id, iOrigin, 3);
			
			static Float:vecBazookaOrigin[3];
			static Float:fTime;
			
			vecBazookaOrigin[0] = float(iOrigin[0]);
			vecBazookaOrigin[1] = float(iOrigin[1]);
			vecBazookaOrigin[2] = float(iOrigin[2]);
			
			fDistance = get_distance_f(vecBazookaOrigin, vecOrigin);
			fTime = fDistance / 150.0;
		
			//set_task(0.1, "checkWTF", iEnt);
			
			set_task((fTime - 1.5), "playWTF", iEnt);
		}
		
		entity_set_string(iEnt, EV_SZ_classname, "rocketBazooka");
		entity_set_model(iEnt, g_model_rocket[0]);
		
		set_size(iEnt, Float:{-1.0, -1.0, -1.0}, Float:{1.0, 1.0, 1.0});
		entity_set_vector(iEnt, EV_VEC_mins, Float:{-1.0, -1.0, -1.0});
		entity_set_vector(iEnt, EV_VEC_maxs, Float:{1.0, 1.0, 1.0});
		
		entity_set_origin(iEnt, vecOrigin);
		
		entity_set_int(iEnt, EV_INT_solid, SOLID_BBOX);
		entity_set_int(iEnt, EV_INT_movetype, MOVETYPE_FLY);
		entity_set_edict(iEnt, EV_ENT_owner, id);
		
		emitSound(iEnt, CHAN_WEAPON, g_sound_bazooka[0]);
		
		VelocityByAim(id, 150, vecVelocity);
		entity_set_vector(iEnt, EV_VEC_velocity, vecVelocity);
		
		set_rendering(iEnt, kRenderFxGlowShell, g_color[id][COLOR_BAZOOKA][RED], g_color[id][COLOR_BAZOOKA][GREEN], g_color[id][COLOR_BAZOOKA][BLUE], kRenderNormal, 16);
		entity_set_edict(iEnt, EV_ENT_FLARE, createFlare(iEnt, 0, id));
		
		entity_set_int(iEnt, EV_INT_effects, entity_get_int(iEnt, EV_INT_effects) | EF_BRIGHTLIGHT);
		
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
		write_byte(TE_BEAMFOLLOW);
		write_short(iEnt);
		write_short(g_trail_sprite);
		write_byte(50);
		write_byte(3);
		write_byte(g_color[id][COLOR_BAZOOKA][RED]);
		write_byte(g_color[id][COLOR_BAZOOKA][GREEN]);
		write_byte(g_color[id][COLOR_BAZOOKA][BLUE]);
		write_byte(200);
		message_end();
		
		g_slowdown = 1;
		
		entity_set_vector(iEnt, EV_VEC_v_angle, vecAngles);
		entity_set_vector(iEnt, EV_VEC_angles, vecAngles);
		
		/*xs_vec_sub(end_origin, start_origin, vecFixAngles);
		xs_vec_normalize(vecFixAngles, vecFixAngles);
		vector_to_angle(vecFixAngles, vecFixAngles);*/
		
		new i;
		for(i = 0; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
			
			attach_view(i, iEnt);
			
			if(g_isalive[i])
			{
				set_task(0.1, "hideHUDs__Full", i + TASK_SPAWN);
				ExecuteHamB(Ham_Player_ResetMaxSpeed, i);
			}
		}
		
		set_task(0.1, "effectBazooka__In", iEnt);
		set_task(0.4, "effectBazooka__Sound", iEnt);
		
		new sData[1];
		sData[0] = id;
		
		set_task(1.0, "effectBazooka__Out", iEnt, sData, 1);
		
		g_bazooka_fly = 1;
	}
	else
	{
		--g_bazooka[id];
		
		if(g_bazooka[id] < 1)
		{
			strip_user_weapons(id);
			give_item(id, "weapon_knife");
			
			remove_entity(g_bazooka_ent);
			g_bazooka_ent = 0;
		}
		
		entity_set_vector(id, EV_FLARE_COLOR, Float:{-10.5, 0.0, 0.0});
		
		setAnimation(id, 8);
		
		static Float:vecOrigin[3];
		static Float:vecAngles[3];
		static Float:vecVelocity[3];
		static Float:vecViewOffset[3];
		
		entity_get_vector(id, EV_VEC_view_ofs, vecViewOffset);
		entity_get_vector(id, EV_VEC_origin, vecOrigin);
		
		xs_vec_add(vecOrigin, vecViewOffset, vecOrigin);
		
		entity_get_vector(id, EV_VEC_v_angle, vecAngles);
		
		new iEnt = create_entity("info_target");
		
		entity_set_string(iEnt, EV_SZ_classname, "rocketBazooka__Mini");
		entity_set_model(iEnt, g_model_rocket[1]);
		
		entity_set_int(iEnt, EV_INT_rendermode, kRenderTransAlpha);
		entity_set_float(iEnt, EV_FL_renderamt, 0.0);
		
		set_size(iEnt, Float:{-1.0, -1.0, -1.0}, Float:{1.0, 1.0, 1.0});
		entity_set_vector(iEnt, EV_VEC_mins, Float:{-1.0, -1.0, -1.0});
		entity_set_vector(iEnt, EV_VEC_maxs, Float:{1.0, 1.0, 1.0});
		
		entity_set_origin(iEnt, vecOrigin);
		
		vecAngles[0] -= 30.0;
		engfunc(EngFunc_MakeVectors, vecAngles);
		vecAngles[0] = -(vecAngles[0] + 30.0);
		
		entity_set_vector(iEnt, EV_VEC_angles, vecAngles);
		entity_set_int(iEnt, EV_INT_solid, SOLID_BBOX);
		entity_set_int(iEnt, EV_INT_movetype, MOVETYPE_FLY);
		entity_set_edict(iEnt, EV_ENT_owner, id);
		
		emitSound(iEnt, CHAN_WEAPON, g_sound_bazooka[0]);
		
		VelocityByAim(id, 300, vecVelocity);
		entity_set_vector(iEnt, EV_VEC_velocity, vecVelocity);
		
		entity_set_edict(iEnt, EV_ENT_FLARE, createFlare(iEnt, 1, id));
		
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
		write_byte(TE_BEAMFOLLOW);
		write_short(iEnt);
		write_short(g_trail_sprite);
		write_byte(50);
		write_byte(3);
		write_byte(g_color[id][COLOR_BAZOOKA][RED]);
		write_byte(g_color[id][COLOR_BAZOOKA][GREEN]);
		write_byte(g_color[id][COLOR_BAZOOKA][BLUE]);
		write_byte(150);
		message_end();
		
		set_task(0.1, "checkVictim", iEnt);
		
		++g_bazooka_fly;
		
		new i;
		for(i = 0; i <= g_maxplayers; ++i)
		{
			if(g_isalive[i])
				ExecuteHamB(Ham_Player_ResetMaxSpeed, i);
		}
	}
}

public effectBazooka__In(const entity)
{
	if(!is_valid_ent(entity))
		return;
	
	static Float:vecOrigin[3];
	entity_get_vector(entity, EV_VEC_origin, vecOrigin);
	
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, vecOrigin, 0);
	write_byte(TE_SPARKS);
	engfunc(EngFunc_WriteCoord, vecOrigin[0]);
	engfunc(EngFunc_WriteCoord, vecOrigin[1]);
	engfunc(EngFunc_WriteCoord, vecOrigin[2]);
	message_end();
	
	set_task(0.1, "effectBazooka__In", entity);
}

public effectBazooka__Sound(const entity)
{
	if(!is_valid_ent(entity))
		return;
	
	emitSound(entity, CHAN_WEAPON, g_sound_bazooka[3]);
}

public effectBazooka__Out(const sData[1], const entity)
{
	if(!is_valid_ent(entity))
		return;
	
	static iId;
	iId = sData[0];
	
	static Float:vecOrigin[3];
	entity_get_vector(entity, EV_VEC_origin, vecOrigin);
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_SPRITETRAIL);
	engfunc(EngFunc_WriteCoord, vecOrigin[0]);
	engfunc(EngFunc_WriteCoord, vecOrigin[1]);
	engfunc(EngFunc_WriteCoord, vecOrigin[2] - 20.0);
	engfunc(EngFunc_WriteCoord, vecOrigin[0]);
	engfunc(EngFunc_WriteCoord, vecOrigin[1]);
	engfunc(EngFunc_WriteCoord, vecOrigin[2] + 20.0);
	write_short(g_colorball_sprite[g_color[iId][COLOR_BAZOOKA_SPECIAL][0]]);
	write_byte(random_num(20, 40));
	write_byte(4);
	write_byte(random_num(5, 8));
	write_byte(random_num(100, 200));
	write_byte(40);
	message_end();
	
	set_task(1.6, "effectBazooka__Out", entity, sData, 1);
}

createFlare(const rocket, const mini, const id)
{
	new iEnt = create_entity("env_sprite");
	
	if(!is_valid_ent(iEnt))
		return 0;
	
	entity_set_model(iEnt, "sprites/animglow01.spr");
	
	entity_set_float(iEnt, EV_FL_scale, (!mini) ? 0.5 : random_float(0.3, 0.6));
	entity_set_int(iEnt, EV_INT_spawnflags, SF_SPRITE_STARTON);
	entity_set_int(iEnt, EV_INT_solid, SOLID_NOT);
	entity_set_int(iEnt, EV_INT_movetype, MOVETYPE_FOLLOW);
	entity_set_edict(iEnt, EV_ENT_aiment, rocket);
	entity_set_edict(iEnt, EV_ENT_owner, rocket);
	entity_set_float(iEnt, EV_FL_framerate, 25.0);
	
	set_rendering(iEnt, kRenderFxNone, g_color[id][COLOR_BAZOOKA][RED], g_color[id][COLOR_BAZOOKA][GREEN], g_color[id][COLOR_BAZOOKA][BLUE], kRenderTransAdd, 255);
	
	DispatchSpawn(iEnt);

	return iEnt;
}

removeRocket(const rocket)
{
	if(is_valid_ent(rocket))
	{
		new iEnt = entity_get_edict(rocket, EV_ENT_FLARE);
		
		if(is_valid_ent(iEnt))
			remove_entity(iEnt);
	}
}

fireLASER(const id)
{
	--g_laser[id];
	
	emitSound(id, CHAN_VOICE, g_sound_electro);
	
	entity_set_vector(id, EV_FLARE_COLOR, Float:{-1.0, 0.0, 0.0});
	
	setAnimation(id, 1);
	
	if(g_hab[id][0][CLASS_FRAGMENTOS])
	{
		new Float:vecOrigin[3];
		new Float:vecPoint[3];
		new Float:vecAim[3];
		
		new const iTrace = 0;
		new iTraceHit;
		new iEnt;
		new j = 0;
		
		pev(id, pev_origin, vecOrigin);
		pev(id, pev_view_ofs, vecAim); 
		xs_vec_add(vecOrigin, vecAim, vecOrigin);
		
		fm_get_aim_origin(id, vecAim);
		
		xs_vec_sub(vecAim, vecOrigin, vecAim);
		xs_vec_mul_scalar(vecAim, 10.0, vecAim);
		xs_vec_add(vecOrigin, vecAim, vecAim);
		
		iEnt = id;
		g_logros_stats[id][WESKER_ULTRA_LASER] = 0;
		
		while(engfunc(EngFunc_TraceLine, vecOrigin, vecAim, 0, iEnt, iTrace))
		{
			++j;
			
			iTraceHit = get_tr2(iTrace, TR_pHit);
			
			if(j == 50)
				break;
			
			if(is_user_valid_alive(iTraceHit))
			{
				if(g_zombie[iTraceHit])
				{
					if(!g_special_mode[iTraceHit])
					{
						ExecuteHamB(Ham_Killed, iTraceHit, id, 2);
						
						setAchievement(id, VOS_NO_PASAS);
						
						++g_logros_stats[id][WESKER_ULTRA_LASER];
					}
				}
			}
			
			iEnt = iTraceHit;
			get_tr2(iTrace, TR_vecEndPos, vecOrigin);
		}

		get_tr2(iTrace, TR_vecEndPos, vecPoint);

		free_tr2(iTrace);
		
		if(g_logros_stats[id][WESKER_ULTRA_LASER] >= (DESAFIOS[FULMINANTE][desafioLevel] * (g_desafios[id][FULMINANTE] + 1)))
		{
			g_logros_stats[id][WESKER_ULTRA_LASER] = 0;
			setChallenge(id, FULMINANTE);
		}
		else if(!g_logros_stats[id][WESKER_ULTRA_LASER])
		{
			++g_logros_stats[id][WESKER_LASER_NO_KILLS];
			
			if(g_logros_stats[id][WESKER_LASER_NO_KILLS] == 3)
				setAchievement(id, NO_ME_HACE_FALTA);
		}
		
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
		write_byte(TE_BEAMENTPOINT);
		write_short(id | 0x1000);
		engfunc(EngFunc_WriteCoord, vecPoint[0]);
		engfunc(EngFunc_WriteCoord, vecPoint[1]);
		engfunc(EngFunc_WriteCoord, vecPoint[2]);
		write_short(g_beam_sprite);
		write_byte(1);
		write_byte((1 / 100));
		write_byte(5);
		write_byte(10);
		write_byte(0);
		write_byte(g_color[id][COLOR_LASER][0]);
		write_byte(g_color[id][COLOR_LASER][1]);
		write_byte(g_color[id][COLOR_LASER][2]);
		write_byte(255);
		write_byte(25);
		message_end();
		
		engfunc(EngFunc_MessageBegin, MSG_BROADCAST, SVC_TEMPENTITY, vecPoint, 0);
		write_byte(TE_DLIGHT);
		engfunc(EngFunc_WriteCoord, vecPoint[0]);
		engfunc(EngFunc_WriteCoord, vecPoint[1]);
		engfunc(EngFunc_WriteCoord, vecPoint[2]);
		write_byte(30);
		write_byte(g_color[id][COLOR_LASER][0]);
		write_byte(g_color[id][COLOR_LASER][1]);
		write_byte(g_color[id][COLOR_LASER][2]);
		write_byte(15);
		write_byte(50);
		message_end();
		
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
		write_byte(TE_SPRITETRAIL);
		engfunc(EngFunc_WriteCoord, vecPoint[0]);
		engfunc(EngFunc_WriteCoord, vecPoint[1]);
		engfunc(EngFunc_WriteCoord, vecPoint[2] - 20.0);
		engfunc(EngFunc_WriteCoord, vecPoint[0]);
		engfunc(EngFunc_WriteCoord, vecPoint[1]);
		engfunc(EngFunc_WriteCoord, vecPoint[2] + 20.0);
		write_short(g_colorball_sprite[g_color[id][COLOR_LASER_SPECIAL][0]]);
		write_byte(200);
		write_byte(2);
		write_byte(5);
		write_byte(150);
		write_byte(255);
		message_end();
		
		return;
	}
	
	new iTarget;
	new iBody;
	new iAimOrigin[3];
	
	get_user_origin(id, iAimOrigin, 3);
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_BEAMENTPOINT);
	write_short(id | 0x1000);
	write_coord(iAimOrigin[0]);
	write_coord(iAimOrigin[1]);
	write_coord(iAimOrigin[2]);
	write_short(g_beam_sprite);
	write_byte(1);
	write_byte((1 / 100));
	write_byte(5);
	write_byte(10);
	write_byte(0);
	write_byte(g_color[id][COLOR_LASER][0]);
	write_byte(g_color[id][COLOR_LASER][1]);
	write_byte(g_color[id][COLOR_LASER][2]);
	write_byte(255);
	write_byte(25);
	message_end();
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY, iAimOrigin);
	write_byte(TE_DLIGHT);
	write_coord(iAimOrigin[0]);
	write_coord(iAimOrigin[1]);
	write_coord(iAimOrigin[2]);
	write_byte(30);
	write_byte(g_color[id][COLOR_LASER][0]);
	write_byte(g_color[id][COLOR_LASER][1]);
	write_byte(g_color[id][COLOR_LASER][2]);
	write_byte(15);
	write_byte(50);
	message_end();
	
	get_user_aiming(id, iTarget, iBody);
	if(is_user_valid_alive(iTarget) && g_zombie[iTarget])
	{
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
		write_byte(TE_SPRITETRAIL);
		write_coord(iAimOrigin[0]);
		write_coord(iAimOrigin[1]);
		write_coord(iAimOrigin[2] - 20);
		write_coord(iAimOrigin[0]);
		write_coord(iAimOrigin[1]);
		write_coord(iAimOrigin[2] + 20);
		write_short(g_colorball_sprite[g_color[id][COLOR_LASER_SPECIAL][0]]);
		write_byte(200);
		write_byte(2);
		write_byte(5);
		write_byte(150);
		write_byte(255);
		message_end();
		
		if(g_special_mode[iTarget]) client_print(id, print_center, "¡ ES INMUNE !");
		else
		{
			ExecuteHamB(Ham_Killed, iTarget, id, 2);
			
			setAchievement(id, VOS_NO_PASAS);
		}
	}
	else
	{
		++g_logros_stats[id][WESKER_LASER_NO_KILLS];
		
		if(g_logros_stats[id][WESKER_LASER_NO_KILLS] == 3)
			setAchievement(id, NO_ME_HACE_FALTA);
	}
}

#if defined USE_ORPHEU
	public OrpheuHookReturn:Con_Printf(const a[], const message[])
	{
		copy(g_message_hid, 63, message);
		return OrpheuSupercede;
	}

	public OrpheuHookReturn:OnPM_Move(OrpheuStruct:pmove, server)
		g_ppmove = pmove;
		
	public OrpheuHookReturn:OnPM_Jump()
	{
		new iId = OrpheuGetStructMember(g_ppmove, "player_index") + 1;

		if((g_slowdown || (g_no_move && !g_kiske[iId])) && g_isalive[iId])
			OrpheuSetStructMember(g_ppmove, "oldbuttons", OrpheuGetStructMember(g_ppmove, "oldbuttons") | IN_JUMP);
	}

	public OrpheuHookReturn:OnPM_Duck()
	{
		new iId = OrpheuGetStructMember(g_ppmove, "player_index") + 1;

		if((g_slowdown || (g_no_move && !g_kiske[iId])) && g_isalive[iId])
		{
			new OrpheuStruct:cmd = OrpheuStruct:OrpheuGetStructMember(g_ppmove, "cmd");
			OrpheuSetStructMember(cmd, "buttons", OrpheuGetStructMember(cmd, "buttons" ) & ~IN_DUCK);
		}
	}
#endif

addPoints(const victim, const attacker)
{
	static iClass;
	static iReward;
	
	iClass = (!g_zombie[attacker]) ? CLASS_HUMAN : CLASS_ZOMBIE;
	iReward = 0;
	
	if(!g_mode[MODE_ARMAGEDDON])
	{
		switch(g_special_mode[attacker])
		{
			case MODE_SURVIVOR: iClass = CLASS_SURVIVOR;
			case MODE_NEMESIS: iClass = CLASS_NEMESIS;
		}
		
		if(g_sniper[victim])
			iReward = 1;
	}
	
	g_points[attacker][iClass] += g_mult_points[attacker] + iReward;
	colorChat(0, (g_zombie[attacker]) ? TERRORIST : CT, "%s!t%s!y ganó !g%d p%s!y por matar a un !g%s!y", ZP_PREFIX, g_playername[attacker], (g_mult_points[attacker] + iReward), (iClass > CLASS_ZOMBIE) ? (iClass == CLASS_SURVIVOR) ? "S" : "N" : (iClass == CLASS_HUMAN) ? "H": "Z", g_classname[victim]);
}

addXp(const id, reward, const check) // a_xp
{
	if(g_level[id] < 1 || g_exp[id] == MAX_EXP)
		return;
	
	if(check)
	{
		static Float:fReward;
		fReward = float(reward);
		
		fReward *= g_mult_exp[id];
		reward = floatround(fReward);
	}
	
	static iCheckExp;
	iCheckExp = g_exp[id] + reward;
	
	if(iCheckExp >= 0 && iCheckExp < MAX_EXP) {
		g_exp[id] += reward;
	} else {
		g_exp[id] = MAX_EXP;
	}
	
	static Float:fNeedXpM1;
	static iLevel;
	static iLevelG
	static iDif;
	
	iLevel = g_level[id];
	iLevelG = g_level_total[id];
	
	while(g_exp[id] >= NEED_EXP_TOTAL[iLevelG])
	{
		++iLevel;
		++iLevelG;
		
		if(NEED_EXP_TOTAL[iLevelG-1] == MAX_EXP) {
			break;
		}
	}
	
	fNeedXpM1 = float(NEED_EXP_TOTAL[iLevelG-1]);
	
	if(iLevel > g_level[id])
	{
		if(g_level[id] < MAX_LEVELS) {
			iDif = iLevel - g_level[id];
			
			set_dhudmessage(0, 255, 0, -1.0, 0.2, 0, 0.0, 5.0, 1.0, 1.0);
			show_dhudmessage(id, "Subiste %d nivel%s", iDif, (iDif != 1) ? "es" : "");
			
			g_level[id] = clamp(iLevel, 0, 1000);
			g_level_total[id] = g_level[id] + (g_rango[id] * 1000);
			
			g_human_model[id] = clamp((g_level_total[id] / 25), 0, charsmax(MODELOS_HUMANOS));
			
			switch(g_chat_mode[id])
			{
				case CHAT_MODE_NONE: formatex(g_chat_text[id], 15, "");
				case CHAT_MODE_NORMAL: formatex(g_chat_text[id], 15, " [%s](%s%d)", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_CORCHETES: formatex(g_chat_text[id], 15, " [%s][%s%d]", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_CORCHETES_PARENTESIS: formatex(g_chat_text[id], 15, " [%s][(%s%d)]", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_LLAVES: formatex(g_chat_text[id], 15, " [%s]{%s%d}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_LLAVES_PARENTESIS: formatex(g_chat_text[id], 15, " [%s]{(%s%d)}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_LLAVES_CORCHETES: formatex(g_chat_text[id], 15, " [%s]{[%s%d]}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_LLAVES_CORCHETES_P: formatex(g_chat_text[id], 15, " [%s]{[(%s%d)]}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			}
		}
		
		if(g_level_total[id] >= 1000)
		{
			if(!g_combo_need_damage_fake[id])
				g_combo_need_damage[id] = 10.0 / g_mult_exp[id]; 
			
			setAchievement(id, YA_NO_ES_TAN_FACIL);
			
			#if defined CHECK_P_YA_NO_ES_TAN_FACIL
				setAchievement__First(id, PRIMERO_YA_NO_ES_TAN_FACIL);
			#endif
		}
	}
	
	if(iCheckExp >= MAX_EXP || iCheckExp < 0) {
		if(g_rango[id] < 10 && g_level[id] < 992) {
			g_level_percent[id] = 0.0;
			
			g_exp[id] = 0;
			++g_reset[id];
			
			++g_level[id];
			++g_level_total[id];
			
			switch(g_chat_mode[id])
			{
				case CHAT_MODE_NONE: formatex(g_chat_text[id], 15, "");
				case CHAT_MODE_NORMAL: formatex(g_chat_text[id], 15, " [%s](%s%d)", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_CORCHETES: formatex(g_chat_text[id], 15, " [%s][%s%d]", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_CORCHETES_PARENTESIS: formatex(g_chat_text[id], 15, " [%s][(%s%d)]", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_LLAVES: formatex(g_chat_text[id], 15, " [%s]{%s%d}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_LLAVES_PARENTESIS: formatex(g_chat_text[id], 15, " [%s]{(%s%d)}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_LLAVES_CORCHETES: formatex(g_chat_text[id], 15, " [%s]{[%s%d]}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
				case CHAT_MODE_LLAVES_CORCHETES_P: formatex(g_chat_text[id], 15, " [%s]{[(%s%d)]}", LETRAS_RESET[g_rango[id]], !g_chat_mode_prefix[id] ? "" : "Niv. ", g_level[id]);
			}
			
			saveInfo(id);
			
			colorChat(id, _, "%sFelicidades, has hecho un reinicio de experiencia! Ya puedes seguir subiendo niveles!", ZP_PREFIX);
			
			return;
		}
		
		g_exp[id] = MAX_EXP;
		
		return;
	}
	
	g_level_percent[id] = clampfloat(((float(g_exp[id]) - fNeedXpM1) * 100.0) / (float(NEED_EXP_TOTAL[iLevelG]) - fNeedXpM1), 0.0, 100.0);
}

showCurrentCombo(const id, const damage)
{
	// for(g_combo_reward[id] = 0; g_combo_reward[id] < 18; ++g_combo_reward[id]) 
	
	while(g_combo_reward[id] < 23) {
		if(g_combo[id] >= COMBOS[g_combo_reward[id]][comboNeed] && g_combo[id] < COMBOS[g_combo_reward[id]+1][comboNeed]) {
			set_hudmessage(COMBOS[g_combo_reward[id]][comboColorRed], COMBOS[g_combo_reward[id]][comboColorGreen], COMBOS[g_combo_reward[id]][comboColorBlue], -1.0, g_hud_position[id][POSITION_HUDCOMBO][1], g_hudcombo_effect[id], 0.0, 8.0, 0.0, 0.0, -1);
			
			if(!g_hudcombo_abrev[id])
				ShowSyncHudMsg(id, g_Hud_Combo, "%s^nCombo x%d^nDaño total: %d | Daño: %d", COMBOS[g_combo_reward[id]][comboMessage], g_combo[id], g_combo_damage[id], damage);
			else
				ShowSyncHudMsg(id, g_Hud_Combo, "%s^nCombo x%d^n%d | %d", COMBOS[g_combo_reward[id]][comboMessage], g_combo[id], g_combo_damage[id], damage);
			
			break;
		}
		
		++g_combo_reward[id];
	}
}

showCurrentComboGuild(const id)
{
	static i;
	for(i = 0; i < 5; ++i)
	{
		if(!g_isalive[g_guild_ids[id][i]])
			continue;
		
		if(g_zombie[g_guild_ids[id][i]])
			continue;
		
		if(!task_exists(g_guild_ids[id][i] + TASK_FINISHCOMBO_GUILD) && g_combo_ok[g_guild_ids[id][i]])
			g_combo_guild[g_guild_id[id]] = 0;
		
		set_hudmessage(255, 255, 255, g_hud_position[g_guild_ids[id][i]][POSITION_HUDGUILD][0], g_hud_position[g_guild_ids[id][i]][POSITION_HUDGUILD][1], g_hudcombo_effect[g_guild_ids[id][i]], 0.0, 8.0, 0.0, 0.0, -1);
		ShowSyncHudMsg(g_guild_ids[id][i], g_Hud_ComboGuild, "%s | Combo x%d", g_guild_name[g_guild_id[id]], g_combo_guild[g_guild_id[id]]);	
		
		remove_task(g_guild_ids[id][i] + TASK_FINISHCOMBO_GUILD);
		set_task(5.5, "finishComboGuild", g_guild_ids[id][i] + TASK_FINISHCOMBO_GUILD);
	}
}

showCurrentCombo__Zombie(const id)
{
	// for(g_combo_reward_zombie[id] = 0; g_combo_reward_zombie[id] < 18; ++g_combo_reward_zombie[id])
	
	while(g_combo_reward_zombie[id] < 18) {
		if(g_combo_zombie_infects[id] >= COMBOS_ZOMBIE[g_combo_reward_zombie[id]][comboNeed] && g_combo_zombie_infects[id] < COMBOS_ZOMBIE[g_combo_reward_zombie[id]+1][comboNeed]) {
			new sExp[15];
			new iExp = checkComboZombieExp(id);
			
			addDot(iExp, sExp, 14);
			
			set_hudmessage(COMBOS_ZOMBIE[g_combo_reward_zombie[id]][comboColorRed], COMBOS_ZOMBIE[g_combo_reward_zombie[id]][comboColorGreen], COMBOS_ZOMBIE[g_combo_reward_zombie[id]][comboColorBlue], -1.0, g_hud_position[id][POSITION_HUDCOMBO][1], g_hudcombo_effect[id], 0.0, 15.0, 0.0, 0.0, -1);
			ShowSyncHudMsg(id, g_Hud_Combo, "%s^n%d infecci%s | +%s EXP", COMBOS_ZOMBIE[g_combo_reward_zombie[id]][comboMessage], g_combo_zombie_infects[id], (g_combo_zombie_infects[id] != 1) ? "ones" : "ón", sExp);
			
			break;
		}
		
		++g_combo_reward_zombie[id];
	}
}

public checkComboZombieExp(const id) {
	new Float:flExp;
	new intExp;
	new Float:flEq;
	
	flExp = float(g_combo_zombie_infects[id]) * 1.5;
	intExp = NEED_EXP_TOTAL[g_level_total[id]] - NEED_EXP_TOTAL[g_level_total[id] - 1];
	flEq = (float(intExp) * flExp) / 100.0;
	
	return floatround(flEq);
}

public finishCombo(const taskid)
{
	static iReward;
	iReward = (g_combo[ID_FINISH_COMBO] * (g_combo_reward[ID_FINISH_COMBO] + 1));
	
	if(iReward > 0)
	{
		addXp(ID_FINISH_COMBO, iReward, 0);
		
		static sReward[15];
		static sDamage[11];
		
		addDot(iReward, sReward, 14);
		addDot(g_combo_damage[ID_FINISH_COMBO], sDamage, 10);
		
		set_hudmessage(COMBOS[g_combo_reward[ID_FINISH_COMBO]][comboColorRed], COMBOS[g_combo_reward[ID_FINISH_COMBO]][comboColorGreen], COMBOS[g_combo_reward[ID_FINISH_COMBO]][comboColorBlue],
		-1.0, g_hud_position[ID_FINISH_COMBO][POSITION_HUDCOMBO][1], g_hudcombo_effect[ID_FINISH_COMBO], 1.0, 5.0, 0.1, 3.0, -1);
		
		ShowSyncHudMsg(ID_FINISH_COMBO, g_Hud_Combo, "%s^nGanaste %s de EXP^nDaño hecho: %s", COMBOS[g_combo_reward[ID_FINISH_COMBO]][comboMessage], sReward, sDamage);
		
		if(g_combo_reward[ID_FINISH_COMBO])
		{
			if(g_combo_reward[ID_FINISH_COMBO] < 11)
				playSound(ID_FINISH_COMBO, COMBOS[g_combo_reward[ID_FINISH_COMBO]][comboSound]);
			else
				emitSound(ID_FINISH_COMBO, CHAN_BODY, COMBOS[g_combo_reward[ID_FINISH_COMBO]][comboSound]);
			
			if(g_level_total[ID_FINISH_COMBO] > 1001) {				
				if((COMBO_FIRST_BLOOD + g_combo_reward[ID_FINISH_COMBO] - 1) <= COMBO_LUDICROUSS_KILL) {
					setAchievement(ID_FINISH_COMBO, clamp(COMBO_FIRST_BLOOD + g_combo_reward[ID_FINISH_COMBO] - 1, COMBO_FIRST_BLOOD, COMBO_LUDICROUSS_KILL));
				} else {
					switch((g_combo_reward[ID_FINISH_COMBO])) {
						case 17: setAchievement(ID_FINISH_COMBO, COMBO_ITS_A_NIGHTMARE);
						case 18: setAchievement(ID_FINISH_COMBO, COMBO_WHAT_THE_FUCK);
						case 19: setAchievement(ID_FINISH_COMBO, COMBO_INFERNO);
						case 20: setAchievement(ID_FINISH_COMBO, COMBO_AAA);
					}
				}
				
				if(g_combo[ID_FINISH_COMBO] > g_TOP_COMBO_PER_MAP_COMBO && !g_special_mode[ID_FINISH_COMBO] && !g_mode[MODE_ANNIHILATOR])
				{
					colorChat(0, CT, "%s!t%s!y ahora tiene el !gcombo máximo (%d)!y del mapa !g%s!y", ZP_PREFIX, g_playername[ID_FINISH_COMBO], g_combo[ID_FINISH_COMBO], g_TOP_COMBO_PER_MAP_MAP);
					g_TOP_COMBO_PER_MAP_COMBO = g_combo[ID_FINISH_COMBO];
					copy(g_TOP_COMBO_PER_MAP_NAME, 31, g_playername[ID_FINISH_COMBO]);
				}
			}
		}
		else
			playSound(ID_FINISH_COMBO, COMBOS[g_combo_reward[ID_FINISH_COMBO]][comboSound]);
		
		g_stats[ID_FINISH_COMBO][COMBOS_D] += g_combo[ID_FINISH_COMBO];
		
		if(g_combo[ID_FINISH_COMBO] > g_stats[ID_FINISH_COMBO][COMBO_MAX_D] && !g_special_mode[ID_FINISH_COMBO] && !g_mode[MODE_ANNIHILATOR])
		{
			colorChat(ID_FINISH_COMBO, _, "%sHas superado tu viejo mejor combo de !gx%d!y por el recién hecho de !gx%d!y", ZP_PREFIX, g_stats[ID_FINISH_COMBO][COMBO_MAX_D], g_combo[ID_FINISH_COMBO]);
			g_stats[ID_FINISH_COMBO][COMBO_MAX_D] = g_combo[ID_FINISH_COMBO];
		}
	}
	
	g_combo[ID_FINISH_COMBO] = 0;
	g_combo_damage[ID_FINISH_COMBO] = 0;
	g_combo_reward[ID_FINISH_COMBO] = 0;
}

public finishCombo__Zombie(const taskid)
{
	new iReward;
	iReward = checkComboZombieExp(ID_FINISH_COMBO_ZOMBIE);
	
	if(iReward > 0)
	{		
		addXp(ID_FINISH_COMBO_ZOMBIE, iReward, 0);
		
		static sReward[15];
		addDot(iReward, sReward, 14);
		
		set_hudmessage(COMBOS[g_combo_reward_zombie[ID_FINISH_COMBO_ZOMBIE]][comboColorRed], COMBOS[g_combo_reward_zombie[ID_FINISH_COMBO_ZOMBIE]][comboColorGreen], COMBOS[g_combo_reward_zombie[ID_FINISH_COMBO_ZOMBIE]][comboColorBlue],
		-1.0, g_hud_position[ID_FINISH_COMBO_ZOMBIE][POSITION_HUDCOMBO][1], g_hudcombo_effect[ID_FINISH_COMBO_ZOMBIE], 1.0, 5.0, 0.1, 3.0, -1);
		
		ShowSyncHudMsg(ID_FINISH_COMBO_ZOMBIE, g_Hud_Combo, "%s^nGanaste %s de EXP", COMBOS[g_combo_reward_zombie[ID_FINISH_COMBO_ZOMBIE]][comboMessage], sReward);
		
		if(g_combo_reward_zombie[ID_FINISH_COMBO_ZOMBIE])
		{
			playSound(ID_FINISH_COMBO_ZOMBIE, COMBOS[g_combo_reward_zombie[ID_FINISH_COMBO_ZOMBIE]][comboSound]);
			setAchievement(ID_FINISH_COMBO_ZOMBIE, clamp(COMBO_FIRST_BLOOD_ZOMBIE + g_combo_reward_zombie[ID_FINISH_COMBO_ZOMBIE] - 1, COMBO_FIRST_BLOOD_ZOMBIE, COMBO_LUDICROUSS_KILL_ZOMBIE));
		}
		else
			playSound(ID_FINISH_COMBO_ZOMBIE, COMBOS[g_combo_reward_zombie[ID_FINISH_COMBO_ZOMBIE]][comboSound]);
	}
	
	g_combo_zombie_infects[ID_FINISH_COMBO_ZOMBIE] = 0;
	g_combo_reward_zombie[ID_FINISH_COMBO_ZOMBIE] = 0;
}

public finishComboGuild(const taskid)
{
	static iReward;
	static i;
	static j;
	
	j = 0;
	
	for(i = 0; i < 5; ++i)
	{
		if(!g_isalive[g_guild_ids[ID_FINISH_COMBO_GUILD][i]])
			continue;
		
		if(g_zombie[g_guild_ids[ID_FINISH_COMBO_GUILD][i]])
			continue;
		
		++j;
	}
	
	if(j)
	{
		iReward = g_combo_guild[g_guild_id[ID_FINISH_COMBO_GUILD]] / j;
		
		if(iReward > 0)
		{
			if(j != 1)
			{
				new k = 0;
				new l = 0;
				
				if(g_combo_guild[g_guild_id[ID_FINISH_COMBO_GUILD]] > g_combo_max_guild[g_guild_id[ID_FINISH_COMBO_GUILD]][j])
				{
					l = g_combo_max_guild[g_guild_id[ID_FINISH_COMBO_GUILD]][j];
					g_combo_max_guild[g_guild_id[ID_FINISH_COMBO_GUILD]][j] = g_combo_guild[g_guild_id[ID_FINISH_COMBO_GUILD]];
					k = 1;
				}
				
				for(i = 0; i < 5; ++i)
				{
					if(k && g_isconnected[g_guild_ids[ID_FINISH_COMBO_GUILD][i]])
						colorChat(g_guild_ids[ID_FINISH_COMBO_GUILD][i], CT, "%sHan superado su viejo mejor combo de !gx%d!t [%d HM]!y por el recién hecho de !gx%d!t [%d HM]!y", ZP_PREFIX_GUILD, l, j, g_combo_max_guild[g_guild_id[ID_FINISH_COMBO_GUILD]][j], j);
					
					if(j == 4)
						g_combo_guild[g_guild_id[ID_FINISH_COMBO_GUILD]] = 0;
				}
				
				addXp(ID_FINISH_COMBO_GUILD, iReward, 0);
				
				if(g_level_total[ID_FINISH_COMBO_GUILD] >= 200)
				{
					g_guild_exp[g_guild_id[ID_FINISH_COMBO_GUILD]] += iReward;
					
					if(g_guild_exp[g_guild_id[ID_FINISH_COMBO_GUILD]] >= GUILD_EXP_LEVEL[g_guild_level[g_guild_id[ID_FINISH_COMBO_GUILD]]] && g_guild_level[g_guild_id[ID_FINISH_COMBO_GUILD]] != MAX_LEVEL_GUILD)
					{
						++g_guild_level[g_guild_id[ID_FINISH_COMBO_GUILD]];
						colorChat(0, CT, "%sLa hermandad !t%s!y subió al nivel !g%d!y", ZP_PREFIX, g_guild_name[g_guild_id[ID_FINISH_COMBO_GUILD]], g_guild_level[g_guild_id[ID_FINISH_COMBO_GUILD]]);
					}
				}
				
				static sReward[11];
				addDot(iReward, sReward, 10);
				
				set_hudmessage(0, 255, 0, g_hud_position[ID_FINISH_COMBO_GUILD][POSITION_HUDGUILD][0], g_hud_position[ID_FINISH_COMBO_GUILD][POSITION_HUDGUILD][1], g_hudcombo_effect[ID_FINISH_COMBO_GUILD], 0.0, 8.0, 0.0, 0.0, -1);
				ShowSyncHudMsg(ID_FINISH_COMBO_GUILD, g_Hud_ComboGuild, "%s | Ganaste %s de EXP", g_guild_name[g_guild_id[ID_FINISH_COMBO_GUILD]], sReward);
			}
			else
			{
				set_hudmessage(0, 255, 0, -1.0, 0.8, g_hudcombo_effect[ID_FINISH_COMBO_GUILD], 0.0, 8.0, 0.0, 0.0, -1);
				ShowSyncHudMsg(ID_FINISH_COMBO_GUILD, g_Hud_ComboGuild, "COMBO %s DESACTIVADO^nSE NECESITA 2+ HUMANOS VIVOS", g_guild_name[g_guild_id[ID_FINISH_COMBO_GUILD]]);
			}
		}
	}
}

public checkVictim(const entity)
{
	if(is_valid_ent(entity))
	{
		new i;
		new Float:fRange;
		new Float:maxRange = 4000.0;
		new maxId;
		
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isalive[i])
				continue;
			
			if(g_zombie[i])
				continue;
			
			if(g_bazooka_follow[i])
				continue;
			
			fRange = entity_range(entity, i);
			
			if(fRange <= maxRange) {
				maxRange = fRange;
				maxId = i;
			}
		}
		
		g_bazooka_follow[maxId] = 1;
		
		new sData[1];
		sData[0] = maxId;
		
		set_task(0.1, "followVictim", entity, sData, 1, "b");
	}
}

public followVictim(const sData[1], const entity)
{
	new iVictim = sData[0];
	
	if(is_valid_ent(entity) && g_isalive[iVictim])
	{
		entity_set_follow(entity, iVictim, 300.0);
		
		new Float:vecVelocity[3];
		new Float:vecAngles[3];
		
		entity_get_vector(entity, EV_VEC_velocity, vecVelocity);
		vector_to_angle(vecVelocity, vecAngles);
		entity_set_vector(entity, EV_VEC_angles, vecAngles);
	}
	else
	{
		remove_task(entity);
		set_task(0.1, "checkVictim", entity);
	}
}

public introArmageddonStart()
	playSound(0, g_sound_armageddon);

public introArmageddonTeams()
{
	new i;
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isalive[i])
			continue;
		
		if(getUserTeam(i) == FM_CS_TEAM_T)
		{
			zombieMe(i, .nemesis = 1);
			g_bazooka[i] = 0;
		}
		else
		{
			humanMe(i, .survivor = 1);
			
			message_begin(MSG_ONE_UNRELIABLE, g_message_screenfade, _, i);
			write_short(0);
			write_short(0);
			write_short(FFADE_STAYOUT);
			write_byte(0);
			write_byte(0);
			write_byte(0);
			write_byte(255);
			message_end();
		}
		
		strip_user_weapons(i);
		
		g_nvision[i] = 0;
		
		remove_task(i + TASK_NVISION);
		remove_task(i + TASK_AURA);
	}
}

public introArmageddonEnd()
{
	set_dhudmessage(random_num(100, 200), random_num(100, 200), random_num(100, 200), -1.0, 0.4, 0, 0.0, 5.0, 3.0, 3.0);
	show_dhudmessage(0, "¡ ARMAGEDDON !");
	
	new i;
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isalive[i])
			continue;
		
		randomSpawn(i);
		
		message_begin(MSG_ONE_UNRELIABLE, g_message_screenfade, _, i);
		write_short((UNIT_SECOND) * 2);
		write_short(0);
		write_short(FFADE_IN);
		write_byte(255);
		write_byte(255);
		write_byte(0);
		write_byte(255);
		message_end();
		
		give_item(i, "weapon_knife");
		
		if(!g_zombie[i])
		{
			switch(g_hab[i][HAB_GRAVITY][CLASS_SURVIVOR]) // HAB_GRAVITY = ARMA en Survivor!
			{
				case 0:
				{
					give_item(i, "weapon_mp5navy");
					ExecuteHamB(Ham_GiveAmmo, i, MAXBPAMMO[CSW_MP5NAVY], AMMOTYPE[CSW_MP5NAVY], MAXBPAMMO[CSW_MP5NAVY]);
				}
				case 1:
				{
					give_item(i, "weapon_m249");
					ExecuteHamB(Ham_GiveAmmo, i, MAXBPAMMO[CSW_M249], AMMOTYPE[CSW_M249], MAXBPAMMO[CSW_M249]);
				}
				case 2:
				{
					give_item(i, "weapon_m4a1");
					ExecuteHamB(Ham_GiveAmmo, i, MAXBPAMMO[CSW_M4A1], AMMOTYPE[CSW_M4A1], MAXBPAMMO[CSW_M4A1]);
				}
			}
		}
		else
		{
			g_nvision[i] = 1;
			set_task(0.1, "setUserNightvision", i + TASK_NVISION, _, _, "b");
		}
	}
}

public powerCabezon0(const id)
{
	if(!g_isalive[id])
		return;
	
	set_user_gravity(id, 999999.9);
}

public powerCabezon1(const id)
{
	if(!g_isalive[id])
		return;
	
	emitSound(id, CHAN_VOICE, g_sound_cabezon_power);
	
	new Float:vecOrigin[3];
	new iVictim = -1;
	
	entity_get_vector(id, EV_VEC_origin, vecOrigin);
	
	message_begin(MSG_BROADCAST, g_message_screenshake);
	write_short(UNIT_SECOND * 14);
	write_short(UNIT_SECOND * 14);
	write_short(UNIT_SECOND * 14);
	message_end();
	
	message_begin(MSG_BROADCAST, g_message_screenfade);
	write_short(UNIT_SECOND * 1);
	write_short(UNIT_SECOND * 1);
	write_short(FFADE_IN);
	write_byte(255);
	write_byte(255);
	write_byte(255);
	write_byte(230);
	message_end();
	
	while((iVictim = engfunc(EngFunc_FindEntityInSphere, iVictim, vecOrigin, 500.0)) != 0)
	{
		if(!is_user_valid_alive(iVictim))
			continue;
		
		if(g_zombie[iVictim])
			continue;
		
		ExecuteHamB(Ham_Killed, iVictim, id, 2);
		
		++g_logros_stats[id][KILLS_CABEZON];
	}
	
	if(!g_logros_stats[id][KILLS_CABEZON])
		setAchievement(id, CABEZON_Y_CIEGO);
	else if(g_logros_stats[id][KILLS_CABEZON] >= 40)
	{
		setAchievement(id, SUBE_Y_BAJA);
		
		if(g_logros_stats[id][KILLS_CABEZON] >= 50)
			setAchievement(id, SUBE_Y_BOOM);
	}
	
	set_user_gravity(id, 0.8);
}

public resetPowerCabezon(const id)
{
	if(!g_isalive[id])
		return;
	
	if(g_cabezon[id])
	{
		g_cabezon_power[id] = 0;
		colorChat(id, _, "%sYa podés volver a usar tu poder de vuelta", ZP_PREFIX);
	}
}

/*public checkWTF(const ent)
{
	if(!is_valid_ent(ent))
		return;
	
	static Float:vecOrigin[3];
	static Float:fDistance;
	static Float:fTime;
	
	entity_get_vector(ent, EV_VEC_origin, vecOrigin);
	
	fDistance = get_distance_f(g_bazooka_origin, vecOrigin);
	fTime = fDistance / 150.0;
	
	if(fTime != g_bazooka_time)
	{
		remove_task(ent + TASK_WTF);
		set_task((fTime - 0.9), "playWTF", ent + TASK_WTF);
	}
	
	set_task(0.1, "checkWTF", ent);
}*/

public playWTF(const ent)
{
	if(!is_valid_ent(ent))
		return;
	
	new Float:vecOrigin[3];
	new iVictims = 0;
	new iVictim = -1;
	
	entity_get_vector(ent, EV_VEC_origin, vecOrigin);
	
	while((iVictim = find_ent_in_sphere(iVictim, vecOrigin, 590.0)) != 0)
	{
		if(!is_user_valid_alive(iVictim))
			continue;
		
		if(g_zombie[iVictim])
			continue;
		
		++iVictims;
	}
	
	if(iVictims == getHumans())
	{
		client_cmd(0, "MP3Volume 1.4");
		client_cmd(0, "mp3 play %s", g_sound_bazooka_wtf);
	}
}

shotgunReload(const iEnt, const iWeapon, const iMaxClip, const iClip, const iBPAmmo, const id)
{
	if(!g_skill_weapons[id][iWeapon][3])
		return;

	if(iBPAmmo <= 0 || iClip == iMaxClip)
		return;

	if(get_pdata_int(iEnt, OFFSET_NEXT_PRIMARY_ATTACK, OFFSET_LINUX_WEAPONS) > 0.0)
		return;

	switch(get_pdata_int(iEnt, OFFSET_IN_SPECIAL_RELOAD, OFFSET_LINUX_WEAPONS))
	{
		case 0:
		{
			setAnimation(id, 5);
			
			set_pdata_int(iEnt, OFFSET_IN_SPECIAL_RELOAD, 1, OFFSET_LINUX_WEAPONS);
			set_pdata_float(id, OFFSET_NEXT_ATTACK, 0.55, OFFSET_LINUX);
			set_pdata_float(iEnt, OFFSET_TIME_WEAPON_IDLE, 0.55, OFFSET_LINUX_WEAPONS);
			set_pdata_float(iEnt, OFFSET_NEXT_PRIMARY_ATTACK, 0.55, OFFSET_LINUX_WEAPONS);
			set_pdata_float(iEnt, OFFSET_NEXT_SECONDARY_ATTACK, 0.55, OFFSET_LINUX_WEAPONS);
			
			return;
		}
		case 1:
		{
			if(get_pdata_float(iEnt, OFFSET_TIME_WEAPON_IDLE, OFFSET_LINUX_WEAPONS) > 0.0)
				return;
			
			setAnimation(id, 3);
			
			emitSound(id, CHAN_ITEM, (random_num(0, 1)) ? "weapons/reload1.wav" : "weapons/reload3.wav",_, _, 0, (85 + random_num(0, 0x1f)));
			
			set_pdata_int(iEnt, OFFSET_IN_SPECIAL_RELOAD, 2, OFFSET_LINUX_WEAPONS);
			set_pdata_float(iEnt, OFFSET_TIME_WEAPON_IDLE, (iWeapon == CSW_XM1014) ? 0.3 : 0.45, OFFSET_LINUX_WEAPONS);
		}
		default:
		{
			set_pdata_int(iEnt, OFFSET_CLIPAMMO, iClip + 1, OFFSET_LINUX_WEAPONS);
			set_pdata_int(id, OFFSET_M3_AMMO, iBPAmmo - 1, OFFSET_LINUX);
			set_pdata_int(iEnt, OFFSET_IN_SPECIAL_RELOAD, 1, OFFSET_LINUX_WEAPONS);
		}
	}
}

setAchievement(const id, const achievement, const check_users = 1) // s_ach
{
	if(g_logros[id][achievement])
		return;
	
	if(LOGROS[achievement][logroUsersNeed] && check_users)
	{
		if(getPlaying() < LOGROS[achievement][logroUsersNeed])
			return;
	}
	
	g_logros[id][achievement] = 1;
	
	static sTime[32];
	static sAchievement[64];
	
	get_time("%d/%m/%Y - %H:%M", sTime, 31);
	formatex(g_logros_unlocked[id][achievement], 31, sTime);
	
	new Handle:sqlQuery;
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO achievements (`zp_id`, `user_name`, `logro`, `logro_name`, `logro_fecha`) VALUES ('%d', ^"%s^", '%d', ^"%s^", ^"%s^");", g_user_id[id], g_playername[id], achievement, LOGROS[achievement][logroName], g_logros_unlocked[id][achievement]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 12);
	else
		SQL_FreeHandle(sqlQuery);
	
	formatex(sAchievement, 63, "Logro desbloqueado:^n%s", LOGROS[achievement][logroName]);
	
	
	/*if(achievement == PPT_PIEDRA || achievement == PPT_PAPEL || achievement == PPT_TIJERA || achievement == PPT_DRAW_3 || achievement == PPT_DRAW_5 || achievement == PPT_DRAW_7 ||
	achievement == PPT_WIN_CON_3 || achievement == PPT_WIN_CON_5)
		colorChat(id, CT, "%sGanaste el logro !g%s!y !t(%d pF)!y", ZP_PREFIX, LOGROS[achievement][logroName], LOGROS[achievement][logroReward]);
	else*/
	colorChat(0, CT, "%s!t%s!y ganó el logro !g%s!y !t(%d pF)!y", ZP_PREFIX, g_playername[id], LOGROS[achievement][logroName], LOGROS[achievement][logroReward]);
	
	g_points[id][CLASS_FRAGMENTOS] += LOGROS[achievement][logroReward];
	++g_logros_count[id];
	
	if(g_logros_count[id] == 25)
	{
		setAchievement(id, LOS_PRIMEROS);
		return;
	}
	else if(g_logros_count[id] == 75)
	{
		setAchievement(id, VAMOS_POR_MAS);
		return;
	}
	else if(g_logros_count[id] == 150)
	{
		setAchievement(id, EXPERTO_EN_LOGROS);
		return;
	}
	
	if(!g_metalogros[id][MAESTRO_DUELO] && g_logros[id][OTRA_FORMA_DE_JUGAR] && g_logros[id][AL_MAXIMO] && g_logros[id][TRANQUI_120] && g_logros[id][PRO_DUELO])
	{
		setMetaAchievement(id, MAESTRO_DUELO);
		return;
	}
	else if(!g_metalogros[id][MAESTRO_NEMESIS] &&  g_logros[id][NEMESIS_PRO] && g_logros[id][NEMESIS_EXPERTO] && g_logros[id][NEMESIS_AVANZADO] && g_logros[id][NEMESIS_NOOB])
	{
		setMetaAchievement(id, MAESTRO_NEMESIS);
		return;
	}
	else if(!g_metalogros[id][MAESTRO_SURVIVOR] && g_logros[id][SURVIVOR_PRO] && g_logros[id][SURVIVOR_EXPERTO] && g_logros[id][SURVIVOR_AVANZADO] && g_logros[id][SURVIVOR_NOOB])
	{
		setMetaAchievement(id, MAESTRO_SURVIVOR);
		return;
	}
	else if(!g_metalogros[id][MAESTRO_WESKER] && g_logros[id][RESIDENT_EVIL] && g_logros[id][MI_DEAGLE_Y_YO] && g_logros[id][L_INTACTO] && g_logros[id][NO_ME_HACE_FALTA] && g_logros[id][SUPER_LASER])
	{
		setMetaAchievement(id, MAESTRO_WESKER);
		return;
	}
	else if(!g_metalogros[id][MAESTRO_SNIPER] && g_logros[id][L_FRANCOTIRADOR] && g_logros[id][EL_MEJOR_EQUIPO] && g_logros[id][EN_MEMORIA_A_ELLOS] && g_logros[id][MI_AWP_ES_MEJOR] && g_logros[id][MI_SCOUT_ES_MEJOR] && g_logros[id][ZAS_EN_TODA_LA_BOCA])
	{
		setMetaAchievement(id, MAESTRO_SNIPER);
		return;
	}
	else if(!g_metalogros[id][MAESTRO_ANIQUILADOR] && g_logros[id][MI_CUCHILLA_Y_YO] && g_logros[id][ANIQUILOSO] && g_logros[id][CIENFUEGOS] && g_logros[id][EL_PEOR_DEL_SERVER] && g_logros[id][CARNE_PARA_TODOS])
	{
		setMetaAchievement(id, MAESTRO_ANIQUILADOR);
		return;
	}
	else if(!g_metalogros[id][MAESTRO_DEPREDADOR] && g_logros[id][L_DEPREDADOR] && g_logros[id][SARGENTO_DEPRE] && g_logros[id][DEPREDADOR_007] && g_logros[id][AHORA_ME_VES_AHORA_NO_ME_VES] && g_logros[id][MI_HABILIDAD_ES_MEJOR])
	{
		setMetaAchievement(id, MAESTRO_DEPREDADOR);
		return;
	}
	else if(!g_metalogros[id][MAESTRO_ALIEN] && g_logros[id][L_ALIENIGENA] && g_logros[id][SUPER_ALIEN_86] && g_logros[id][RAPIDO_Y_ALIENOSO] && g_logros[id][L_FURIA] && g_logros[id][NO_TE_VEO_PERO_TE_HUELO] && g_logros[id][ESTOY_RE_LOCO])
	{
		setMetaAchievement(id, MAESTRO_ALIEN);
		return;
	}
	
	tutorCreate(id, 8, 6.0, sAchievement);
	
	saveInfo(id);
}

setMetaAchievement(const id, const achievement) // s_ach
{
	if(g_metalogros[id][achievement])
		return;
	
	g_metalogros[id][achievement] = 1;
	
	static sTime[32];
	static sAchievement[64];
	
	get_time("%d/%m/%Y - %H:%M", sTime, 31);
	formatex(g_metalogros_unlocked[id][achievement], 31, sTime);
	
	new Handle:sqlQuery;
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO achievements (`zp_id`, `user_name`, `logro`, `metalogro`, `logro_name`, `logro_fecha`) VALUES ('%d', ^"%s^", '%d', '1', ^"%s^", ^"%s^");", g_user_id[id], g_playername[id], achievement, META_LOGROS[achievement][logroName],
	g_metalogros_unlocked[id][achievement]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 12);
	else
		SQL_FreeHandle(sqlQuery);
	
	formatex(sAchievement, 63, "Meta-Logro desbloqueado:^n%s", META_LOGROS[achievement][logroName]);
	
	colorChat(0, CT, "%s!t%s!y ganó el meta-logro !g%s!y !t(%d pF)!y", ZP_PREFIX, g_playername[id], META_LOGROS[achievement][logroName], META_LOGROS[achievement][logroReward]);
	
	g_points[id][CLASS_FRAGMENTOS] += META_LOGROS[achievement][logroReward];
	++g_logros_count[id];
	
	tutorCreate(id, 8, 6.0, sAchievement);
	
	saveInfo(id);
}

setChallenge(const id, const challenge) // s_cha
{
	++g_desafios[id][challenge];
	
	new Handle:sqlQuery;
	
	if(g_desafios[id][challenge] == 1)
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO achievements (`zp_id`, `user_name`, `logro`, `metalogro`, `logro_name`) VALUES ('%d', ^"%s^", '%d', '2', ^"%s^");", g_user_id[id], g_playername[id], challenge, DESAFIOS[challenge][desafioName]);
	else
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE achievements SET metalogro='%d' WHERE zp_id='%d' AND logro_name=^"%s^"", (g_desafios[id][challenge] + 1), g_user_id[id], DESAFIOS[challenge][desafioName]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 23);
	else
		SQL_FreeHandle(sqlQuery);
	
	new iReward;
	
	switch(challenge)
	{
		case EL_TIEMPO_APREMIA: iReward = (DESAFIOS[challenge][desafioReward] + g_desafios[id][challenge] + (DESAFIOS[challenge][desafioLevelMult] * g_desafios[id][challenge])) - 2;
		case FULMINANTE: iReward = ((DESAFIOS[challenge][desafioReward] + g_desafios[id][challenge]) * DESAFIOS[challenge][desafioLevelMult]) - 2;
		default: iReward = (DESAFIOS[challenge][desafioReward] + g_desafios[id][challenge] + (DESAFIOS[challenge][desafioLevelMult] * g_desafios[id][challenge])) - 1;
	}
	
	colorChat(0, CT, "%s!t%s!y ganó el desafío !g%s!y!t [NIV. !g%d!t] !t(%d pF)!y", ZP_PREFIX, g_playername[id], DESAFIOS[challenge][desafioName], (g_desafios[id][challenge] - 1), iReward);
	
	g_points[id][CLASS_FRAGMENTOS] += iReward;
	++g_desafios_count[id];
	
	if(g_desafios_count[id] == 10)
	{
		setAchievement(id, ME_GUSTAN_LOS_RETOS);
		return;
	}
	else if(g_desafios_count[id] >= 20)
	{
		setAchievement(id, A_ESO_LE_LLAMAS_DESAFIOS);
		
		if(g_desafios_count[id] >= 20)
			setAchievement(id, CHALLENGE_ACEPTED);
	}
	
	saveInfo(id);
}

setAchievement__First(const id, const achievement) // s_ach
{
	if(g_logros_primeros[achievement])
		return;
	
	g_logros[id][achievement] = 1;
	g_logros_primeros[achievement] = 1;
	
	static sTime[32];
	static sAchievement[64];
	
	get_time("%d/%m/%Y - %H:%M", sTime, 31);
	formatex(g_logros_unlocked[id][achievement], 31, sTime);
	
	new Handle:sqlQuery;
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO achievements (`zp_id`, `user_name`, `logro`, `logro_name`, `logro_fecha`) VALUES ('%d', ^"%s^", '%d', ^"%s^", ^"%s^");", g_user_id[id], g_playername[id], achievement, LOGROS[achievement][logroName], g_logros_unlocked[id][achievement]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 12);
	else
		SQL_FreeHandle(sqlQuery);
	
	formatex(sAchievement, 63, "Logro desbloqueado:^n%s", LOGROS[achievement][logroName]);
	
	colorChat(0, CT, "%s!t%s!y ganó el logro !g%s!y !t(%d pF)!y", ZP_PREFIX, g_playername[id], LOGROS[achievement][logroName], LOGROS[achievement][logroReward]);
	
	g_points[id][CLASS_FRAGMENTOS] += LOGROS[achievement][logroReward];
	++g_logros_count[id];
	
	tutorCreate(id, 8, 6.0, sAchievement);
}

public tutorCreate(const id, const color, const Float:fTime, const message[])
{
	message_begin(MSG_ONE_UNRELIABLE, g_message_tutortext, _, id);
	write_string(message);
	write_byte(0);
	write_short(0);
	write_short(0);
	write_short((1 << color));
	message_end();
	
	remove_task(id + TASK_TUTOR_TEXT);
	set_task(fTime, "tutorClose", id + TASK_TUTOR_TEXT);
}

public tutorClose(const taskid)
{
	message_begin(MSG_ONE_UNRELIABLE, g_message_tutorclose, _, ID_TUTOR_TEXT);
	message_end();
}

public clearDHUDs(const id)
{
	new i;
	for(i = 0; i < 8; ++i)
	{
		set_dhudmessage(0, 0, 0, -1.0, 0.2, 0, 0.0, 0.1, 0.1, 0.1);
		show_dhudmessage(id, "");
	}
}

public kickUser(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	console_print(id, "");
	console_print(id, "");
	console_print(id, "****** GAM!NGA ******");
	console_print(id, "");
	console_print(id, "TU CUENTA ESTA BANEADA");
	console_print(id, "");
	console_print(id, "Administrador que te baneo: %s", g_user_admin_ban[id]);
	console_print(id, "Razon: %s", g_user_reason_ban[id]);
	console_print(id, "El ban expira en la fecha: %s", g_user_expire_ban[id]);
	console_print(id, "Cuenta #%d", g_user_id[id]);
	console_print(id, "");
	console_print(id, "****** GAM!NGA ******");
	console_print(id, "");
	console_print(id, "");
	
	server_cmd("kick #%d ^"Tu cuenta está baneada! - Mira tu consola^"", get_user_userid(id));
	
	return PLUGIN_HANDLED;
}

public showMenuBanned(const id)
	show_menu(id, KEYSMENU, "", -1, "Banned Menu");

public dropHeadZombie__Big(const id)
{
	if(g_no_buy)
		return;
	
	new Float:vecVelocity[3];
	new Float:vecOrigin[3];
	new iEnt;
	
	velocity_by_aim(id, 300, vecVelocity);
	getDropOrigin(id, vecOrigin);
	
	iEnt = create_entity("info_target");
	
	if(is_valid_ent(iEnt))
	{
		entity_set_string(iEnt, EV_SZ_classname, "headZombie");
		entity_set_model(iEnt, g_model_headzombie);
		entity_set_int(iEnt, EV_INT_solid, SOLID_TRIGGER);
		entity_set_int(iEnt, EV_INT_movetype, MOVETYPE_TOSS);
		
		entity_set_origin(iEnt, vecOrigin);
		entity_set_vector(iEnt, EV_VEC_velocity, vecVelocity);
		
		entity_set_edict(iEnt, EV_ENT_euser2, id);
		
		set_size(iEnt, Float:{-6.0, -6.0, -6.0}, Float:{6.0, 6.0, 6.0});
		entity_set_vector(iEnt, EV_VEC_mins, Float:{-6.0, -6.0, -6.0});
		entity_set_vector(iEnt, EV_VEC_maxs, Float:{6.0, 6.0, 6.0});
		
		new Float:fColor[3];
		new iWhite;
		new iYellow;
		new iRed;
		new iGreen;
		new iHead;
		new iDarkBlue;
		
		iWhite = random_num(1, 10);
		iYellow = random_num(1, 10);
		iRed = random_num(0, 1);
		iGreen = random_num(0, 1);
		iDarkBlue = random_num(1, 3);
		
		if(iWhite == 9)
		{
			fColor = Float:{255.0, 255.0, 255.0};
			iHead = HEAD_WHITE;
		}
		else if(iYellow == 1 || iYellow == 10)
		{
			fColor = Float:{255.0, 255.0, 0.0};
			iHead = HEAD_YELLOW;
		}
		else if(iDarkBlue == 1)
		{
			fColor = Float:{0.0, 255.0, 255.0};
			iHead = HEAD_DARK_BLUE;
		}
		else if(iRed)
		{
			fColor = Float:{255.0, 0.0, 0.0};
			iHead = HEAD_RED;
		}
		else if(!iGreen)
		{
			fColor = Float:{0.0, 255.0, 0.0};
			iHead = HEAD_GREEN;
		}
		else
		{
			fColor = Float:{0.0, 0.0, 255.0};
			iHead = HEAD_BLUE;
		}
		
		fm_set_rendering(iEnt, kRenderFxGlowShell, floatround(fColor[0]), floatround(fColor[1]), floatround(fColor[2]), kRenderNormal, 16);
		entity_set_edict(iEnt, EV_ENT_euser4, iHead);
	}
}

/*public dropGift(const id)
{
	if(g_no_buy)
		return;
	
	new Float:vecVelocity[3];
	new Float:vecOrigin[3];
	new iEnt;
	
	velocity_by_aim(id, 300, vecVelocity);
	getDropOrigin(id, vecOrigin);
	
	iEnt = create_entity("info_target");
	
	if(is_valid_ent(iEnt))
	{
		entity_set_string(iEnt, EV_SZ_classname, "giftZombie");
		entity_set_model(iEnt, g_model_headzombie);
		entity_set_int(iEnt, EV_INT_solid, SOLID_TRIGGER);
		entity_set_int(iEnt, EV_INT_movetype, MOVETYPE_TOSS);
		
		entity_set_origin(iEnt, vecOrigin);
		entity_set_vector(iEnt, EV_VEC_velocity, vecVelocity);
		
		entity_set_edict(iEnt, EV_ENT_euser2, id);
		
		set_size(iEnt, Float:{-6.0, -6.0, -6.0}, Float:{6.0, 6.0, 6.0});
		entity_set_vector(iEnt, EV_VEC_mins, Float:{-6.0, -6.0, -6.0});
		entity_set_vector(iEnt, EV_VEC_maxs, Float:{6.0, 6.0, 6.0});
		
		fm_set_rendering(iEnt, kRenderFxGlowShell, 255, 255, 255, kRenderNormal, 16);
	}
}*/

public dropHeadZombie__Violet(const id)
{
	if(g_no_buy)
		return;
	
	new Float:vecVelocity[3];
	new Float:vecOrigin[3];
	new iEnt;
	
	velocity_by_aim(id, g_speed_head, vecVelocity);
	getDropOrigin(id, vecOrigin);
	
	iEnt = create_entity("info_target");
	
	if(is_valid_ent(iEnt))
	{
		if(random_num(1, 25) != 1)
		{
			entity_set_string(iEnt, EV_SZ_classname, "headZombie");
			entity_set_model(iEnt, g_model_headzombie);
			entity_set_int(iEnt, EV_INT_solid, SOLID_TRIGGER);
			entity_set_int(iEnt, EV_INT_movetype, MOVETYPE_TOSS);
			
			entity_set_origin(iEnt, vecOrigin);
			entity_set_vector(iEnt, EV_VEC_velocity, vecVelocity);
			
			entity_set_edict(iEnt, EV_ENT_euser2, id);
			
			set_size(iEnt, Float:{-6.0, -6.0, -6.0}, Float:{6.0, 6.0, 6.0});
			entity_set_vector(iEnt, EV_VEC_mins, Float:{-6.0, -6.0, -6.0});
			entity_set_vector(iEnt, EV_VEC_maxs, Float:{6.0, 6.0, 6.0});
			
			new Float:fColor[3];
			new iWhite;
			new iYellow;
			new iRed;
			new iGreen;
			new iHead;
			new iDarkBlue;
			
			iWhite = random_num(1, 10);
			iYellow = random_num(1, 10);
			iRed = random_num(0, 1);
			iGreen = random_num(0, 1);
			iDarkBlue = random_num(1, 3);
			
			if(iWhite == 9)
			{
				fColor = Float:{255.0, 255.0, 255.0};
				iHead = HEAD_WHITE;
			}
			else if(iYellow == 1 || iYellow == 10)
			{
				fColor = Float:{255.0, 255.0, 0.0};
				iHead = HEAD_YELLOW;
			}
			else if(iDarkBlue == 1)
			{
				fColor = Float:{0.0, 255.0, 255.0};
				iHead = HEAD_DARK_BLUE;
			}
			else if(iRed)
			{
				fColor = Float:{255.0, 0.0, 0.0};
				iHead = HEAD_RED;
			}
			else if(!iGreen)
			{
				fColor = Float:{0.0, 255.0, 0.0};
				iHead = HEAD_GREEN;
			}
			else
			{
				fColor = Float:{0.0, 0.0, 255.0};
				iHead = HEAD_BLUE;
			}
			
			fm_set_rendering(iEnt, kRenderFxGlowShell, floatround(fColor[0]), floatround(fColor[1]), floatround(fColor[2]), kRenderNormal, 16);
			entity_set_edict(iEnt, EV_ENT_euser4, iHead);
		}
		else // VIOLETA CHICA
		{
			entity_set_string(iEnt, EV_SZ_classname, "headZombie_Small");
			entity_set_model(iEnt, g_model_headzombie_small);
			entity_set_int(iEnt, EV_INT_solid, SOLID_TRIGGER);
			entity_set_int(iEnt, EV_INT_movetype, MOVETYPE_TOSS);
			
			entity_set_origin(iEnt, vecOrigin);
			entity_set_vector(iEnt, EV_VEC_velocity, vecVelocity);
			
			entity_set_edict(iEnt, EV_ENT_euser2, id);
			
			set_size(iEnt, Float:{-3.0, -3.0, -3.0}, Float:{3.0, 3.0, 3.0});
			entity_set_vector(iEnt, EV_VEC_mins, Float:{-3.0, -3.0, -3.0});
			entity_set_vector(iEnt, EV_VEC_maxs, Float:{3.0, 3.0, 3.0});
			
			fm_set_rendering(iEnt, kRenderFxGlowShell, 255, 0, 255, kRenderNormal, 16);
			entity_set_edict(iEnt, EV_ENT_euser4, HEAD_VIOLET_SMALL);
		}
	}
}

getDropOrigin(const id, Float:vecOrigin[3], iVelAdd = 0)
{
	new Float:vecAim[3];
	new Float:vecViewOfs[3];
	
	entity_get_vector(id, EV_VEC_view_ofs, vecViewOfs);
	entity_get_vector(id, EV_VEC_origin, vecOrigin);
	xs_vec_add(vecOrigin, vecViewOfs, vecOrigin);
	
	velocity_by_aim(id, 50 + iVelAdd, vecAim);
	
	vecOrigin[0] += vecAim[0];
	vecOrigin[1] += vecAim[1];
}

public muerteSubita()
{
	playSound(0, g_sound_cabezon_power);
	
	message_begin(MSG_BROADCAST, g_message_screenfade);
	write_short(UNIT_SECOND * 2);
	write_short(UNIT_SECOND * 2);
	write_short(FFADE_IN);
	write_byte(255);
	write_byte(255);
	write_byte(255);
	write_byte(230);
	message_end();
	
	new i;
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isalive[i])
			continue;
		
		user_silentkill(i);
	}
}

getSlotAmuleto(const id)
{
	new i;
	
	for(i = 0; i < 5; ++i)
	{
		if(!g_amuleto_name[id][i][0])
			return i;
	}
	
	return -1;
}

showMessageMode(const mode)
{
	new sBuffer[15];
	
	++g_mode_count[mode];
	
	addDot(g_mode_count[mode], sBuffer, 14);
	
	if(g_mode_count[mode] == 100)
		colorChat(0, _, "!g[ZP]!y Felicidades, el modo !g%s!y se jugó !g100!y veces", MESSAGE_MODES[mode]);
	else if(((g_mode_count[mode] % 500) == 0 && mode != MODE_INFECTION) || ((g_mode_count[mode] % 2500) == 0))
		colorChat(0, _, "!g[ZP]!y Felicidades, el modo !g%s!y se jugó !g%s!y veces", MESSAGE_MODES[mode], sBuffer);
	else
	{
		colorChat(0, _, "!g[ZP]!y El modo !g%s!y se jugó !g%s!y veces", MESSAGE_MODES[mode], sBuffer);
		return;
	}
	
	colorChat(0, _, "!g[ZP]!y Todos los jugadores conectados ganaron !g5 pHZ!y");
	
	new i;
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isconnected[i])
			continue;
		
		if(!g_user_logged[i])
			continue;
		
		g_points[i][CLASS_HUMAN] += 5;
		g_points[i][CLASS_ZOMBIE] += 5;
	}
}

public sorteoLoteria()
{
	new Handle:sqlQuery;
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE modes SET lot_sorteo = '1', lot_gamblers='0';");
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 28);
	else
		SQL_FreeHandle(sqlQuery);
	
	if(!g_gamblers)
	{	
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO loteria (`fecha`, `nombre`, `ganancia`) VALUES (now(), ^"NO HUBO APOSTADORES^", '0');");
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 29);
		else
			SQL_FreeHandle(sqlQuery);
		
		colorChat(0, _, "%sLa lotería no tiene ganadores ya que no hubo apostadores esta semana", ZP_PREFIX_LOTTERY);
		
		return PLUGIN_HANDLED;
	}
	
	g_gamblers = 0;
	
	new iRand = random_num(1, 999);
	colorChat(0, _, "%sEl número sorteado es el !g%d!y", ZP_PREFIX_LOTTERY, iRand);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT id, name, exp, lot_bet FROM users WHERE ban='0' AND id <> 1 AND lot_num='%d' ORDER BY exp DESC LIMIT 1;", iRand);
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 30);
	else if(SQL_NumResults(sqlQuery))
	{
		new iId;
		new sName[32];
		new iXp;
		new iLotBet;
		new sLotBet[15];
		new iWins;
		new sWins[15];
		new i;
		new iWinner = 0;
		
		iId = SQL_ReadResult(sqlQuery, 0);
		SQL_ReadResult(sqlQuery, 1, sName, charsmax(sName));
		iXp = SQL_ReadResult(sqlQuery, 2);
		iLotBet = SQL_ReadResult(sqlQuery, 3);
		
		iWins = iLotBet * 70;
		
		addDot(iWins, sWins, 14);
		addDot(iLotBet, sLotBet, 14);
		
		if(iLotBet >= 1000000 || iWins >= 2100000000 || iWins < 0 || iWins >= g_pozo_acc)
		{
			colorChat(0, _, "%sEl jugador !g%s!y ganó el !gPOZO ACUMULADO!y", ZP_PREFIX_LOTTERY, sName);
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				if(iId == g_user_id[i])
				{
					addXp(i, g_pozo_acc, 0);
					iWinner = 1;
					
					break;
				}
			}
			
			SQL_FreeHandle(sqlQuery);
			
			if(!iWinner)
			{
				iXp += g_pozo_acc;
			
				if(iXp > MAX_EXP)
					iXp = MAX_EXP;
				
				sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET exp=%d WHERE id='%d';", iXp, iId);
				if(!SQL_Execute(sqlQuery))
					executeQuery(0, sqlQuery, 31);
				else
					SQL_FreeHandle(sqlQuery);
			}
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO loteria (`fecha`, `nombre`, `ganancia`) VALUES (now(), ^"%s^", '%d');", sName, g_pozo_acc);
			if(!SQL_Execute(sqlQuery))
				executeQuery(0, sqlQuery, 32);
			else
				SQL_FreeHandle(sqlQuery);
			
			g_pozo_acc = 0;
		}
		else
		{
			colorChat(0, _, "%sEl jugador !g%s!y ganó !g%s EXP!y por apostar !g%s EXP!y al !g%d!y", ZP_PREFIX_LOTTERY, sName, sWins, sLotBet, iRand);
			
			g_pozo_acc -= iWins;
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
					
				if(iId == g_user_id[i])
				{
					addXp(i, iWins, 0);
					iWinner = 1;
					
					break;
				}
			}
			
			SQL_FreeHandle(sqlQuery);
			
			if(!iWinner)
			{
				iXp += iWins;
				
				if(iXp > MAX_EXP)
					iXp = MAX_EXP;
				
				sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET exp=%d WHERE id='%d';", iXp, iId);
				if(!SQL_Execute(sqlQuery))
					executeQuery(0, sqlQuery, 33);
				else
					SQL_FreeHandle(sqlQuery);
			}
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO loteria (`fecha`, `nombre`, `ganancia`) VALUES (now(), ^"%s^", '%d');", sName, iWins);
			if(!SQL_Execute(sqlQuery))
				executeQuery(0, sqlQuery, 34);
			else
				SQL_FreeHandle(sqlQuery);
		}
		
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
			
			g_bet[i] = 0;
			g_bet_num[i] = 0;
			g_bet_done[i] = 0;
		}
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE modes SET lot_pozo_acc='%d';", g_pozo_acc);
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 35);
		else
			SQL_FreeHandle(sqlQuery);
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET lot_bet='0', lot_num='0';");
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 36);
		else
			SQL_FreeHandle(sqlQuery);
		
		return PLUGIN_HANDLED;
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT id, name, exp, lot_num, lot_bet FROM users WHERE ban='0' AND id <> 1 ORDER BY ABS(%d-lot_num) ASC, lot_bet DESC, exp DESC LIMIT 1;", iRand);
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 37);
	else if(SQL_NumResults(sqlQuery))
	{
		new iId;
		new sName[32];
		new iXp;
		new iLotNum;
		new iLotBet;
		new iWins;
		new sWins[15];
		new iWinner = 0;
		
		iId = SQL_ReadResult(sqlQuery, 0);
		
		SQL_ReadResult(sqlQuery, 1, sName, charsmax(sName));
		
		iXp = SQL_ReadResult(sqlQuery, 2);
		iLotNum = SQL_ReadResult(sqlQuery, 3);
		iLotBet = SQL_ReadResult(sqlQuery, 4);
		
		iWins = iLotBet * 10;
		
		if(iWins > g_pozo_acc || iWins >= 2100000000 || iWins < 0)
		{
			iWins = g_pozo_acc;
			g_pozo_acc = 0;
		}
		else g_pozo_acc -= iWins;
		
		addDot(iWins, sWins, 14);
		
		colorChat(0, _, "%sEl jugador !g%s!y tiene el número más cercano (!g%d!y). Ganó !g%s EXP!y", ZP_PREFIX_LOTTERY, sName, iLotNum, sWins);
		
		SQL_FreeHandle(sqlQuery);
		
		new i;
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
			
			if(iId == g_user_id[i])
			{
				addXp(i, iWins, 0);
				iWinner = 1;
				
				break;
			}
		}
		
		if(!iWinner)
		{
			iXp += iWins;
			
			if(iXp > MAX_EXP)
				iXp = MAX_EXP;
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET exp='%d' WHERE id='%d';", iXp, iId);
			if(!SQL_Execute(sqlQuery))
				executeQuery(0, sqlQuery, 39);
			else
				SQL_FreeHandle(sqlQuery);
		}
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO loteria (`fecha`, `nombre`, `ganancia`) VALUES (now(), ^"%s^", '%d');", sName, iWins);
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 40);
		else
			SQL_FreeHandle(sqlQuery);
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE modes SET lot_pozo_acc='%d';", g_pozo_acc);
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 38);
		else
			SQL_FreeHandle(sqlQuery);
		
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_isconnected[i])
				continue;
			
			g_bet[i] = 0;
			g_bet_num[i] = 0;
			g_bet_done[i] = 0;
		}
		
		sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET lot_bet='0', lot_num='0';");
		if(!SQL_Execute(sqlQuery))
			executeQuery(0, sqlQuery, 41);
		else
			SQL_FreeHandle(sqlQuery);
		
		return PLUGIN_HANDLED;
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	new i;
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isconnected[i])
			continue;
		
		g_bet[i] = 0;
		g_bet_num[i] = 0;
		g_bet_done[i] = 0;
	}
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET lot_bet='0', lot_num='0';");
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 42);
	else
		SQL_FreeHandle(sqlQuery);
	
	return PLUGIN_HANDLED;
}

public clcmd_EnterExp(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sBetExp[40];
	new iBetExp;
	
	read_args(sBetExp, 39);
	remove_quotes(sBetExp);
	trim(sBetExp);
	
	iBetExp = str_to_num(sBetExp);
	
	if(containLetters(sBetExp) || !countNumbers(sBetExp) || iBetExp < 10000 || equali(sBetExp, "") || containi(sBetExp, " ") != -1)
	{
		colorChat(id, _, "%sSolo números, sin espacios y la apuesta deber ser mayor o igual a !g10.000 EXP!y", ZP_PREFIX_LOTTERY);
		
		showMenuLoteria(id);
		return PLUGIN_HANDLED;
	}
	else if(iBetExp > g_exp[id])
	{
		colorChat(id, _, "%sLa apuesta ingresada supera tu experiencia", ZP_PREFIX_LOTTERY);
		
		showMenuLoteria(id);
		return PLUGIN_HANDLED;
	}
	
	g_bet[id] = iBetExp;
	
	showMenuLoteria(id);
	return PLUGIN_HANDLED;
}

public clcmd_EnterNum(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sBetNum[40];
	new iBetNum;
	
	read_args(sBetNum, 39);
	remove_quotes(sBetNum);
	trim(sBetNum);
	
	iBetNum = str_to_num(sBetNum);
	
	if(containLetters(sBetNum) || !countNumbers(sBetNum) || iBetNum < 1 || iBetNum > 999 || equali(sBetNum, "") || containi(sBetNum, " ") != -1)
	{
		colorChat(id, _, "%sSolo números, sin espacios y el número debe estar entre !g0!y y !g1.000!y", ZP_PREFIX_LOTTERY);
		
		showMenuLoteria(id);
		return PLUGIN_HANDLED;
	}
	
	g_bet_num[id] = iBetNum;
	
	showMenuLoteria(id);
	return PLUGIN_HANDLED;
}

public clcmd_DueloEnterExp(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sXp[30];
	new iXp;
	
	read_args(sXp, 29);
	remove_quotes(sXp);
	trim(sXp);
	
	iXp = str_to_num(sXp);
	
	if(containLetters(sXp) || !countNumbers(sXp) || iXp < 5000 || iXp > MAX_DUEL_BET_EXP || (g_level_total[id] < 1000 && iXp > 1000000) || equali(sXp, "") || containi(sXp, " ") != -1)
	{
		colorChat(id, _, "%sSolo números, sin espacios y la apuesta debe estar entre !g5.000!y y !g%s!y", ZP_PREFIX, (g_level_total[id] < 1000) ? "1.000.000" : "10.000.000");
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	else if(g_exp[id] < iXp)
	{
		colorChat(id, _, "%sLa apuesta supera tu !gexperiencia!y", ZP_PREFIX);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	
	g_duelo[id] = MENU_DUELO_EXPERIENCIA;
	g_logros_stats[id][APUESTA_MAXIMA] = 0;
	
	g_duelo_bet[id][MENU_DUELO_EXPERIENCIA] = iXp;
	
	if(iXp == MAX_DUEL_BET_EXP)
		g_logros_stats[id][APUESTA_MAXIMA] = 1;
	
	showMenuDuelos(id, MENU_DUELO_EXPERIENCIA);
	return PLUGIN_HANDLED;
}

public clcmd_DueloEnterAPs(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sAPs[30];
	new iAPs;
	
	read_args(sAPs, 29);
	remove_quotes(sAPs);
	trim(sAPs);
	
	iAPs = str_to_num(sAPs);
	
	if(containLetters(sAPs) || !countNumbers(sAPs) || iAPs < 1000 || iAPs > MAX_DUEL_BET_APS || equali(sAPs, "") || containi(sAPs, " ") != -1)
	{
		colorChat(id, _, "%sSolo números, sin espacios y la apuesta debe estar entre !g1.000!y y !g2.500.000!y", ZP_PREFIX);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	else if(g_ammopacks[id] < iAPs)
	{
		colorChat(id, _, "%sLa apuesta supera tus !gammo packs!y", ZP_PREFIX);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	
	g_duelo[id] = MENU_DUELO_AMMOPACKS;
	g_logros_stats[id][APUESTA_MAXIMA] = 0;
	
	g_duelo_bet[id][MENU_DUELO_AMMOPACKS] = iAPs;
	
	if(iAPs == MAX_DUEL_BET_APS)
		g_logros_stats[id][APUESTA_MAXIMA] = 1;
	
	showMenuDuelos(id, MENU_DUELO_AMMOPACKS);
	return PLUGIN_HANDLED;
}

public clcmd_DueloEnterPH(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sPH[30];
	new iPH;
	
	read_args(sPH, 29);
	remove_quotes(sPH);
	trim(sPH);
	
	iPH = str_to_num(sPH);
	
	if(containLetters(sPH) || !countNumbers(sPH) || iPH < 1 || iPH > MAX_DUEL_BET_PH || equali(sPH, "") || containi(sPH, " ") != -1)
	{
		colorChat(id, _, "%sSolo números, sin espacios y la apuesta debe estar entre !g0!y y !g10!y", ZP_PREFIX);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	else if(g_points[id][CLASS_HUMAN] < iPH)
	{
		colorChat(id, _, "%sLa apuesta supera tus !gpH!y", ZP_PREFIX);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	
	g_duelo[id] = MENU_DUELO_PH;
	g_logros_stats[id][APUESTA_MAXIMA] = 0;
	
	g_duelo_bet[id][MENU_DUELO_PH] = iPH;
	
	if(iPH == MAX_DUEL_BET_PH)
		g_logros_stats[id][APUESTA_MAXIMA] = 1;
	
	showMenuDuelos(id, MENU_DUELO_PH);
	return PLUGIN_HANDLED;
}

public clcmd_DueloEnterPZ(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sPZ[30];
	new iPZ;
	
	read_args(sPZ, 29);
	remove_quotes(sPZ);
	trim(sPZ);
	
	iPZ = str_to_num(sPZ);
	
	if(containLetters(sPZ) || !countNumbers(sPZ) || iPZ < 1 || iPZ > MAX_DUEL_BET_PZ || equali(sPZ, "") || containi(sPZ, " ") != -1)
	{
		colorChat(id, _, "%sSolo números, sin espacios y la apuesta debe estar entre !g0!y y !g10!y", ZP_PREFIX);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	else if(g_points[id][CLASS_ZOMBIE] < iPZ)
	{
		colorChat(id, _, "%sLa apuesta supera tus !gpZ!y", ZP_PREFIX);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	
	g_duelo[id] = MENU_DUELO_PZ;
	g_logros_stats[id][APUESTA_MAXIMA] = 0;
	
	g_duelo_bet[id][MENU_DUELO_PZ] = iPZ;
	
	if(iPZ == MAX_DUEL_BET_PZ)
		g_logros_stats[id][APUESTA_MAXIMA] = 1;
	
	showMenuDuelos(id, MENU_DUELO_PZ);
	return PLUGIN_HANDLED;
}

public clcmd_DueloEnterPF(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sPF[30];
	new iPF;
	
	read_args(sPF, 29);
	remove_quotes(sPF);
	trim(sPF);
	
	iPF = str_to_num(sPF);
	
	if(containLetters(sPF) || !countNumbers(sPF) || iPF < 1 || iPF > MAX_DUEL_BET_PF || equali(sPF, "") || containi(sPF, " ") != -1)
	{
		colorChat(id, _, "%sSolo números, sin espacios y la apuesta debe estar entre !g0!y y !g10!y", ZP_PREFIX);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	else if(g_points[id][CLASS_FRAGMENTOS] < iPF)
	{
		colorChat(id, _, "%sLa apuesta supera tus !gpF!y", ZP_PREFIX);
		
		showMenuDuelos(id);
		return PLUGIN_HANDLED;
	}
	
	g_duelo[id] = MENU_DUELO_PF;
	g_logros_stats[id][APUESTA_MAXIMA] = 0;
	
	g_duelo_bet[id][MENU_DUELO_PF] = iPF;
	
	if(iPF == MAX_DUEL_BET_PF)
		g_logros_stats[id][APUESTA_MAXIMA] = 1;
	
	showMenuDuelos(id, MENU_DUELO_PF);
	return PLUGIN_HANDLED;
}

new const LETTERS_AND_SIMBOLS_ALLOWED[] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '(', ')', '[', ']', '{', '}', '-', '=', '.', ',', ':', '!', ' ',
'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};

public clcmd_CreateGuild(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	if(g_guild[id])
	{
		colorChat(id, _, "%sYa estás en una hermandad", ZP_PREFIX_GUILD);
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	else if(g_points[id][CLASS_FRAGMENTOS] < 30)
	{
		colorChat(id, _, "%sNecesitás !g30 pF!y para crear una hermandad", ZP_PREFIX_GUILD);
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	
	new sNameGuild[32];
	new iLenNameGuild;
	
	read_args(sNameGuild, 31);
	remove_quotes(sNameGuild);
	trim(sNameGuild);
	
	iLenNameGuild = strlen(sNameGuild);
	
	if(iLenNameGuild < 3)
	{
		client_print(id, print_center, "El nombre de la hermandad debe tener al menos tres letras");
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	else if(iLenNameGuild > 30)
	{
		client_print(id, print_center, "El nombre de la hermandad no puede tener más de treinta letras");
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	
	new i;
	new j = 0;
	new k;
	
	for(i = 0; i < iLenNameGuild; ++i)
	{
		for(k = 0; k < 65; ++k)
		{
			if(sNameGuild[i] == LETTERS_AND_SIMBOLS_ALLOWED[k])
				++j;
		}
	}
	
	if(iLenNameGuild != j)
	{
		colorChat(id, _, "%sSolo letras y algunos símbolos: !g( ) [ ] { } - = . , : !!y, se permiten espacios", ZP_PREFIX_GUILD);
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	
	new iGuildSlot;
	iGuildSlot = getSlotGuildAvaible();
	
	if(iGuildSlot == MAX_GUILDS)
	{
		colorChat(id, _, "%sNo se pueden crear más hermandades. Límite alcanzado (!g%d!y)", ZP_PREFIX_GUILD, MAX_GUILDS);
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	
	g_guild[id] = 1;
	g_guild_creator[id] = 1;
	g_guild_id[id] = iGuildSlot;
	g_guild_exp[g_guild_id[id]] = 0;
	g_guild_level[g_guild_id[id]] = 1;
	copy(g_guild_name[g_guild_id[id]], 31, sNameGuild);
	
	new Handle:sqlQuery;
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO guild (`guild_id`, `guild_name`, `id1`) VALUES ('%d', ^"%s^", '%d');", g_guild_id[id], g_guild_name[g_guild_id[id]], g_user_id[id]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 46);
	else
		SQL_FreeHandle(sqlQuery);
	
	g_points[id][CLASS_FRAGMENTOS] -= 30;
	
	colorChat(0, _, "%s!t%s!y ha creado la hermandad !g%s!y", ZP_PREFIX_GUILD, g_playername[id], g_guild_name[g_guild_id[id]]);
	
	showMenuGuild(id);
	return PLUGIN_HANDLED;
}

new const MONTH_NAMES[][] = {"NONE", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
new const DAYS_NAMES[][] = {"DOMINGO", "LUNES", "MARTES", "MIÉRCOLES", "JUEVES", "VIERNES", "SÁBADO"};

public clcmd_EnterDate(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sDay[3];
	new sMonth[3];
	new sYear[5];
	new sDate[32];
	new iDay;
	new iMonth;
	new iYear;
	new a;
	new y;
	new m;
	new d;
	
	read_args(sDate, 31);
	remove_quotes(sDate);
	trim(sDate);
	
	replace_all(sDate, 31, "/", " ");
	parse(sDate, sDay, 2, sMonth, 2, sYear, 4);
	
	iDay = str_to_num(sDay);
	iMonth = str_to_num(sMonth);
	iYear = str_to_num(sYear);
	
	if((0 < iDay < 32) && (0 < iMonth < 13) && (iYear >= 0))
	{
		a = (14 - iMonth) / 12;
		y = (iYear - a);
		m = iMonth + (12 * a) - 2;
		
		d = (iDay + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7;
		
		colorChat(id, _, "%sEl día !g%d!y de !g%s!y de !g%d!y fue/es/será !g%s!y", ZP_PREFIX, iDay, MONTH_NAMES[iMonth], iYear, DAYS_NAMES[d]);
	}
	else
		colorChat(id, _, "%sFecha invalida!", ZP_PREFIX);
	
	return PLUGIN_HANDLED;
}

public clcmd_EnterNameAmuleto(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sName[64];
	
	read_args(sName, 63);
	remove_quotes(sName);
	trim(sName);
	
	new iLenName = strlen(sName);
	if(iLenName < 3)
	{
		client_print(id, print_center, "El nombre del amuleto debe tener al menos tres caracteres");
		
		showMenuCreateAmuletos(id);
		return PLUGIN_HANDLED;
	}
	else if(iLenName > 30)
	{
		client_print(id, print_center, "El nombre del amuleto debe tener menos de treinta caracteres");
		
		showMenuCreateAmuletos(id);
		return PLUGIN_HANDLED;
	}
	
	new i;
	new j = 0;
	new k;
	
	for(i = 0; i < iLenName; ++i)
	{
		for(k = 0; k < 65; ++k)
		{
			if(sName[i] == LETTERS_AND_SIMBOLS_ALLOWED[k])
				++j;
		}
	}
	
	if(iLenName != j)
	{
		colorChat(id, _, "%sSolo letras y algunos símbolos: !g( ) [ ] { } - = . , : !!y, se permiten espacios", ZP_PREFIX);
		
		showMenuCreateAmuletos(id);
		return PLUGIN_HANDLED;
	}
	
	new iSlot;
	iSlot = getSlotAmuleto(id);
	
	if(iSlot == -1)
	{
		colorChat(id, _, "%sNo podés tener más de !g5 amuletos al mismo tiempo!y", ZP_PREFIX);
		
		showMenuDiamonds(id);
		return PLUGIN_HANDLED;
	}
	
	copy(g_amuleto_name_FAKE[id], 31, sName);
	
	showMenuCreateAmuletos(id);
	return PLUGIN_HANDLED;
}

public finishPredatorPower(const id)
{
	if(!g_isconnected[id] || !g_predator[id] || !g_predator_power[id])
		return;
	
	client_print(0, print_center, "¡El DEPREDADOR es visible nuevamente!");
	
	g_nvision[id] = 0;
	
	remove_task(id + TASK_NVISION);
	
	entity_set_float(id, EV_FL_renderamt, 255.0);
	
	set_user_rendering(id, kRenderFxGlowShell, 255, 255, 0, kRenderNormal, 25);
	
	set_task(0.1, "predatorAura", id + TASK_AURA, _, _, "b");
	
	if(g_health[id] == g_logros_stats[id][PREDATOR_HEALTH_IN_INVIS])
		setAchievement(id, AHORA_ME_VES_AHORA_NO_ME_VES);
}

public finishSniperPower(const id)
{
	if(!g_isconnected[id] || !g_sniper[id] || !g_sniper_power[id])
		return;
	
	client_print(id, print_center, "¡Se te acabó el DISPARO VELOZ!");
	
	g_sniper_power[id] = 2;
	
	remove_task(id + TASK_AURA);
	set_task(0.1, "sniperAura", id + TASK_AURA, _, _, "b");
}

public jasonAchievement__End(const id) {
	new i = id - TASK_JASON_SPEED;
	
	if(!g_logros[i][SPEED_HACK_DONDE]) {
		colorChat(0, _, "%s!t¿SPEED HACK, DÓNDE?!y FALLIDO!", ZP_PREFIX);
	}
}

getSlotGuildAvaible()
{
	new Handle:sqlQuery;
	new iSlotGuild = 0;
	
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT guild_id FROM guild ORDER BY guild_id DESC LIMIT 1;");
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(0, sqlQuery, 45);
	else if(SQL_NumResults(sqlQuery))
	{
		iSlotGuild = SQL_ReadResult(sqlQuery, 0);
		SQL_FreeHandle(sqlQuery);
	}
	else
		SQL_FreeHandle(sqlQuery);
	
	return iSlotGuild + 1;
}

public clcmd_Guild(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	new i;
	for(i = 0; i < 5; ++i)
		console_print(id, "I = %d  |  ID = %d  |  NAME = %s", i, g_guild_ids[id][i], (!g_isconnected[g_guild_ids[id][i]]) ? "NONE" : g_playername[g_guild_ids[id][i]]);
	
	return PLUGIN_HANDLED;
}

public clcmd_Fecha(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	client_cmd(id, "messagemode INGRESAR_FECHA");
	
	return PLUGIN_HANDLED;
}

public clcmd_Rank(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	colorChat(id, _, "%sRanking: !g%d!y / !g%d!y", ZP_PREFIX, g_rank[id], g_rank_global);
	
	return PLUGIN_HANDLED;
}

public clcmd_EasterEggFake(const id)
{
	if(!g_isalive[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	g_eegg_fake[id][0] = 1;
	
	remove_task(id + TASK_ALOHOMORA);
	set_task(5.0, "removeAlohomora", id + TASK_ALOHOMORA);
	
	return PLUGIN_HANDLED;
}

public clcmd_CrearAmuleto(const id)
{
	if(!g_isalive[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new iSlot;
	iSlot = getSlotAmuleto(id);
	
	if(iSlot == -1)
	{
		console_print(id, "[ZP] No podes tener mas de 5 amuletos al mismo tiempo");
		return PLUGIN_HANDLED;
	}
	
	if(g_diamonds[id] < g_cost_amuleto[id])
	{
		console_print(id, "[ZP] No tienes suficientes diamantes para crear el amuleto deseado!");
		return PLUGIN_HANDLED;
	}
	
	console_print(id, "");
	console_print(id, "********* GAM!NGA *********");
	console_print(id, "NOMBRE DEL AMULETO: %s^n", g_amuleto_name_FAKE[id]);
	
	console_print(id, "VIDA: +%d", g_amuleto_stat1[id][iSlot][0]);
	console_print(id, "VELOCIDAD: +%d", g_amuleto_stat1[id][iSlot][1]);
	console_print(id, "GRAVEDAD: +%d", g_amuleto_stat1[id][iSlot][2]);
	console_print(id, "DANIO: +%d", g_amuleto_stat1[id][iSlot][3]);
	console_print(id, "AURA BOMBA LUZ/BUBBLE: +%d^n", g_amuleto_stat3[id][iSlot][3]);
	
	console_print(id, "+x%0.2f EXP", g_amuleto_stat2[id][iSlot][0]);
	console_print(id, "+x%0.2f APS^n", g_amuleto_stat2[id][iSlot][1]);
	
	console_print(id, "+%d de descuento en items extras^n", g_amuleto_stat3[id][iSlot][1]);
	
	console_print(id, "Para confirmar la operacion escriba en consola: %s^n", g_confirmar_amuleto);
	
	console_print(id, "DIAMANTES DISPONIBLES: %d", g_diamonds[id]);
	console_print(id, "COSTO DEL AMULETO: %d DIAMANTES", g_cost_amuleto[id]);
	console_print(id, "********* GAM!NGA *********");
	
	return PLUGIN_HANDLED;
}

public clcmd_ConfirmacionAmuleto(const id)
{
	if(!g_isalive[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new iSlot;
	iSlot = getSlotAmuleto(id);
	
	if(iSlot == -1)
	{
		console_print(id, "[ZP] No podes tener mas de 5 amuletos al mismo tiempo");
		return PLUGIN_HANDLED;
	}
	
	if(g_diamonds[id] < g_cost_amuleto[id])
	{
		console_print(id, "[ZP] No tienes suficientes diamantes para crear el amuleto deseado!");
		return PLUGIN_HANDLED;
	}
	else if(g_cost_amuleto[id] < 10)
	{
		console_print(id, "[ZP] El amuleto no contiene nada!");
		return PLUGIN_HANDLED;
	}
	
	if(!g_amuleto_name_FAKE[id][0])
	{
		console_print(id, "[ZP] Ponle un nombre a tu amuleto");
		return PLUGIN_HANDLED;
	}
	
	formatex(g_amuleto_name[id][iSlot], 63, g_amuleto_name_FAKE[id]);
	
	g_diamonds[id] -= g_cost_amuleto[id];
	
	g_amuleto_stat3[id][iSlot][0] = 15;
	
	new Handle:sqlQuery;
	sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO amuletos (`zp_id`, `amuleto_id`, `amuleto_name`, `am_health`, `am_speed`, `am_grav`, `am_damage`, `am_mult_exp`, `am_mult_aps`, `am_modo`, `am_items`, `am_modo_dr`, `am_luz`) \
	VALUES ('%d', '%d', ^"%s^", '%d', '%d', '%d', '%d', '%f', '%f', '%d', '%d', '0', '%d');", g_user_id[id], iSlot, g_amuleto_name[id][iSlot], g_amuleto_stat1[id][iSlot][0], g_amuleto_stat1[id][iSlot][1], g_amuleto_stat1[id][iSlot][2], g_amuleto_stat1[id][iSlot][3],
	g_amuleto_stat2[id][iSlot][0], g_amuleto_stat2[id][iSlot][1], g_amuleto_stat3[id][iSlot][0], g_amuleto_stat3[id][iSlot][1], g_amuleto_stat3[id][iSlot][3]);
	
	if(!SQL_Execute(sqlQuery))
		executeQuery(id, sqlQuery, 250);
	else
		SQL_FreeHandle(sqlQuery);
	
	++g_stats[id][AMULETOS_CREATE];
	
	colorChat(id, _, "%sHas creado el amuleto !g%s!y", ZP_PREFIX, g_amuleto_name[id][iSlot]);
	
	if(g_stats[id][AMULETOS_CREATE] == 3)
		setAchievement(id, LOS_PRIMEROS_3);
	else if(g_stats[id][AMULETOS_CREATE] == 10)
		setAchievement(id, EN_BUSCA_DEL_MEJOR);
	else if(g_stats[id][AMULETOS_CREATE] == 20)
		setAchievement(id, EL_SENIOR_DE_LOS_AMULETOS);
	
	if(g_amuleto_stat2[id][iSlot][0] > 0.0 && g_amuleto_stat2[id][iSlot][1] > 0.0)
		setAchievement(id, EQUIPANDOME);
	
	saveInfo(id);
	
	return PLUGIN_HANDLED;
}

public clcmd_GameKiske(const id)
{
	if(!g_user_logged[id])
		return PLUGIN_HANDLED;
	
	if(!g_kiske_on)
	{
		colorChat(id, _, "%sEl juego está deshabilitado!", ZP_PREFIX_GK);
		return PLUGIN_HANDLED;
	}
	else if(g_gk_number[id] != 2000)
	{
		colorChat(id, _, "%sYa jugaste un número, espera a que se sortee y recién ahí podrás volver a jugar", ZP_PREFIX_GK);
		return PLUGIN_HANDLED;
	}
	else if(g_gk_last_winner == g_user_id[id])
	{
		colorChat(id, _, "%sAcabás de ganar un !gGK!y, debes esperar un sorteo de por medio para volver a jugar", ZP_PREFIX_GK);
		return PLUGIN_HANDLED;
	}
	
	if(!checkAccess(id))
		client_cmd(id, "messagemode INGRESAR_NUMERO_GK");
	else
		showMenuGK(id);
		
	return PLUGIN_HANDLED;
}

public clcmd_EnterNumberGK(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sNumber[15];
	new iNumber = 0;
	
	read_args(sNumber, 14);
	remove_quotes(sNumber);
	trim(sNumber);
	
	iNumber = str_to_num(sNumber);
	
	if(iNumber < 1 || iNumber > 999)
	{
		colorChat(id, _, "%sSolo números, sin espacios y el número debe estar entre !g0!y y !g1.000!y", ZP_PREFIX_GK);
		return PLUGIN_HANDLED;
	}
	
	new i;
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isconnected[i])
			continue;
		
		if(!g_gk_number[i])
			continue;
		
		if(g_gk_number[i] == iNumber)
		{
			colorChat(id, _, "%sEl usuario !g%s!y ya eligió este número, elige otro!", ZP_PREFIX_GK, g_playername[i]);
			return PLUGIN_HANDLED;
		}
	}
	
	g_gk_number[id] = iNumber;
	
	colorChat(id, _, "%sJugaste al número !g%d!y", ZP_PREFIX_GK, g_gk_number[id]);
	return PLUGIN_HANDLED;
}

public clcmd_Robar(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	if(!g_kiske[id])
		return PLUGIN_HANDLED;
	
	set_user_noclip(id, get_user_noclip(id) ? 0 : 1);
	
	return PLUGIN_HANDLED;
}

public clcmd_Color(const id)
{
	if(!g_isalive[id])
		return PLUGIN_HANDLED;
	
	switch(g_glow_color[id])
	{
		case 0: colorChat(id, _, "%sColor: !gNINGUNO!y", ZP_PREFIX);
		case 1: colorChat(id, _, "%sColor: !gROJO!y", ZP_PREFIX);
		case 2: colorChat(id, _, "%sColor: !gVERDE!y", ZP_PREFIX);
		case 3: colorChat(id, _, "%sColor: !gAZUL!y", ZP_PREFIX);
		case 4: colorChat(id, _, "%sColor: !gBLANCO!y", ZP_PREFIX);
	}
	
	return PLUGIN_HANDLED;
}

public clcmd_Buy(const id)
{
	if(!g_user_logged[id])
		return PLUGIN_HANDLED;
	
	playPPT__F(id, 0);
	
	return PLUGIN_HANDLED;
}

public infectOneMinute(const taskid)
{
	if(g_logros_stats[ID_INFECT_1_MINUTE][INFECT_ONE_MINUTE] >= (DESAFIOS[EL_TIEMPO_APREMIA][desafioLevel] + g_desafios[ID_INFECT_1_MINUTE][EL_TIEMPO_APREMIA] + (DESAFIOS[EL_TIEMPO_APREMIA][desafioLevelMult] * g_desafios[ID_INFECT_1_MINUTE][EL_TIEMPO_APREMIA])))
		setChallenge(ID_INFECT_1_MINUTE, EL_TIEMPO_APREMIA);
	
	g_logros_stats[ID_INFECT_1_MINUTE][INFECT_ONE_MINUTE] = 0;
}

public confuseVictim(const taskid)
{
	if(!g_isconnected[ID_MADNESS_BOMB])
		return;
	
	/*if(g_madness_bomb_move[ID_MADNESS_BOMB])
	{
		client_cmd(ID_MADNESS_BOMB, "-moveleft; -moveright; -back");
		g_madness_bomb_move[ID_MADNESS_BOMB] = 0;
	}*/
	
	if(random_num(0, 1) == 1)
	{
		/*static const MOVES[][] = {"+moveleft", "+moveright", "+back"};
		client_cmd(ID_MADNESS_BOMB, MOVES[random_num(0, 2)]);*/
		
		g_madness_bomb_move[ID_MADNESS_BOMB] = 1;
		
		client_print(ID_MADNESS_BOMB, print_center, "¡ESTÁS RE DURO!");
		
		message_begin(MSG_ONE_UNRELIABLE, g_message_screenfade, _, ID_MADNESS_BOMB);
		write_short(UNIT_SECOND);
		write_short(0);
		write_short(FFADE_IN);
		write_byte(255);
		write_byte(0);
		write_byte(0);
		write_byte(random_num(100, 175));
		message_end();
		
		static Float:vecVelocity[3];
		vecVelocity[0] = random_float(100.0, 250.0);
		vecVelocity[1] = random_float(100.0, 250.0);
		vecVelocity[2] = random_float(100.0, 250.0);
		
		entity_set_vector(ID_MADNESS_BOMB, EV_VEC_punchangle, vecVelocity);
		entity_get_vector(ID_MADNESS_BOMB, EV_VEC_velocity, vecVelocity);
		
		vecVelocity[0] /= 3.0;
		vecVelocity[1] /= 2.0;
		
		entity_set_vector(ID_MADNESS_BOMB, EV_VEC_velocity, vecVelocity);
	}
	
	++g_madness_bomb_count[ID_MADNESS_BOMB];
	
	if(g_madness_bomb_count[ID_MADNESS_BOMB] == 20)
	{
		give_item(ID_MADNESS_BOMB, "weapon_knife");
		
		//client_cmd(ID_MADNESS_BOMB, "-moveleft; -moveright; -back");
		g_madness_bomb_count[ID_MADNESS_BOMB] = 0;
		g_madness_bomb_move[ID_MADNESS_BOMB] = 0;
		
		/*message_begin(MSG_ONE, g_message_screenfade, _, ID_MADNESS_BOMB);
		write_short(UNIT_SECOND);
		write_short(0);
		write_short(FFADE_IN);
		write_byte(random_num(0, 255));
		write_byte(random_num(0, 255));
		write_byte(random_num(0, 255));
		write_byte(255);
		message_end();*/
	}
}

public forward__ChangeMap()
	forceFinishDuel();

public forceFinishDuel()
{
	new iReward;
	new i;
	new j;
	
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isconnected[i])
			continue;
		
		if(task_exists(i + TASK_FINISHCOMBO))
		{
			remove_task(i + TASK_FINISHCOMBO);
			
			colorChat(i, _, "%sTu combo ha finalizado porque el mapa ha terminado!", ZP_PREFIX);
			
			static iReward;
			iReward = (g_combo[i] * (g_combo_reward[i] + 1));
			
			if(iReward > 0)
			{
				addXp(i, iReward, 0);
				
				if(g_combo_reward[i])
				{
					if(g_combo_reward[i] < 11)
						playSound(i, COMBOS[g_combo_reward[i]][comboSound]);
					else
						emitSound(i, CHAN_VOICE, COMBOS[g_combo_reward[i]][comboSound]);
					
					if((COMBO_FIRST_BLOOD + g_combo_reward[i] - 1) <= COMBO_LUDICROUSS_KILL) {
						setAchievement(i, clamp(COMBO_FIRST_BLOOD + g_combo_reward[i] - 1, COMBO_FIRST_BLOOD, COMBO_LUDICROUSS_KILL));
					} else {
						switch((g_combo_reward[i] - 1)) {
							case 17: setAchievement(i, COMBO_ITS_A_NIGHTMARE);
							case 18: setAchievement(i, COMBO_WHAT_THE_FUCK);
							case 19: setAchievement(i, COMBO_INFERNO);
							case 20: setAchievement(i, COMBO_AAA);
						}
					}
				}
				else
					playSound(i, COMBOS[g_combo_reward[i]][comboSound]);
				
				g_stats[i][COMBOS_D] += g_combo[i];
				
				if(g_combo[i] > g_stats[i][COMBO_MAX_D] && !g_special_mode[i] && !g_mode[MODE_ANNIHILATOR])
				{
					colorChat(i, _, "%sHas superado tu viejo mejor combo de !gx%d!y por el recién hecho de !gx%d!y", ZP_PREFIX, g_stats[i][COMBO_MAX_D], g_combo[i]);
					g_stats[i][COMBO_MAX_D] = g_combo[i];
				}
			}
		}
		
		if(g_guild[i] && g_combo_guild[g_guild_id[i]])
		{
			for(j = 0; j < 5; ++j)
			{
				if(!g_isalive[g_guild_ids[i][j]])
					continue;
				
				if(g_zombie[g_guild_ids[i][j]])
					continue;
				
				if(task_exists(g_guild_ids[i][j] + TASK_FINISHCOMBO_GUILD) && g_combo_ok[g_guild_ids[i][j]])
				{
					change_task(g_guild_ids[i][j] + TASK_FINISHCOMBO_GUILD, 0.1);
					colorChat(i, _, "%sEl combo ha finalizado porque el mapa ha terminado!", ZP_PREFIX_GUILD);
				}
			}
		}
		
		if(g_in_duelo_official[i])
		{
			new iWin;
			iReward = -2;
			
			switch(g_duelo_type[i])
			{
				case DUELO_HUM_INF_MAP:
				{
					iReward = (g_duelo_stats[i][DUELO_HUM_INF_MAP] > g_duelo_stats[g_in_duelo[i]][DUELO_HUM_INF_MAP]) ? i : (g_duelo_stats[i][DUELO_HUM_INF_MAP] < g_duelo_stats[g_in_duelo[i]][DUELO_HUM_INF_MAP]) ? g_in_duelo[i] : -1;
					iWin = DUELO_HUM_INF_MAP;
				}
				case DUELO_ZOM_MAT_MAP:
				{
					iReward = (g_duelo_stats[i][DUELO_ZOM_MAT_MAP] > g_duelo_stats[g_in_duelo[i]][DUELO_ZOM_MAT_MAP]) ? i : (g_duelo_stats[i][DUELO_ZOM_MAT_MAP] < g_duelo_stats[g_in_duelo[i]][DUELO_ZOM_MAT_MAP]) ? g_in_duelo[i] : -1;
					iWin = DUELO_ZOM_MAT_MAP;
				}
				case DUELO_DMG_DON_MAP:
				{
					iReward = (g_duelo_stats[i][DUELO_DMG_DON_MAP] > g_duelo_stats[g_in_duelo[i]][DUELO_DMG_DON_MAP]) ? i : (g_duelo_stats[i][DUELO_DMG_DON_MAP] < g_duelo_stats[g_in_duelo[i]][DUELO_DMG_DON_MAP]) ? g_in_duelo[i] : -1;
					iWin = DUELO_DMG_DON_MAP;
				}
			}
			
			if(iReward != -2)
			{
				if(iReward != -1)
				{
					colorChat(i, _, "%sEl duelo contra !g%s!y ha finalizado!", ZP_PREFIX, g_playername[g_in_duelo[i]]);
					colorChat(g_in_duelo[i], _, "%sEl duelo contra !g%s!y ha finalizado!", ZP_PREFIX, g_playername[i]);
					
					colorChat(iReward, _, "%sEl ganador es !g%s!y. Has ganado !g%d %s!y", ZP_PREFIX, g_playername[iReward], g_duelo_bet[iReward][g_duelo[iReward]], MENU_DUELOS_PREFIX[g_duelo[iReward]]);
					colorChat(g_in_duelo[iReward], _, "%sEl ganador es !g%s!y. Has perdido !g%d %s!y", ZP_PREFIX, g_playername[iReward], g_duelo_bet[g_in_duelo[iReward]][g_duelo[g_in_duelo[iReward]]], MENU_DUELOS_PREFIX[g_duelo[g_in_duelo[iReward]]]);
					
					colorChat(0, CT, "%sDuelo de !g%s!y finalizado. !g%s!y !t[%d]!y - !t[%d]!g %s!y", ZP_PREFIX, MENU_DUELOS[g_duelo[iReward]], g_playername[iReward], g_duelo_stats[iReward][iWin], g_duelo_stats[g_in_duelo[iReward]][iWin], g_playername[g_in_duelo[iReward]]);
					
					++g_duelo_win[iReward];
					++g_duelo_lost[g_in_duelo[iReward]];
				
					#if defined CHECK_PRIMERO_BUEN_COMIENZO
						setAchievement__First(iReward, PRIMERO_BUEN_COMIENZO);
					#endif
					
					if(g_duelo_win[iReward] == 1)
						setAchievement(iReward, BUEN_COMIENZO);
					else if(g_duelo_win[iReward] == 50)
						setAchievement(iReward, PRO_DUELO);
					else if(g_duelo_win[iReward] == 120)
						setAchievement(iReward, TRANQUI_120);
					else if(g_duelo_win[iReward] == 200)
						setAchievement(iReward, AL_MAXIMO);
					
					if(g_logros_stats[iReward][APUESTA_MAXIMA] || g_logros_stats[g_in_duelo[iReward]][APUESTA_MAXIMA])
						setAchievement(iReward, OTRA_FORMA_DE_JUGAR);
					
					switch(g_duelo[iReward])
					{
						case MENU_DUELO_EXPERIENCIA:
						{
							addXp(iReward, g_duelo_bet[i][MENU_DUELO_EXPERIENCIA], 0);
							g_exp[g_in_duelo[iReward]] -= g_duelo_bet[i][MENU_DUELO_EXPERIENCIA];
						}
						case MENU_DUELO_AMMOPACKS:
						{
							g_ammopacks[iReward] += g_duelo_bet[i][MENU_DUELO_AMMOPACKS];
							g_ammopacks[g_in_duelo[iReward]] -= g_duelo_bet[i][MENU_DUELO_AMMOPACKS];
						}
						case MENU_DUELO_PH: 
						{
							g_points[iReward][CLASS_HUMAN] += g_duelo_bet[i][MENU_DUELO_PH];
							g_points[g_in_duelo[iReward]][CLASS_HUMAN] -= g_duelo_bet[i][MENU_DUELO_PH];
						}
						case MENU_DUELO_PZ:
						{
							g_points[iReward][CLASS_ZOMBIE] += g_duelo_bet[i][MENU_DUELO_PZ];
							g_points[g_in_duelo[iReward]][CLASS_ZOMBIE] -= g_duelo_bet[i][MENU_DUELO_PZ];
						}
						case MENU_DUELO_PF:
						{
							g_points[iReward][CLASS_FRAGMENTOS] += g_duelo_bet[i][MENU_DUELO_PF];
							g_points[g_in_duelo[iReward]][CLASS_FRAGMENTOS] -= g_duelo_bet[i][MENU_DUELO_PF];
						}
					}
				}
				else
				{
					colorChat(i, _, "%sEl duelo contra !g%s!y ha finalizado en un empate!", ZP_PREFIX, g_playername[g_in_duelo[i]]);
					colorChat(g_in_duelo[i], _, "%sEl duelo contra !g%s!y ha finalizado en un empate!", ZP_PREFIX, g_playername[i]);
					
					colorChat(0, CT, "%sDuelo de !g%s!y finalizado. !g%s!y !t[%d]!y - !t[%d]!g %s!y", ZP_PREFIX, MENU_DUELOS[g_duelo[iReward]], g_playername[iReward], g_duelo_stats[iReward][iWin], g_duelo_stats[g_in_duelo[iReward]][iWin], g_playername[g_in_duelo[iReward]]);
				}
				
				g_duelo_type[g_in_duelo[i]] = -1;
				g_duelo_type[i] = -1;
				
				g_duelo_bet[g_in_duelo[i]][g_duelo[g_in_duelo[i]]] = 0;
				g_duelo_bet[i][g_duelo[i]] = 0;
				
				g_duelo_invite[i][g_in_duelo[i]] = 0;
				g_duelo_invite[g_in_duelo[i]][i] = 0;
				
				g_duelo[g_in_duelo[i]] = -1;
				g_duelo[i] = -1;
				
				g_in_duelo_official[g_in_duelo[i]] = 0;
				g_in_duelo_official[i] = 0;
				
				g_in_duelo[g_in_duelo[i]] = 0;
				g_in_duelo[i] = 0;
			}
		}
	}
}

public message__VincAccount(const taskid)
{
	if(!g_isconnected[ID_MESSAGE_VINC])
		return;
	
	colorChat(ID_MESSAGE_VINC, _, "%sTu cuenta no está vinculada al foro, recordá vincularla lo más pronto posible", ZP_PREFIX);
	colorChat(ID_MESSAGE_VINC, _, "%sVincular tu cuenta ofrece varias opciones/funciones, alguna de ellas muy importantes", ZP_PREFIX);
}

public removeAlohomora(const taskid)
{
	if(!g_isconnected[ID_ALOHOMORA])
		return;
	
	g_eegg_fake[ID_ALOHOMORA][0] = 0;
}

#if defined USE_ORPHEU
	public game_enableForwards() <> {}
	public game_enableForwards() <disabled>
	{
		g_oMapConditions = OrpheuRegisterHook(OrpheuGetFunction("CheckMapConditions", "CHalfLifeMultiplay"), "game_blockConditions");
		g_oWinConditions = OrpheuRegisterHook(OrpheuGetFunction("CheckWinConditions", "CHalfLifeMultiplay"), "game_blockConditions");

		state enabled;
	}
	
	public game_disableForwards() <> {}
	public game_disableForwards() <enabled>
	{
		OrpheuUnregisterHook(g_oMapConditions);
		OrpheuUnregisterHook(g_oWinConditions);

		state disabled;
	}

	public OrpheuHookReturn:game_blockConditions() <>
		return OrpheuIgnored;

	public OrpheuHookReturn:game_blockConditions() <enabled>
	{
		OrpheuSetReturn(false);
		return OrpheuSupercede;
	}

#endif

public finishDuelFinal()
{
	new i;
	new pos[33];
	
	if(g_duel_final == CUARTOS || g_duel_final == SEMIFINAL || g_duel_final == FINAL)
	{
		new j;
		new temp;
		
		for(i = 1; i <= g_maxplayers; ++i)
			pos[i] = i;
		
		for(i = 1; i < 32; ++i)
		{
			for(j = i+1; j < 33; ++j)
			{
				if(g_duel_final_kills[j] > g_duel_final_kills[i])
				{
					temp = g_duel_final_kills[j];
					g_duel_final_kills[j] = g_duel_final_kills[i];
					g_duel_final_kills[i] = temp;
					
					temp = pos[j];
					pos[j] = pos[i];
					pos[i] = temp;
				}
			}
		}
	}
	
	new iHumans = 0;
	switch(g_duel_final)
	{
		case CUARTOS:
		{
			set_dhudmessage(random_num(50, 255), random_num(50, 255), random_num(50, 255), -1.0, 0.2, 0, 0.0, 5.0, 1.0, 1.0);
			show_dhudmessage(0, "¡DUELO FINAL%s!^nCUARTOS DE FINAL", g_duel_final_mode);
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(iHumans == 8)
					break;
				
				if(g_isconnected[pos[i]] && !g_isalive[pos[i]])
				{
					ExecuteHamB(Ham_CS_RoundRespawn, pos[i]);
					++iHumans;
				}
			}
			
			playSound(0, g_sound_warning);
		}
		case SEMIFINAL:
		{
			set_dhudmessage(random_num(50, 255), random_num(50, 255), random_num(50, 255), -1.0, 0.2, 0, 0.0, 5.0, 1.0, 1.0);
			show_dhudmessage(0, "¡DUELO FINAL%s!^nSEMIFINAL", g_duel_final_mode);
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(iHumans == 4)
					break;
				
				if(g_isconnected[pos[i]] && !g_isalive[pos[i]])
				{
					ExecuteHamB(Ham_CS_RoundRespawn, pos[i]);
					++iHumans;
				}
			}
			
			playSound(0, g_sound_warning);
		}
		case FINAL:
		{
			set_dhudmessage(random_num(50, 255), random_num(50, 255), random_num(50, 255), -1.0, 0.2, 0, 0.0, 5.0, 1.0, 1.0);
			show_dhudmessage(0, "¡DUELO FINAL%s!^nFINAL", g_duel_final_mode);
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(iHumans == 2)
					break;
				
				if(g_isconnected[pos[i]] && !g_isalive[pos[i]])
				{
					ExecuteHamB(Ham_CS_RoundRespawn, pos[i]);
					++iHumans;
				}
			}
			
			playSound(0, g_sound_warning);
		}
		case 4:
		{
			new iReward;
			new sReward[15];
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				if(!g_user_logged[i]) {
					continue;
				}
				
				g_logros_stats[i][KILL_WITH_HE] = 0;
				g_logros_stats[i][KILL_WITH_AWP] = 0;
				
				new intExp = NEED_EXP_TOTAL[g_level_total[i]] - NEED_EXP_TOTAL[g_level_total[i] - 1];
				new intMult = g_duel_final_kills_total[i] * 4;
				iReward = (intExp * intMult) / 100;
				
				addDot(iReward, sReward, 14);
				
				if(iReward >= 0) {
					colorChat(i, _, "%sGanaste !g%s EXP!y por matar !g%d humanos!y", ZP_PREFIX, sReward, g_duel_final_kills_total[i]);
					addXp(i, iReward, 0);
				} else {
					log_to_file("bug_duelo_final.txt", "%d | %d | %d | %d | %d | %d", NEED_EXP_TOTAL[g_level_total[i]], NEED_EXP_TOTAL[g_level_total[i] - 1], g_duel_final_kills_total[i], intExp, intMult, iReward);
				}
				
				if(g_duel_final_kills_total[i] >= 5)
				{
					setAchievement(i, APRENDIENDO_A_FAKEAR);
					if(g_duel_final_kills_total[i] >= 8)
					{
						setAchievement(i, VOY_POR_BUEN_CAMINO);
						if(g_duel_final_kills_total[i] >= 11)
						{
							setAchievement(i, EXPERTO_EN_FAKA);
							if(g_duel_final_kills_total[i] >= 14)
							{
								setAchievement(i, VENGAN_DE_A_UNO);
								
								g_points[i][CLASS_HUMAN] += 10;
								colorChat(i, _, "%sGanaste !g5 pH!y por matar !g14+ humanos!y", ZP_PREFIX);
							}
							else
							{
								g_points[i][CLASS_HUMAN] += 5;
								colorChat(i, _, "%sGanaste !g5 pH!y por matar !g11+ humanos!y", ZP_PREFIX);
							}
						}
						else
						{
							g_points[i][CLASS_HUMAN] += 3;
							colorChat(i, _, "%sGanaste !g1 pH!y por matar !g8+ humanos!y", ZP_PREFIX);
						}
					} else {
						g_points[i][CLASS_HUMAN] += 2;
						colorChat(i, _, "%sGanaste !g2 pH!y por matar !g5+ humanos!y", ZP_PREFIX);
					}
				}
			}
			
			#if defined USE_ORPHEU
				game_disableForwards();
			#endif
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isalive[i])
					continue;
				
				++g_stats[i][DUEL_FINAL_WINS];
				
				if(g_stats[i][DUEL_FINAL_WINS] == 1)
					setAchievement(i, MI_PRIMER_DUELO);
				else if(g_stats[i][DUEL_FINAL_WINS] == 5)
					setAchievement(i, VAMOS_BIEN);
				else if(g_stats[i][DUEL_FINAL_WINS] == 10)
					setAchievement(i, DEMASIADO_FACIL);
				
				user_kill(i, 1);
				
				break;
			}
		}
	}
	
	for(i = 1; i <= g_maxplayers; ++i)
		g_duel_final_kills[i] = 0;
}

/*public updateBOT()
{
	if(g_fakeplayer == -1)
		return;
	
	new id = find_player("i");
	
	if(!id)
	{
		id = engfunc(EngFunc_CreateFakeClient, "Kisk3 - RegEv");
		if(pev_valid(id))
		{
			engfunc(EngFunc_FreeEntPrivateData, id);
			dllfunc(MetaFunc_CallGameEntity, "player", id);
			
			set_user_info(id, "rate", "3500");
			set_user_info(id, "cl_updaterate", "25");
			set_user_info(id, "cl_lw", "1");
			set_user_info(id, "cl_lc", "1");
			set_user_info(id, "cl_dlmax", "128");
			set_user_info(id, "cl_righthand", "1");
			set_user_info(id, "_vgui_menus", "0");
			set_user_info(id, "_ah", "0");
			set_user_info(id, "dm", "0");
			
			set_pev(id, pev_colormap, id);
			
			new szMsg[128];
			dllfunc(DLLFunc_ClientConnect, id, "Kisk3 - RegEv", "127.0.0.1", szMsg);
			dllfunc(DLLFunc_ClientPutInServer, id);
			
			cs_set_user_team(id, CS_TEAM_SPECTATOR);
			
			g_fakeplayer = id;
		}
	}
}*/

public removeScreenFade__Grunt(const id)
{
	if(!g_isconnected[id])
		return;
	
	new i;
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isalive[i])
			continue;
		
		turnOffFlashlight(i);
		g_grunt_flash[i] = 0;
	}
	
	g_grunt_nodamage = 0;
	
	message_begin(MSG_ONE, g_message_screenfade, _, id);
	write_short(UNIT_SECOND);
	write_short(0);
	write_short(FFADE_IN);
	write_byte(0);
	write_byte(0);
	write_byte(0);
	write_byte(255);
	message_end();
}

public gruntAiming(const id)
{
	if(!is_user_valid_alive(id) || !g_grunt_reward_global)
		return;
	
	set_hudmessage(0, 255, 0, -1.0, g_hud_position[id][POSITION_HUDCOMBO][1], g_hudcombo_effect[id], 0.0, 8.0, 0.0, 0.0, -1);
	ShowSyncHudMsg(id, g_Hud_Combo, "Ganancia: %d EXP", g_grunt_reward[id]);
	
	if(g_mode[MODE_GRUNT] && !g_grunt_nodamage)
	{
		if(!g_grunt[id])
			g_grunt_reward[id] += (!g_grunt_flash[id]) ? 322 : 644;
		else
			g_grunt_reward[id] -= g_grunt_reward_global;
		
		static iTarget;
		static iBody;
		
		get_user_aiming(id, iTarget, iBody, 750);
		
		if(!is_user_valid_alive(iTarget))
		{
			set_task(0.2, "gruntAiming", id);
			return;
		}
		
		if(!g_grunt[id])
		{
			if(g_grunt[iTarget])
			{
				set_user_rendering(id, kRenderFxGlowShell, 255, 0, 0, kRenderNormal, 25);
				
				if(g_health[id] - 40 >= 1)
				{
					set_user_health(id, g_health[id] - 40);
					--g_health[id];
					
					emitSound(id, CHAN_VOICE, g_sound_grunt_hits[random_num(0, charsmax(g_sound_grunt_hits))]);
				}
				else
					ExecuteHam(Ham_TakeDamage, id, iTarget, iTarget, 40.0, DMG_CRUSH);
				
				remove_task(id + TASK_GLOW_GRUNT);
				set_task(0.25, "removeGlowGrunt", id + TASK_GLOW_GRUNT);
			}
		}
		else
		{
			set_user_rendering(iTarget, kRenderFxGlowShell, 255, 0, 0, kRenderNormal, 25);
			
			if(g_health[iTarget] - 40 >= 1)
			{
				set_user_health(iTarget, g_health[iTarget] - 40);
				--g_health[iTarget];
				
				emitSound(iTarget, CHAN_VOICE, g_sound_grunt_hits[random_num(0, charsmax(g_sound_grunt_hits))]);
			}
			else
				ExecuteHam(Ham_TakeDamage, iTarget, id, id, 40.0, DMG_CRUSH);
			
			remove_task(iTarget + TASK_GLOW_GRUNT);
			set_task(0.25, "removeGlowGrunt", iTarget + TASK_GLOW_GRUNT);
		}
	}
	
	set_task(0.2, "gruntAiming", id);
}

public gruntAiming__Elite(const id)
{
	if(!is_user_valid_alive(id) || !g_grunt_reward_global)
		return;
	
	set_hudmessage(0, 255, 0, -1.0, g_hud_position[id][POSITION_HUDCOMBO][1], g_hudcombo_effect[id], 0.0, 8.0, 0.0, 0.0, -1);
	ShowSyncHudMsg(id, g_Hud_Combo, "Ganancia: %d EXP", g_grunt_reward[id]);
	
	if(g_mode[MODE_GRUNT] && !g_grunt_nodamage)
	{
		if(!g_grunt[id])
			g_grunt_reward[id] += (!g_grunt_flash[id]) ? 644 : 1288;
		else
			g_grunt_reward[id] -= g_grunt_reward_global;
		
		static iTarget;
		static iBody;
		
		get_user_aiming(id, iTarget, iBody, 750);
		
		if(!is_user_valid_alive(iTarget))
		{
			set_task(0.2, "gruntAiming__Elite", id);
			return;
		}
		
		if(!g_grunt[id])
		{
			if(g_grunt[iTarget])
			{
				set_user_rendering(id, kRenderFxGlowShell, 255, 0, 0, kRenderNormal, 25);
				
				if(g_health[id] - 80 >= 1)
				{
					set_user_health(id, g_health[id] - 80);
					--g_health[id];
					
					emitSound(id, CHAN_VOICE, g_sound_grunt_hits[random_num(0, charsmax(g_sound_grunt_hits))]);
				}
				else
					ExecuteHam(Ham_TakeDamage, id, iTarget, iTarget, 80.0, DMG_CRUSH);
				
				remove_task(id + TASK_GLOW_GRUNT);
				set_task(0.25, "removeGlowGrunt", id + TASK_GLOW_GRUNT);
			}
		}
		else if(!g_grunt[iTarget])
		{
			set_user_rendering(iTarget, kRenderFxGlowShell, 255, 0, 0, kRenderNormal, 25);
			
			if(g_health[iTarget] - 80 >= 1)
			{
				set_user_health(iTarget, g_health[iTarget] - 80);
				--g_health[iTarget];
				
				emitSound(iTarget, CHAN_VOICE, g_sound_grunt_hits[random_num(0, charsmax(g_sound_grunt_hits))]);
			}
			else
				ExecuteHam(Ham_TakeDamage, iTarget, id, id, 80.0, DMG_CRUSH);
			
			remove_task(iTarget + TASK_GLOW_GRUNT);
			set_task(0.25, "removeGlowGrunt", iTarget + TASK_GLOW_GRUNT);
		}
	}
	
	set_task(0.2, "gruntAiming__Elite", id);
}

public removeGlowGrunt(const taskid)
{
	set_user_rendering(ID_GLOW_GRUNT);
}

// public fw_think(entity)
// {
	// if (!pev_valid(entity))
		// return;
	
	// static model[64];
	// pev(entity, pev_model, model, charsmax(model));

	// if(equal(model, g_model_bubblebomb[1]))
	// {
		// new e = -1;
		
		// new Float:centerF[3], Float:originF[3], Float:directionF[3], Float:proporcionF;
		// pev(entity, pev_origin, centerF);	
		
		// while((e = find_ent_in_sphere(e, centerF, 120.0)) != 0)
		// {
			// if((e > g_maxplayers) || !g_zombie[e])
				// continue;
			
			// if(g_nodamage[e])
				// continue;
			
			// if(g_special_mode[e])
				// continue;
			
			// if(g_firstzombie[e] && !g_FirstInfect)
				// continue;
			
			// pev(e, pev_origin, originF);
			
			// xs_vec_sub(originF, centerF, directionF);
			
			// proporcionF = (600.0 - vector_length(directionF)) / 10.0;

			// xs_vec_mul_scalar(directionF, proporcionF, directionF);

			// set_pev(e, pev_velocity, directionF);
		// }
		
		// set_pev(entity, pev_nextthink, get_gametime() + 0.1);		
	// }
// }

new const LETTERS_LIGHT[] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'};

public changeLights()
{
	set_lights(LETTERS_LIGHT[g_grunt_power]);
	
	++g_grunt_power;
	
	if(g_grunt_power == 35)
	{
		set_lights("a");
		return;
	}
	
	set_task(0.2, "changeLights");
}

public winNemesis__OneMinute(const taskid)
{
	g_win_nemesis_one_minute = 0;
	
	if(g_mode[MODE_NEMESIS] && !g_logros[ID_NEMESIS_OM][SPEED_HACK_DONDE]) {
		colorChat(0, _, "%s!tLA BAZOOKA MÁS RÁPIDA!y FALLIDO!", ZP_PREFIX);
	}
}

public showMenuGK(const id)
{
	if(!g_isconnected[id])
		return;
	
	if(!checkAccess(id))
		return;
	
	static sMenu[450];
	static iLen;
	
	iLen = 0;
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yGAME KISKE^n^n");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1.\w SORTEAR GK^n^n");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r2.\w SORTEAR GK POR \yALIEN VS. DEPREDADOR^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r3.\w SORTEAR GK POR \ySYNAPSIS^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r4.\w SORTEAR GK POR \ySNIPER");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "^n^n\r0.\w SALIR");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Game Kiske Menu");
}

public menuGK(const id, const key)
{
	if(!is_user_connected(id) || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	switch(key)
	{
		case 0:
		{
			sortearGK(g_gk_number_fake, 0);
			g_gk_number_fake = 0;
		}
		case 1: sortearGK(.mode = MODE_ALVSPRED);
		case 2: sortearGK(.mode = MODE_SYNAPSIS);
		case 3: sortearGK(.mode = MODE_SNIPER);
	}
	
	return PLUGIN_HANDLED;
}

sortearGK(number_fake = 0, mode = 0)
{
	switch(mode)
	{
		case 0:
		{
			new iNumberGK;
			if(!number_fake)
				iNumberGK = random_num(1, 999);
			else
				iNumberGK = number_fake;
			
			colorChat(0, _, "%sNúmero ganador: !g%d!y", ZP_PREFIX_GK, iNumberGK);
			
			new iLocalGK[33];
			new i;
			new j;
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(g_gk_number[i] < 1 || g_gk_number[i] > 999)
					g_gk_number[i] = 2000;
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(!g_isconnected[i])
					continue;
				
				if(g_gk_number[i] == 2000)
					continue;
				
				if(g_gk_number[i] == iNumberGK)
				{
					colorChat(0, _, "%sEl jugador !g%s!y ganó el GK por tener el número exacto!", ZP_PREFIX_GK, g_playername[i]);
					setAchievement(i, SUERTE_DE_PRINCIPIANTE);
					
					for(j = 1; j <= g_maxplayers; ++j)
						g_gk_number[j] = 2000;
					
					return PLUGIN_HANDLED;
				}
				
				iLocalGK[i] = g_gk_number[i];
				g_gk_number[i] = abs(g_gk_number[i] - iNumberGK);
			}
			
			new iWinner = 0;
			new iMin = 2000;
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(g_gk_number[i] < iMin)
				{
					iMin = g_gk_number[i];
					iWinner = i;
				}
			}
			
			if(iWinner)
			{
				colorChat(0, _, "%sEl jugador !g%s!y ganó el GK por número más cercano (!g%d!y)", ZP_PREFIX_GK, g_playername[iWinner], iLocalGK[iWinner]);
				
				setAchievement(iWinner, SUERTE_DE_PRINCIPIANTE);
				
				g_gk_last_winner = g_user_id[iWinner];
				
				#if defined CHECK_SUERTE_DE_PRINCIPIANTE
					setAchievement__First(iWinner, PRIMERO_SUERTE_DE_PRINCIPIANTE);
				#endif
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
				g_gk_number[i] = 2000;
		}
		case MODE_ALVSPRED:
		{
			new iNumberGK[2];
			iNumberGK[0] = random_num(1, 999);
			iNumberGK[1] = iNumberGK[0];
			
			while(iNumberGK[0] == iNumberGK[1])
				iNumberGK[1] = random_num(1, 999);
			
			colorChat(0, _, "%sNúmeros ganadores: !g%d!y , !g%d!y", ZP_PREFIX_GK, iNumberGK[0], iNumberGK[1]);
			
			new iLocalGK[33];
			new iWinner;
			new iMin;
			new i;
			new k;
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(g_gk_number[i] < 1 || g_gk_number[i] > 999)
					g_gk_number[i] = 2000;
			}
			
			for(k = 0; k < 2; ++k)
			{
				for(i = 1; i <= g_maxplayers; ++i)
				{
					if(!g_isconnected[i])
						continue;
					
					if(g_gk_number[i] == 2000)
						continue;
					
					if(!k)
					{
						if(g_gk_number[i] == iNumberGK[0])
						{
							colorChat(0, TERRORIST, "%sEl jugador !g%s!y ganó el !tALIEN!y por tener el número exacto (!g%d!y)!", ZP_PREFIX_GK, g_playername[i], iNumberGK[0]);
							g_gk_number[i] = 2000;
							
							continue;
						}
					}
					else
					{
						if(g_gk_number[i] == iNumberGK[1])
						{
							colorChat(0, CT, "%sEl jugador !g%s!y ganó el !tDEPREDADOR!y por tener el número exacto (!g%d!y)!", ZP_PREFIX_GK, g_playername[i], iNumberGK[1]);
							g_gk_number[i] = 2000;
							
							continue;
						}
					}
					
					iLocalGK[i] = g_gk_number[i];
					g_gk_number[i] = abs(g_gk_number[i] - iNumberGK[k]);
				}
				
				iWinner = 0;
				iMin = 2000;
				
				for(i = 1; i <= g_maxplayers; ++i)
				{
					if(g_gk_number[i] < iMin)
					{
						iMin = g_gk_number[i];
						iWinner = i;
					}
				}
				
				if(iWinner)
				{
					g_gk_number[iWinner] = 2000;
					
					if(!k)
						colorChat(0, TERRORIST, "%sEl jugador !g%s!y ganó el !tALIEN!y por número más cercano (!g%d!y)", ZP_PREFIX_GK, g_playername[iWinner], iLocalGK[iWinner]);
					else
						colorChat(0, CT, "%sEl jugador !g%s!y ganó el !tDEPREDADOR!y por número más cercano (!g%d!y)", ZP_PREFIX_GK, g_playername[iWinner], iLocalGK[iWinner]);
				}
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
				g_gk_number[i] = 2000;
		}
		case MODE_SYNAPSIS:
		{
			new iNumberGK[3];
			iNumberGK[0] = random_num(1, 999);
			iNumberGK[1] = iNumberGK[0];
			iNumberGK[2] = iNumberGK[0];
			
			while(iNumberGK[0] == iNumberGK[1] || iNumberGK[0] == iNumberGK[2] || iNumberGK[1] == iNumberGK[2])
			{
				iNumberGK[1] = random_num(1, 999);
				iNumberGK[2] = random_num(1, 999);
			}
			
			colorChat(0, _, "%sNúmeros ganadores: !g%d!y , !g%d!y , !g%d!y", ZP_PREFIX_GK, iNumberGK[0], iNumberGK[1], iNumberGK[2]);
			
			new iLocalGK[33];
			new iWinner;
			new iMin;
			new i;
			new k;
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(g_gk_number[i] < 1 || g_gk_number[i] > 999)
					g_gk_number[i] = 2000;
			}
			
			for(k = 0; k < 3; ++k)
			{
				for(i = 1; i <= g_maxplayers; ++i)
				{
					if(!g_isconnected[i])
						continue;
					
					if(g_gk_number[i] == 2000)
						continue;
					
					if(g_gk_number[i] == iNumberGK[k])
					{
						colorChat(0, TERRORIST, "%sEl jugador !g%s!y ganó el !tNEMESIS!y por tener el número exacto (!g%d!y)!", ZP_PREFIX_GK, g_playername[i], iNumberGK[k]);
						g_gk_number[i] = 2000;
						
						continue;
					}
					
					iLocalGK[i] = g_gk_number[i];
					g_gk_number[i] = abs(g_gk_number[i] - iNumberGK[k]);
				}
				
				iWinner = 0;
				iMin = 2000;
				
				for(i = 1; i <= g_maxplayers; ++i)
				{
					if(g_gk_number[i] < iMin)
					{
						iMin = g_gk_number[i];
						iWinner = i;
					}
				}
				
				if(iWinner)
				{
					g_gk_number[iWinner] = 2000;
					colorChat(0, TERRORIST, "%sEl jugador !g%s!y ganó el !tNEMESIS!y por número más cercano (!g%d!y)", ZP_PREFIX_GK, g_playername[iWinner], iLocalGK[iWinner]);
				}
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
				g_gk_number[i] = 2000;
		}
		case MODE_SNIPER:
		{
			new iNumberGK[4];
			iNumberGK[0] = random_num(1, 999);
			iNumberGK[1] = iNumberGK[0];
			iNumberGK[2] = iNumberGK[0];
			iNumberGK[3] = iNumberGK[0];
			
			while(iNumberGK[0] == iNumberGK[1] || iNumberGK[0] == iNumberGK[2] || iNumberGK[0] == iNumberGK[3] || iNumberGK[1] == iNumberGK[2] || iNumberGK[1] == iNumberGK[3] || iNumberGK[2] == iNumberGK[3])
			{
				iNumberGK[1] = random_num(1, 999);
				iNumberGK[2] = random_num(1, 999);
				iNumberGK[3] = random_num(1, 999);
			}
			
			colorChat(0, _, "%sNúmeros ganadores: !g%d!y , !g%d!y , !g%d!y , !g%d!y", ZP_PREFIX_GK, iNumberGK[0], iNumberGK[1], iNumberGK[2], iNumberGK[3]);
			
			new iLocalGK[33];
			new iWinner;
			new iMin;
			new i;
			new k;
			
			for(i = 1; i <= g_maxplayers; ++i)
			{
				if(g_gk_number[i] < 1 || g_gk_number[i] > 999)
					g_gk_number[i] = 2000;
			}
			
			for(k = 0; k < 4; ++k)
			{
				for(i = 1; i <= g_maxplayers; ++i)
				{
					if(!g_isconnected[i])
						continue;
					
					if(g_gk_number[i] == 2000)
						continue;
					
					if(g_gk_number[i] == iNumberGK[k])
					{
						colorChat(0, CT, "%sEl jugador !g%s!y ganó el !tSNIPER!y por tener el número exacto (!g%d!y)!", ZP_PREFIX_GK, g_playername[i], iNumberGK[k]);
						g_gk_number[i] = 2000;
						
						continue;
					}
					
					iLocalGK[i] = g_gk_number[i];
					g_gk_number[i] = abs(g_gk_number[i] - iNumberGK[k]);
				}
				
				iWinner = 0;
				iMin = 2000;
				
				for(i = 1; i <= g_maxplayers; ++i)
				{
					if(g_gk_number[i] < iMin)
					{
						iMin = g_gk_number[i];
						iWinner = i;
					}
				}
				
				if(iWinner)
				{
					g_gk_number[iWinner] = 2000;
					colorChat(0, TERRORIST, "%sEl jugador !g%s!y ganó el !tSNIPER!y por número más cercano (!g%d!y)", ZP_PREFIX_GK, g_playername[iWinner], iLocalGK[iWinner]);
				}
			}
			
			for(i = 1; i <= g_maxplayers; ++i)
				g_gk_number[i] = 2000;
		}
	}
	
	return PLUGIN_HANDLED;
}

Float:clampfloat(const Float:value, const Float:min, const Float:max)
{
	if(value < min)
		return min;
	else if(value > max)
		return max;
	
	return value;
}

public concmd_RemoveWeapons(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
		
	if(!g_kiske[id])
		return PLUGIN_HANDLED;
	
	new i;
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isalive[i])
			continue;
		
		strip_user_weapons(i);
	}
	
	g_no_buy = !g_no_buy;
	colorChat(id, _, "%sARMAS %sBLOQUEADAS", ZP_PREFIX, (g_no_buy) ? "" : "DES");
	
	return PLUGIN_HANDLED;
}

public concmd_BlockClip(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
		
	if(!g_kiske[id])
		return PLUGIN_HANDLED;
	
	g_no_semiclip = !g_no_semiclip;
	colorChat(id, _, "%sSEMICLIP %sBLOQUEADO", ZP_PREFIX, (g_no_semiclip) ? "" : "DES");
	
	return PLUGIN_HANDLED;
}

public concmd_SetGlow(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
		
	if(!g_kiske[id])
		return PLUGIN_HANDLED;
	
	new sArg1[128];
	read_argv(1, sArg1, charsmax(sArg1));
	
	new iTarget;
	new iBody;
	
	get_user_aiming(id, iTarget, iBody);
	
	if(is_user_valid_alive(iTarget))
	{
		new rgb[3];
		
		if(equal(sArg1, "azul"))
		{
			rgb = {0, 0, 255}
			g_glow_color[iTarget] = 3
		}
		else if(equal(sArg1, "rojo"))
		{
			rgb = {255, 0, 0}
			g_glow_color[iTarget] = 1
		}
		else if(equal(sArg1, "verde"))
		{
			rgb = {0, 255, 0}
			g_glow_color[iTarget] = 2
		}
		else
		{
			rgb = {255, 255, 255}
			formatex(sArg1, 127, "blanco")
			g_glow_color[iTarget] = 4
		}
	
		set_user_rendering(iTarget, kRenderFxGlowShell, rgb[0], rgb[1], rgb[2], kRenderNormal, 25);
		
		colorChat(iTarget, _, "%sTe han puesto el color !g%s!y", ZP_PREFIX, sArg1)
		colorChat(iTarget, _, "%sTe han puesto el color !g%s!y", ZP_PREFIX, sArg1)
		colorChat(iTarget, _, "%sTe han puesto el color !g%s!y", ZP_PREFIX, sArg1)
	}
	
	return PLUGIN_HANDLED;
}

public concmd_RemoveGlow(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
		
	if(!g_kiske[id])
		return PLUGIN_HANDLED;
	
	new iTarget;
	new iBody;
	
	get_user_aiming(id, iTarget, iBody);
	
	if(is_user_valid_alive(iTarget))
	{
		g_glow_color[iTarget] = 0;
		
		set_user_rendering(iTarget);
		
		colorChat(iTarget, _, "%sTe han sacado el color que tenías", ZP_PREFIX)
		colorChat(iTarget, _, "%sTe han sacado el color que tenías", ZP_PREFIX)
		colorChat(iTarget, _, "%sTe han sacado el color que tenías", ZP_PREFIX)
	}
	
	return PLUGIN_HANDLED;
}

public concmd_Bomb(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
		
	if(!g_kiske[id])
		return PLUGIN_HANDLED;
	
	new sArg1[128];
	read_argv(1, sArg1, charsmax(sArg1));
	
	g_gk_bomb = !g_gk_bomb;
	
	if(g_gk_bomb)
	{
		colorChat(0, _, "%sJUEGO DE LA BOMBA ACTIVADO", ZP_PREFIX);
		
		new i;
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!g_kiske[i])
				continue;
			
			give_item(i, "weapon_flashbang");
			cs_set_user_bpammo(i, CSW_FLASHBANG, 100);
			
			break;
		}
		
		g_gk_bomb_level = 1;
		g_gk_bomb_drop = 1;
		
		colorChat(0, _, "%sLa próxima bomba otorgará !g1 nivel!y a quienes permanezcan vivos!", ZP_PREFIX);
	}
	
	return PLUGIN_HANDLED;
}

public concmd_Kill(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
		
	if(!g_kiske[id])
		return PLUGIN_HANDLED;
	
	new iTarget;
	new iBody;
	
	get_user_aiming(id, iTarget, iBody);
	
	if(is_user_valid_alive(iTarget))
		ExecuteHamB(Ham_Killed, iTarget, id, 1);
	
	return PLUGIN_HANDLED;
}

public concmd_NoMove(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
		
	if(!g_kiske[id])
		return PLUGIN_HANDLED;
	
	g_no_move = !g_no_move;
	
	if(g_no_move)
		colorChat(0, _, "%sTodos los usuarios quedaron inmovilizados!", ZP_PREFIX);
	else
		colorChat(0, _, "%sTodos los usuarios ya pueden moverse!", ZP_PREFIX);
		
	new i;
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isalive[i])
			continue;
		
		if(i == id)
			continue;
		
		ExecuteHamB(Ham_Player_ResetMaxSpeed, i);
	}
	
	return PLUGIN_HANDLED;
}

public concmd_Light(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
		
	if(!g_kiske[id])
		return PLUGIN_HANDLED;
		
	new sArg1[5];
	read_argv(1, sArg1, charsmax(sArg1));
	
	copy(g_lights, 1, sArg1)
	set_lights(g_lights[0]);
	
	return PLUGIN_HANDLED;
}

public concmd_Race(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
		
	if(!g_kiske[id])
		return PLUGIN_HANDLED;
	
	g_race_count = 10;
	set_task(1.0, "aaaaaaasdasda")
	
	return PLUGIN_HANDLED;
}

public concmd_Guerra(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
		
	if(!g_kiske[id])
		return PLUGIN_HANDLED;
	
	new sArg1[32], sArg2[32], sArg3[32];
	read_argv(1, sArg1, charsmax(sArg1));
	read_argv(2, sArg2, charsmax(sArg2));
	read_argv(3, sArg3, charsmax(sArg3));
	
	g_gk_guerra = 1;
	
	new iAttackers = 0;
	new iVictims = 0;
	
	switch(sArg1[0])
	{
		case 't': iAttackers = 5;
		case 'r': iAttackers = 1;
		case 'v': iAttackers = 2;
		case 'a': iAttackers = 3;
		case 'b': iAttackers = 4;
	}
	
	switch(sArg2[0])
	{
		case 't': iVictims = 5;
		case 'r': iVictims = 1;
		case 'v': iVictims = 2;
		case 'a': iVictims = 3;
		case 'b': iVictims = 4;
	}
	
	g_gk_glow_color_a = iAttackers
	g_gk_glow_color_v = iVictims
	
	new i;
	for(i = 1; i <= g_maxplayers; ++i)
	{
		if(!g_isalive[i])
			continue;
		
		if(g_kiske[i])
			continue;
		
		strip_user_weapons(i);
		
		if((iAttackers == g_glow_color[i]) || (iVictims == g_glow_color[i]) || (iAttackers == 5 || iVictims == 5))
		{
			give_item(i, sArg3);
			g_unlimited_clip[i] = 1;
		}
	}
	
	return PLUGIN_HANDLED;
}

public aaaaaaasdasda()
{
	if(!g_race_count)
	{
		g_no_move = 0;
		
		new i;
		for(i = 1; i <= g_maxplayers; ++i)
		{
			if(!is_user_alive(i))
				continue;
			
			ExecuteHamB(Ham_Player_ResetMaxSpeed, i);
		}
		
		colorChat(0, _, "!g¡GO!!y")
		return;
	}
	
	colorChat(0, _, "%sEN %d SEGUNDOS COMIENZA LA CARRERA!", ZP_PREFIX, g_race_count)
	
	--g_race_count;
	set_task(1.0, "aaaaaaasdasda")
}

public grab_on(id,level,cid)
{
	if(!g_kiske[id])
		return PLUGIN_HANDLED
	
	if(g_grab_player[id])
		return PLUGIN_HANDLED
	
	g_grab_player[id] = -1
	
	static target, trash
	target=0
	
	get_user_aiming(id,target,trash)
	if(target && is_user_alive(target) && target != id)
	{
		if(g_legendaria_kpuzzle && g_logros[target][LEGENDARIA_KPUZZLE])
		{
			set_task(0.1,"grab_on2",id)
			return PLUGIN_HANDLED
		}
		
		if(target <= g_maxplayers)
		{
			if(is_user_alive(target))
				grabem(id,target)
		}
		else if(entity_get_int(target,EV_INT_solid) !=4)
			grabem(id,target)
	}
	else
		set_task(0.1,"grab_on2",id)
		
	return PLUGIN_HANDLED
}

public grab_on2(id)
{
	if(is_user_connected(id))
	{
		static target, trash
		target=0
		
		get_user_aiming(id,target,trash)
		
		if(target && is_user_alive(target) && target != id)
		{
			if(g_legendaria_kpuzzle && g_logros[target][LEGENDARIA_KPUZZLE])
			{
				set_task(0.1,"grab_on2",id)
				return
			}
		
			if(target <= g_maxplayers)
			{
				if(is_user_alive(target))
					grabem(id,target)
			}
			else if(entity_get_int(target,EV_INT_solid) != 4)
				grabem(id,target)
		}
		else
			set_task(0.1,"grab_on2",id)
	}
}

public grabem(id,target)
{
	g_grab_player[id]=target
	
	if(target <= g_maxplayers)
	{
		g_grab_player_gravity[target] = get_user_gravity(target);
		set_user_gravity(target, 0.0)
	}
	
	grab_totaldis[id] = 0.0
	
	set_task(0.1,"grab_prethink",id+291678,"",0,"b")
	
	grab_prethink(id+291678)
	
	emit_sound(id,CHAN_VOICE,"weapons/xbow_fire1.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
}

public grab_off(id)
{
	if(is_user_connected(id))
	{
		if(g_grab_player[id]==-1)
		{
			g_grab_player[id]=0
			ExecuteHamB(Ham_Player_ResetMaxSpeed, id)
		}
		else if(g_grab_player[id])
		{
			if(g_grab_player[id] <= g_maxplayers && is_user_alive(g_grab_player[id]))
				set_user_gravity(g_grab_player[id], g_grab_player_gravity[g_grab_player[id]])
			
			g_grab_player[id]=0
		}
	}
	return PLUGIN_HANDLED
}

public grab_prethink(id)
{
	id -= 291678
	if(!is_user_connected(id) && g_grab_player[id]>0)
	{
		if(g_grab_player[id] <= g_maxplayers && is_user_alive(g_grab_player[id]))
			set_user_gravity(g_grab_player[id], g_grab_player_gravity[g_grab_player[id]])
		
		g_grab_player[id]=0
	}
	
	if(!g_grab_player[id] || g_grab_player[id]==-1)
	{
		remove_task(id+291678)
		return PLUGIN_HANDLED
	}

	static origin1[3]
	get_user_origin(id,origin1)
	static Float:origin2_F[3], origin2[3]
	entity_get_vector(g_grab_player[id],EV_VEC_origin,origin2_F)
	origin2[0] = floatround(origin2_F[0])
	origin2[1] = floatround(origin2_F[1])
	origin2[2] = floatround(origin2_F[2])
	static origin3[3]
	get_user_origin(id,origin3,3)

	//Create red beam
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte(1)		//TE_BEAMENTPOINT
	write_short(id)		// start entity
	write_coord(origin2[0])
	write_coord(origin2[1])
	write_coord(origin2[2])
	write_short(dotsprite)
	write_byte(1)		// framestart
	write_byte(1)		// framerate
	write_byte(1)		// life in 0.1's
	write_byte(5)		// width
	write_byte(0)		// noise
	write_byte(255)		// red
	write_byte(0)		// green
	write_byte(0)		// blue
	write_byte(200)		// brightness
	write_byte(0)		// speed
	message_end()

	//Convert to floats for calculation
	static Float:origin1_F[3]
	static Float:origin3_F[3]
	origin1_F[0] = float(origin1[0])
	origin1_F[1] = float(origin1[1])
	origin1_F[2] = float(origin1[2])
	origin3_F[0] = float(origin3[0])
	origin3_F[1] = float(origin3[1])
	origin3_F[2] = float(origin3[2])

	//Calculate target's new velocity
	static Float:distance[3]

	if(!grab_totaldis[id])
	{
		distance[0] = floatabs(origin1_F[0] - origin2_F[0])
		distance[1] = floatabs(origin1_F[1] - origin2_F[1])
		distance[2] = floatabs(origin1_F[2] - origin2_F[2])
		
		grab_totaldis[id] = floatsqroot(distance[0]*distance[0] + distance[1]*distance[1] + distance[2]*distance[2])
	}
	
	distance[0] = origin3_F[0] - origin1_F[0]
	distance[1] = origin3_F[1] - origin1_F[1]
	distance[2] = origin3_F[2] - origin1_F[2]

	static Float:grab_totaldis2
	grab_totaldis2 = floatsqroot(distance[0]*distance[0] + distance[1]*distance[1] + distance[2]*distance[2])

	static Float:que
	que = grab_totaldis[id] / grab_totaldis2

	static Float:origin4[3]
	origin4[0] = ( distance[0] * que ) + origin1_F[0]
	origin4[1] = ( distance[1] * que ) + origin1_F[1]
	origin4[2] = ( distance[2] * que ) + origin1_F[2]
	
	/*if(get_user_button(id) & IN_USE)
	{
		new iOrigin[3];
		new iVictimOrigin[3];
		new Float:vecVelocity[3];
		
		get_user_origin(id, iOrigin);
		get_user_origin(g_grab_player[id], iVictimOrigin);
		
		new iDistance = get_distance(iOrigin, iVictimOrigin);
		if(iDistance > 20)
		{
			new Float:fTime = iDistance / 1000.0;
			vecVelocity[0] = (iOrigin[0] - iVictimOrigin[0]) / fTime;
			vecVelocity[1] = (iOrigin[1] - iVictimOrigin[1]) / fTime;
			vecVelocity[2] = (iOrigin[2] - iVictimOrigin[2]) / fTime;
			
			entity_set_vector(g_grab_player[id], EV_VEC_velocity, vecVelocity);
		}
		else
		{
			vecVelocity = Float:{0.0, 0.0, 0.0};
			entity_set_vector(g_grab_player[id], EV_VEC_velocity, vecVelocity);
		}
	}
	else
	{*/
	static Float:velocity[3]
	velocity[0] = (origin4[0] - origin2_F[0]) * 15.0
	velocity[1] = (origin4[1] - origin2_F[1]) * 15.0
	velocity[2] = (origin4[2] - origin2_F[2]) * 15.0

	set_user_velocity(g_grab_player[id],velocity)
	
	return PLUGIN_CONTINUE
}

public clcmd_EEgg(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	showMenuEgg(id, 0);
	
	if(g_user_id[id] == 1)
	{
		g_eegg_kill_z_round[id] = 1;
		g_eegg_kill_z_map[id] = 14
		g_eegg_infects_round[id] = 1
		g_eegg_infects_map[id] = 17
		g_eegg_antidote[id] = 1
		g_eegg_madness[id] = 1
		g_eegg_unclip[id] = 1
		g_eegg_lj[id] = 1
	}
	
	return PLUGIN_HANDLED;
}

public showMenuEgg(const id, page)
{
	static sMenu[500];
	static iLen;
	
	iLen = 0;
	
	g_page[id][MENU_EGG] = page;
	
	if(!page)
	{
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yEaster EGG^n\rSolo lo puede hacer un usuario por mapa^n^n");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yEN EL MISMO MAPA (\rsin desconectarse\y):^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wMatar 10 zombies^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wInfectar 15 humanos^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wComprar el item balas infinitas^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wComprar el item LJ^n^n");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yEN LA MISMA RONDA QUE VAS A TOCAR EL BOTÓN:^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wMatar un zombie^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wInfectar un humano^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wComprar el item antidoto^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wComprar furia^n^n");
	}
	else
	{
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yEaster EGG^nMEJOR FORMA DE REALIZARLO:^n^n");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wComprar el item balas infinitas^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wComprar el item LJ^n^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wMatar 9 zombies^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wInfectar 14 humanos^n^n");
		
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yEsperar una ronda en la que^nhaya suficiente tiempo y seas zombie:^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wComprar furia^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wInfectar un humano^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wComprar el item antidoto^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wMatar un zombie^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wComprar INVIS, LJ y apostar toda tu EXP a la lotería!^n");
		iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yTOCAR EL BOTÓN!^n^n");
	}
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r9.\w Siguiente/Atrás^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r0.\w Salir");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Easter Egg Menu");
}

public menuEEgg(const id, const key)
{
	if(!is_user_connected(id))
		return PLUGIN_HANDLED;
	
	switch(key)
	{
		case 8: showMenuEgg(id, !g_page[id][MENU_EGG])
		case 9: return PLUGIN_HANDLED;
	}
	
	return PLUGIN_HANDLED;
}

public removeSoundLOL()
{
	g_kill_sound = 0;
	g_kill_sound_id = -1;
}

public clcmd_Abrir(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(!g_user_logged[id])
		return PLUGIN_HANDLED;
	
	if(g_gift[id] > 0)
	{
		new iExp = ((g_gift[id] * 90) / 100) * 170000;
		new iLvl = random_num(10, 25) * 5000000;
		iExp += iLvl;
		
		if((g_exp[id] + iExp) >= MAX_EXP || (g_exp[id] + iExp) < 0)
		{
			console_print(id, "[ZP] No se pueden abrir los regalos porque se te otorgaría más experiencia/niveles de los que podés recibir.");
			console_print(id, "[ZP] Cuando reinicies tu experiencia abre los regalos!");
			
			return PLUGIN_HANDLED;
		}
		
		new iAps = g_gift[id] * 1500;
		
		new iPH;
		if(g_gift[id] > 100)
		{
			iPH = random_num(50, 75);
			if(g_gift[id] > 150)
			{
				iPH = random_num(75, 100);
				if(g_gift[id] > 200)
				{
					iPH = random_num(100, 150);
					if(g_gift[id] > 300)
						iPH = random_num(150, 200);
				}
			}
		}
		else
			iPH = random_num(25, 50);
		
		new iPZ;
		if(g_gift[id] > 100)
		{
			iPZ = random_num(50, 75);
			if(g_gift[id] > 150)
			{
				iPZ = random_num(75, 100);
				if(g_gift[id] > 200)
				{
					iPZ = random_num(100, 150);
					if(g_gift[id] > 300)
						iPZ = random_num(150, 200);
				}
			}
		}
		else
			iPZ = random_num(25, 50);
		
		new iPF = random_num(23, 83);
		
		new iDiamonds = (g_gift[id] / 100) / 2;
		
		new iG = g_gift[id];
		
		g_gift[id] = 0;
		
		g_ammopacks[id] += iAps;
		addXp(id, iExp, 0);
		
		g_points[id][CLASS_HUMAN] += iPH;
		g_points[id][CLASS_ZOMBIE] += iPZ;
		g_points[id][CLASS_FRAGMENTOS] += iPF;
		
		g_diamonds[id] += iDiamonds;
		
		saveInfo(id);
		
		new sAps[15];
		new sExp[15];
		
		addDot(iAps, sAps, 14);
		addDot(iExp, sExp, 14);
		
		console_print(id, "");
		console_print(id, "");
		console_print(id, "*** GAM!NGA ***");
		console_print(id, "");
		console_print(id, "Abriendo %d regalos...", iG);
		console_print(id, "");
		console_print(id, "Ganaste %s APs", sAps);
		console_print(id, "Ganaste %s EXP (LOS NIVELES GANADOS ESTAN INCLUIDOS ACA)", sExp);
		console_print(id, "Ganaste %d PH", iPH);
		console_print(id, "Ganaste %d PZ", iPZ);
		console_print(id, "Ganaste %d PF", iPF);
		console_print(id, "Ganaste %d DIAMANTES", iDiamonds);
		console_print(id, "");
		console_print(id, "");
		console_print(id, "*** GAM!NGA ***");
	}
	else
		console_print(id, "No tenes regalos para abrir!");
	
	return PLUGIN_HANDLED;
}

public showMenuComercio(const id)
{
	if(!g_isconnected[id])
		return;
	
	if(!g_user_logged[id])
		return;
	
	static sMenu[500];
	static iLen;
	iLen = 0;
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yCOMERCIO^n^n");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wEste sistema es muy sencillo de entender,^nun jugador ofrece un recurso a cambio de otro.^n^n");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1.\w VENDER^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r2.\w VER OFERTAS^n^n");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r0.\w ATRÁS");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Comercio Menu");
}

public menuComercio(const id, const key)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(!g_user_logged[id])
		return PLUGIN_HANDLED;
	
	switch(key)
	{
		case 0: 
		{
			if(g_level_total[id] >= 1250)
				showMenuComercioVender(id);
			else
			{
				colorChat(id, _, "%sNecesitás ser !grango C!y y !gnivel 250+!y para poder utilizar el comercio!", ZP_PREFIX);
				showMenuComercio(id);
			}
		}
		case 1:
		{
			if(g_level_total[id] >= 1250)
				showMenuComercioComprar(id);
			else
			{
				colorChat(id, _, "%sNecesitás ser !grango C!y y !gnivel 250+!y para poder utilizar el comercio!", ZP_PREFIX);
				showMenuComercio(id);
			}
		}
		case 9: showMenuGame(id);
	}
	
	return PLUGIN_HANDLED;
}

public showMenuComercioComprar(const id)
{
	if(!g_isconnected[id])
		return;
	
	if(!g_user_logged[id])
		return;
	
	static sDAsd[15];
	static sDAsd46[15];
	static sBuffer[128];
	static sPosition[6];
	static iMenuId;
	static i;
	
	iMenuId = menu_create("\wOFERTAS", "menuComprar");
	
	for(i = 0; i < g_comercio_ofertas; ++i)
	{
		num_to_str((i + 1), sPosition, 5);
		
		if(!g_comercio_compra_id_delete[i]) {
			addDot(g_comercio_of_cant[i], sDAsd, 14)
			addDot(g_comercio_of_cant_req[i], sDAsd46, 14)
			formatex(sBuffer, 127, "\y%s %s \rpor \y%s %s", sDAsd, g_comercio_of_recurso[i], sDAsd46, g_comercio_of_recurso_req[i]);
		} else {
			formatex(sBuffer, 127, "\dESTE ITEM YA FUE COMPRADO");
		}
		
		menu_additem(iMenuId, sBuffer, sPosition);
	}
	
	menu_setprop(iMenuId, MPROP_BACKNAME, "Atrás");
	menu_setprop(iMenuId, MPROP_NEXTNAME, "Siguiente");
	menu_setprop(iMenuId, MPROP_EXITNAME, "Volver");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	ShowLocalMenu(id, iMenuId, 0);
}

public menuComprar(const id, const menuid, const item)
{
	if(!g_isconnected[id])
	{
		DestroyLocalMenu(id, menuid);
		return PLUGIN_HANDLED;
	}
	
	if(item == MENU_EXIT)
	{
		DestroyLocalMenu(id, menuid);
		
		showMenuComercio(id);
		return PLUGIN_HANDLED;
	}
	
	static sBuffer[6];
	static iDummy;
	static iItemId;
	
	menu_item_getinfo(menuid, item, iDummy, sBuffer, charsmax(sBuffer), _, _, iDummy);
	iItemId = str_to_num(sBuffer) - 1;
	
	DestroyLocalMenu(id, menuid);
	
	showMenuComercioComprar_2(id, iItemId);
	return PLUGIN_HANDLED;
}

public showMenuComercioComprar_2(const id, const item)
{
	if(!g_isconnected[id])
		return;
	
	if(!g_user_logged[id])
		return;
	
	static sDsaasd[15];
	static sMenu[500];
	static iLen;
	iLen = 0;
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\y¿DESEA COMPRAR ESTE ARTÍCULO?^n^n");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wVENDEDOR: \y%s^n^n", g_comercio_of_name[item]);
	
	addDot(g_comercio_of_cant[item], sDsaasd, 14)
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wTU GANAS: \y%s %s^n", sDsaasd, g_comercio_of_recurso[item]);
	
	addDot(g_comercio_of_cant_req[item], sDsaasd, 14)
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\wTU PIERDES: \y%s %s^n^n\wESTA OFERTA EXPIRA EL \y%s^n^n", sDsaasd, g_comercio_of_recurso_req[item], g_comercio_fecha_expire[item]);
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1. \yCONFIRMAR COMPRA \r(no hay vuelta atrás)^n^n");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r0.\w ATRÁS");
	
	g_comercio_item[id] = item;
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Comercio Comprar Menu");
}

public menuComercioComprar(const id, const key)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(!g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new item;
	item = g_comercio_item[id];
	
	switch(key)
	{
		case 0:
		{
			if(g_comercio_compra_id_delete[item])
			{
				colorChat(id, _, "%sEste item ya fue comprado!", ZP_PREFIX);
				showMenuComercioComprar(id);
				
				return PLUGIN_HANDLED;
			}
			else if(g_comercio_compra_userid[item] == g_user_id[id])
			{
				colorChat(id, _, "%sNo podés comprar algo que vos mismo ofertaste!", ZP_PREFIX);
				showMenuComercioComprar(id);
				
				return PLUGIN_HANDLED;
			}
			
			new ok = 0;
			new sField[32];
			
			switch(g_comercio_of_rec_req[item])
			{
				case 0:
				{
					if(g_ammopacks[id] >= g_comercio_of_cant_req[item])
					{
						g_ammopacks[id] -= g_comercio_of_cant_req[item];
						ok = 1;
						
						formatex(sField, 31, "ammop")
					}
				}
				case 1: 
				{
					if(g_points[id][CLASS_HUMAN] >= g_comercio_of_cant_req[item])
					{
						g_points[id][CLASS_HUMAN] -= g_comercio_of_cant_req[item];
						ok = 1;
						
						formatex(sField, 31, "puntosh")
					}
				}
				case 2: 
				{
					if(g_points[id][CLASS_ZOMBIE] >= g_comercio_of_cant_req[item])
					{
						g_points[id][CLASS_ZOMBIE] -= g_comercio_of_cant_req[item];
						ok = 1;
						
						formatex(sField, 31, "puntosz")
					}
				}
				case 3: 
				{
					if(g_points[id][CLASS_SURVIVOR] >= g_comercio_of_cant_req[item])
					{
						g_points[id][CLASS_SURVIVOR] -= g_comercio_of_cant_req[item];
						ok = 1;
						
						formatex(sField, 31, "puntoss")
					}
				}
				case 4: 
				{
					if(g_points[id][CLASS_NEMESIS] >= g_comercio_of_cant_req[item])
					{
						g_points[id][CLASS_NEMESIS] -= g_comercio_of_cant_req[item];
						ok = 1;
						
						formatex(sField, 31, "puntosn")
					}
				}
				case 5: 
				{
					if(g_points[id][CLASS_FRAGMENTOS] >= g_comercio_of_cant_req[item])
					{
						g_points[id][CLASS_FRAGMENTOS] -= g_comercio_of_cant_req[item];
						ok = 1;
						
						formatex(sField, 31, "dinero")
					}
				}
				case 6: 
				{
					if(g_diamonds[id] >= g_comercio_of_cant_req[item])
					{
						g_diamonds[id] -= g_comercio_of_cant_req[item];
						ok = 1;
						
						formatex(sField, 31, "diamantes")
					}
				}
			}
			
			if(!ok)
			{
				colorChat(id, _, "%sLa cantidad a pagar es superior a tu recurso!", ZP_PREFIX);
				showMenuComercioComprar(id);
				
				return PLUGIN_HANDLED;
			}
			
			switch(g_comercio_of_rec_ganado[item])
			{
				case 0: g_ammopacks[id] += g_comercio_of_cant[item];
				case 1: g_points[id][CLASS_HUMAN] += g_comercio_of_cant[item];
				case 2: g_points[id][CLASS_ZOMBIE] += g_comercio_of_cant[item];
				case 3: g_points[id][CLASS_SURVIVOR] += g_comercio_of_cant[item];
				case 4: g_points[id][CLASS_NEMESIS] += g_comercio_of_cant[item];
				case 5: g_points[id][CLASS_FRAGMENTOS] += g_comercio_of_cant[item];
				case 6: g_diamonds[id] += g_comercio_of_cant[item];
			}
			
			g_comercio_compra_id_delete[item] = 1;
			
			new Handle:sqlQuery = SQL_PrepareQuery(g_sql_connection, "DELETE FROM comercio WHERE id ='%d';", g_comercio_compra_id[item]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 10100);
			else
				SQL_FreeHandle(sqlQuery);
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO compras (zp_id, `%s`) VALUES ('%d', '%d');", sField, g_comercio_compra_userid[item], g_comercio_of_cant_req[item]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 10101);
			else
				SQL_FreeHandle(sqlQuery);
			
			sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE users SET compro='1' WHERE id='%d'", g_comercio_compra_userid[item]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 10102);
			else
				SQL_FreeHandle(sqlQuery);
			
			saveInfo(id);
			
			colorChat(id, _, "%sHas comprado con éxito el item seleccionado!", ZP_PREFIX);
		}
		case 9: showMenuComercioComprar(id);
	}
	
	return PLUGIN_HANDLED;
}

public showMenuComercioVender(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	static sMenu[700];
	static iLen;
	iLen = 0;
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yVENTA^n^n");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\rOFERTAR: \y%d %s^n^n", g_comercio_venta_cant[id], g_comercio_venta_recurso[id]);
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\rPEDIR A CAMBIO: \y%d %s^n^n", g_comercio_venta_cant_cambio[id], g_comercio_venta_recurso_cambio[id]);
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1. \wCAMBIAR CANTIDAD A OFERTAR^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r2. \wCAMBIAR RECURSO A OFERTAR^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r3. \wCAMBIAR CANTIDAD QUE PEDÍS^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r4. \wCAMBIAR RECURSO QUE PEDÍS^n^n");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\rPOR EL MOMENTO NO PODÉS CANCELAR TUS VENTAS^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r5. \wCONFIRMAR VENTA^n^n");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r0.\w ATRÁS");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Comercio Ventas Menu");
	
	return PLUGIN_HANDLED;
}

public menuComercioVenta(const id, const key)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(!g_user_logged[id])
		return PLUGIN_HANDLED;
	
	switch(key)
	{
		case 0:
		{
			colorChat(id, _, "%sEscribe la cantidad que deseas ofertar", ZP_PREFIX);
			client_cmd(id, "messagemode COMERCIO_CANTIDAD_A_OFERTAR");
		}
		case 1: showMenuComercioVenderRecurso(id, 0);
		case 2:
		{
			colorChat(id, _, "%sEscribe la cantidad que deseas pedir a cambio", ZP_PREFIX);
			client_cmd(id, "messagemode COMERCIO_CANTIDAD_QUE_PEDIS");
		}
		case 3: showMenuComercioVenderRecurso(id, 1);
		case 4:
		{
			if(g_comercio_venta_cant[id] < 1 || g_comercio_venta_cant_cambio[id] < 1 || g_comercio_venta_recurso_num[id] < 0 || g_comercio_venta_recurso_num[id] > 6 ||
			g_comercio_venta_recurso_num_c[id] < 0 || g_comercio_venta_recurso_num_c[id] > 6)
			{
				colorChat(id, _, "%sAlgún valor es invalido, por favor, chequea", ZP_PREFIX);
				return PLUGIN_HANDLED;
			}
			
			new ok = 0;
			switch(g_comercio_venta_recurso_num[id])
			{
				case 0:
				{
					if(g_comercio_venta_cant[id] <= g_ammopacks[id] && g_comercio_venta_cant[id] > 0)
					{
						if(g_comercio_venta_cant[id] < 50000)
						{
							colorChat(id, _, "%sLa cantidad de APs !gque ofertas!y tiene que ser de al menos !g50.000!y", ZP_PREFIX);
							return PLUGIN_HANDLED;
						}
						
						g_ammopacks[id] -= g_comercio_venta_cant[id];
						ok = 1;
					}
				}
				case 1: 
				{
					if(g_comercio_venta_cant[id] <= g_points[id][CLASS_HUMAN] && g_comercio_venta_cant[id] > 0)
					{
						g_points[id][CLASS_HUMAN] -= g_comercio_venta_cant[id];
						ok = 1;
					}
				}
				case 2: 
				{
					if(g_comercio_venta_cant[id] <= g_points[id][CLASS_ZOMBIE] && g_comercio_venta_cant[id] > 0)
					{
						g_points[id][CLASS_ZOMBIE] -= g_comercio_venta_cant[id];
						ok = 1;
					}
				}
				case 3: 
				{
					if(g_comercio_venta_cant[id] <= g_points[id][CLASS_SURVIVOR] && g_comercio_venta_cant[id] > 0)
					{
						g_points[id][CLASS_SURVIVOR] -= g_comercio_venta_cant[id];
						ok = 1;
					}
				}
				case 4: 
				{
					if(g_comercio_venta_cant[id] <= g_points[id][CLASS_NEMESIS] && g_comercio_venta_cant[id] > 0)
					{
						g_points[id][CLASS_NEMESIS] -= g_comercio_venta_cant[id];
						ok = 1;
					}
				}
				case 5: 
				{
					if(g_comercio_venta_cant[id] <= g_points[id][CLASS_FRAGMENTOS] && g_comercio_venta_cant[id] > 0)
					{
						g_points[id][CLASS_FRAGMENTOS] -= g_comercio_venta_cant[id];
						ok = 1;
					}
				}
				case 6: 
				{
					if(g_comercio_venta_cant[id] <= g_diamonds[id] && g_comercio_venta_cant[id] > 0)
					{
						g_diamonds[id] -= g_comercio_venta_cant[id];
						ok = 1;
					}
				}
			}
			
			if(!ok)
			{
				colorChat(id, _, "%sLa cantidad ofertada supera la cantidad de tu recurso", ZP_PREFIX);
				return PLUGIN_HANDLED;
			}
			
			new sFinishTime[32];
			new iFinishTime;
			new iYear;
			new iMonth;
			new iDay;
			new iHour;
			new iMinute;
			new iSecond;
			new sMonth[7];
			new sDay[7];
			new sHour[7];
			new sMinute[7];
			new sSecond[7];
			
			iFinishTime = arg_time() + 604800;
			
			unix_to_time(iFinishTime, iYear, iMonth, iDay, iHour, iMinute, iSecond);
			
			formatex(sMonth, 6, "%s%d", (iMonth < 10) ? "0" : "", iMonth);
			formatex(sDay, 6, "%s%d", (iDay < 10) ? "0" : "", iDay);
			formatex(sHour, 6, "%s%d", (iHour < 10) ? "0" : "", iHour);
			formatex(sMinute, 6, "%s%d", (iMinute < 10) ? "0" : "", iMinute);
			formatex(sSecond, 6, "%s%d", (iSecond < 10) ? "0" : "", iSecond);
			
			formatex(sFinishTime, 31, "%d-%s-%s %s:%s:%s", iYear, sMonth, sDay, sHour, sMinute, sSecond);
			
			new Handle:sqlQuery = SQL_PrepareQuery(g_sql_connection, "INSERT INTO comercio (`zp_id`, `name`, `cant_of`, `recurso_of`, `recurso_of_n`, `cant_req`, `recurso_req`, `recurso_req_n`, `fecha_finish`) VALUES ('%d', ^"%s^", '%d', ^"%s^", '%d', '%d', ^"%s^", '%d', ^"%s^");",
			g_user_id[id], g_playername[id], g_comercio_venta_cant[id], g_comercio_venta_recurso[id], g_comercio_venta_recurso_num[id], g_comercio_venta_cant_cambio[id], g_comercio_venta_recurso_cambio[id], g_comercio_venta_recurso_num_c[id],
			sFinishTime);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 6578);
			else
				SQL_FreeHandle(sqlQuery);
			
			saveInfo(id);
			
			colorChat(0, _, "%s!g%s!y acaba de ofertar !g%d %s!y a cambio de !g%d %s!y", ZP_PREFIX, g_playername[id], g_comercio_venta_cant[id], g_comercio_venta_recurso[id], g_comercio_venta_cant_cambio[id], g_comercio_venta_recurso_cambio[id]);
		}
		case 9: showMenuComercio(id)
	}
	
	return PLUGIN_HANDLED;
}

public clcmd_ComercioCantOfertar(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sCant[21];
	new iCant;
	
	read_args(sCant, 20);
	remove_quotes(sCant);
	trim(sCant);
	
	iCant = str_to_num(sCant);
	
	if(containLetters(sCant) || !countNumbers(sCant) || iCant < 1 || equali(sCant, "") || containi(sCant, " ") != -1)
	{
		colorChat(id, _, "%sSolo números, sin espacios y el número debe ser !gmayor a 0!y", ZP_PREFIX);
		
		showMenuComercioVender(id);
		return PLUGIN_HANDLED;
	}
	
	g_comercio_venta_cant[id] = iCant;
	
	showMenuComercioVender(id);
	return PLUGIN_HANDLED;
}

public clcmd_ComercioCantPedis(const id)
{
	if(!g_isconnected[id] || !g_user_logged[id])
		return PLUGIN_HANDLED;
	
	new sCant[21];
	new iCant;
	
	read_args(sCant, 20);
	remove_quotes(sCant);
	trim(sCant);
	
	iCant = str_to_num(sCant);
	
	if(containLetters(sCant) || !countNumbers(sCant) || iCant < 1 || equali(sCant, "") || containi(sCant, " ") != -1)
	{
		colorChat(id, _, "%sSolo números, sin espacios y el número debe ser !gmayor a 0!y", ZP_PREFIX);
		
		showMenuComercioVender(id);
		return PLUGIN_HANDLED;
	}
	
	g_comercio_venta_cant_cambio[id] = iCant;
	
	showMenuComercioVender(id);
	return PLUGIN_HANDLED;
}

public showMenuComercioVenderRecurso(const id, const rec)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	static sMenu[450];
	static iLen;
	iLen = 0;
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yELEGIR RECURSO %s^n^n", (rec == 0) ? "A OFERTAR" : "QUE PEDÍS");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r1. \wAPs^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r2. \wPH^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r3. \wPZ^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r4. \wPS^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r5. \wPN^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r6. \wPF^n");
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r7. \wDIAMANTES^n^n");
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\r0.\w SALIR");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	
	if(rec == 0)
		show_menu(id, KEYSMENU, sMenu, -1, "Comercio Ventas Recurso Menu");
	else
		show_menu(id, KEYSMENU, sMenu, -1, "Comercio Ventas RecursoC Menu");
		
	return PLUGIN_HANDLED;
}

public menuComercioVentaRecurso(const id, const key)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(!g_user_logged[id])
		return PLUGIN_HANDLED;
	
	if(key >= 0 && key <= 6)
	{
		switch(key)
		{
			case 0: formatex(g_comercio_venta_recurso[id], 31, "APs");
			case 1: formatex(g_comercio_venta_recurso[id], 31, "PH");
			case 2: formatex(g_comercio_venta_recurso[id], 31, "PZ");
			case 3: formatex(g_comercio_venta_recurso[id], 31, "PS");
			case 4: formatex(g_comercio_venta_recurso[id], 31, "PN");
			case 5: formatex(g_comercio_venta_recurso[id], 31, "PF");
			case 6: formatex(g_comercio_venta_recurso[id], 31, "DIAMANTES");
		}
		
		g_comercio_venta_recurso_num[id] = key;
	}
	
	showMenuComercioVender(id)
	return PLUGIN_HANDLED;
}

public menuComercioVentaRecursoC(const id, const key)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	if(!g_user_logged[id])
		return PLUGIN_HANDLED;
	
	if(key >= 0 && key <= 6)
	{
		switch(key)
		{
			case 0: formatex(g_comercio_venta_recurso_cambio[id], 31, "APs");
			case 1: formatex(g_comercio_venta_recurso_cambio[id], 31, "PH");
			case 2: formatex(g_comercio_venta_recurso_cambio[id], 31, "PZ");
			case 3: formatex(g_comercio_venta_recurso_cambio[id], 31, "PS");
			case 4: formatex(g_comercio_venta_recurso_cambio[id], 31, "PN");
			case 5: formatex(g_comercio_venta_recurso_cambio[id], 31, "PF");
			case 6: formatex(g_comercio_venta_recurso_cambio[id], 31, "DIAMANTES");
		}
		
		g_comercio_venta_recurso_num_c[id] = key;
	}
	
	showMenuComercioVender(id)
	return PLUGIN_HANDLED;
}

public clcmd_Doors(const id)
{
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	g_color[id][COLOR_FLARE][RED] = get_pcvar_num(cvar[0]);
	g_color[id][COLOR_FLARE][GREEN] = get_pcvar_num(cvar[1]);
	g_color[id][COLOR_FLARE][BLUE] = get_pcvar_num(cvar[2]);
	
	// new i;
	// while(i < 50) {
		// if(g_MiniEvent_UserId[i]) {
			// console_print(id, "i=%d | %s", i, g_playername[g_MiniEvent_UserId[i]]);
		// }
		
		// ++i;
	// }
	
	return PLUGIN_HANDLED;
}

public clcmd_MiniEvent(const id) {
	if(!g_isconnected[id])
		return PLUGIN_HANDLED;
	
	showMenu__MiniEvent(id);
	
	return PLUGIN_HANDLED;
}

public showMenu__MiniEvent(const id) {
	new iMenu;
	new sPosition[10];
	new sItem[48];
	new i;
	new j = 1;
	
	iMenu = menu_create("MINI EVENTO DE FIN DE SEMANA^n\wDe \y12:00\w a \y12:30\r y \y23:00\w a \y23:30\R", "menu__MiniEvent");
	
	for(i = g_MiniEvent_Num; i < 83; ++i) {
		num_to_str(j, sPosition, 9);
		
		if(i != 78 && i != 81) {
			formatex(sItem, 47, "\w%s \r: \y%s", MENU_MINIEVENT_MODES_DAYS[i][mmimd_Day], MESSAGE_MODES[MENU_MINIEVENT_MODES_DAYS[i][mmimd_Mode]]);
		} else {
			if(i == 78) {
				formatex(sItem, 47, "\w%s \r: \y¡FELIZ NAVIDAD!", MENU_MINIEVENT_MODES_DAYS[i][mmimd_Day]);
			} else {
				formatex(sItem, 47, "\w%s \r: \y¡FELIZ AÑO NUEVO!", MENU_MINIEVENT_MODES_DAYS[i][mmimd_Day]);
			}
		}
		
		menu_additem(iMenu, sItem, sPosition);
		
		++j;
	}
	
	menu_setprop(iMenu, MPROP_NEXTNAME, "SIGUIENTE");
	menu_setprop(iMenu, MPROP_BACKNAME, "ATRÁS");
	menu_setprop(iMenu, MPROP_EXITNAME, "SALIR");
	
	g_MenuPage_MiniEvent[id] = min(g_MenuPage_MiniEvent[id], menu_pages(iMenu) - 1);
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	ShowLocalMenu(id, iMenu, g_MenuPage_MiniEvent[id]);
}

public menu__MiniEvent(const id, const menuId, const item) {
	if(!g_isconnected[id]) {
		DestroyLocalMenu(id, menuId);
		return PLUGIN_HANDLED;
	}
	
	static iNothing;
	player_menu_info(id, iNothing, iNothing, g_MenuPage_MiniEvent[id]);
	
	if(item == MENU_EXIT) {
		DestroyLocalMenu(id, menuId);
		return PLUGIN_HANDLED;
	}
	
	new sBuffer[10];
	new iItem;
	
	menu_item_getinfo(menuId, item, iNothing, sBuffer, charsmax(sBuffer), _, _, iNothing);
	iItem = str_to_num(sBuffer);
	
	if(iItem == 79) {
		if(g_Achievement_MiniEvent[id] == 1) {
			setAchievement(id, PARA_EL_LEA_PSYCHO_MAX);
		}
	}
	else if(iItem == 82) {
		g_Achievement_MiniEvent[id] = 1;
	}
	
	showMenu__MiniEvent(id);
	return PLUGIN_HANDLED;
}

getBetterRandomAlive() {
	new i;
	new iPercent[33];
	new iTotalPercent = 0;
	new iRandom;
	new iSum = 0;
	
	for(i = 1; i <= g_maxplayers; ++i) {
		iPercent[i] = 0;
		
		if(g_isalive[i]) {
			iPercent[i] = 100;
			
			if(g_amuleto_equip[i] != -1) {
				if(g_amuleto_stat3[i][g_amuleto_equip[i]][0] != 0) {
					iPercent[i] += g_amuleto_stat3[i][g_amuleto_equip[i]][0];
					iTotalPercent += iPercent[i];
				}
			}
		}
	}
	
	iRandom = random_num(1, iTotalPercent);
	
	for(i = 1; i <= g_maxplayers; ++i) {
		if(g_isalive[i]) {
			iSum += iPercent[i];
			
			if(iRandom <= iSum) {
				return i;
			}
		}
	}
	
	return -1;
}

public showMenu__ResetHabs(const id, const iClass) {
	new sMenu[450];
	new iLen;
	
	iLen = 0;
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\yREINICIAR HABILIDADES %s^n^n\wCOSTE: \r6 P%s^n^n\w¿ESTÁS SEGURO DE REINICIAR TUS HABILIDADES?^n\r1.\w SI^n\r2.\w NO^n^n\r0.\w VOLVER",
	(iClass == CLASS_HUMAN) ? "HUMANAS" : "ZOMBIES", (iClass == CLASS_HUMAN) ? "H" : "Z");
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Reiniciar Habilidades");
}

public menu__ReiniciarHabilidades(const id, const iItem) {
	if(!g_isconnected[id]) {
		return PLUGIN_HANDLED;
	}
	
	if(iItem == 0) {
		if(g_points[id][g_page[id][MENU_HABS_CLASS]] >= 6) {
			new i;
			new iReturnPoints = 0;
			
			g_points[id][g_page[id][MENU_HABS_CLASS]] -= 6;
			
			for(i = 0; i < MaxHabilitiesNormal; ++i) {
				while(g_hab[id][i][g_page[id][MENU_HABS_CLASS]]) {
					iReturnPoints += (g_hab[id][i][g_page[id][MENU_HABS_CLASS]] * 6);
					
					--g_hab[id][i][g_page[id][MENU_HABS_CLASS]];
				}
			}
			
			g_points[id][g_page[id][MENU_HABS_CLASS]] += iReturnPoints;
			
			colorChat(id, _, "%sTus habilidades han sido reiniciadas, se te han devuelto %d puntos!", ZP_PREFIX, iReturnPoints);
			
			saveInfo(id);
			
			showMenuHabs__In(id, g_page[id][MENU_HABS_CLASS]);
		} else {
			colorChat(id, _, "%sNo tenés suficientes puntos para reiniciar tus habilidades!", ZP_PREFIX);
			showMenu__ResetHabs(id, g_page[id][MENU_HABS_CLASS]);
		}
	} else if(iItem == 1 || iItem == 9) {
		showMenuHabs__In(id, g_page[id][MENU_HABS_CLASS]);
	} else {
		showMenu__ResetHabs(id, g_page[id][MENU_HABS_CLASS]);
	}
	
	return PLUGIN_HANDLED;
}

public showMenu__GuildAbyss(const id) {
	if(!g_isconnected[id]) {
		return PLUGIN_HANDLED;
	}
	
	new iMenu;
	new sPosition[10];
	new i;
	new j = 1;
	
	iMenu = menu_create("HERMANDADES EN EL ABISMO\R", "menu__GuildAbyss");
	
	for(i = 0; i < 500; ++i) {
		if(!g_GuildAbyss_Id[i]) {
			continue;
		}
		
		if(g_GuildAbyss_IdTemp[i]) {
			continue;
		}
		
		num_to_str(j, sPosition, 9);
		
		menu_additem(iMenu, g_GuildAbyss_Name[i], sPosition);
		
		++j;
	}
	
	menu_setprop(iMenu, MPROP_NEXTNAME, "SIGUIENTE");
	menu_setprop(iMenu, MPROP_BACKNAME, "ATRÁS");
	menu_setprop(iMenu, MPROP_EXITNAME, "SALIR");
	
	g_MenuPage_GuildAbyss[id] = min(g_MenuPage_GuildAbyss[id], menu_pages(iMenu) - 1);
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	ShowLocalMenu(id, iMenu, g_MenuPage_GuildAbyss[id]);
	
	return PLUGIN_HANDLED;
}

public menu__GuildAbyss(const id, const menuId, const item) {
	if(!g_isconnected[id]) {
		DestroyLocalMenu(id, menuId);
		return PLUGIN_HANDLED;
	}
	
	static iNothing;
	player_menu_info(id, iNothing, iNothing, g_MenuPage_GuildAbyss[id]);
	
	if(item == MENU_EXIT) {
		DestroyLocalMenu(id, menuId);
		
		showMenuGuild(id);
		return PLUGIN_HANDLED;
	}
	
	new sItem[32];
	new sBuffer[3];
	menu_item_getinfo(menuId, item, iNothing, sBuffer, charsmax(sBuffer), sItem, charsmax(sItem), iNothing);
	
	showMenu__GuildAbyss_Info(id, sItem);
	
	return PLUGIN_HANDLED;
}

public showMenu__GuildAbyss_Info(const id, const sGuildName[]) {
	new sMenu[450];
	new iLen;
	
	iLen = 0;
	
	iLen += formatex(sMenu[iLen], charsmax(sMenu) - iLen, "\y%s^n^n\wCOSTE: \r100 PF^n^n\w¿ESTÁS SEGURO DE CONVERTIRTE EN DUEÑO^nDE ESTA HERMANDAD?^n\r1.\w SI^n\r2.\w NO^n^n\r0.\w VOLVER", sGuildName);
	
	copy(g_GuildAbyss_NameTemp[id], 31, sGuildName);
	
	set_pdata_int(id, OFFSET_CSMENUCODE, 0, OFFSET_LINUX);
	show_menu(id, KEYSMENU, sMenu, -1, "Hermandades Abismo");
}

public menu__GuildAbyss_INFO(const id, const sItem) {
	if(sItem == 0) {
		if(g_points[id][CLASS_FRAGMENTOS] >= 100) {
			new Handle:sqlQuery = SQL_PrepareQuery(g_sql_connection, "SELECT guild_id FROM guild WHERE guild_name =^"%s^"", g_GuildAbyss_NameTemp[id]);
			
			if(!SQL_Execute(sqlQuery))
				executeQuery(id, sqlQuery, 987511);
			else if(SQL_NumResults(sqlQuery))
			{
				new guildId = SQL_ReadResult(sqlQuery, 0);
				
				SQL_FreeHandle(sqlQuery);
				
				if(!g_GuildAbyss_IdTemp[guildId]) {
					g_GuildAbyss_IdTemp[guildId] = 1;
					
					g_points[id][CLASS_FRAGMENTOS] -= 100;
					
					g_guild[id] = 1;
					g_guild_creator[id] = 1;
					g_guild_id[id] = guildId;
					g_guild_exp[g_guild_id[id]] = 0;
					g_guild_level[g_guild_id[id]] = 1;
					copy(g_guild_name[g_guild_id[id]], 31, g_GuildAbyss_NameTemp[id]);
					g_guild_united[id] = 1;
					
					g_combo_max_guild[g_guild_id[id]][2] = 0;
					g_combo_max_guild[g_guild_id[id]][3] = 0;
					g_combo_max_guild[g_guild_id[id]][4] = 0;
					g_combo_max_guild[g_guild_id[id]][5] = 0;
					
					colorChat(0, CT, "%s!t%s!y adquirió la hermandad !g%s!y", ZP_PREFIX, g_playername[id], g_guild_name[g_guild_id[id]]);
					colorChat(id, _, "%sCiertas funciones pueden demorar hasta el cambio de mapa para que surtan efecto!", ZP_PREFIX_GUILD);
					
					sqlQuery = SQL_PrepareQuery(g_sql_connection, "UPDATE guild SET id1='%d' WHERE guild_id='%d';", g_user_id[id], guildId);
					
					if(!SQL_Execute(sqlQuery))
						executeQuery(0, sqlQuery, 95731111);
					else
						SQL_FreeHandle(sqlQuery);
					
					saveInfo(id);
				} else {
					colorChat(id, _, "%sLa hermandad seleccionada ya ha sido adquirida por otro usuario!", ZP_PREFIX);
				}
			}
			else
				SQL_FreeHandle(sqlQuery);
		} else {
			colorChat(id, _, "%sNecesitás más !gpF!y para convertirte en dueño de la hermandad seleccionada!", ZP_PREFIX);
		}
	} else if(sItem == 1 || sItem == 9) {
		showMenu__GuildAbyss(id);
	} else {
		showMenu__GuildAbyss_Info(id, g_GuildAbyss_NameTemp[id]);
	}
}

public checkPistolHeads() {
	new i;
	new iMaxHeads = 99;
	new iMaxId = 0;
	
	for(i = 1; i <= g_maxplayers; ++i) {
		if(g_PistolHeads[i] > iMaxHeads) {
			iMaxHeads = g_PistolHeads[i];
			iMaxId = i;
		}
		
		g_PistolHeads[i] = 0;
	}
	
	if(getPlaying() >= 15) {
		if(iMaxId) {
			new iRandom = random_num(2, 5);
			g_head_zombie[iMaxId][HEAD_YELLOW] += iRandom;
			
			colorChat(0, CT, "%s!gPRIMER LUGAR!y: !t%s!y. Ralizó !t%d disparos en la cabeza!y con pistolas! !g1pH!y y !g%d cabezas amarillas!y", ZP_PREFIX, g_playername[iMaxId], iMaxHeads, iRandom);
			++g_points[iMaxId][CLASS_HUMAN];
			
			setAchievement(iMaxId, PRIMER_LUGAR);
		} else {
			colorChat(0, CT, "%sNingún usuario realizó !t100+ disparos en la cabeza!y con pistolas y nadie ganó el premio!", ZP_PREFIX);
		}
	}
	
	set_task(1200.0, "checkPistolHeads");
}

getBetterRandomAlive_MiniEvent() {
	new i;
	new iPercent[33];
	new iTotalPercent = 0;
	new iRandom;
	new iSum = 0;
	
	for(i = 1; i <= g_maxplayers; ++i) {
		iPercent[i] = 0;
		
		if(g_isconnected[i] && !g_MiniEvent_AlreadyInList[i]) {
			iPercent[i] = 100;
			
			if(g_amuleto_equip[i] != -1) {
				if(g_amuleto_stat3[i][g_amuleto_equip[i]][0] != 0) {
					iPercent[i] += g_amuleto_stat3[i][g_amuleto_equip[i]][0];
					iTotalPercent += iPercent[i];
				}
			}
		}
	}
	
	iRandom = random_num(1, iTotalPercent);
	
	for(i = 1; i <= g_maxplayers; ++i) {
		if(g_isconnected[i]) {
			iSum += iPercent[i];
			
			if(iRandom <= iSum) {
				g_MiniEvent_AlreadyInList[i] = 1;
				return i;
			}
		}
	}
	
	return -1;
}

public removeImmunityBombs(const taskid) {
	g_FirstInfect = 1;
}

public message_Tournament(const id) {
	if(is_user_connected(id)) {
		colorChat(id, CT, "%s!gTORNEO DEL ZP - MIRA LOS RESULTADOS EN !twww.gaminga.com/torneozp", ZP_PREFIX);
		set_task(120.0, "message_Tournament", id);
	}
}

public bubblePush(const entity) {
	static Victima
	static Float:Origin[3]
	static Float:Velocidad[3]
	static Float:Direccion[3]
	static players[33]
	static i
	static id;
	
	entity_get_vector(entity, EV_VEC_origin, Origin)
	
	Victima = -1
	i = 0
	
	while( ( Victima = find_ent_in_sphere( Victima, Origin, 120.0 ) ) != 0 )
	{
		if(is_user_alive(Victima)) {
			players[i++] = Victima;
		}
	}
	
	for(id = 0; id < i; ++id)
	{
		if(!g_zombie[players[id]])
		{
			entity_get_vector( players[id], EV_VEC_origin, Direccion )
			if(get_distance_f(Origin, Direccion) > 100) g_InBubble[players[id]] = 0
			else g_InBubble[players[id]] = 1
		}
		else if(g_zombie[players[id]] && !g_special_mode[players[id]] && !g_nodamage[players[id]] && g_FirstInfect)
		{
			entity_get_vector( players[id], EV_VEC_origin, Direccion )
			xs_vec_sub( Direccion, Origin, Direccion )
			xs_vec_normalize( Direccion, Direccion )
			
			entity_get_vector( players[id], EV_VEC_velocity, Velocidad )
			
			xs_vec_mul_scalar( Direccion, 400.0, Direccion )
			xs_vec_add( Velocidad, Direccion, Velocidad )
			
			entity_set_vector( players[id], EV_VEC_velocity, Velocidad )
		}
	}
}

public concmd_Break(const id) {
	if(g_kiske[id]) {
		new iEnt = -1;
		new Float:vecOrigin[3];
		new sClassName[15];
		
		entity_get_vector(id, EV_VEC_origin, vecOrigin);
		while((iEnt = find_ent_in_sphere(iEnt, vecOrigin, 200.0)) != 0) {
			if(!is_user_alive(iEnt)) {
				entity_get_string(iEnt, EV_SZ_classname, sClassName, 14);
			
				if(equal(sClassName, "func_breakable")) {
					force_use(id, iEnt);
					
					break;
				}
				
				continue;
			}
		}
	}
	
	return PLUGIN_HANDLED;
}

/** ==================================================
	[ FIN FUNCIONES NUEVAS ]
================================================== **/